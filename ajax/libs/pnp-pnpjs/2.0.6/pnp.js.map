{"version":3,"sources":["webpack://pnp/webpack/universalModuleDefinition","webpack://pnp/webpack/bootstrap","webpack://pnp/./node_modules/tslib/tslib.es6.js","webpack://pnp/./packages/common/index.ts","webpack://pnp/./packages/odata/batch.ts","webpack://pnp/./packages/odata/caching.ts","webpack://pnp/./packages/odata/add-prop.ts","webpack://pnp/./packages/odata/invokable-extensions.ts","webpack://pnp/./packages/odata/invokable-binder.ts","webpack://pnp/./packages/odata/parsers.ts","webpack://pnp/./packages/odata/queryable.ts","webpack://pnp/./packages/odata/pipeline.ts","webpack://pnp/./packages/odata/pipeline-binder.ts","webpack://pnp/./packages/odata/request-builders.ts","webpack://pnp/./packages/sp/telemetry.ts","webpack://pnp/./packages/sp/sharepointqueryable.ts","webpack://pnp/./packages/sp/operations.ts","webpack://pnp/./packages/graph/graphqueryable.ts","webpack://pnp/./packages/sp/webs/types.ts","webpack://pnp/./packages/sp/decorators.ts","webpack://pnp/./packages/graph/operations.ts","webpack://pnp/./packages/sp/utils/metadata.ts","webpack://pnp/./packages/sp/lists/types.ts","webpack://pnp/./packages/sp/utils/escapeQueryStrValue.ts","webpack://pnp/./packages/sp/utils/extractweburl.ts","webpack://pnp/./packages/sp/items/types.ts","webpack://pnp/./packages/logging/logger.ts","webpack://pnp/./packages/logging/listeners.ts","webpack://pnp/./packages/sp/odata.ts","webpack://pnp/./packages/sp/rest.ts","webpack://pnp/./packages/graph/rest.ts","webpack://pnp/./packages/sp/sites/types.ts","webpack://pnp/./packages/sp/splibconfig.ts","webpack://pnp/./packages/common/util.ts","webpack://pnp/./packages/sp/utils/toResourcePath.ts","webpack://pnp/./packages/adaljsclient/adalclient.ts","webpack://pnp/./packages/graph/graphlibconfig.ts","webpack://pnp/./packages/sp/sites/index.ts","webpack://pnp/./packages/sp/webs/index.ts","webpack://pnp/./packages/sp/sphttpclient.ts","webpack://pnp/./packages/sp/utils/toabsoluteurl.ts","webpack://pnp/./packages/sp/batch.ts","webpack://pnp/./packages/graph/graphhttpclient.ts","webpack://pnp/./packages/common/libconfig.ts","webpack://pnp/./packages/common/collections.ts","webpack://pnp/./packages/common/safe-global.ts","webpack://pnp/./packages/sp/utils/objectToSPKeyValueCollection.ts","webpack://pnp/./packages/graph/types.ts","webpack://pnp/./packages/graph/batch.ts","webpack://pnp/./packages/config-store/configuration.ts","webpack://pnp/./packages/config-store/providers/cachingConfigurationProvider.ts","webpack://pnp/./packages/config-store/providers/spListConfigurationProvider.ts","webpack://pnp/./packages/sp/types.ts","webpack://pnp/./packages/sp/utils/file-names.ts","webpack://pnp/./packages/sp/lists/web.ts","webpack://pnp/./packages/sp/files/types.ts","webpack://pnp/./packages/sp/appcatalog/types.ts","webpack://pnp/./packages/sp/appcatalog/web.ts","webpack://pnp/./packages/sp/appcatalog/index.ts","webpack://pnp/./packages/sp/attachments/types.ts","webpack://pnp/./packages/sp/attachments/item.ts","webpack://pnp/./packages/sp/clientside-pages/funcs.ts","webpack://pnp/./packages/sp/files/web.ts","webpack://pnp/./packages/sp/comments/types.ts","webpack://pnp/./packages/sp/clientside-pages/types.ts","webpack://pnp/./packages/sp/comments/item.ts","webpack://pnp/./packages/sp/clientside-pages/web.ts","webpack://pnp/./packages/sp/folders/types.ts","webpack://pnp/./packages/sp/column-defaults/list.ts","webpack://pnp/./packages/sp/column-defaults/folder.ts","webpack://pnp/./packages/sp/content-types/types.ts","webpack://pnp/./packages/sp/content-types/web.ts","webpack://pnp/./packages/sp/content-types/item.ts","webpack://pnp/./packages/sp/content-types/list.ts","webpack://pnp/./packages/sp/features/types.ts","webpack://pnp/./packages/sp/features/site.ts","webpack://pnp/./packages/sp/features/web.ts","webpack://pnp/./packages/sp/fields/types.ts","webpack://pnp/./packages/sp/fields/web.ts","webpack://pnp/./packages/sp/fields/list.ts","webpack://pnp/./packages/sp/files/folder.ts","webpack://pnp/./packages/sp/files/item.ts","webpack://pnp/./packages/sp/folders/item.ts","webpack://pnp/./packages/sp/folders/list.ts","webpack://pnp/./packages/sp/folders/web.ts","webpack://pnp/./packages/sp/forms/types.ts","webpack://pnp/./packages/sp/forms/list.ts","webpack://pnp/./packages/sp/hubsites/types.ts","webpack://pnp/./packages/sp/hubsites/site.ts","webpack://pnp/./packages/sp/hubsites/web.ts","webpack://pnp/./packages/sp/hubsites/index.ts","webpack://pnp/./packages/sp/navigation/types.ts","webpack://pnp/./packages/sp/navigation/web.ts","webpack://pnp/./packages/sp/navigation/index.ts","webpack://pnp/./packages/sp/profiles/types.ts","webpack://pnp/./packages/sp/profiles/index.ts","webpack://pnp/./packages/sp/regional-settings/types.ts","webpack://pnp/./packages/sp/regional-settings/funcs.ts","webpack://pnp/./packages/sp/regional-settings/web.ts","webpack://pnp/./packages/sp/user-custom-actions/types.ts","webpack://pnp/./packages/sp/regional-settings/user-custom-actions.ts","webpack://pnp/./packages/sp/regional-settings/list.ts","webpack://pnp/./packages/sp/regional-settings/field.ts","webpack://pnp/./packages/sp/regional-settings/content-type.ts","webpack://pnp/./packages/sp/related-items/types.ts","webpack://pnp/./packages/sp/search/query.ts","webpack://pnp/./packages/sp/search/types.ts","webpack://pnp/./packages/sp/search/suggest.ts","webpack://pnp/./packages/sp/search/index.ts","webpack://pnp/./packages/sp/site-users/types.ts","webpack://pnp/./packages/sp/security/types.ts","webpack://pnp/./packages/sp/sharing/types.ts","webpack://pnp/./packages/sp/site-groups/types.ts","webpack://pnp/./packages/sp/security/funcs.ts","webpack://pnp/./packages/sp/security/item.ts","webpack://pnp/./packages/sp/security/list.ts","webpack://pnp/./packages/sp/security/web.ts","webpack://pnp/./packages/sp/sharing/funcs.ts","webpack://pnp/./packages/sp/sharing/file.ts","webpack://pnp/./packages/sp/sharing/folder.ts","webpack://pnp/./packages/sp/sharing/item.ts","webpack://pnp/./packages/sp/sharing/web.ts","webpack://pnp/./packages/sp/site-designs/types.ts","webpack://pnp/./packages/sp/site-designs/web.ts","webpack://pnp/./packages/sp/site-designs/index.ts","webpack://pnp/./packages/sp/site-groups/web.ts","webpack://pnp/./packages/sp/site-scripts/types.ts","webpack://pnp/./packages/sp/site-scripts/web.ts","webpack://pnp/./packages/sp/site-scripts/list.ts","webpack://pnp/./packages/sp/site-scripts/index.ts","webpack://pnp/./packages/sp/site-users/web.ts","webpack://pnp/./packages/sp/social/types.ts","webpack://pnp/./packages/sp/social/index.ts","webpack://pnp/./packages/sp/sputilities/types.ts","webpack://pnp/./packages/sp/sputilities/index.ts","webpack://pnp/./packages/sp/subscriptions/types.ts","webpack://pnp/./packages/sp/subscriptions/list.ts","webpack://pnp/./packages/sp/taxonomy/types.ts","webpack://pnp/./packages/sp/taxonomy/index.ts","webpack://pnp/./packages/sp/user-custom-actions/list.ts","webpack://pnp/./packages/sp/user-custom-actions/web.ts","webpack://pnp/./packages/sp/user-custom-actions/site.ts","webpack://pnp/./packages/sp/views/types.ts","webpack://pnp/./packages/sp/views/list.ts","webpack://pnp/./packages/sp/webparts/types.ts","webpack://pnp/./packages/sp/webparts/file.ts","webpack://pnp/./packages/sp/presets/all.ts","webpack://pnp/./packages/graph/decorators.ts","webpack://pnp/./packages/graph/conversations/types.ts","webpack://pnp/./packages/graph/attachments/types.ts","webpack://pnp/./packages/graph/utils/type.ts","webpack://pnp/./packages/graph/attachments/conversations.ts","webpack://pnp/./packages/graph/directory-objects/types.ts","webpack://pnp/./packages/graph/groups/types.ts","webpack://pnp/./packages/graph/calendars/types.ts","webpack://pnp/./packages/graph/calendars/groups.ts","webpack://pnp/./packages/graph/users/types.ts","webpack://pnp/./packages/graph/contacts/types.ts","webpack://pnp/./packages/graph/contacts/users.ts","webpack://pnp/./packages/graph/conversations/groups.ts","webpack://pnp/./packages/graph/directory-objects/index.ts","webpack://pnp/./packages/graph/groups/index.ts","webpack://pnp/./packages/graph/insights/types.ts","webpack://pnp/./packages/graph/insights/users.ts","webpack://pnp/./packages/graph/invitations/types.ts","webpack://pnp/./packages/graph/invitations/index.ts","webpack://pnp/./packages/graph/members/types.ts","webpack://pnp/./packages/graph/members/groups.ts","webpack://pnp/./packages/graph/messages/types.ts","webpack://pnp/./packages/graph/messages/users.ts","webpack://pnp/./packages/graph/onedrive/types.ts","webpack://pnp/./packages/graph/onedrive/users.ts","webpack://pnp/./packages/graph/onenote/types.ts","webpack://pnp/./packages/graph/onenote/users.ts","webpack://pnp/./packages/graph/photos/types.ts","webpack://pnp/./packages/graph/photos/groups.ts","webpack://pnp/./packages/graph/planner/types.ts","webpack://pnp/./packages/graph/planner/groups.ts","webpack://pnp/./packages/graph/planner/users.ts","webpack://pnp/./packages/graph/planner/index.ts","webpack://pnp/./packages/graph/subscriptions/types.ts","webpack://pnp/./packages/graph/subscriptions/index.ts","webpack://pnp/./packages/graph/teams/types.ts","webpack://pnp/./packages/graph/teams/users.ts","webpack://pnp/./packages/graph/teams/index.ts","webpack://pnp/./packages/graph/users/index.ts","webpack://pnp/./packages/common/net.ts","webpack://pnp/./packages/common/storage.ts","webpack://pnp/./packages/sp/items/list.ts","webpack://pnp/./packages/pnpjs/sp-ns.ts","webpack://pnp/./packages/pnpjs/graph-ns.ts","webpack://pnp/./packages/pnpjs/pnplibconfig.ts","webpack://pnp/./packages/graph/index.ts","webpack://pnp/./node_modules/adal-angular/dist/adal.min.js","webpack://pnp/./packages/sp-addinhelpers/sprequestexecutorclient.ts","webpack://pnp/./packages/sp-addinhelpers/sprestaddin.ts","webpack://pnp/./packages/pnpjs/index.ts","webpack://pnp/(webpack)/buildin/global.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","extendStatics","b","setPrototypeOf","__proto__","Array","__extends","__","this","constructor","__decorate","decorators","target","desc","arguments","length","getOwnPropertyDescriptor","Reflect","decorate","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__generator","body","f","y","g","_","label","sent","trys","ops","verb","iterator","v","op","TypeError","pop","push","__values","__read","ar","error","__spread","concat","_batchId","_reqs","_deps","_rDeps","_index","sort","info1","info2","index","track","batchee","data","batch","batchIndex","add","context","info","id","requestId","method","toUpperCase","options","parser","url","addDependency","resolver","addResolveBatchDependency","execute","all","executeImpl","storeName","expiration","defaultCachingStore","Date","defaultCachingTimeoutSeconds","CachingOptions","storage","local","session","cacheOptions","parse","response","cacheData","store","put","addProp","path","configurable","_enableExtensions","globaExtensions","ObjExtensionsSym","extendGlobal","extendCol","extendObj","extensions","has","set","extendFactory","undefined","a","clearGlobalExtensions","disableExtensions","enableExtensions","applyFactoryExtensions","args","extensionOrDefault","or","extension","rest","invoker","invokableFactory","defaultAction","as","assign","ags","ie11","Proxy","_thisArg","argArray","receiver","handleError","parseImpl","headers","parseFloat","status","text","txt","replace","JSON","json","parseODataJSON","catch","ok","init","results","blob","arrayBuffer","buffer","message","statusText","isHttpRequestError","clone","HttpRequestError","Error","cloneQueryableData","source","stringify","parsed","Map","batchDependency","cachingOptions","clientFactory","dataSeed","_data","cloneParentWasCaching","parentUrl","query","useCaching","toUrl","pathPart","configure","configureFrom","usingCaching","globalCacheDisable","usingParser","withPipeline","pipeline","pipes","slice","append","inBatch","hasBatch","addBatchDependency","cloneTo","settings","includeBatch","cloneParentCacheOptions","setResult","hasResult","shift","pipe","write","getTime","promise","ctx","log","activeLogLevel","level","returnResult","isBatched","requestPipelineMethod","alwaysRun","propertyKey","descriptor","logStart","caching","toLowerCase","hydrate","CachingParserWrapper","send","batchId","client","opts","fetch","logEnd","getDefaultPipeline","pipelineBinder","test","defaultPipelineBinder","previous","tag","originalMethod","getClientTag","h","deleteFromCollection","methodName","delete","isTagged","spInvokableFactory","baseUrl","lastIndexOf","_forceCaching","toUrlAndQuery","aliasedParams","match","labelName","size","char","indexOf","from","map","join","select","selects","expand","expands","additionalPath","getParent","parent","SharePointQueryable","_SharePointQueryable","filter","orderBy","ascending","split","skip","toString","top","SharePointQueryableCollection","_SharePointQueryableCollection","_update","type","mapper","props","SharePointQueryableInstance","_SharePointQueryableInstance","deleteable","deleteableWithETag","eTag","spClientBinder","operation","spGet","spPost","spDelete","spPatch","spPostDelete","spPostDeleteETag","graphInvokableFactory","setEndpoint","endpoint","ensure","_GraphQueryable","num","skipToken","token","GraphQueryableCollection","_GraphQueryableCollection","search","_GraphQueryableSearchableCollection","GraphQueryableInstance","_GraphQueryableInstance","title","description","template","language","inheritPermissions","postBody","Description","Language","Title","Url","UseSamePermissionsAsParentSite","WebTemplate","Webs","web","Web","_Webs","getParentWeb","ParentWeb","openWebById","Id","getSubwebsFilteredForCurrentUser","nWebTemplateFilter","nConfigurationFilter","createBatch","update","properties","applyTheme","colorPaletteUrl","fontSchemeUrl","backgroundImageUrl","shareGenerated","applyWebTemplate","q","availableWebTemplates","includeCrossLanugage","getChanges","mapToIcon","filename","progId","getStorageEntity","setStorageEntity","comments","removeStorageEntity","_Web","defaultPath","graphClientBinder","graphGet","graphPost","graphDelete","graphPatch","graphPut","metadata","RenderListDataOptions","ControlMode","getById","List","getByTitle","enableContentTypes","additionalSettings","addSettings","list","addOrUpdateSettings","ContentTypesEnabled","created","ensureSiteAssetsLibrary","Lists","ensureSitePagesLibrary","_Lists","getItemsByCAMLQuery","getListItemChangesSinceToken","recycle","Recycle","renderListData","viewXml","RenderListData","renderListDataAsStream","parameters","overrideParameters","queryParams","RenderOptions","reduce","forEach","k","renderListFormData","itemId","formId","RenderListFormData","reserveListItemId","ReserveListItemId","getListItemEntityTypeFullName","ListItemEntityTypeFullName","addValidateUpdateItemUsingPath","formValues","decodedUrl","bNewDocumentUpdate","checkInComment","additionalProps","addProps","FolderPath","leafName","LeafName","objectType","UnderlyingObjectType","listItemCreateInfo","res","AddValidateUpdateItemUsingPath","_List","escapeQueryStrValue","encodeURIComponent","extractWebUrl","candidateUrl","substr","Item","getItemByStringId","stringId","reverse","getPaged","PagedItemCollectionParser","getAll","requestSize","acceptHeader","items","Items","itemsCollector","gatherer","last","hasNext","getNext","listItemEntityTypeFullName","removeDependency","ensureListItemEntityTypeName","listItemEntityType","item","candidatelistItemEntityTypeFullName","_Items","ItemVersions","poster","ItemUpdatedParser","getWopiFrameUrl","action","GetWOPIFrameUrl","validateUpdateListItem","_Item","versionId","ItemVersion","_ItemVersions","_ItemVersion","nextUrl","_parent","__next","PagedItemCollection","LogLevel","Logger","instance","_instance","LoggerImpl","subscribe","listeners","listener","clearSubscribers","count","writeJSON","entry","err","subscribers","subscriber","msg","format","console","warn","odataUrlFrom","candidate","parts","__metadata","uri","editLink","spODataEntity","SPODataEntityParserImpl","spODataEntityArray","SPODataEntityArrayParserImpl","_options","_baseUrl","SPRest","setup","config","pageContext","spfxContext","graph","GraphRest","getRootWeb","rootWeb","getContextInfo","Site","GetContextWebInformation","SupportedSchemaVersions","site","siteId","getDocumentLibraries","absoluteWebUrl","GetDocumentLibraries","getWebUrlFromPageUrl","absolutePageUrl","GetWebUrlFromPageUrl","webId","createCommunicationSite","lcid","shareByEmailEnabled","classification","siteDesignId","hubSiteId","owner","createCommunicationSiteFromProps","Classification","HubSiteId","Lcid","Owner","ShareByEmailEnabled","SiteDesignId","WebTemplateExtensionId","exists","createModernTeamSite","displayName","alias","isPublic","owners","createModernTeamSiteFromProps","optionalParams","CreationOptions","Owners","_Site","emptyGuid","SPRuntimeConfig","spPart","absoluteUrl","fetchClientFactory","getCtxCallback","params","dateAdd","date","interval","units","ret","setFullYear","getFullYear","setMonth","getMonth","setDate","getDate","setTime","combine","paths","stringIsNullOrEmpty","getRandomString","chars","charAt","Math","floor","random","getGUID","now","isFunc","objectDefinedNotNull","obj","isArray","array","noOverwrite","check","getOwnPropertyNames","isUrlAbsolute","sanitizeGuid","guid","matches","exec","jsS","hOP","getHashCode","hash","charCodeAt","toResourcePath","DecodedUrl","clientId","tenant","redirectUri","_displayCallback","_loginPromise","fromSPFxContext","getToken","resource","ensureAuthContext","login","AdalClient","_authContext","acquireToken","tok","displayCall","navigateToLoginRequestUrl","getCachedUser","popupWindow","open","focus","pollTimer","setInterval","closed","clearInterval","document","URL","handleWindowCallback","location","close","_loginInProgress","GraphRuntimeConfig","graphPart","_impl","_digestCache","webUrl","cachedDigest","digests","fetchRaw","cache","credentials","resp","newCachedDigest","FormDigestTimeoutSeconds","FormDigestValue","getDigestFactory","Headers","clientTag","digest","rawHeaders","retry","setRetry","delay","parseInt","attempts","retryCount","setTimeout","post","patch","toAbsoluteUrl","_spPageContextInfo","webAbsoluteUrl","webServerRelativeUrl","ParseResponse","responses","statusRegExp","RegExp","lines","state","line","trim","Response","requests","absoluteRequestUrl","batchBody","currentChangeSetId","reqInfo","castHeaders","batchOptions","SPBatch","request","retryContext","RuntimeConfig","_v","RuntimeConfigImpl","objectEntries","entries","keys","objectToMap","mergeMaps","maps","safeGlobal","global","objectToSPKeyValueCollection","Key","Value","ValueType","GraphEndpoints","Beta","V1","regex","replaces","batchUrl","maxRequests","makeUrlRelative","formatRequests","requestFragment","parseResponse","graphResponse","code","parsedResponses","fill","responseId","nextLink","requestsChunk","splice","batchRequest","GraphBatch","j","parsedResponse","chain","_settings","addJSON","load","provider","getConfiguration","getJSON","wrappedProvider","cacheKey","cacheStore","selectPnPCache","getWrappedProvider","enabled","getOrPut","providedConfig","pnpCache","listTitle","keyFieldName","valueFieldName","lists","asCaching","PrincipalType","PrincipalSource","PageType","InvalidFileFolderNameCharsOnlineRegex","InvalidFileFolderNameCharsOnPremiseRegex","containsInvalidFileFolderChars","input","onPremise","stripInvalidFileFolderChars","replacer","getList","listRelativeUrl","getCatalog","CheckinType","MoveOperations","TemplateFileType","getByName","File","content","shouldOverWrite","Files","file","addUsingPath","Overwrite","AutoCheckoutOnInvalidData","XorHash","odata","addChunked","progress","chunkSize","setContentChunked","addTemplateFile","fileUrl","templateFileType","_Files","Versions","approve","comment","cancelUpload","uploadId","checkin","checkinType","Major","checkout","copyTo","copyByPath","destUrl","KeepBoth","srcUrl","webBaseUrl","hostUrl","destPath","ResetAuthorAndCreatedOnCopy","ShouldBypassSharedLocks","srcPath","deny","moveTo","moveOperations","moveByPath","publish","undoCheckout","unpublish","getText","getBlob","getBuffer","setContent","getItem","listItemAllFields","fileSize","totalBlocks","blockNumber","currentPointer","stage","startUpload","continueUpload","finishUpload","fragment","StartUpload","fileOffset","ContinueUpload","Version","deleteAll","deleteById","recycleByID","deleteByLabel","recycleByLabel","restoreByLabel","_Versions","getAppById","App","syncSolutionToTeams","useSharePointItemId","appId","listId","listItems","AppCatalog","adder","deploy","skipFeatureDeployment","do","retract","install","uninstall","upgrade","remove","getAppCatalog","getTenantAppCatalogWeb","CorporateCatalogUrl","Attachment","Attachments","addMultiple","files","deleteMultiple","recycleMultiple","_Attachments","getParsed","getNextOrder","collection","max","order","reindex","columns","controls","getFileByServerRelativeUrl","fileRelativeUrl","getFileByServerRelativePath","getFileById","uniqueId","getFileByUrl","PromotedState","Comments","Comment","clear","_Comments","Replies","like","unlike","_Replies","initFrom","ClientsidePage","getLikedBy","getLikedByInformation","noInit","sections","commentsDisabled","_bannerImageDirty","_pageSettings","controlType","pageSettingsSlice","isDefaultDescription","isDefaultThumbnail","_layoutPart","_ClientsidePage","getDefaultLayoutPart","fromJSON","dataVersion","instanceId","authorByline","authors","layoutType","showPublishDate","showTopicHeader","textAlignment","topicHeader","serverProcessedContent","htmlStrings","searchablePlainTexts","imageSources","links","PageLayoutType","BannerImageUrl","TopicHeader","findIndex","layoutIndex","AuthorByline","hasVerticalSection","addVerticalSection","addSection","section","sectionIndex","pageData","canvasControls","CanvasContent1","layouts","LayoutWebpartsContent","setControls","CommentsDisabled","save","origImgUrl","imgFile","r1","r2","r3","UniqueId","ParentList","bannerImageUrl","imageSource","customMetadata","IsPageCheckedOutToCurrentUser","saveBody","getCanvasContent1","getLayoutWebpartsContent","updater","discardPageCheckout","promoteToNews","promoteNewsImpl","findControlById","findControl","predicate","copy","pageName","promotedState","CreateClientsidePage","pageLayout","page","getControls","makeGuid","searchParams","guidSite","guidWeb","guidFile","openWeb","translateX","translateY","imageSourceType","altText","setBannerImage","ServerRelativeUrl","setAuthorById","authorId","userLoginData","setAuthorByLoginName","LoginName","authorLoginName","role","upn","UserPrincipalName","initer","listData","itemData","mergeColumnToTree","part","mergePartToTree","position","textData","innerHTML","canvasData","column","displayMode","emphasis","getEmphasisObj","control","zoneEmphasis","VersionInfo","LastVersionCreatedBy","LastVersionCreated","positionData","sectionFactor","zoneIndex","getOrCreateSection","addColumn","addControl","ClientsidePageFromFile","pageInitData","newPage","_emphasis","_memId","_order","_layoutIndex","factor","defaultColumn","CanvasColumn","Default","_section","getControl","_column","onColumnChange","setData","ClientsideText","anchorComponentId","startsWith","controlIndex","col","addedFromPersistedData","editorType","ClientsideWebpart","fromComponentDef","definition","import","webPartData","reservedHeight","reservedWidth","setProperties","getProperties","component","componendId","preconfiguredEntries","Manifest","default","webPartId","getClientsideWebParts","addClientsidePage","layout","loadClientsidePage","Folder","Folders","folder","serverRelativeUrl","overwrite","_Folders","getShareable","shareable","getDefaultColumnValues","rootFolder","ServerRelativePath","baseFilePath","xml","decodeURIComponent","setDefaultColumnValues","defaults","fieldDefs","tags","fieldDefault","fd","InternalName","fieldDef","TypeAsString","wssId","termName","termId","eventReceivers","eventReceiverCreationInformation","EventType","ReceiverAssembly","ReceiverClass","ReceiverName","SequenceNumber","Synchronization","folderProps","serRelPath","vti_x005f_listname","fieldDefaults","merge","docLib","folderPath","existingDefaults","filteredExistingDefaults","existing","find","ed","clearDefaultColumnValues","addAvailableContentType","contentTypeId","ContentTypes","contentType","ContentType","group","_ContentTypes","FieldLinks","FieldLink","_FieldLinks","force","Features","featdefScope","featureId","feature","Feature","_Features","deactivate","DefinitionId","FieldTypes","DateTimeFieldFormatType","DateTimeFieldFriendlyFormatType","AddFieldOptions","CalendarType","UrlFieldFormatType","FieldUserSelectionMode","ChoiceFieldFormatType","Field","getByInternalNameOrTitle","createFieldAsXml","SchemaXml","Fields","field","fieldType","addText","maxLength","FieldTypeKind","MaxLength","addCalculated","formula","dateFormat","outputType","Text","DateFormat","Formula","OutputType","addDateTime","displayFormat","calendarType","friendlyDisplayFormat","DateOnly","Gregorian","Unspecified","DateTimeCalendarType","DisplayFormat","FriendlyDisplayFormat","addNumber","minValue","maxValue","MinimumValue","MaximumValue","addCurrency","currencyLocalId","CurrencyLocaleId","addMultilineText","numberOfLines","richText","restrictedMode","appendOnly","allowHyperlink","AllowHyperlink","AppendOnly","NumberOfLines","RestrictedMode","RichText","addUrl","Hyperlink","addUser","selectionMode","SelectionMode","addLookup","lookupListId","lookupFieldName","LookupFieldName","LookupListId","addChoice","choices","fillIn","Dropdown","Choices","EditFormat","FillInChoice","addMultiChoice","addBoolean","addDependentLookupField","primaryLookupFieldId","showField","addLocation","_Fields","req","setShowInDisplayForm","show","setShowInEditForm","setShowInNewForm","getFolderByServerRelativeUrl","folderRelativeUrl","getFolderByServerRelativePath","getFolderById","Form","_Forms","Forms","HubSite","_HubSites","HubSites","getSite","SiteUrl","joinHubSite","registerHubSite","unRegisterHubSite","hubSiteData","forceRefresh","syncHubSiteTheme","NavigationNode","visible","IsVisible","NavigationNodes","node","moveAfter","nodeId","previousNodeId","_Navigation","Navigation","getMenuState","menuNodeKey","depth","mapProviderName","customProperties","NavigationService","getMenuNodeKey","currentUrl","UrlZone","clientPeoplePickerQuery","profileLoader","Profiles","amIFollowedBy","loginName","amIFollowing","getFollowedTags","maxCount","getFollowersFor","_Profiles","getPeopleFollowedBy","getPropertiesFor","getUserProfilePropertyFor","propertyName","hideSuggestion","isFollowing","follower","followee","setMyProfilePic","profilePicSource","reader","FileReader","onload","readAsArrayBuffer","String","fromCharCode","Uint16Array","setSingleValueProfileProperty","accountName","propertyValue","setMultiValuedProfileProperty","propertyValues","createPersonalSiteEnqueueBulk","emails","ownerUserProfile","userProfile","createPersonalSite","interactiveRequest","shareAllSocialData","share","clientPeoplePickerResolveUser","clientPeoplePickerSearchUser","ProfileLoaderFactory","ProfileLoader","ClientPeoplePickerFactory","getBodyFrom","ClientPeoplePickerResolveUser","ClientPeoplePickerSearchUser","ClientPeoplePickerQuery","TimeZone","TimeZones","getInstalledLanguages","_RegionalSettings","RegionalSettings","utcToLocalTime","utcTime","dateIsoString","toISOString","UTCToLocalTime","localTimeToUTC","localTime","getTimezoneOffset","LocalTimeToUTC","_TimeZone","_TimeZones","getValueForUICultureBinder","propName","cultureName","titleResource","descriptionResource","UserCustomActionRegistrationType","UserCustomActionScope","UserCustomAction","UserCustomActions","_UserCustomActions","getRelatedItems","sourceListName","sourceItemId","RelatedItemManager","SourceItemID","SourceListName","getPageOneRelatedItems","addSingleLink","sourceWebUrl","targetListName","targetItemID","targetWebUrl","tryAddReverseLink","SourceWebUrl","TargetItemID","TargetListName","TargetWebUrl","TryAddReverseLink","addSingleLinkToUrl","targetItemUrl","TargetItemUrl","addSingleLinkFromUrl","sourceItemUrl","targetItemId","SourceItemUrl","deleteSingleLink","tryDeleteReverseLink","TryDeleteReverseLink","_RelatedItemManager","funcs","toPropCase","str","$1","SearchQueryBuilder","queryText","_query","Querytext","self","proxy","pk","mappedPk","propKey","SortDirection","ReorderingRuleMatchType","QueryPropertyValueType","queryRegex","queryInit","parseQuery","HitHighlightedProperties","fixArrProp","Properties","RefinementFilters","ReorderingRules","SelectProperties","SortList","prop","toSearchQuery","_Search","Search","rawResponse","_url","_raw","_primary","postquery","RawSearchResults","ElapsedTime","PrimaryQueryResult","RelevantResults","RowCount","TotalRows","TotalRowsIncludingDuplicates","formatSearchResults","Table","Rows","getPage","pageNumber","pageSize","rows","RowLimit","StartRow","rawResults","tempResults","tempResult","cells","Cells","cell","writable","mapQueryToQueryString","PeopleNames","s_1","suggest","s_2","PersonalResults","Queries","querytext","querySetter","checkProp","sp","_Suggest","Suggest","Documents","ItemsMatchingContentType","ItemsMatchingTag","ItemsRelatedToCurrentUser","ItemsWithSameKeywordAsThisItem","LocalPeopleResults","LocalReportsAndDataResults","LocalSharePointResults","LocalVideoResults","Pages","Pictures","Popular","RecentlyChangedItems","RecommendedItems","Wiki","searchWithCaching","searchSuggest","PermissionKind","SharingRole","SPSharedObjectType","SharingDomainRestrictionMode","SharingOperationStatusCode","SharingLinkKind","RoleType","SiteUser","getByEmail","email","getByLoginName","removeById","SiteUsers","removeByLoginName","_SiteUsers","user","SiteGroups","SiteGroup","groupName","_SiteGroups","retGroup","setUserAsOwner","userId","RoleAssignment","principalId","roleDefId","RoleAssignments","_RoleAssignments","RoleDefinition","getByType","roleTypeKind","basePermissions","BasePermissions","Name","Order","_RoleDefinitions","RoleDefinitions","getUserEffectivePermissions","GetUserEffectivePermissions","getCurrentUserEffectivePermissions","EffectiveBasePermissions","breakRoleInheritance","copyRoleAssignments","clearSubscopes","resetRoleInheritance","userHasPermissions","permission","perms","hasPermissions","currentUserHasPermissions","perm","FullMask","High","Low","shareObject","bypass","sendShareObjectRequest","getRoleValue","includeAnonymousLinkInEmail","propagateAcl","useSimplifiedRoles","roleValue","loginNames","userStr","peoplePickerInput","emailData","emailBody","emailSubject","subject","sendEmail","getShareLink","kind","expString","createLink","linkKind","checkPermissions","recipients","getSharingInformation","getObjectSharingSettings","unshareObject","deleteLinkByKind","unshareLink","shareId","shareWith","requireSignin","roleFilter","Edit","Contributor","Reader","def","w","Guest","View","checkSharingPermissions","unshare","deleteSharingLinkByKind","shareEverything","dependency","shareObjectRaw","createSiteDesign","creationInfo","SiteDesignsCloneFactory","applySiteDesign","getSiteDesigns","getSiteDesignMetadata","updateSiteDesign","updateInfo","deleteSiteDesign","getSiteDesignRights","grantSiteDesignRights","principalNames","grantedRights","revokeSiteDesignRights","addSiteDesignTask","addSiteDesignTaskToCurrentWeb","getSiteDesignTask","task","getSiteDesignRun","getSiteDesignRunStatus","runId","SiteDesigns","getSiteDesignRuns","createDefaultAssociatedGroups","groupNameSeed","siteOwner","siteOwner2","SiteScriptActionOutcome","getSiteScripts","SiteScriptsCloneFactory","createSiteScript","getSiteScriptMetadata","deleteSiteScript","updateSiteScript","Content","getSiteScriptFromList","listUrl","getSiteScriptFromWeb","executeSiteScriptAction","actionDefinition","SiteScripts","getSiteScript","extractInfo","absoluteListUrl","ensureUser","logonName","getUserById","SocialActorType","SocialActorTypes","SocialFollowResult","SocialStatusCode","MySocial","getFollowedSitesUri","SocialCloneFactory","FollowedSitesUri","getFollowedDocumentsUri","FollowedDocumentsUri","follow","actorInfo","createSocialActorInfoRequestBody","isFollowed","stopFollowing","_Social","Social","followed","types","MySocialCloneFactory","Followed","followedCount","FollowedCount","followers","Followers","suggestions","Suggestions","_MySocial","excute","Body","From","Subject","To","CC","BCC","AdditionalHeaders","UtilitiesCloneFactory","getCurrentUserEmailAddresses","resolvePrincipal","scopes","sources","inputIsEmailOnly","addToUserInfoList","matchUserInfoList","searchPrincipals","createEmailBodyForInvitation","pageAddress","expandGroupsToPrincipals","inputs","createWikiPage","Utilities","subscriptionId","Subscription","notificationUrl","expirationDate","clientState","subscription","_Subscriptions","Subscriptions","expirationDateTime","TermGroups","_TermStore","TermStore","TermGroup","_TermGroups","TermSets","TermSet","_TermSets","Terms","Relations","Term","_Terms","Relation","_Relations","ViewScope","personalView","Views","view","_Views","ViewFields","renderAsHtml","setViewXml","getSchemaXml","fieldTitleOrInternalName","move","removeAll","fieldInternalName","_ViewFields","getView","viewId","WebPartsPersonalizationScope","WebPartDefinitions","export","LimitedWebPartManagerCloneFactory","webPartXml","LimitedWebPartManager","WebPartDefinition","getByControlId","saveChanges","zoneId","getLimitedWebPartManager","scope","Shared","updateable","updateableWithETag","addable","Threads","_Conversation","Conversation","_Conversations","Conversations","Posts","reply","Thread","_Thread","_Threads","forward","Post","_Post","_Posts","Senders","remover","addFile","bytes","contentBytes","DirectoryObjectTypes","GroupType","getMemberObjects","securityEnabledOnly","DirectoryObject","getMemberGroups","checkMemberGroups","groupIds","_DirectoryObject","getByIds","ids","directoryObject","DirectoryObjects","_DirectoryObjects","addFavorite","Group","removeFavorite","resetUnseenCount","subscribeByMail","unsubscribeByMail","getCalendarView","start","end","_Group","mailNickname","groupType","additionalProperties","mailEnabled","Office365","securityEnabled","Security","groupTypes","_Groups","Groups","_Calendars","Calendars","Events","Calendar","_Event","Event","event","_Events","People","_User","User","_Users","Users","_People","_Contact","Contact","givenName","surName","emailAddresses","businessPhones","contact","_Contacts","Contacts","ContactFolders","_ContactFolder","ContactFolder","parentFolderId","contactFolder","_ContactFolders","TrendingInsights","UsedInsights","SharedInsights","_Insights","Insights","Resource","TrendingInsight","_TrendingInsights","UsedInsight","_UsedInsights","SharedInsight","_SharedInsights","_Resource","invitedUserEmailAddress","inviteRedirectUrl","_Invitations","Invitations","Member","Members","_Members","Message","_Messages","Messages","MailFolder","_MailFolders","MailFolders","_MailboxSettings","MailboxSettings","sendMail","Root","DriveItems","getItemById","DriveItem","_Drive","Drive","_Drives","Drives","searcher","_Root","parentReference","getContent","_DriveItem","_DriveItems","Notebooks","Sections","_OneNote","OneNote","Notebook","notebook","_Notebooks","Section","_Sections","Photo","_Photo","Plans","Tasks","Buckets","_Planner","Planner","_Plan","Plan","plan","_Plans","_Task","Task","planId","assignments","bucketId","_Tasks","_Bucket","Bucket","orderHint","bucket","_Buckets","_Subscription","changeType","Channels","archive","shouldSetSpoSiteReadOnlyForMembers","Team","unarchive","cloneTeam","partsToClone","visibility","_Team","_Teams","Teams","Tabs","Channel","channel","_Channels","_Tab","Tab","appUrl","tab","_Tabs","createTeam","team","mergeHeaders","Request","mergeOptions","getADALResource","u","protocol","hostname","_token","FetchClient","aadTokenProviderFactory","getTokenProvider","BearerTokenFetchClient","defaultTimeoutMinutes","enableCacheExpiration","cacheExpirationHandler","PnPClientStorageWrapper","MemoryStorage","persistable","expire","setItem","createPersistable","removeItem","deleteExpired","defaultTimeout","pnp","cacheExpirationIntervalMilliseconds","_store","_local","_session","localStorage","sessionStorage","AuthenticationContext","REQUEST_TYPE","LOGIN","RENEW_TOKEN","UNKNOWN","RESPONSE_TYPE","ID_TOKEN_TOKEN","TOKEN","CONSTANTS","ACCESS_TOKEN","EXPIRES_IN","ID_TOKEN","ERROR_DESCRIPTION","SESSION_STATE","ERROR","STORAGE","TOKEN_KEYS","ACCESS_TOKEN_KEY","EXPIRATION_KEY","STATE_LOGIN","STATE_RENEW","NONCE_IDTOKEN","USERNAME","IDTOKEN","LOGIN_REQUEST","LOGIN_ERROR","RENEW_STATUS","ANGULAR_LOGIN_REQUEST","RESOURCE_DELIMETER","CACHE_DELIMETER","LOADFRAME_TIMEOUT","TOKEN_RENEW_STATUS_CANCELED","TOKEN_RENEW_STATUS_COMPLETED","TOKEN_RENEW_STATUS_IN_PROGRESS","LOGGING_LEVEL","WARN","INFO","VERBOSE","LEVEL_STRING_MAP","0","1","2","3","POPUP_WIDTH","POPUP_HEIGHT","_singletonInstance","callback","popUp","isAngular","_user","_activeRenewals","_acquireTokenInProgress","_renewStates","_callBackMappedToRenewStates","_callBacksMappedToRenewStates","_openedWindows","_requestType","_adalInstance","_cloneConfig","loginResource","href","postLogoutRedirectUri","anonymousEndpoints","loadFrameTimeout","Logging","piiLoggingEnabled","_guid","_idTokenNonce","_getItem","_saveItem","verbose","_getNavigateUrl","registerCallback","_loginPopup","promptUser","_openPopup","screenLeft","screenX","screenTop","screenY","innerWidth","documentElement","clientWidth","innerHeight","clientHeight","_handlePopupError","_broadcast","encodeURI","bubbles","cancelable","detail","createEvent","initCustomEvent","CustomEvent","dispatchEvent","loginInProgress","_hasResource","_isEmpty","getCachedToken","expireOffsetSeconds","_now","_createUser","_renewToken","_addAdalFrame","_urlRemoveQueryStringParameter","_addHintParameters","verbosePii","src","_loadFrameTimeout","_renewIdToken","_urlContainsQueryStringParameter","_loadFrame","extraQueryParameter","acquireTokenPopup","acquireTokenRedirect","infoPii","clearCache","clearCacheForResource","logOut","logOutUri","getUser","profile","sid","_extractIdToken","aud","userName","_getHash","substring","isCallback","_deserialize","getLoginError","getRequestInfo","valid","stateMatch","stateResponse","requestType","_matchState","_matchNonce","nonce","_getResourceFromState","saveTokenFromHash","error_description","_expiresIn","exp","getResourceForEndpoint","endpoints","_getHostFromUri","opener","_serialize","_addLibMetadata","_decodeJwt","JWSPayload","_base64DecodeStringUrlSafe","atob","escape","_decode","header","JWSSig","_convertUrlSafeToRegularBase64EncodedString","correlationId","_decimalToHex","crypto","msCrypto","getRandomValues","Uint8Array","round","getElementById","createElement","opera","navigator","userAgent","setAttribute","style","width","height","borderWidth","getElementsByTagName","appendChild","insertAdjacentHTML","frames","cacheLocation","_supportsLocalStorage","_supportsSessionStorage","_libVersion","toUTCString","stack","errorPii","warnPii","inject","convertToResponse","spResponse","responseHeaders","statusCode","SP","RequestExecutor","temp","addinWebUrl","executor","requestOptions","success","binaryStringRequestBody","executeAsync","crossDomainSite","addInWebUrl","hostWebUrl","_cdImpl","crossDomainWeb","urlPart","util","Def","Function"],"mappings":"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","file":"pnp.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"pnp\"] = factory();\n\telse\n\t\troot[\"pnp\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 51);\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export * from \"./collections\";\r\nexport * from \"./libconfig\";\r\nexport * from \"./net\";\r\nexport * from \"./spfxcontextinterface\";\r\nexport * from \"./storage\";\r\nexport * from \"./util\";\r\nexport * from \"./safe-global\";\r\n","import { IFetchOptions, getGUID } from \"@pnp/common\";\r\nimport { IODataParser } from \"./parsers\";\r\nimport { IQueryable } from \"./queryable\";\r\nimport { IRequestContext } from \"./pipeline\";\r\n\r\nexport interface IODataBatchRequestInfo {\r\n    url: string;\r\n    method: string;\r\n    options: IFetchOptions;\r\n    parser: IODataParser<any>;\r\n    resolve: ((d: any) => void) | null;\r\n    reject: ((error: any) => void) | null;\r\n    id: string;\r\n    index: number;\r\n}\r\n\r\nexport abstract class Batch {\r\n\r\n    protected _deps: Promise<void>[];\r\n    protected _reqs: IODataBatchRequestInfo[];\r\n    protected _rDeps: Promise<void>[];\r\n    private _index: number;\r\n\r\n    constructor(private _batchId = getGUID()) {\r\n        this._reqs = [];\r\n        this._deps = [];\r\n        this._rDeps = [];\r\n        this._index = -1;\r\n    }\r\n\r\n    public get batchId(): string {\r\n        return this._batchId;\r\n    }\r\n\r\n    /**\r\n     * The requests contained in this batch\r\n     */\r\n    protected get requests(): IODataBatchRequestInfo[] {\r\n        // we sort these each time this is accessed\r\n        return this._reqs.sort((info1, info2) => info1.index - info2.index);\r\n    }\r\n\r\n    /**\r\n     * Not meant for use directly\r\n     * \r\n     * @param batchee The IQueryable for this batch to track in order\r\n     */\r\n    public track(batchee: IQueryable<any>): void {\r\n\r\n        batchee.data.batch = this;\r\n\r\n        // we need to track the order requests are added to the batch to ensure we always\r\n        // operate on them in order\r\n        if (typeof batchee.data.batchIndex === \"undefined\" || batchee.data.batchIndex < 0) {\r\n            batchee.data.batchIndex = ++this._index;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds the given request context to the batch for execution\r\n     * \r\n     * @param context Details of the request to batch\r\n     */\r\n    public add<T = any>(context: IRequestContext<T>): Promise<T> {\r\n\r\n        const info: IODataBatchRequestInfo = {\r\n            id: context.requestId,\r\n            index: context.batchIndex,\r\n            method: context.method.toUpperCase(),\r\n            options: context.options,\r\n            parser: context.parser,\r\n            reject: null,\r\n            resolve: null,\r\n            url: context.url,\r\n        };\r\n\r\n        // we create a new promise that will be resolved within the batch\r\n        const p = new Promise<T>((resolve, reject) => {\r\n            info.resolve = resolve;\r\n            info.reject = reject;\r\n        });\r\n\r\n        this._reqs.push(info);\r\n\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     * Adds a dependency insuring that some set of actions will occur before a batch is processed.\r\n     * MUST be cleared using the returned resolve delegate to allow batches to run\r\n     */\r\n    public addDependency(): () => void {\r\n\r\n        let resolver: () => void = () => void (0);\r\n\r\n        this._deps.push(new Promise<void>((resolve) => {\r\n            resolver = resolve;\r\n        }));\r\n\r\n        return resolver;\r\n    }\r\n\r\n    /**\r\n     * The batch's execute method will not resolve util any promises added here resolve\r\n     * \r\n     * @param p The dependent promise\r\n     */\r\n    public addResolveBatchDependency(p: Promise<any>): void {\r\n        this._rDeps.push(p);\r\n    }\r\n\r\n    /**\r\n     * Execute the current batch and resolve the associated promises\r\n     *\r\n     * @returns A promise which will be resolved once all of the batch's child promises have resolved\r\n     */\r\n    public execute(): Promise<void> {\r\n\r\n        // we need to check the dependencies twice due to how different engines handle things.\r\n        // We can get a second set of promises added during the first set resolving\r\n        return Promise.all(this._deps)\r\n            .then(() => Promise.all(this._deps))\r\n            .then(() => this.executeImpl())\r\n            .then(() => Promise.all(this._rDeps))\r\n            .then(() => void (0));\r\n    }\r\n\r\n    protected abstract executeImpl(): Promise<void>;\r\n}\r\n","import { IODataParser } from \"./parsers\";\r\nimport { RuntimeConfig, dateAdd, IPnPClientStore, PnPClientStorage } from \"@pnp/common\";\r\n\r\nexport interface ICachingOptions {\r\n    expiration?: Date;\r\n    storeName?: \"session\" | \"local\";\r\n    key: string;\r\n}\r\n\r\nexport class CachingOptions implements ICachingOptions {\r\n\r\n    protected static storage = new PnPClientStorage();\r\n\r\n    constructor(\r\n        public key: string,\r\n        public storeName: \"session\" | \"local\" = RuntimeConfig.defaultCachingStore,\r\n        public expiration = dateAdd(new Date(), \"second\", RuntimeConfig.defaultCachingTimeoutSeconds)) { }\r\n\r\n    public get store(): IPnPClientStore {\r\n        if (this.storeName === \"local\") {\r\n            return CachingOptions.storage.local;\r\n        } else {\r\n            return CachingOptions.storage.session;\r\n        }\r\n    }\r\n}\r\n\r\nexport class CachingParserWrapper<T> implements IODataParser<T> {\r\n\r\n    constructor(public parser: IODataParser<T>, public cacheOptions: CachingOptions) { }\r\n\r\n    public parse(response: Response): Promise<T> {\r\n        return this.parser.parse(response).then(r => this.cacheData(r));\r\n    }\r\n\r\n    protected cacheData(data: any): any {\r\n        if (this.cacheOptions.store !== null) {\r\n            this.cacheOptions.store.put(this.cacheOptions.key, data, this.cacheOptions.expiration);\r\n        }\r\n        return data;\r\n    }\r\n}\r\n","/**\r\n * Adds a property to a target instance\r\n * \r\n * @param target The object to whose prototype we will add a property\r\n * @param name Property name\r\n * @param factory Factory method used to produce the property value\r\n * @param path Any additional path required to produce the value\r\n */\r\nexport function addProp<T, U>(target: { prototype: any }, name: string, factory: (arg: U, p?: string) => T, path?: string): void {\r\n\r\n    Reflect.defineProperty(target.prototype, name, {\r\n        configurable: true,\r\n        enumerable: true,\r\n        get: function (this: U): T {\r\n            return factory(this, path);\r\n        },\r\n    });\r\n}\r\n","import { isFunc, isArray, ITypedHash } from \"@pnp/common\";\r\n\r\nexport type ValidProxyMethods = \"apply\" | \"get\" | \"has\" | \"set\";\r\n\r\nexport type ExtensionDelegateType<T extends object> = { (op: string, target: T, ...rest: any[]): void };\r\n\r\nexport type ExtensionType<T extends object = {}> = Pick<ProxyHandler<T>, ValidProxyMethods> | ExtensionDelegateType<T> | ITypedHash<any>;\r\n\r\nlet _enableExtensions = false;\r\nconst globaExtensions: ExtensionType[] = [];\r\n\r\nconst ObjExtensionsSym = Symbol(\"__extensions\");\r\n\r\n/**\r\n * Creates global extensions across all invokable objects\r\n * \r\n * @param e The global extensions to apply\r\n */\r\nexport const extendGlobal = (e: ExtensionType | ExtensionType[]) => {\r\n\r\n    _enableExtensions = true;\r\n    extendCol(globaExtensions, e);\r\n};\r\n\r\n/**\r\n * Applies the supplied extensions to a single instance\r\n * \r\n * @param target Object to which extensions are applied\r\n * @param extensions Extensions to apply\r\n */\r\nexport const extendObj = <T extends object>(target: T, extensions: ExtensionType | ExtensionType[]): T => {\r\n\r\n    _enableExtensions = true;\r\n\r\n    if (!Reflect.has(target, ObjExtensionsSym)) {\r\n        Reflect.set(target, ObjExtensionsSym, []);\r\n    }\r\n\r\n    extendCol(<ExtensionType[]>Reflect.get(target, ObjExtensionsSym), extensions);\r\n\r\n    return target;\r\n};\r\n\r\n/**\r\n * Allows applying extensions to all instances created from the supplied factory\r\n * \r\n * @param factory The Invokable Factory method to extend\r\n * @param extensions Extensions to apply\r\n */\r\nexport const extendFactory = <T extends (...args: any[]) => any>(factory: T, extensions: ExtensionType | ExtensionType[]): void => {\r\n\r\n    _enableExtensions = true;\r\n\r\n    if ((<any>factory).__proto__[ObjExtensionsSym] === undefined) {\r\n        (<any>factory).__proto__[ObjExtensionsSym] = [];\r\n    }\r\n\r\n    extendCol((<any>factory).__proto__[ObjExtensionsSym], extensions);\r\n};\r\n\r\nfunction extendCol(a: ExtensionType[], e: ExtensionType | ExtensionType[]) {\r\n    if (isArray(e)) {\r\n        // @ts-ignore\r\n        a.push(...e);\r\n    } else {\r\n        // @ts-ignore\r\n        a.push(e);\r\n    }\r\n}\r\n\r\n/**\r\n * Clears all global extensions\r\n */\r\nexport const clearGlobalExtensions = () => {\r\n    globaExtensions.length = 0;\r\n};\r\n\r\n/**\r\n * Disables all extensions\r\n */\r\nexport const disableExtensions = () => {\r\n    _enableExtensions = false;\r\n};\r\n\r\n/**\r\n * Enables all extensions\r\n */\r\nexport const enableExtensions = () => {\r\n    _enableExtensions = true;\r\n};\r\n\r\n/**\r\n * Applies a set of extension previously applied to a factory using extendFactory to an object created from that factory\r\n * \r\n * @param factory \r\n * @param args \r\n */\r\nexport const applyFactoryExtensions = <T extends object = {}>(factory: (args: any[]) => T, args: any[]): T => {\r\n\r\n    let o = factory(args);\r\n\r\n    if ((<any>factory).__proto__[ObjExtensionsSym]) {\r\n        o = extendObj(o, (<any>factory).__proto__[ObjExtensionsSym]);\r\n    }\r\n\r\n    return o;\r\n};\r\n\r\nexport function extensionOrDefault(op: ValidProxyMethods, or: (...args: any[]) => any, target: any, ...rest: any[]): any {\r\n\r\n    if (_enableExtensions) {\r\n\r\n        const extensions: ExtensionType[] = [];\r\n\r\n        // we need to first invoke extensions tied to only this object\r\n        if (Reflect.has(target, ObjExtensionsSym)) {\r\n            extensions.push(...Reflect.get(target, ObjExtensionsSym));\r\n        }\r\n\r\n        // second we need to process any global extensions\r\n        extensions.push(...globaExtensions);\r\n\r\n        for (let i = 0; i < extensions.length; i++) {\r\n            const extension = extensions[i];\r\n\r\n            let result = undefined;\r\n\r\n            if (isFunc(extension)) {\r\n\r\n                // this extension is a function which we call\r\n                result = (<any>extension)(op, target, ...rest);\r\n\r\n            } else if (op === \"get\" && Reflect.has(extension, rest[0])) {\r\n\r\n                // this extension is a named extension meaning we are overriding a specific method/property\r\n                result = Reflect.get(extension, rest[0], target);\r\n\r\n            } else if (Reflect.has(extension, op)) {\r\n\r\n                // this extension is a ProxyHandler that has a handler defined for {op} so we pass control and see if we get a result\r\n                result = Reflect.get(extension, op)(target, ...rest);\r\n            }\r\n\r\n            if (typeof result !== \"undefined\") {\r\n                // if a extension returned a result, we return that\r\n                // this means that this extension overrides any other extensions and no more are executed\r\n                // first extension in the list to return \"wins\"\r\n                return result;\r\n            }\r\n        }\r\n    }\r\n\r\n    return or(target, ...rest);\r\n}\r\n","import { IQueryable } from \"./queryable\";\r\nimport { IRequestContext } from \"./pipeline\";\r\nimport { IFetchOptions, RuntimeConfig } from \"@pnp/common\";\r\nimport { extensionOrDefault, applyFactoryExtensions } from \"./invokable-extensions\";\r\n\r\nexport type IHybrid<R = any, T = any> = T & {\r\n    (this: T, ...args: any[]): Promise<R>;\r\n};\r\n\r\nexport type IInvoker<R> = (this: IQueryable<any>, ...args: any[]) => Promise<R>;\r\n\r\nconst invokableBinder = (invoker: IInvoker<IQueryable<any>>) => <R>(constructor: { new(...args: any[]): any }): (...args: any[]) => R => {\r\n\r\n    return (...args: any[]) => {\r\n\r\n        const factory = (as: any[]) => {\r\n            const r = Object.assign(function (...ags: any[]) { return invoker.apply(r, ags); }, new constructor(...as));\r\n            Reflect.setPrototypeOf(r, constructor.prototype);\r\n            return r;\r\n        };\r\n\r\n        if (RuntimeConfig.ie11) {\r\n\r\n            return factory(args);\r\n        } else {\r\n\r\n            return new Proxy<IHybrid<R>>(applyFactoryExtensions(factory, args), {\r\n                apply: (target: any, _thisArg: any, argArray?: any) => {\r\n                    return extensionOrDefault(\"apply\", (...a: any[]) => Reflect.apply(a[0], a[1], a[2]), target, _thisArg, argArray);\r\n                },\r\n                get: (target: any, p: PropertyKey, receiver: any) => {\r\n                    return extensionOrDefault(\"get\", (...a: any[]) => Reflect.get(a[0], a[1], a[2]), target, p, receiver);\r\n                },\r\n                has: (target: any, p: PropertyKey) => {\r\n                    return extensionOrDefault(\"has\", (...a: any[]) => Reflect.has(a[0], a[1]), target, p);\r\n                },\r\n                set: (target: any, p: PropertyKey, value: any, receiver: any) => {\r\n                    return extensionOrDefault(\"set\", (...a: any[]) => Reflect.set(a[0], a[1], a[2], a[3]), target, p, value, receiver);\r\n                },\r\n            });\r\n        }\r\n    };\r\n};\r\n\r\nexport const invokableFactory = invokableBinder(function <R = any>(this: IQueryable<R>, options?: IFetchOptions): Promise<R> {\r\n    return this.defaultAction(options);\r\n});\r\n\r\nexport interface IInvokable<R = any> {\r\n    <T = R>(options?: Partial<IRequestContext<T>>): Promise<T>;\r\n}\r\n","import { isFunc, hOP } from \"@pnp/common\";\r\n\r\nexport interface IODataParser<T> {\r\n    hydrate?: (d: any) => T;\r\n    parse(r: Response): Promise<T>;\r\n}\r\n\r\nexport class ODataParser<T = any> implements IODataParser<T> {\r\n\r\n    public parse(r: Response): Promise<T> {\r\n\r\n        return new Promise<T>((resolve, reject) => {\r\n\r\n            if (this.handleError(r, reject)) {\r\n\r\n                this.parseImpl(r, resolve, reject);\r\n            }\r\n        });\r\n    }\r\n\r\n    protected parseImpl(r: Response, resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: Error) => void): void {\r\n\r\n        if ((r.headers.has(\"Content-Length\") && parseFloat(r.headers.get(\"Content-Length\")!) === 0) || r.status === 204) {\r\n\r\n            resolve(<T>{});\r\n        } else {\r\n\r\n            // patch to handle cases of 200 response with no or whitespace only bodies (#487 & #545)\r\n            r.text()\r\n                .then(txt => txt.replace(/\\s/ig, \"\").length > 0 ? JSON.parse(txt) : {})\r\n                .then(json => resolve(this.parseODataJSON<T>(json)))\r\n                .catch(e => reject(e));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles a response with ok === false by parsing the body and creating a ProcessHttpClientResponseException\r\n     * which is passed to the reject delegate. This method returns true if there is no error, otherwise false\r\n     *\r\n     * @param r Current response object\r\n     * @param reject reject delegate for the surrounding promise\r\n     */\r\n    protected handleError(r: Response, reject: (err?: Error) => void): boolean {\r\n\r\n        if (!r.ok) {\r\n            HttpRequestError.init(r).then(reject);\r\n        }\r\n\r\n        return r.ok;\r\n    }\r\n\r\n    /**\r\n     * Normalizes the json response by removing the various nested levels\r\n     *\r\n     * @param json json object to parse\r\n     */\r\n    protected parseODataJSON<U>(json: any): U {\r\n\r\n        let result = json;\r\n\r\n        if (hOP(json, \"d\")) {\r\n\r\n            if (hOP(json.d, \"results\")) {\r\n\r\n                result = json.d.results;\r\n            } else {\r\n\r\n                result = json.d;\r\n            }\r\n        } else if (hOP(json, \"value\")) {\r\n\r\n            result = json.value;\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport class TextParser extends ODataParser<string> {\r\n\r\n    protected parseImpl(r: Response, resolve: (value: any) => void): void {\r\n\r\n        r.text().then(resolve);\r\n    }\r\n}\r\n\r\nexport class BlobParser extends ODataParser<Blob> {\r\n\r\n    protected parseImpl(r: Response, resolve: (value: any) => void): void {\r\n\r\n        r.blob().then(resolve);\r\n    }\r\n}\r\n\r\nexport class JSONParser extends ODataParser<any> {\r\n\r\n    protected parseImpl(r: Response, resolve: (value: any) => void): void {\r\n\r\n        r.json().then(resolve);\r\n    }\r\n}\r\n\r\nexport class BufferParser extends ODataParser<ArrayBuffer> {\r\n\r\n    protected parseImpl(r: Response, resolve: (value: any) => void): void {\r\n\r\n        if (isFunc(r.arrayBuffer)) {\r\n\r\n            r.arrayBuffer().then(resolve);\r\n        } else {\r\n\r\n            (<any>r).buffer().then(resolve);\r\n        }\r\n    }\r\n}\r\n\r\nexport class LambdaParser<T = any> extends ODataParser<T> {\r\n\r\n    constructor(private parser: (r: Response) => Promise<T>) {\r\n        super();\r\n    }\r\n\r\n    protected parseImpl(r: Response, resolve: (value: any) => void): void {\r\n\r\n        this.parser(r).then(resolve);\r\n    }\r\n}\r\n\r\nexport class HttpRequestError extends Error {\r\n\r\n    public isHttpRequestError = true;\r\n\r\n    constructor(message: string, public response: Response, public status = response.status, public statusText = response.statusText) {\r\n        super(message);\r\n    }\r\n\r\n    public static async init(r: Response): Promise<HttpRequestError> {\r\n\r\n        const t = await r.clone().text();\r\n        return new HttpRequestError(`Error making HttpClient request in queryable [${r.status}] ${r.statusText} ::> ${t}`, r.clone());\r\n    }\r\n}\r\n","import {\r\n  combine,\r\n  RuntimeConfig,\r\n  IFetchOptions,\r\n  IConfigOptions,\r\n  mergeOptions,\r\n  objectDefinedNotNull,\r\n  IRequestClient,\r\n} from \"@pnp/common\";\r\nimport { ICachingOptions } from \"./caching\";\r\nimport { Batch } from \"./batch\";\r\nimport { PipelineMethod } from \"./pipeline\";\r\nimport { IODataParser, ODataParser } from \"./parsers\";\r\n\r\nexport function cloneQueryableData(source: Partial<IQueryableData>): Partial<IQueryableData> {\r\n\r\n  const s = JSON.stringify(source, (key: string, value: any) => {\r\n\r\n    switch (key) {\r\n      case \"query\":\r\n        return JSON.stringify([...(<Map<string, string>>value)]);\r\n      case \"batch\":\r\n        return \"-\";\r\n      case \"batchDependency\":\r\n        return \"-\";\r\n      case \"cachingOptions\":\r\n        return \"-\";\r\n      case \"clientFactory\":\r\n        return \"-\";\r\n      case \"parser\":\r\n        return \"-\";\r\n      default:\r\n        return value;\r\n    }\r\n  }, 0);\r\n\r\n  const parsed = JSON.parse(s, (key: any, value: any) => {\r\n    switch (key) {\r\n      case \"query\":\r\n        return new Map(JSON.parse(value));\r\n      case \"batch\":\r\n        return source.batch;\r\n      case \"batchDependency\":\r\n        return source.batchDependency;\r\n      case \"cachingOptions\":\r\n        return source.cachingOptions;\r\n      case \"clientFactory\":\r\n        return source.clientFactory;\r\n      case \"parser\":\r\n        return source.parser;\r\n      default:\r\n        return value;\r\n    }\r\n  });\r\n\r\n  // this handles bodies that cannot be JSON encoded (Blob, etc)\r\n  if (source.options && source.options.body) {\r\n    parsed.options.body = source.options.body;\r\n  }\r\n\r\n  return parsed;\r\n}\r\n\r\nexport interface IQueryableData<DefaultActionType = any> {\r\n  batch: Batch | null;\r\n  batchIndex: number;\r\n  batchDependency: () => void | null;\r\n  cachingOptions: ICachingOptions | null;\r\n  cloneParentCacheOptions: ICachingOptions | null;\r\n  cloneParentWasCaching: boolean;\r\n  query: Map<string, string>;\r\n  options: IFetchOptions | null;\r\n  url: string;\r\n  parentUrl: string;\r\n  useCaching: boolean;\r\n  pipes?: PipelineMethod<DefaultActionType>[];\r\n  parser?: IODataParser<DefaultActionType>;\r\n  clientFactory?: () => IRequestClient;\r\n  method?: string;\r\n}\r\n\r\nexport interface IQueryable<DefaultActionType> {\r\n  data: Partial<IQueryableData<DefaultActionType>>;\r\n  query: Map<string, string>;\r\n  append(pathPart: string): void;\r\n  inBatch(batch: Batch): this;\r\n  addBatchDependency(): () => void;\r\n  toUrlAndQuery(): string;\r\n  toUrl(): string;\r\n  concat(pathPart: string): this;\r\n  configure(options: IConfigOptions): this;\r\n  configureFrom(o: IQueryable<DefaultActionType>): this;\r\n  usingCaching(options?: ICachingOptions): this;\r\n  usingParser(parser: IODataParser<any>): this;\r\n  withPipeline(pipeline: PipelineMethod<DefaultActionType>[]): this;\r\n  defaultAction(options?: IFetchOptions): Promise<DefaultActionType>;\r\n}\r\n\r\nexport abstract class Queryable<DefaultActionType = any> implements IQueryable<DefaultActionType> {\r\n\r\n  private _data: Partial<IQueryableData<DefaultActionType>>;\r\n\r\n  constructor(dataSeed: Partial<IQueryableData<DefaultActionType>> = {}) {\r\n\r\n    this._data = Object.assign({}, {\r\n      cloneParentWasCaching: false,\r\n      options: {},\r\n      parentUrl: \"\",\r\n      parser: new ODataParser<DefaultActionType>(),\r\n      query: new Map<string, string>(),\r\n      url: \"\",\r\n      useCaching: false,\r\n    }, cloneQueryableData(dataSeed));\r\n  }\r\n\r\n  public get data(): Partial<IQueryableData<DefaultActionType>> {\r\n    return this._data;\r\n  }\r\n\r\n  public set data(value: Partial<IQueryableData<DefaultActionType>>) {\r\n    this._data = Object.assign({}, cloneQueryableData(this.data), cloneQueryableData(value));\r\n  }\r\n\r\n  /**\r\n   * Gets the full url with query information\r\n   *\r\n   */\r\n  public abstract toUrlAndQuery(): string;\r\n\r\n  /**\r\n   * The default action for this \r\n   */\r\n  public abstract defaultAction(options?: IFetchOptions): Promise<DefaultActionType>;\r\n\r\n  /**\r\n  * Gets the currentl url\r\n  *\r\n  */\r\n  public toUrl(): string {\r\n    return this.data.url;\r\n  }\r\n\r\n  /**\r\n   * Directly concatenates the supplied string to the current url, not normalizing \"/\" chars\r\n   *\r\n   * @param pathPart The string to concatenate to the url\r\n   */\r\n  public concat(pathPart: string): this {\r\n    this.data.url += pathPart;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Provides access to the query builder for this url\r\n   *\r\n   */\r\n  public get query(): Map<string, string> {\r\n    return this.data.query;\r\n  }\r\n\r\n  /**\r\n   * Sets custom options for current object and all derived objects accessible via chaining\r\n   * \r\n   * @param options custom options\r\n   */\r\n  public configure(options: IConfigOptions): this {\r\n    mergeOptions(this.data.options, options);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Configures this instance from the configure options of the supplied instance\r\n   * \r\n   * @param o Instance from which options should be taken\r\n   */\r\n  public configureFrom(o: IQueryable<any>): this {\r\n    mergeOptions(this.data.options, o.data.options);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enables caching for this request\r\n   *\r\n   * @param options Defines the options used when caching this request\r\n   */\r\n  public usingCaching(options?: ICachingOptions): this {\r\n    if (!RuntimeConfig.globalCacheDisable) {\r\n      this.data.useCaching = true;\r\n      if (options !== undefined) {\r\n        this.data.cachingOptions = options;\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public usingParser(parser: IODataParser<any>): this {\r\n    this.data.parser = parser;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Allows you to set a request specific processing pipeline\r\n   * \r\n   * @param pipeline The set of methods, in order, to execute a given request\r\n   */\r\n  public withPipeline(pipeline: PipelineMethod<DefaultActionType>[]): this {\r\n    this.data.pipes = pipeline.slice(0);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Appends the given string and normalizes \"/\" chars\r\n   *\r\n   * @param pathPart The string to append\r\n   */\r\n  public append(pathPart: string): void {\r\n    this.data.url = combine(this.data.url, pathPart);\r\n  }\r\n\r\n  /**\r\n   * Adds this query to the supplied batch\r\n   *\r\n   * @example\r\n   * ```\r\n   *\r\n   * let b = pnp.sp.createBatch();\r\n   * pnp.sp.web.inBatch(b).get().then(...);\r\n   * b.execute().then(...)\r\n   * ```\r\n   */\r\n  public inBatch(batch: Batch): this {\r\n\r\n    if (this.hasBatch) {\r\n      throw Error(\"This query is already part of a batch.\");\r\n    }\r\n\r\n    if (objectDefinedNotNull(batch)) {\r\n      batch.track(this);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Blocks a batch call from occuring, MUST be cleared by calling the returned function\r\n  */\r\n  public addBatchDependency(): () => void {\r\n    if (objectDefinedNotNull(this.data.batch)) {\r\n      return this.data.batch.addDependency();\r\n    }\r\n\r\n    return () => null;\r\n  }\r\n\r\n  /**\r\n   * Indicates if the current query has a batch associated\r\n   *\r\n   */\r\n  protected get hasBatch(): boolean {\r\n    return objectDefinedNotNull(this.data.batch);\r\n  }\r\n\r\n  /**\r\n   * The batch currently associated with this query or null\r\n   *\r\n   */\r\n  protected get batch(): Batch | null {\r\n    return this.hasBatch ? this.data.batch : null;\r\n  }\r\n\r\n  /**\r\n   * Gets the parent url used when creating this instance\r\n   *\r\n   */\r\n  protected get parentUrl(): string {\r\n    return this.data.parentUrl;\r\n  }\r\n\r\n  /**\r\n   * Clones this instance's data to target\r\n   * \r\n   * @param target Instance to which data is written\r\n   * @param settings [Optional] Settings controlling how clone is applied\r\n   */\r\n  protected cloneTo<T extends IQueryable<any>>(target: T, settings: { includeBatch: boolean } = { includeBatch: true }): T {\r\n\r\n    target.data = Object.assign({}, cloneQueryableData(this.data), <Partial<IQueryableData<DefaultActionType>>>{\r\n      batch: null,\r\n      cloneParentCacheOptions: null,\r\n      cloneParentWasCaching: false,\r\n    }, cloneQueryableData(target.data));\r\n\r\n    target.configureFrom(this);\r\n\r\n    if (settings.includeBatch) {\r\n      target.inBatch(this.batch);\r\n    }\r\n\r\n    if (this.data.useCaching) {\r\n      target.data.cloneParentWasCaching = true;\r\n      target.data.cloneParentCacheOptions = this.data.cachingOptions;\r\n    }\r\n\r\n    return target;\r\n  }\r\n}\r\n","import { IRequestClient, assign, isFunc, hOP } from \"@pnp/common\";\r\nimport { LogLevel, Logger } from \"@pnp/logging\";\r\nimport { CachingOptions, CachingParserWrapper } from \"./caching\";\r\nimport { IQueryableData } from \"./queryable\";\r\n\r\n/**\r\n * Defines the context for a given request to be processed in the pipeline\r\n */\r\nexport interface IRequestContext<ReturnType> extends IQueryableData<ReturnType> {\r\n    result?: ReturnType;\r\n    clientFactory: () => IRequestClient;\r\n    hasResult: boolean;\r\n    isBatched: boolean;\r\n    requestId: string;\r\n    method: string;\r\n}\r\n\r\nexport type PipelineMethod<ReturnType> = (c: IRequestContext<ReturnType>) => Promise<IRequestContext<ReturnType>>;\r\n\r\n/**\r\n * Resolves the context's result value\r\n *\r\n * @param context The current context\r\n */\r\nfunction returnResult<T = any>(context: IRequestContext<T>): Promise<T> {\r\n\r\n    Logger.log({\r\n        data: Logger.activeLogLevel === LogLevel.Verbose ? context.result : {},\r\n        level: LogLevel.Info,\r\n        message: `[${context.requestId}] (${(new Date()).getTime()}) Returning result from pipeline. Set logging to verbose to see data.`,\r\n    });\r\n\r\n    return Promise.resolve(context.result!);\r\n}\r\n\r\n/**\r\n * Sets the result on the context\r\n */\r\nexport function setResult<T = any>(context: IRequestContext<T>, value: any): Promise<IRequestContext<T>> {\r\n\r\n    return new Promise<IRequestContext<T>>((resolve) => {\r\n\r\n        context.result = value;\r\n        context.hasResult = true;\r\n        resolve(context);\r\n    });\r\n}\r\n\r\n/**\r\n * Invokes the next method in the provided context's pipeline\r\n *\r\n * @param c The current request context\r\n */\r\nfunction next<T = any>(c: IRequestContext<T>): Promise<IRequestContext<T>> {\r\n\r\n    return c.pipes.length > 0 ? c.pipes.shift()(c) : Promise.resolve(c);\r\n}\r\n\r\n/**\r\n * Executes the current request context's pipeline\r\n *\r\n * @param context Current context\r\n */\r\nexport function pipe<T = any>(context: IRequestContext<T>): Promise<T> {\r\n\r\n    if (context.pipes.length < 1) {\r\n        Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Request pipeline contains no methods!`, LogLevel.Error);\r\n        throw Error(\"Request pipeline contains no methods!\");\r\n    }\r\n\r\n    const promise = next(context).then(ctx => returnResult(ctx)).catch((e: Error) => {\r\n        Logger.error(e);\r\n        throw e;\r\n    });\r\n\r\n    if (context.isBatched) {\r\n        // this will block the batch's execute method from returning until the child requets have been resolved\r\n        context.batch.addResolveBatchDependency(promise);\r\n    }\r\n\r\n    return promise;\r\n}\r\n\r\n/**\r\n * decorator factory applied to methods in the pipeline to control behavior\r\n */\r\nexport function requestPipelineMethod(alwaysRun = false) {\r\n\r\n    return (target: any, propertyKey: string, descriptor: PropertyDescriptor) => {\r\n\r\n        const method = descriptor.value;\r\n\r\n        descriptor.value = function (...args: any[]) {\r\n\r\n            // if we have a result already in the pipeline, pass it along and don't call the tagged method\r\n            if (!alwaysRun && args.length > 0 && hOP(args[0], \"hasResult\") && args[0].hasResult) {\r\n                Logger.write(`[${args[0].requestId}] (${(new Date()).getTime()}) Skipping request pipeline method ${propertyKey}, existing result in pipeline.`, LogLevel.Verbose);\r\n                return Promise.resolve(args[0]);\r\n            }\r\n\r\n            // apply the tagged method\r\n            Logger.write(`[${args[0].requestId}] (${(new Date()).getTime()}) Calling request pipeline method ${propertyKey}.`, LogLevel.Verbose);\r\n\r\n            // then chain the next method in the context's pipeline - allows for dynamic pipeline\r\n            return method.apply(target, args).then((ctx: IRequestContext<any>) => next(ctx));\r\n        };\r\n    };\r\n}\r\n\r\n/**\r\n * Contains the methods used within the request pipeline\r\n */\r\nexport class PipelineMethods {\r\n\r\n    /**\r\n     * Logs the start of the request\r\n     */\r\n    @requestPipelineMethod(true)\r\n    public static logStart<T = any>(context: IRequestContext<T>): Promise<IRequestContext<T>> {\r\n        return new Promise<IRequestContext<T>>(resolve => {\r\n\r\n            Logger.log({\r\n                data: Logger.activeLogLevel === LogLevel.Info ? {} : context,\r\n                level: LogLevel.Info,\r\n                message: `[${context.requestId}] (${(new Date()).getTime()}) Beginning ${context.method} request (${context.url})`,\r\n            });\r\n\r\n            resolve(context);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles caching of the request\r\n     */\r\n    @requestPipelineMethod()\r\n    public static caching<T = any>(context: IRequestContext<T>): Promise<IRequestContext<T>> {\r\n\r\n        return new Promise<IRequestContext<T>>(resolve => {\r\n\r\n            // handle caching, if applicable\r\n            if (context.useCaching) {\r\n\r\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Caching is enabled for request, checking cache...`, LogLevel.Info);\r\n\r\n                let cacheOptions = new CachingOptions(context.url.toLowerCase());\r\n                if (context.cachingOptions !== undefined) {\r\n                    cacheOptions = assign(cacheOptions, context.cachingOptions);\r\n                }\r\n\r\n                // we may not have a valid store\r\n                if (cacheOptions.store !== null) {\r\n\r\n                    // check if we have the data in cache and if so resolve the promise and return\r\n                    let data = cacheOptions.store.get(cacheOptions.key);\r\n\r\n                    if (data !== null) {\r\n\r\n                        Logger.log({\r\n                            data: Logger.activeLogLevel === LogLevel.Info ? {} : data,\r\n                            level: LogLevel.Info,\r\n                            message: `[${context.requestId}] (${(new Date()).getTime()}) Value returned from cache.`,\r\n                        });\r\n\r\n                        // ensure we clear any held batch dependency we are resolving from the cache\r\n                        if (isFunc(context.batchDependency)) {\r\n                            context.batchDependency();\r\n                        }\r\n                        // handle the case where a parser needs to take special actions with a cached result\r\n                        if (hOP(context.parser, \"hydrate\")) {\r\n                            data = context.parser.hydrate(data);\r\n                        }\r\n                        return setResult(context, data).then(ctx => resolve(ctx));\r\n                    }\r\n                }\r\n\r\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Value not found in cache.`, LogLevel.Info);\r\n\r\n                // if we don't then wrap the supplied parser in the caching parser wrapper\r\n                // and send things on their way\r\n                context.parser = new CachingParserWrapper(context.parser, cacheOptions);\r\n            }\r\n\r\n            return resolve(context);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends the request\r\n     */\r\n    @requestPipelineMethod()\r\n    public static send<T = any>(context: IRequestContext<T>): Promise<IRequestContext<T>> {\r\n\r\n        return new Promise<IRequestContext<T>>((resolve, reject) => {\r\n            // send or batch the request\r\n            if (context.isBatched) {\r\n\r\n                const p = context.batch.add(context);\r\n\r\n                // we release the dependency here to ensure the batch does not execute until the request is added to the batch\r\n                if (isFunc(context.batchDependency)) {\r\n                    context.batchDependency();\r\n                }\r\n\r\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Batching request in batch ${context.batch.batchId}.`, LogLevel.Info);\r\n\r\n                // we set the result as the promise which will be resolved by the batch's execution\r\n                resolve(setResult(context, p));\r\n\r\n            } else {\r\n\r\n                Logger.write(`[${context.requestId}] (${(new Date()).getTime()}) Sending request.`, LogLevel.Info);\r\n\r\n                // we are not part of a batch, so proceed as normal\r\n                const client = context.clientFactory();\r\n                const opts = assign(context.options || {}, { method: context.method });\r\n                client.fetch(context.url, opts)\r\n                    .then(response => context.parser.parse(response))\r\n                    .then(result => setResult(context, result))\r\n                    .then(ctx => resolve(ctx))\r\n                    .catch(e => reject(e));\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Logs the end of the request\r\n     */\r\n    @requestPipelineMethod(true)\r\n    public static logEnd<T = any>(context: IRequestContext<T>): Promise<IRequestContext<T>> {\r\n\r\n        return new Promise<IRequestContext<T>>(resolve => {\r\n\r\n            if (context.isBatched) {\r\n\r\n                Logger.log({\r\n                    data: Logger.activeLogLevel === LogLevel.Info ? {} : context,\r\n                    level: LogLevel.Info,\r\n                    message: `[${context.requestId}] (${(new Date()).getTime()}) ${context.method} request will complete in batch ${context.batch.batchId}.`,\r\n                });\r\n\r\n            } else {\r\n\r\n                Logger.log({\r\n                    data: Logger.activeLogLevel === LogLevel.Info ? {} : context,\r\n                    level: LogLevel.Info,\r\n                    message: `[${context.requestId}] (${(new Date()).getTime()}) Completing ${context.method} request.`,\r\n                });\r\n            }\r\n\r\n            resolve(context);\r\n        });\r\n    }\r\n}\r\n\r\nexport function getDefaultPipeline() {\r\n    return [\r\n        PipelineMethods.logStart,\r\n        PipelineMethods.caching,\r\n        PipelineMethods.send,\r\n        PipelineMethods.logEnd,\r\n    ].slice(0);\r\n}\r\n","import { IODataParser, ODataParser } from \"./parsers\";\r\nimport { IFetchOptions, IRequestClient, getGUID, objectDefinedNotNull } from \"@pnp/common\";\r\nimport { IQueryableData, cloneQueryableData } from \"./queryable\";\r\nimport { PipelineMethod, pipe, getDefaultPipeline } from \"./pipeline\";\r\n\r\nexport interface IRequestOptions<T> extends IFetchOptions {\r\n    parser: IODataParser<T>;\r\n}\r\n\r\nexport interface IClientFactoryBinder {\r\n    (clientFactory: () => IRequestClient): IMethodBinder;\r\n}\r\n\r\nexport interface IPipelineBinder {\r\n    (pipeline: PipelineMethod<any>[]): IClientFactoryBinder;\r\n}\r\n\r\nexport interface IMethodBinder {\r\n    (method: string): IOperation;\r\n}\r\n\r\nexport interface IOperation {\r\n    <ReturnType>(o: Partial<IQueryableData<ReturnType>>): Promise<ReturnType>;\r\n}\r\n\r\n// first we bind the pipeline we will use for all requests within this closure\r\nexport function pipelineBinder(pipes: PipelineMethod<any>[]): IClientFactoryBinder {\r\n\r\n    // then we bind the client factory we'll use (typically done in an implementing library such as sp)\r\n    return function (clientFactory: () => IRequestClient): IMethodBinder {\r\n\r\n        // then we create a binder we can apply for each type of method (GET, POST, etc.)\r\n        return function (method: string): IOperation {\r\n\r\n            // finally we get a function back to which we can pass an IQueryableData instance and execute the request it defines\r\n            return function <ReturnType = any>(o: Partial<IQueryableData<ReturnType>>): Promise<ReturnType> {\r\n\r\n                // send the IQueryableData down the pipeline\r\n                return pipe(Object.assign({}, {\r\n                    batch: null,\r\n                    batchDependency: null,\r\n                    batchIndex: -1,\r\n                    cachingOptions: null,\r\n                    clientFactory,\r\n                    cloneParentCacheOptions: null,\r\n                    cloneParentWasCaching: false,\r\n                    hasResult: false,\r\n                    isBatched: objectDefinedNotNull(o.batch),\r\n                    method,\r\n                    options: null,\r\n                    parentUrl: \"\",\r\n                    parser: new ODataParser<ReturnType>(),\r\n                    pipes: pipes.slice(0),\r\n                    query: new Map<string, string>(),\r\n                    requestId: getGUID(),\r\n                    url: \"\",\r\n                    useCaching: /^get$/i.test(o.method) && o.useCaching,\r\n                }, cloneQueryableData(o)));\r\n            };\r\n        };\r\n    };\r\n}\r\n\r\nexport const defaultPipelineBinder: IClientFactoryBinder = pipelineBinder(getDefaultPipeline());\r\n","import { jsS, ITypedHash } from \"@pnp/common\";\r\n\r\nexport function body<T = unknown, U = any>(o: U, previous?: T): T & { body: string } {\r\n    return Object.assign({ body: jsS(o) }, previous);\r\n}\r\n\r\nexport function headers<T = unknown, U extends ITypedHash<string> = {}>(o: U, previous?: T): T & { headers: U } {\r\n    return Object.assign({ headers: o }, previous);\r\n}\r\n","import { ISharePointQueryable } from \"./sharepointqueryable\";\r\nimport { stringIsNullOrEmpty } from \"@pnp/common\";\r\nimport { headers } from \"@pnp/odata\";\r\n\r\n/**\r\n * Includes this method name in the X-ClientService-ClientTag used to record pnpjs usage\r\n * \r\n * @param name Method name, displayed in the \r\n */\r\nexport function tag(name: string) {\r\n    return function (target: any, key: string, descriptor: PropertyDescriptor) {\r\n\r\n        if (descriptor === undefined) {\r\n            descriptor = Object.getOwnPropertyDescriptor(target, key);\r\n        }\r\n        const originalMethod = descriptor.value;\r\n\r\n        descriptor.value = async function (this: ISharePointQueryable, ...args: any[]) {\r\n\r\n            this.configure(headers({ \"X-PnPjs-Tracking\": name }));\r\n            return originalMethod.apply(this, args);\r\n        };\r\n\r\n        return descriptor;\r\n    };\r\n}\r\ntag.getClientTag = (h: Headers, deleteFromCollection = true): string => {\r\n    if (h.has(\"X-PnPjs-Tracking\")) {\r\n        const methodName = h.get(\"X-PnPjs-Tracking\");\r\n        if (deleteFromCollection) {\r\n            h.delete(\"X-PnPjs-Tracking\");\r\n        }\r\n        if (!stringIsNullOrEmpty(methodName)) {\r\n            return methodName;\r\n        }\r\n    }\r\n    return \"\";\r\n};\r\ntag.configure = <T extends ISharePointQueryable>(o: T, name: string): T => {\r\n    return o.configure(headers({ \"X-PnPjs-Tracking\": name }));\r\n};\r\ntag.isTagged = <T extends ISharePointQueryable>(o: T): T => {\r\n    return o.data.options.headers && o.data.options.headers[\"X-PnPjs-Tracking\"];\r\n};\r\n","import { combine, isUrlAbsolute, assign, jsS, IFetchOptions } from \"@pnp/common\";\r\nimport { Queryable, invokableFactory, IInvokable } from \"@pnp/odata\";\r\nimport { Logger, LogLevel } from \"@pnp/logging\";\r\nimport { SPBatch } from \"./batch\";\r\nimport { metadata } from \"./utils/metadata\";\r\nimport { spGet, spPost, spPostDelete, spPostDeleteETag } from \"./operations\";\r\nimport { tag } from \"./telemetry\";\r\n\r\nexport interface ISharePointQueryableConstructor<T extends ISharePointQueryable = ISharePointQueryable> {\r\n    new(baseUrl: string | ISharePointQueryable, path?: string): T;\r\n}\r\n\r\nexport type ISPInvokableFactory<R = any> = (baseUrl: string | ISharePointQueryable, path?: string) => R;\r\n\r\nexport const spInvokableFactory = <R>(f: any): ISPInvokableFactory<R> => {\r\n    return invokableFactory<R>(f);\r\n};\r\n\r\n/**\r\n * SharePointQueryable Base Class\r\n *\r\n */\r\nexport class _SharePointQueryable<GetType = any> extends Queryable<GetType> {\r\n\r\n    protected _forceCaching: boolean;\r\n\r\n    /**\r\n     * Creates a new instance of the SharePointQueryable class\r\n     *\r\n     * @constructor\r\n     * @param baseUrl A string or SharePointQueryable that should form the base part of the url\r\n     *\r\n     */\r\n    constructor(baseUrl: string | ISharePointQueryable, path?: string) {\r\n\r\n        let url = \"\";\r\n        let parentUrl = \"\";\r\n        const query = new Map<string, string>();\r\n\r\n        if (typeof baseUrl === \"string\") {\r\n            // we need to do some extra parsing to get the parent url correct if we are\r\n            // being created from just a string.\r\n\r\n            if (isUrlAbsolute(baseUrl) || baseUrl.lastIndexOf(\"/\") < 0) {\r\n                parentUrl = baseUrl;\r\n                url = combine(baseUrl, path);\r\n            } else if (baseUrl.lastIndexOf(\"/\") > baseUrl.lastIndexOf(\"(\")) {\r\n                // .../items(19)/fields\r\n                const index = baseUrl.lastIndexOf(\"/\");\r\n                parentUrl = baseUrl.slice(0, index);\r\n                path = combine(baseUrl.slice(index), path);\r\n                url = combine(parentUrl, path);\r\n            } else {\r\n                // .../items(19)\r\n                const index = baseUrl.lastIndexOf(\"(\");\r\n                parentUrl = baseUrl.slice(0, index);\r\n                url = combine(baseUrl, path);\r\n            }\r\n        } else {\r\n\r\n            parentUrl = baseUrl.toUrl();\r\n            url = combine(parentUrl, path || \"\");\r\n            const target = baseUrl.query.get(\"@target\");\r\n            if (target !== undefined) {\r\n                query.set(\"@target\", target);\r\n            }\r\n        }\r\n\r\n        // init base with correct values for data seed\r\n        super({\r\n            parentUrl,\r\n            query,\r\n            url,\r\n        });\r\n\r\n        // post init actions\r\n        if (typeof baseUrl !== \"string\") {\r\n            this.configureFrom(baseUrl);\r\n        }\r\n        this._forceCaching = false;\r\n    }\r\n\r\n    /**\r\n     * Gets the full url with query information\r\n     */\r\n    public toUrlAndQuery(): string {\r\n\r\n        const aliasedParams = new Map<string, string>(this.query);\r\n\r\n        let url = this.toUrl().replace(/'!(@.*?)::(.*?)'/ig, (match, labelName, value) => {\r\n            Logger.write(`Rewriting aliased parameter from match ${match} to label: ${labelName} value: ${value}`, LogLevel.Verbose);\r\n            aliasedParams.set(labelName, `'${value}'`);\r\n            return labelName;\r\n        });\r\n\r\n        if (aliasedParams.size > 0) {\r\n            const char = url.indexOf(\"?\") > -1 ? \"&\" : \"?\";\r\n            url += `${char}${Array.from(aliasedParams).map((v: [string, string]) => v[0] + \"=\" + v[1]).join(\"&\")}`;\r\n        }\r\n\r\n        return url;\r\n    }\r\n\r\n    /**\r\n     * Choose which fields to return\r\n     *\r\n     * @param selects One or more fields to return\r\n     */\r\n    public select(...selects: string[]): this {\r\n        if (selects.length > 0) {\r\n            this.query.set(\"$select\", selects.join(\",\"));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public get<T = GetType>(options?: IFetchOptions): Promise<T> {\r\n        return spGet<T>(<any>this, options);\r\n    }\r\n\r\n    /**\r\n     * Expands fields such as lookups to get additional data\r\n     *\r\n     * @param expands The Fields for which to expand the values\r\n     */\r\n    public expand(...expands: string[]): this {\r\n        if (expands.length > 0) {\r\n            this.query.set(\"$expand\", expands.join(\",\"));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clones this SharePointQueryable into a new SharePointQueryable instance of T\r\n     * @param factory Constructor used to create the new instance\r\n     * @param additionalPath Any additional path to include in the clone\r\n     * @param includeBatch If true this instance's batch will be added to the cloned instance\r\n     */\r\n    public clone<T extends ISharePointQueryable>(factory: (...args: any[]) => T, additionalPath?: string, includeBatch = true): T {\r\n\r\n        const clone: T = super.cloneTo(factory(this, additionalPath), { includeBatch });\r\n\r\n        // handle sp specific clone actions\r\n        const t = \"@target\";\r\n        if (this.query.has(t)) {\r\n            clone.query.set(t, this.query.get(t));\r\n        }\r\n\r\n        return clone;\r\n    }\r\n\r\n    /**\r\n     * The default action for this object (unless overridden spGet)\r\n     * \r\n     * @param options optional request options\r\n     */\r\n    public defaultAction(options?: IFetchOptions): Promise<GetType> {\r\n        return spGet(this, options);\r\n    }\r\n\r\n    /**\r\n     * Gets a parent for this instance as specified\r\n     *\r\n     * @param factory The contructor for the class to create\r\n     */\r\n    protected getParent<T extends ISharePointQueryable>(\r\n        factory: ISPInvokableFactory<any>,\r\n        baseUrl: string | ISharePointQueryable = this.parentUrl,\r\n        path?: string,\r\n        batch?: SPBatch): T {\r\n\r\n        let parent = factory(baseUrl, path).configureFrom(this);\r\n\r\n        const t = \"@target\";\r\n        if (this.query.has(t)) {\r\n            parent.query.set(t, this.query.get(t));\r\n        }\r\n        if (batch !== undefined) {\r\n            parent = parent.inBatch(batch);\r\n        }\r\n        return parent;\r\n    }\r\n}\r\nexport interface ISharePointQueryable<GetType = any> extends _SharePointQueryable<GetType>, IInvokable<GetType> { }\r\nexport interface _SharePointQueryable<GetType = any> extends IInvokable<GetType> { }\r\nexport const SharePointQueryable = spInvokableFactory<ISharePointQueryable>(_SharePointQueryable);\r\n\r\n/**\r\n * Represents a REST collection which can be filtered, paged, and selected\r\n *\r\n */\r\nexport class _SharePointQueryableCollection<GetType = any[]> extends _SharePointQueryable<GetType> {\r\n\r\n    /**\r\n     * Filters the returned collection (https://msdn.microsoft.com/en-us/library/office/fp142385.aspx#bk_supported)\r\n     *\r\n     * @param filter The string representing the filter query\r\n     */\r\n    public filter(filter: string): this {\r\n        this.query.set(\"$filter\", filter);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Orders based on the supplied fields\r\n     *\r\n     * @param orderby The name of the field on which to sort\r\n     * @param ascending If false DESC is appended, otherwise ASC (default)\r\n     */\r\n    public orderBy(orderBy: string, ascending = true): this {\r\n        const o = \"$orderby\";\r\n        const query = this.query.has(o) ? this.query.get(o).split(\",\") : [];\r\n        query.push(`${orderBy} ${ascending ? \"asc\" : \"desc\"}`);\r\n        this.query.set(o, query.join(\",\"));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Skips the specified number of items\r\n     *\r\n     * @param skip The number of items to skip\r\n     */\r\n    public skip(skip: number): this {\r\n        this.query.set(\"$skip\", skip.toString());\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Limits the query to only return the specified number of items\r\n     *\r\n     * @param top The query row limit\r\n     */\r\n    public top(top: number): this {\r\n        this.query.set(\"$top\", top.toString());\r\n        return this;\r\n    }\r\n}\r\nexport interface _SharePointQueryableCollection<GetType = any[]> extends IInvokable<GetType> { }\r\nexport interface ISharePointQueryableCollection<GetType = any[]> extends _SharePointQueryableCollection<GetType>, IInvokable<GetType> { }\r\nexport const SharePointQueryableCollection = spInvokableFactory<ISharePointQueryableCollection>(_SharePointQueryableCollection);\r\n\r\n/**\r\n * Represents an instance that can be selected\r\n *\r\n */\r\nexport class _SharePointQueryableInstance<GetType = any> extends _SharePointQueryable<GetType> {\r\n\r\n    /**\r\n     * Curries the update function into the common pieces\r\n     * \r\n     * @param type \r\n     * @param mapper \r\n     */\r\n    protected _update<Return, Props = any>(type: string, mapper: (data: any, props: Props) => Return): (props: Props) => Promise<Return> {\r\n        return (props: any) => spPost(tag.configure(this, `${type}.Update`), {\r\n            body: jsS(assign(metadata(type), props)),\r\n            headers: {\r\n                \"X-HTTP-Method\": \"MERGE\",\r\n            },\r\n        }).then((d: any) => mapper(d, props));\r\n    }\r\n}\r\nexport interface ISharePointQueryableInstance<GetType = any> extends _SharePointQueryableInstance<GetType>, IInvokable<GetType> { }\r\nexport interface _SharePointQueryableInstance<GetType = any> extends IInvokable<GetType> { }\r\nexport const SharePointQueryableInstance = spInvokableFactory<ISharePointQueryableInstance>(_SharePointQueryableInstance);\r\n\r\n/**\r\n * Adds the a delete method to the tagged class taking no parameters and calling spPostDelete\r\n */\r\nexport function deleteable(t: string) {\r\n\r\n    return function (this: ISharePointQueryable): Promise<void> {\r\n        return spPostDelete<void>(tag.configure(this, `${t}.delete`));\r\n    };\r\n}\r\n\r\nexport interface IDeleteable {\r\n    /**\r\n     * Delete this instance\r\n     */\r\n    delete(): Promise<void>;\r\n}\r\n\r\nexport function deleteableWithETag(t: string) {\r\n\r\n    return function (this: ISharePointQueryable, eTag = \"*\"): Promise<void> {\r\n        return spPostDeleteETag<void>(tag.configure(this, `${t}.delete`), {}, eTag);\r\n    };\r\n}\r\n\r\nexport interface IDeleteableWithETag {\r\n    /**\r\n     * Delete this instance\r\n     *\r\n     * @param eTag Value used in the IF-Match header, by default \"*\"\r\n     */\r\n    delete(eTag?: string): Promise<void>;\r\n}\r\n","import { defaultPipelineBinder, IOperation, cloneQueryableData, headers } from \"@pnp/odata\";\r\nimport { SPHttpClient } from \"./sphttpclient\";\r\nimport { ISharePointQueryable } from \"./sharepointqueryable\";\r\nimport { IFetchOptions, mergeOptions, objectDefinedNotNull } from \"@pnp/common\";\r\nimport { toAbsoluteUrl } from \"./utils/toabsoluteurl\";\r\n\r\nconst spClientBinder = defaultPipelineBinder(() => new SPHttpClient());\r\n\r\nconst send = (method: \"GET\" | \"POST\" | \"DELETE\" | \"PATCH\" | \"PUT\"): <T = any>(o: ISharePointQueryable, options?: IFetchOptions) => Promise<T> => {\r\n\r\n    const operation: IOperation = spClientBinder(method);\r\n\r\n    return async function <T = any>(o: ISharePointQueryable, options?: IFetchOptions): Promise<T> {\r\n\r\n        const data = cloneQueryableData(o.data);\r\n        const batchDependency = objectDefinedNotNull(data.batch) ? data.batch.addDependency() : () => { return; };\r\n        const url = await toAbsoluteUrl(o.toUrlAndQuery());\r\n\r\n        mergeOptions(data.options, options);\r\n\r\n        return operation(Object.assign({}, data, {\r\n            batchDependency,\r\n            url,\r\n        }));\r\n    };\r\n};\r\n\r\nexport const spGet = <T = any>(o: ISharePointQueryable<any>, options?: IFetchOptions): Promise<T> => {\r\n    // Fix for #304 - when we clone objects we in some cases then execute a get request\r\n    // in these cases the caching settings were getting dropped from the request\r\n    // this tracks if the object from which this was cloned was caching and applies that to an immediate get request\r\n    // does not affect objects cloned from this as we are using different fields to track the settings so it won't\r\n    // be triggered\r\n    if (o.data.cloneParentWasCaching) {\r\n        o.usingCaching(o.data.cloneParentCacheOptions);\r\n    }\r\n\r\n    // if we are forcing caching set that in the data here\r\n    if ((<any>o)._forceCaching) {\r\n        o.data.useCaching = true;\r\n    }\r\n\r\n    return send(\"GET\")(o, options);\r\n};\r\n\r\nexport const spPost = send(\"POST\");\r\n\r\nexport const spDelete = send(\"DELETE\");\r\n\r\nexport const spPatch = send(\"PATCH\");\r\n\r\nexport const spPostDelete = <T = any>(o: ISharePointQueryable<any>, options?: IFetchOptions): Promise<T> => {\r\n    const opts = Object.assign(headers({ \"X-HTTP-Method\": \"DELETE\" }), options);\r\n    return spPost<T>(o, opts);\r\n};\r\n\r\nexport const spPostDeleteETag = <T = any>(o: ISharePointQueryable<any>, options?: IFetchOptions, eTag = \"*\"): Promise<T> => {\r\n    const opts = Object.assign(headers({ \"X-HTTP-Method\": \"DELETE\", \"IF-Match\": eTag }), options);\r\n    return spPost<T>(o, opts);\r\n};\r\n","import { combine, isUrlAbsolute, IFetchOptions } from \"@pnp/common\";\r\nimport { Queryable, invokableFactory, IInvokable, IQueryable } from \"@pnp/odata\";\r\nimport { GraphEndpoints } from \"./types\";\r\nimport { graphGet } from \"./operations\";\r\n\r\nexport interface IGraphQueryableConstructor<T> {\r\n    new(baseUrl: string | IGraphQueryable, path?: string): T;\r\n}\r\n\r\nexport const graphInvokableFactory = <R>(f: any): (baseUrl: string | IGraphQueryable, path?: string) => R => {\r\n    return invokableFactory<R>(f);\r\n};\r\n\r\n/**\r\n * Queryable Base Class\r\n *\r\n */\r\nexport class _GraphQueryable<GetType = any> extends Queryable<GetType> implements IGraphQueryable<GetType> {\r\n\r\n    /**\r\n     * Creates a new instance of the Queryable class\r\n     *\r\n     * @constructor\r\n     * @param baseUrl A string or Queryable that should form the base part of the url\r\n     *\r\n     */\r\n    constructor(baseUrl: string | IGraphQueryable, path?: string) {\r\n\r\n        let url = \"\";\r\n        let parentUrl = \"\";\r\n        const query = new Map<string, string>();\r\n\r\n        if (typeof baseUrl === \"string\") {\r\n            parentUrl = baseUrl;\r\n            url = combine(parentUrl, path);\r\n        } else {\r\n            parentUrl = baseUrl.toUrl();\r\n            url = combine(parentUrl, path);\r\n        }\r\n\r\n        super({\r\n            parentUrl,\r\n            query,\r\n            url,\r\n        });\r\n\r\n        // post init actions\r\n        if (typeof baseUrl !== \"string\") {\r\n            this.configureFrom(baseUrl);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Choose which fields to return\r\n     *\r\n     * @param selects One or more fields to return\r\n     */\r\n    public select(...selects: string[]): this {\r\n        if (selects.length > 0) {\r\n            this.query.set(\"$select\", selects.join(\",\"));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Expands fields such as lookups to get additional data\r\n     *\r\n     * @param expands The Fields for which to expand the values\r\n     */\r\n    public expand(...expands: string[]): this {\r\n        if (expands.length > 0) {\r\n            this.query.set(\"$expand\", expands.join(\",\"));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public defaultAction(options?: IFetchOptions): Promise<GetType> {\r\n        return graphGet(this, options);\r\n    }\r\n\r\n    public get<T = GetType>(options?: IFetchOptions): Promise<T> {\r\n        return graphGet<T>(<any>this, options);\r\n    }\r\n\r\n    /**\r\n     * Gets the full url with query information\r\n     *\r\n     */\r\n    public toUrlAndQuery(): string {\r\n\r\n        let url = this.toUrl();\r\n\r\n        if (!isUrlAbsolute(url)) {\r\n            url = combine(\"https://graph.microsoft.com\", url);\r\n        }\r\n\r\n        if (this.query.size > 0) {\r\n            const char = url.indexOf(\"?\") > -1 ? \"&\" : \"?\";\r\n            url += `${char}${Array.from(this.query).map((v: [string, string]) => v[0] + \"=\" + v[1]).join(\"&\")}`;\r\n        }\r\n\r\n        return url;\r\n    }\r\n\r\n    /**\r\n     * Gets a parent for this instance as specified\r\n     *\r\n     * @param factory The contructor for the class to create\r\n     */\r\n    protected getParent<T extends _GraphQueryable>(\r\n        factory: IGraphQueryableConstructor<T>,\r\n        baseUrl: string | IGraphQueryable = this.parentUrl,\r\n        path?: string): T {\r\n\r\n        return new factory(baseUrl, path);\r\n    }\r\n\r\n    /**\r\n     * Clones this queryable into a new queryable instance of T\r\n     * @param factory Constructor used to create the new instance\r\n     * @param additionalPath Any additional path to include in the clone\r\n     * @param includeBatch If true this instance's batch will be added to the cloned instance\r\n     */\r\n    protected clone<T extends IGraphQueryable>(factory: (...args: any[]) => T, additionalPath?: string, includeBatch = true): T {\r\n\r\n        return super.cloneTo<T>(factory(this, additionalPath), { includeBatch });\r\n    }\r\n\r\n    protected setEndpoint(endpoint: string): this {\r\n        this.data.url = GraphEndpoints.ensure(this.data.url, endpoint);\r\n        return this;\r\n    }\r\n}\r\n\r\nexport interface IGraphQueryable<GetType = any> extends IInvokable, IQueryable<GetType> {\r\n\r\n    /**\r\n     * Choose which fields to return\r\n     *\r\n     * @param selects One or more fields to return\r\n     */\r\n    select(...selects: string[]): this;\r\n\r\n    /**\r\n     * Expands fields such as lookups to get additional data\r\n     *\r\n     * @param expands The Fields for which to expand the values\r\n     */\r\n    expand(...expands: string[]): this;\r\n\r\n    defaultAction(options?: IFetchOptions): Promise<GetType>;\r\n\r\n    /**\r\n     * Gets the full url with query information\r\n     *\r\n     */\r\n    toUrlAndQuery(): string;\r\n\r\n}\r\nexport interface _GraphQueryable extends IInvokable { }\r\nexport const GraphQueryable = graphInvokableFactory<IGraphQueryable>(_GraphQueryable);\r\n\r\n/**\r\n * Represents a REST collection which can be filtered, paged, and selected\r\n *\r\n */\r\nexport class _GraphQueryableCollection<GetType = any[]> extends _GraphQueryable<GetType> implements IGraphQueryableCollection<GetType> {\r\n\r\n    /**\r\n     *\r\n     * @param filter The string representing the filter query\r\n     */\r\n    public filter(filter: string): this {\r\n        this.query.set(\"$filter\", filter);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Orders based on the supplied fields\r\n     *\r\n     * @param orderby The name of the field on which to sort\r\n     * @param ascending If false DESC is appended, otherwise ASC (default)\r\n     */\r\n    public orderBy(orderBy: string, ascending = true): this {\r\n        const o = \"$orderby\";\r\n        const query = this.query.has(o) ? this.query.get(o).split(\",\") : [];\r\n        query.push(`${orderBy} ${ascending ? \"asc\" : \"desc\"}`);\r\n        this.query.set(o, query.join(\",\"));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Limits the query to only return the specified number of items\r\n     *\r\n     * @param top The query row limit\r\n     */\r\n    public top(top: number): this {\r\n        this.query.set(\"$top\", top.toString());\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Skips a set number of items in the return set\r\n     *\r\n     * @param num Number of items to skip\r\n     */\r\n    public skip(num: number): this {\r\n        this.query.set(\"$skip\", num.toString());\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * \tTo request second and subsequent pages of Graph data\r\n     */\r\n    public skipToken(token: string): this {\r\n        this.query.set(\"$skiptoken\", token);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * \tRetrieves the total count of matching resources\r\n     */\r\n    public get count(): this {\r\n        this.query.set(\"$count\", \"true\");\r\n        return this;\r\n    }\r\n}\r\n\r\nexport interface IGraphQueryableCollection<GetType = any[]> extends IInvokable, IGraphQueryable<GetType> {\r\n\r\n    /**\r\n     * \tRetrieves the total count of matching resources\r\n     */\r\n    count: this;\r\n\r\n    /**\r\n     *\r\n     * @param filter The string representing the filter query\r\n     */\r\n    filter(filter: string): this;\r\n\r\n    /**\r\n     * Orders based on the supplied fields\r\n     *\r\n     * @param orderby The name of the field on which to sort\r\n     * @param ascending If false DESC is appended, otherwise ASC (default)\r\n     */\r\n    orderBy(orderBy: string, ascending?: boolean): this;\r\n\r\n    /**\r\n     * Limits the query to only return the specified number of items\r\n     *\r\n     * @param top The query row limit\r\n     */\r\n    top(top: number): this;\r\n\r\n    /**\r\n     * Skips a set number of items in the return set\r\n     *\r\n     * @param num Number of items to skip\r\n     */\r\n    skip(num: number): this;\r\n\r\n    /**\r\n     * \tTo request second and subsequent pages of Graph data\r\n     */\r\n    skipToken(token: string): this;\r\n}\r\nexport interface _GraphQueryableCollection extends IInvokable { }\r\nexport const GraphQueryableCollection = graphInvokableFactory<IGraphQueryableCollection>(_GraphQueryableCollection);\r\n\r\nexport class _GraphQueryableSearchableCollection extends _GraphQueryableCollection implements IGraphQueryableSearchableCollection {\r\n\r\n    /**\r\n     * \tTo request second and subsequent pages of Graph data\r\n     */\r\n    public search(query: string): this {\r\n        this.query.set(\"$search\", query);\r\n        return this;\r\n    }\r\n}\r\n\r\nexport interface IGraphQueryableSearchableCollection<GetType = any> extends IInvokable, IGraphQueryable<GetType> {\r\n    search(query: string): this;\r\n}\r\nexport interface _GraphQueryableSearchableCollection extends IInvokable { }\r\nexport const GraphQueryableSearchableCollection = graphInvokableFactory<IGraphQueryableSearchableCollection>(_GraphQueryableSearchableCollection);\r\n\r\n\r\n/**\r\n * Represents an instance that can be selected\r\n *\r\n */\r\nexport class _GraphQueryableInstance<GetType = any> extends _GraphQueryable<GetType> { }\r\n\r\nexport interface IGraphQueryableInstance<GetType = any> extends IInvokable, IGraphQueryable<GetType> { }\r\nexport interface _GraphQueryableInstance extends IInvokable { }\r\nexport const GraphQueryableInstance = graphInvokableFactory<IGraphQueryableInstance>(_GraphQueryableInstance);\r\n","import { assign, ITypedHash } from \"@pnp/common\";\r\nimport { body, headers } from \"@pnp/odata\";\r\nimport {\r\n    _SharePointQueryableInstance,\r\n    SharePointQueryableCollection,\r\n    _SharePointQueryableCollection,\r\n    ISharePointQueryableCollection,\r\n    ISharePointQueryableInstance,\r\n    spInvokableFactory,\r\n    SharePointQueryableInstance,\r\n    deleteable,\r\n    IDeleteable,\r\n} from \"../sharepointqueryable\";\r\nimport { defaultPath } from \"../decorators\";\r\nimport { IChangeQuery } from \"../types\";\r\nimport { odataUrlFrom } from \"../odata\";\r\nimport { SPBatch } from \"../batch\";\r\nimport { metadata } from \"../utils/metadata\";\r\nimport { Site, IOpenWebByIdResult } from \"../sites\";\r\nimport { spPost, spGet } from \"../operations\";\r\nimport { escapeQueryStrValue } from \"../utils/escapeQueryStrValue\";\r\nimport { tag } from \"../telemetry\";\r\n\r\n@defaultPath(\"webs\")\r\nexport class _Webs extends _SharePointQueryableCollection<IWebInfo[]> {\r\n\r\n    /**\r\n     * Adds a new web to the collection\r\n     *\r\n     * @param title The new web's title\r\n     * @param url The new web's relative url\r\n     * @param description The new web's description\r\n     * @param template The new web's template internal name (default = STS)\r\n     * @param language The locale id that specifies the new web's language (default = 1033 [English, US])\r\n     * @param inheritPermissions When true, permissions will be inherited from the new web's parent (default = true)\r\n     */\r\n    @tag(\"ws.add\")\r\n    public async add(title: string, url: string, description = \"\", template = \"STS\", language = 1033, inheritPermissions = true): Promise<IWebAddResult> {\r\n\r\n        const postBody = body({\r\n            \"parameters\":\r\n                assign(metadata(\"SP.WebCreationInformation\"),\r\n                    {\r\n                        Description: description,\r\n                        Language: language,\r\n                        Title: title,\r\n                        Url: url,\r\n                        UseSamePermissionsAsParentSite: inheritPermissions,\r\n                        WebTemplate: template,\r\n                    }),\r\n        });\r\n\r\n        const data = await spPost(this.clone(Webs, \"add\"), postBody);\r\n\r\n        return {\r\n            data,\r\n            web: Web(odataUrlFrom(data).replace(/_api\\/web\\/?/i, \"\")),\r\n        };\r\n    }\r\n}\r\nexport interface IWebs extends _Webs { }\r\nexport const Webs = spInvokableFactory<IWebs>(_Webs);\r\n\r\n/**\r\n * Describes a web\r\n *\r\n */\r\n@defaultPath(\"_api/web\")\r\nexport class _Web extends _SharePointQueryableInstance<IWebInfo> {\r\n\r\n    public delete = deleteable(\"w\");\r\n\r\n    /**\r\n     * Gets this web's subwebs\r\n     *\r\n     */\r\n    public get webs(): IWebs {\r\n        return Webs(this);\r\n    }\r\n\r\n    /**\r\n     * Gets this web's parent web and data\r\n     *\r\n     */\r\n    @tag(\"w.getParentWeb\")\r\n    public async getParentWeb(): Promise<IOpenWebByIdResult> {\r\n        const { ParentWeb } = await spGet(this.select(\"ParentWeb/Id\").expand(\"ParentWeb\"));\r\n        return ParentWeb ? Site(this.parentUrl).openWebById(ParentWeb.Id) : null;\r\n    }\r\n\r\n    /**\r\n    * Returns a collection of objects that contain metadata about subsites of the current site in which the current user is a member.\r\n    *\r\n    * @param nWebTemplateFilter Specifies the site definition (default = -1)\r\n    * @param nConfigurationFilter A 16-bit integer that specifies the identifier of a configuration (default = -1)\r\n    */\r\n    public getSubwebsFilteredForCurrentUser(nWebTemplateFilter = -1, nConfigurationFilter = -1): IWebs {\r\n        const o = this.clone(Webs, `getSubwebsFilteredForCurrentUser(nWebTemplateFilter=${nWebTemplateFilter},nConfigurationFilter=${nConfigurationFilter})`);\r\n        return tag.configure(o, \"w.getSubwebsFilteredForCurrentUser\");\r\n    }\r\n\r\n    /**\r\n     * Allows access to the web's all properties collection\r\n     */\r\n    public get allProperties(): ISharePointQueryableInstance {\r\n        return tag.configure(this.clone(SharePointQueryableInstance, \"allproperties\"), \"w.allprops\");\r\n    }\r\n\r\n    /**\r\n     * Gets a collection of WebInfos for this web's subwebs\r\n     *\r\n     */\r\n    public get webinfos(): ISharePointQueryableCollection<IWebInfosData[]> {\r\n        return tag.configure(SharePointQueryableCollection(this, \"webinfos\"), \"w.webinfos\");\r\n    }\r\n\r\n    /**\r\n     * Creates a new batch for requests within the context of this web\r\n     *\r\n     */\r\n    public createBatch(): SPBatch {\r\n        return new SPBatch(this.parentUrl);\r\n    }\r\n\r\n    /**\r\n     * Updates this web instance with the supplied properties\r\n     *\r\n     * @param properties A plain object hash of values to update for the web\r\n     */\r\n    @tag(\"w.update\")\r\n    public async update(properties: ITypedHash<any>): Promise<IWebUpdateResult> {\r\n\r\n        const postBody = body(assign(metadata(\"SP.Web\"), properties), headers({ \"X-HTTP-Method\": \"MERGE\" }));\r\n\r\n        const data = await spPost(this, postBody);\r\n\r\n        return { data, web: <any>this };\r\n    }\r\n\r\n    /**\r\n     * Applies the theme specified by the contents of each of the files specified in the arguments to the site\r\n     *\r\n     * @param colorPaletteUrl The server-relative URL of the color palette file\r\n     * @param fontSchemeUrl The server-relative URL of the font scheme\r\n     * @param backgroundImageUrl The server-relative URL of the background image\r\n     * @param shareGenerated When true, the generated theme files are stored in the root site. When false, they are stored in this web\r\n     */\r\n    @tag(\"w.applyTheme\")\r\n    public applyTheme(colorPaletteUrl: string, fontSchemeUrl: string, backgroundImageUrl: string, shareGenerated: boolean): Promise<void> {\r\n\r\n        const postBody = body({\r\n            backgroundImageUrl,\r\n            colorPaletteUrl,\r\n            fontSchemeUrl,\r\n            shareGenerated,\r\n        });\r\n\r\n        return spPost(this.clone(Web, \"applytheme\"), postBody);\r\n    }\r\n\r\n    /**\r\n     * Applies the specified site definition or site template to the Web site that has no template applied to it\r\n     *\r\n     * @param template Name of the site definition or the name of the site template\r\n     */\r\n    @tag(\"w.applyWebTemplate\")\r\n    public applyWebTemplate(template: string): Promise<void> {\r\n\r\n        const q = this.clone(Web, \"applywebtemplate\");\r\n        q.concat(`(webTemplate='${escapeQueryStrValue(template)}')`);\r\n        return spPost(q);\r\n    }\r\n\r\n    /**\r\n     * Returns a collection of site templates available for the site\r\n     *\r\n     * @param language The locale id of the site templates to retrieve (default = 1033 [English, US])\r\n     * @param includeCrossLanguage When true, includes language-neutral site templates; otherwise false (default = true)\r\n     */\r\n    public availableWebTemplates(language = 1033, includeCrossLanugage = true): ISharePointQueryableCollection {\r\n        const path = `getavailablewebtemplates(lcid=${language}, doincludecrosslanguage=${includeCrossLanugage})`;\r\n        return tag.configure(SharePointQueryableCollection(this, path), \"w.availableWebTemplates\");\r\n    }\r\n\r\n    /**\r\n     * Returns the collection of changes from the change log that have occurred within the list, based on the specified query\r\n     *\r\n     * @param query The change query\r\n     */\r\n    @tag(\"w.getChanges\")\r\n    public getChanges(query: IChangeQuery): Promise<any> {\r\n        const postBody = body({ \"query\": assign(metadata(\"SP.ChangeQuery\"), query) });\r\n        return spPost(this.clone(Web, \"getchanges\"), postBody);\r\n    }\r\n\r\n    /**\r\n     * Returns the name of the image file for the icon that is used to represent the specified file\r\n     *\r\n     * @param filename The file name. If this parameter is empty, the server returns an empty string\r\n     * @param size The size of the icon: 16x16 pixels = 0, 32x32 pixels = 1 (default = 0)\r\n     * @param progId The ProgID of the application that was used to create the file, in the form OLEServerName.ObjectName\r\n     */\r\n    @tag(\"w.mapToIcon\")\r\n    public mapToIcon(filename: string, size = 0, progId = \"\"): Promise<string> {\r\n        return spGet(this.clone(Web, `maptoicon(filename='${escapeQueryStrValue(filename)}', progid='${escapeQueryStrValue(progId)}', size=${size})`));\r\n    }\r\n\r\n    /**\r\n     * Returns the tenant property corresponding to the specified key in the app catalog site\r\n     *\r\n     * @param key Id of storage entity to be set\r\n     */\r\n    @tag(\"w.getStorageEntity\")\r\n    public getStorageEntity(key: string): Promise<IStorageEntity> {\r\n        return spGet(this.clone(Web, `getStorageEntity('${escapeQueryStrValue(key)}')`));\r\n    }\r\n\r\n    /**\r\n     * This will set the storage entity identified by the given key (MUST be called in the context of the app catalog)\r\n     *\r\n     * @param key Id of storage entity to be set\r\n     * @param value Value of storage entity to be set\r\n     * @param description Description of storage entity to be set\r\n     * @param comments Comments of storage entity to be set\r\n     */\r\n    @tag(\"w.setStorageEntity\")\r\n    public setStorageEntity(key: string, value: string, description = \"\", comments = \"\"): Promise<void> {\r\n        return spPost(this.clone(Web, `setStorageEntity`), body({\r\n            comments,\r\n            description,\r\n            key,\r\n            value,\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * This will remove the storage entity identified by the given key\r\n     *\r\n     * @param key Id of storage entity to be removed\r\n     */\r\n    @tag(\"w.removeStorageEntity\")\r\n    public removeStorageEntity(key: string): Promise<void> {\r\n        return spPost(this.clone(Web, `removeStorageEntity('${escapeQueryStrValue(key)}')`));\r\n    }\r\n}\r\nexport interface IWeb extends _Web, IDeleteable { }\r\nexport const Web = spInvokableFactory<IWeb>(_Web);\r\n\r\n/**\r\n * Result from adding a web\r\n *\r\n */\r\nexport interface IWebAddResult {\r\n    data: IWebInfo;\r\n    web: IWeb;\r\n}\r\n\r\n/**\r\n * Result from updating a web\r\n *\r\n */\r\nexport interface IWebUpdateResult {\r\n    data: any;\r\n    web: IWeb;\r\n}\r\n\r\nexport interface IWebInfosData {\r\n    Configuration: number;\r\n    Created: string;\r\n    Description: string;\r\n    Id: string;\r\n    Language: number;\r\n    LastItemModifiedDate: string;\r\n    LastItemUserModifiedDate: string;\r\n    ServerRelativeUrl: string;\r\n    Title: string;\r\n    WebTemplate: string;\r\n    WebTemplateId: number;\r\n}\r\n\r\nexport interface IStorageEntity {\r\n    Value: string | null;\r\n    Comment: string | null;\r\n    Description: string | null;\r\n}\r\n\r\nexport interface IWebInfo {\r\n    AlternateCssUrl: string;\r\n    AppInstanceId: string;\r\n    ClassicWelcomePage: string | null;\r\n    Configuration: number;\r\n    Created: string;\r\n    CurrentChangeToken: { StringValue: string; };\r\n    CustomMasterUrl: string;\r\n    Description: string;\r\n    DesignPackageId: string;\r\n    DocumentLibraryCalloutOfficeWebAppPreviewersDisabled: boolean;\r\n    EnableMinimalDownload: boolean;\r\n    FooterEmphasis: number;\r\n    FooterEnabled: boolean;\r\n    FooterLayout: number;\r\n    HeaderEmphasis: number;\r\n    HeaderLayout: number;\r\n    HorizontalQuickLaunch: boolean;\r\n    Id: string;\r\n    IsHomepageModernized: boolean;\r\n    IsMultilingual: boolean;\r\n    IsRevertHomepageLinkHidden: boolean;\r\n    Language: number;\r\n    LastItemModifiedDate: string;\r\n    LastItemUserModifiedDate: string;\r\n    MasterUrl: string;\r\n    MegaMenuEnabled: boolean;\r\n    NavAudienceTargetingEnabled: boolean;\r\n    NoCrawl: boolean;\r\n    ObjectCacheEnabled: boolean;\r\n    OverwriteTranslationsOnChange: boolean;\r\n    QuickLaunchEnabled: boolean;\r\n    RecycleBinEnabled: boolean;\r\n    ResourcePath: { DecodedUrl: string; };\r\n    SearchScope: number;\r\n    ServerRelativeUrl: string;\r\n    SiteLogoUrl: string | null;\r\n    SyndicationEnabled: boolean;\r\n    TenantAdminMembersCanShare: number;\r\n    Title: string;\r\n    TreeViewEnabled: boolean;\r\n    UIVersion: number;\r\n    UIVersionConfigurationEnabled: boolean;\r\n    Url: string;\r\n    WebTemplate: string;\r\n    WelcomePage: string;\r\n}\r\n","/**\r\n * Class Decorators\r\n */\r\n\r\n/**\r\n * Decorator used to specify the default path for SharePointQueryable objects\r\n * \r\n * @param path \r\n */\r\nexport function defaultPath(path: string) {\r\n\r\n    return function <T extends { new(...args: any[]): {} }>(target: T) {\r\n\r\n        return class extends target {\r\n            constructor(...args: any[]) {\r\n                super(args[0], args.length > 1 && args[1] !== undefined ? args[1] : path);\r\n            }\r\n        };\r\n    };\r\n}\r\n\r\n // TODO::?\r\n// performance tracking method decorator\r\n// redirect to graph api\r\n\r\n\r\n\r\n\r\n","import { IFetchOptions, mergeOptions, objectDefinedNotNull } from \"@pnp/common\";\r\nimport { defaultPipelineBinder, cloneQueryableData, IOperation } from \"@pnp/odata\";\r\nimport { GraphHttpClient } from \"./graphhttpclient\";\r\nimport { IGraphQueryable } from \"./graphqueryable\";\r\n\r\nconst graphClientBinder = defaultPipelineBinder(() => new GraphHttpClient());\r\n\r\nconst send = <T>(operation: IOperation): (o: IGraphQueryable<T>, options?: IFetchOptions) => Promise<T> => {\r\n\r\n    return async function <R = T>(o: IGraphQueryable<R>, options?: IFetchOptions): Promise<R> {\r\n\r\n        const data = cloneQueryableData(o.data);\r\n        const batchDependency = objectDefinedNotNull(data.batch) ? data.batch.addDependency() : () => { return; };\r\n        const url = o.toUrlAndQuery();\r\n\r\n        mergeOptions(data.options, options);\r\n\r\n        return operation(Object.assign({}, data, {\r\n            batchDependency,\r\n            url,\r\n        }));\r\n    };\r\n};\r\n\r\nexport const graphGet = <T = any>(o: IGraphQueryable<any>, options?: IFetchOptions): Promise<T> => send<T>(graphClientBinder(\"GET\"))(o, options);\r\n\r\nexport const graphPost = <T = any>(o: IGraphQueryable<any>, options?: IFetchOptions): Promise<T> => send<T>(graphClientBinder(\"POST\"))(o, options);\r\n\r\nexport const graphDelete = <T = any>(o: IGraphQueryable<any>, options?: IFetchOptions): Promise<T> => send<T>(graphClientBinder(\"DELETE\"))(o, options);\r\n\r\nexport const graphPatch = <T = any>(o: IGraphQueryable<any>, options?: IFetchOptions): Promise<T> => send<T>(graphClientBinder(\"PATCH\"))(o, options);\r\n\r\nexport const graphPut = <T = any>(o: IGraphQueryable<any>, options?: IFetchOptions): Promise<T> => send<T>(graphClientBinder(\"PUT\"))(o, options);\r\n","export function metadata(type: string) {\r\n    return {\r\n        \"__metadata\": { \"type\": type },\r\n    };\r\n}\r\n","import { assign, hOP, isArray, objectDefinedNotNull } from \"@pnp/common\";\r\nimport { body, headers } from \"@pnp/odata\";\r\nimport {\r\n    SharePointQueryable,\r\n    SharePointQueryableCollection,\r\n    ISharePointQueryableCollection,\r\n    _SharePointQueryableInstance,\r\n    _SharePointQueryableCollection,\r\n    ISharePointQueryable,\r\n    spInvokableFactory,\r\n    deleteableWithETag,\r\n    IDeleteableWithETag,\r\n} from \"../sharepointqueryable\";\r\nimport { IChangeQuery } from \"../types\";\r\nimport { odataUrlFrom } from \"../odata\";\r\nimport { metadata } from \"../utils/metadata\";\r\nimport { defaultPath } from \"../decorators\";\r\nimport { spPost } from \"../operations\";\r\nimport { escapeQueryStrValue } from \"../utils/escapeQueryStrValue\";\r\nimport { tag } from \"../telemetry\";\r\nimport { IBasePermissions } from \"../security/types\";\r\nimport { IFieldInfo } from \"../fields/types\";\r\nimport { IFormInfo } from \"../forms/types\";\r\nimport { IFolderInfo } from \"../folders/types\";\r\nimport { IViewInfo } from \"../views/types\";\r\nimport { IUserCustomActionInfo } from \"../user-custom-actions/types\";\r\nimport { toResourcePath } from \"../utils/toResourcePath\";\r\n\r\n@defaultPath(\"lists\")\r\nexport class _Lists extends _SharePointQueryableCollection<IListInfo[]> {\r\n\r\n    /**\r\n     * Gets a list from the collection by guid id\r\n     *\r\n     * @param id The Id of the list (GUID)\r\n     */\r\n    public getById(id: string): IList {\r\n        return tag.configure(List(this).concat(`('${id}')`), \"ls.getById\");\r\n    }\r\n\r\n    /**\r\n     * Gets a list from the collection by title\r\n     *\r\n     * @param title The title of the list\r\n     */\r\n    public getByTitle(title: string): IList {\r\n        return tag.configure(List(this, `getByTitle('${escapeQueryStrValue(title)}')`), \"ls.getByTitle\");\r\n    }\r\n\r\n    /**\r\n     * Adds a new list to the collection\r\n     *\r\n     * @param title The new list's title\r\n     * @param description The new list's description\r\n     * @param template The list template value\r\n     * @param enableContentTypes If true content types will be allowed and enabled, otherwise they will be disallowed and not enabled\r\n     * @param additionalSettings Will be passed as part of the list creation body\r\n     */\r\n    @tag(\"ls.add\")\r\n    public async add(title: string, desc = \"\", template = 100, enableContentTypes = false, additionalSettings: Partial<IListInfo> = {}): Promise<IListAddResult> {\r\n\r\n        const addSettings = Object.assign({\r\n            \"AllowContentTypes\": enableContentTypes,\r\n            \"BaseTemplate\": template,\r\n            \"ContentTypesEnabled\": enableContentTypes,\r\n            \"Description\": desc,\r\n            \"Title\": title,\r\n        }, metadata(\"SP.List\"), additionalSettings);\r\n\r\n        const data = await spPost(this, body(addSettings));\r\n\r\n        return { data, list: this.getByTitle(addSettings.Title) };\r\n    }\r\n\r\n    /**\r\n     * Ensures that the specified list exists in the collection (note: this method not supported for batching)\r\n     *\r\n     * @param title The new list's title\r\n     * @param desc The new list's description\r\n     * @param template The list template value\r\n     * @param enableContentTypes If true content types will be allowed and enabled, otherwise they will be disallowed and not enabled\r\n     * @param additionalSettings Will be passed as part of the list creation body or used to update an existing list\r\n     */\r\n    @tag(\"ls.ensure\")\r\n    public async ensure(\r\n        title: string,\r\n        desc = \"\",\r\n        template = 100,\r\n        enableContentTypes = false,\r\n        additionalSettings: Partial<IListInfo> = {}): Promise<IListEnsureResult> {\r\n\r\n        if (this.hasBatch) {\r\n            throw Error(\"The ensure list method is not supported for use in a batch.\");\r\n        }\r\n\r\n        const addOrUpdateSettings = assign(additionalSettings, { Title: title, Description: desc, ContentTypesEnabled: enableContentTypes }, true);\r\n\r\n        const list: IList = this.getByTitle(addOrUpdateSettings.Title);\r\n\r\n        try {\r\n\r\n            // this will throw if the list doesn't exist\r\n            await list.select(\"Title\")();\r\n            const data = await list.update(addOrUpdateSettings).then(r => r.data);\r\n            return { created: false, data, list: this.getByTitle(addOrUpdateSettings.Title) };\r\n\r\n        } catch (e) {\r\n\r\n            const data = await this.add(title, desc, template, enableContentTypes, addOrUpdateSettings).then(r => r.data);\r\n            return { created: true, data, list: this.getByTitle(addOrUpdateSettings.Title) };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a list that is the default asset location for images or other files, which the users upload to their wiki pages.\r\n     */\r\n    @tag(\"ls.ensureSiteAssetsLibrary\")\r\n    public async ensureSiteAssetsLibrary(): Promise<IList> {\r\n        const json = await spPost(this.clone(Lists, \"ensuresiteassetslibrary\"));\r\n        return List(odataUrlFrom(json));\r\n    }\r\n\r\n    /**\r\n     * Gets a list that is the default location for wiki pages.\r\n     */\r\n    @tag(\"ls.ensureSitePagesLibrary\")\r\n    public async ensureSitePagesLibrary(): Promise<IList> {\r\n        const json = await spPost(this.clone(Lists, \"ensuresitepageslibrary\"));\r\n        return List(odataUrlFrom(json));\r\n    }\r\n}\r\nexport interface ILists extends _Lists { }\r\nexport const Lists = spInvokableFactory<ILists>(_Lists);\r\n\r\nexport class _List extends _SharePointQueryableInstance<IListInfo> {\r\n\r\n    public delete = deleteableWithETag(\"l\");\r\n\r\n    /**\r\n     * Gets the effective base permissions of this list\r\n     *\r\n     */\r\n    public get effectiveBasePermissions(): ISharePointQueryable {\r\n        return tag.configure(SharePointQueryable(this, \"EffectiveBasePermissions\"), \"l.effectiveBasePermissions\");\r\n    }\r\n\r\n    /**\r\n     * Gets the event receivers attached to this list\r\n     *\r\n     */\r\n    public get eventReceivers(): ISharePointQueryableCollection {\r\n        return tag.configure(SharePointQueryableCollection(this, \"EventReceivers\"), \"l.eventReceivers\");\r\n    }\r\n\r\n    /**\r\n     * Gets the related fields of this list\r\n     *\r\n     */\r\n    public get relatedFields(): ISharePointQueryable {\r\n        return tag.configure(SharePointQueryable(this, \"getRelatedFields\"), \"l.relatedFields\");\r\n    }\r\n\r\n    /**\r\n     * Gets the IRM settings for this list\r\n     *\r\n     */\r\n    public get informationRightsManagementSettings(): ISharePointQueryable {\r\n        return tag.configure(SharePointQueryable(this, \"InformationRightsManagementSettings\"), \"l.informationRightsManagementSettings\");\r\n    }\r\n\r\n    /**\r\n     * Updates this list intance with the supplied properties\r\n     *\r\n     * @param properties A plain object hash of values to update for the list\r\n     * @param eTag Value used in the IF-Match header, by default \"*\"\r\n     */\r\n    @tag(\"l.update\")\r\n    public async update(properties: Partial<IListInfo>, eTag = \"*\"): Promise<IListUpdateResult> {\r\n\r\n        const postBody = body(assign(metadata(\"SP.List\"), properties), headers({\r\n            \"IF-Match\": eTag,\r\n            \"X-HTTP-Method\": \"MERGE\",\r\n        }));\r\n\r\n        const data = await spPost(this, postBody);\r\n\r\n        let list: any = this;\r\n\r\n        if (hOP(properties, \"Title\")) {\r\n            list = this.getParent(List, this.parentUrl, `getByTitle('${properties.Title}')`);\r\n        }\r\n\r\n        return {\r\n            data,\r\n            list,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Returns the collection of changes from the change log that have occurred within the list, based on the specified query.\r\n     * @param query A query that is performed against the change log.\r\n     */\r\n    @tag(\"l.getChanges\")\r\n    public getChanges(query: IChangeQuery): Promise<any> {\r\n\r\n        return spPost(this.clone(List, \"getchanges\"), body({ query: assign(metadata(\"SP.ChangeQuery\"), query) }));\r\n    }\r\n\r\n    /**\r\n     * Returns the collection of items in the list based on the provided CamlQuery\r\n     * @param query A query that is performed against the list\r\n     * @param expands An expanded array of n items that contains fields to expand in the CamlQuery\r\n     */\r\n    @tag(\"l.CAMLQuery\")\r\n    public getItemsByCAMLQuery(query: ICamlQuery, ...expands: string[]): Promise<any> {\r\n\r\n        const q = this.clone(List, \"getitems\");\r\n        return spPost(q.expand.apply(q, expands), body({ query: assign(metadata(\"SP.CamlQuery\"), query) }));\r\n    }\r\n\r\n    /**\r\n     * See: https://msdn.microsoft.com/en-us/library/office/dn292554.aspx\r\n     * @param query An object that defines the change log item query\r\n     */\r\n    @tag(\"l.ChangesSinceToken\")\r\n    public getListItemChangesSinceToken(query: IChangeLogItemQuery): Promise<string> {\r\n\r\n        const o = this.clone(List, \"getlistitemchangessincetoken\").usingParser({ parse(r: Response) { return r.text(); } });\r\n        return spPost(o, body({ \"query\": assign(metadata(\"SP.ChangeLogItemQuery\"), query) }));\r\n    }\r\n\r\n    /**\r\n     * Moves the list to the Recycle Bin and returns the identifier of the new Recycle Bin item.\r\n     */\r\n    @tag(\"l.recycle\")\r\n    public async recycle(): Promise<string> {\r\n        const data = await spPost(this.clone(List, \"recycle\"));\r\n        return hOP(data, \"Recycle\") ? data.Recycle : data;\r\n    }\r\n\r\n    /**\r\n     * Renders list data based on the view xml provided\r\n     * @param viewXml A string object representing a view xml\r\n     */\r\n    @tag(\"l.renderListData\")\r\n    public async renderListData(viewXml: string): Promise<IRenderListData> {\r\n\r\n        const q = this.clone(List, \"renderlistdata(@viewXml)\");\r\n        q.query.set(\"@viewXml\", `'${viewXml}'`);\r\n        const data = await spPost(q);\r\n\r\n        // data will be a string, so we parse it again\r\n        return JSON.parse(hOP(data, \"RenderListData\") ? data.RenderListData : data);\r\n    }\r\n\r\n    /**\r\n     * Returns the data for the specified query view\r\n     *\r\n     * @param parameters The parameters to be used to render list data as JSON string.\r\n     * @param overrideParameters The parameters that are used to override and extend the regular SPRenderListDataParameters.\r\n     * @param queryParams Allows setting of query parameters\r\n     */\r\n    @tag(\"l.AsStream\")\r\n    public renderListDataAsStream(parameters: IRenderListDataParameters, overrideParameters: any = null, queryParams = new Map<string, string>()): Promise<any> {\r\n\r\n        if (hOP(parameters, \"RenderOptions\") && isArray(parameters.RenderOptions)) {\r\n            parameters.RenderOptions = (<RenderListDataOptions[]>parameters.RenderOptions).reduce((v, c) => v + c);\r\n        }\r\n\r\n        const postBody = body({\r\n            overrideParameters: assign(metadata(\"SP.RenderListDataOverrideParameters\"), overrideParameters),\r\n            parameters: assign(metadata(\"SP.RenderListDataParameters\"), parameters),\r\n        });\r\n\r\n        const clone = this.clone(List, \"RenderListDataAsStream\", true);\r\n\r\n        if (queryParams && queryParams.size > 0) {\r\n            queryParams.forEach((v, k) => clone.query.set(k, v));\r\n        }\r\n\r\n        return spPost(clone, postBody);\r\n    }\r\n\r\n    /**\r\n     * Gets the field values and field schema attributes for a list item.\r\n     * @param itemId Item id of the item to render form data for\r\n     * @param formId The id of the form\r\n     * @param mode Enum representing the control mode of the form (Display, Edit, New)\r\n     */\r\n    @tag(\"l.renderListFormData\")\r\n    public async renderListFormData(itemId: number, formId: string, mode: ControlMode): Promise<IListFormData> {\r\n        const data = await spPost(this.clone(List, `renderlistformdata(itemid=${itemId}, formid='${formId}', mode='${mode}')`));\r\n        // data will be a string, so we parse it again\r\n        return JSON.parse(hOP(data, \"RenderListFormData\") ? data.RenderListFormData : data);\r\n    }\r\n\r\n    /**\r\n     * Reserves a list item ID for idempotent list item creation.\r\n     */\r\n    @tag(\"l.reserveListItemId\")\r\n    public async reserveListItemId(): Promise<number> {\r\n        const data = await spPost(this.clone(List, \"reservelistitemid\"));\r\n        return hOP(data, \"ReserveListItemId\") ? data.ReserveListItemId : data;\r\n    }\r\n\r\n    /**\r\n     * Returns the ListItemEntityTypeFullName for this list, used when adding/updating list items. Does not support batching.\r\n     */\r\n    @tag(\"l.getListItemEntityTypeFullName\")\r\n    public getListItemEntityTypeFullName(): Promise<string> {\r\n        return this.clone(List, null, false).select(\"ListItemEntityTypeFullName\").get<{ ListItemEntityTypeFullName: string }>().then(o => o.ListItemEntityTypeFullName);\r\n    }\r\n\r\n    /**\r\n     * Creates an item using path (in a folder), validates and sets its field values.\r\n     *\r\n     * @param formValues The fields to change and their new values.\r\n     * @param decodedUrl Path decoded url; folder's server relative path.\r\n     * @param bNewDocumentUpdate true if the list item is a document being updated after upload; otherwise false.\r\n     * @param checkInComment Optional check in comment.\r\n     * @param additionalProps Optional set of additional properties LeafName new document file name, \r\n     */\r\n    @tag(\"l.addValidateUpdateItemUsingPath\")\r\n    public async addValidateUpdateItemUsingPath(\r\n        formValues: IListItemFormUpdateValue[],\r\n        decodedUrl: string,\r\n        bNewDocumentUpdate = false,\r\n        checkInComment?: string,\r\n        additionalProps?: {\r\n            /**\r\n             * If creating a document or folder, the name\r\n             */\r\n            leafName?: string,\r\n            /**\r\n             * 0: File, 1: Folder, 2: Web\r\n             */\r\n            objectType?: 0 | 1 | 2,\r\n        },\r\n    ): Promise<IListItemFormUpdateValue[]> {\r\n\r\n        const addProps: any = {\r\n            FolderPath: toResourcePath(decodedUrl),\r\n        };\r\n\r\n        if (objectDefinedNotNull(additionalProps)) {\r\n\r\n            if (additionalProps.leafName) {\r\n                addProps.LeafName = toResourcePath(additionalProps.leafName);\r\n            }\r\n\r\n            if (additionalProps.objectType) {\r\n                addProps.UnderlyingObjectType = additionalProps.objectType;\r\n            }\r\n        }\r\n\r\n        const res = await spPost(this.clone(List, \"AddValidateUpdateItemUsingPath()\"), body({\r\n            bNewDocumentUpdate,\r\n            checkInComment,\r\n            formValues,\r\n            listItemCreateInfo: assign(metadata(\"SP.ListItemCreationInformationUsingPath\"), addProps),\r\n        }));\r\n\r\n        return hOP(res, \"AddValidateUpdateItemUsingPath\") ? res.AddValidateUpdateItemUsingPath : res;\r\n    }\r\n}\r\nexport interface IList extends _List, IDeleteableWithETag { }\r\nexport const List = spInvokableFactory<IList>(_List);\r\n\r\n/**\r\n * Represents the output of the add method\r\n */\r\nexport interface IListAddResult {\r\n    list: IList;\r\n    data: any;\r\n}\r\n\r\n/**\r\n * Represents the output of the update method\r\n */\r\nexport interface IListUpdateResult {\r\n    list: IList;\r\n    data: any;\r\n}\r\n\r\n/**\r\n * Represents the output of the ensure method\r\n */\r\nexport interface IListEnsureResult {\r\n    list: IList;\r\n    created: boolean;\r\n    data: any;\r\n}\r\n\r\n/**\r\n * Specifies a Collaborative Application Markup Language (CAML) query on a list or joined lists.\r\n */\r\nexport interface ICamlQuery {\r\n\r\n    /**\r\n     * Gets or sets a value that indicates whether the query returns dates in Coordinated Universal Time (UTC) format.\r\n     */\r\n    DatesInUtc?: boolean;\r\n\r\n    /**\r\n     * Gets or sets a value that specifies the server relative URL of a list folder from which results will be returned.\r\n     */\r\n    FolderServerRelativeUrl?: string;\r\n\r\n    /**\r\n     * Gets or sets a value that specifies the information required to get the next page of data for the list view.\r\n     */\r\n    ListItemCollectionPosition?: IListItemCollectionPosition;\r\n\r\n    /**\r\n     * Gets or sets value that specifies the XML schema that defines the list view.\r\n     */\r\n    ViewXml?: string;\r\n}\r\n\r\n/**\r\n * Specifies the information required to get the next page of data for a list view.\r\n */\r\nexport interface IListItemCollectionPosition {\r\n    /**\r\n     * Gets or sets a value that specifies information, as name-value pairs, required to get the next page of data for a list view.\r\n     */\r\n    PagingInfo: string;\r\n}\r\n\r\n/**\r\n * Represents the input parameter of the GetListItemChangesSinceToken method.\r\n */\r\nexport interface IChangeLogItemQuery {\r\n    /**\r\n     * The change token for the request.\r\n     */\r\n    ChangeToken?: string;\r\n\r\n    /**\r\n     * The XML element that defines custom filtering for the query.\r\n     */\r\n    Contains?: string;\r\n\r\n    /**\r\n     * The records from the list to return and their return order.\r\n     */\r\n    Query?: string;\r\n\r\n    /**\r\n     * The options for modifying the query.\r\n     */\r\n    QueryOptions?: string;\r\n\r\n    /**\r\n     * RowLimit\r\n     */\r\n    RowLimit?: string;\r\n\r\n    /**\r\n     * The names of the fields to include in the query result.\r\n     */\r\n    ViewFields?: string;\r\n\r\n    /**\r\n     * The GUID of the view.\r\n     */\r\n    ViewName?: string;\r\n}\r\n\r\n/**\r\n * Represents the output parameter of the renderListFormData method.\r\n */\r\nexport interface IListFormData {\r\n    ContentType?: string;\r\n    Title?: string;\r\n    Author?: string;\r\n    Editor?: string;\r\n    Created?: Date;\r\n    Modified: Date;\r\n    Attachments?: any;\r\n    ListSchema?: any;\r\n    FormControlMode?: number;\r\n    FieldControlModes?: {\r\n        Title?: number,\r\n        Author?: number,\r\n        Editor?: number,\r\n        Created?: number,\r\n        Modified?: number,\r\n        Attachments?: number,\r\n    };\r\n    WebAttributes?: {\r\n        WebUrl?: string,\r\n        EffectivePresenceEnabled?: boolean,\r\n        AllowScriptableWebParts?: boolean,\r\n        PermissionCustomizePages?: boolean,\r\n        LCID?: number,\r\n        CurrentUserId?: number,\r\n    };\r\n    ItemAttributes?: {\r\n        Id?: number,\r\n        FsObjType?: number,\r\n        ExternalListItem?: boolean,\r\n        Url?: string,\r\n        EffectiveBasePermissionsLow?: number,\r\n        EffectiveBasePermissionsHigh?: number,\r\n    };\r\n    ListAttributes?: {\r\n        Id?: string,\r\n        BaseType?: number,\r\n        Direction?: string,\r\n        ListTemplateType?: number,\r\n        DefaultItemOpen?: number,\r\n        EnableVersioning?: boolean,\r\n    };\r\n    CSRCustomLayout?: boolean;\r\n    PostBackRequired?: boolean;\r\n    PreviousPostBackHandled?: boolean;\r\n    UploadMode?: boolean;\r\n    SubmitButtonID?: string;\r\n    ItemContentTypeName?: string;\r\n    ItemContentTypeId?: string;\r\n    JSLinks?: string;\r\n}\r\n\r\n/**\r\n * Enum representing the options of the RenderOptions property on IRenderListDataParameters interface\r\n */\r\nexport enum RenderListDataOptions {\r\n    None = 0,\r\n    ContextInfo = 1,\r\n    ListData = 2,\r\n    ListSchema = 4,\r\n    MenuView = 8,\r\n    ListContentType = 16,\r\n    FileSystemItemId = 32,\r\n    ClientFormSchema = 64,\r\n    QuickLaunch = 128,\r\n    Spotlight = 256,\r\n    Visualization = 512,\r\n    ViewMetadata = 1024,\r\n    DisableAutoHyperlink = 2048,\r\n    EnableMediaTAUrls = 4096,\r\n    ParentInfo = 8192,\r\n    PageContextInfo = 16384,\r\n    ClientSideComponentManifest = 32768,\r\n}\r\n/**\r\n * Represents the parameters to be used to render list data as JSON string in the RenderListDataAsStream method of IList.\r\n */\r\nexport interface IRenderListDataParameters {\r\n    AddRequiredFields?: boolean;\r\n    AllowMultipleValueFilterForTaxonomyFields?: boolean;\r\n    AudienceTarget?: boolean;\r\n    DatesInUtc?: boolean;\r\n    DeferredRender?: boolean;\r\n    ExpandGroups?: boolean;\r\n    FirstGroupOnly?: boolean;\r\n    FolderServerRelativeUrl?: string;\r\n    ImageFieldsToTryRewriteToCdnUrls?: string;\r\n    MergeDefaultView?: boolean;\r\n    OriginalDate?: boolean;\r\n    OverrideViewXml?: string;\r\n    Paging?: string;\r\n    ReplaceGroup?: boolean;\r\n    RenderOptions?: RenderListDataOptions[] | number;\r\n    ViewXml?: string;\r\n}\r\n\r\n/**\r\n * Represents properties of a list item field and its value.\r\n */\r\nexport interface IListItemFormUpdateValue {\r\n\r\n    /**\r\n     * The error message result after validating the value for the field.\r\n     */\r\n    ErrorMessage?: string;\r\n\r\n    /**\r\n     * The internal name of the field.\r\n     */\r\n    FieldName?: string;\r\n\r\n    /**\r\n     * The value of the field, in string format.\r\n     */\r\n    FieldValue?: string;\r\n\r\n    /**\r\n     * Indicates whether there was an error result after validating the value for the field.\r\n     */\r\n    HasException?: boolean;\r\n}\r\n\r\n/**\r\n * Represents the output parameter of the renderListData method.\r\n */\r\nexport interface IRenderListData {\r\n    Row: any[];\r\n    FirstRow: number;\r\n    FolderPermissions: string;\r\n    LastRow: number;\r\n    FilterLink: string;\r\n    ForceNoHierarchy: string;\r\n    HierarchyHasIndention: string;\r\n}\r\n\r\n/**\r\n * Determines the display mode of the given control or view\r\n */\r\nexport enum ControlMode {\r\n    Display = 1,\r\n    Edit = 2,\r\n    New = 3,\r\n}\r\n\r\nexport interface IListInfo {\r\n    AllowContentTypes: boolean;\r\n    AllowDeletion: boolean;\r\n    BaseTemplate: number;\r\n    BaseType: any;\r\n    BrowserFileHandling: any;\r\n    ContentTypes: any[];\r\n    ContentTypesEnabled: boolean;\r\n    CrawlNonDefaultViews: boolean;\r\n    CreatablesInfo: any;\r\n    Created: string;\r\n    CurrentChangeToken: any;\r\n    CustomActionElements: any[];\r\n    DataSource: any;\r\n    DefaultContentApprovalWorkflowId: string;\r\n    DefaultDisplayFormUrl: string;\r\n    DefaultEditFormUrl: string;\r\n    DefaultNewFormUrl: string;\r\n    DefaultView: any;\r\n    DefaultViewPath: any;\r\n    DefaultViewUrl: string;\r\n    Description: string;\r\n    DescriptionResource: any;\r\n    Direction: string;\r\n    DocumentTemplateUrl: string;\r\n    DraftVersionVisibility: any;\r\n    EffectiveBasePermissions: IBasePermissions;\r\n    EffectiveBasePermissionsForUI: IBasePermissions;\r\n    EnableAssignToEmail: boolean;\r\n    EnableAttachments: boolean;\r\n    EnableFolderCreation: boolean;\r\n    EnableMinorVersions: boolean;\r\n    EnableModeration: boolean;\r\n    EnableRequestSignOff: boolean;\r\n    EnableVersioning: boolean;\r\n    EntityTypeName: string;\r\n    EventReceivers: any[];\r\n    ExcludeFromOfflineClient: boolean;\r\n    ExemptFromBlockDownloadOfNonViewableFiles: boolean;\r\n    Fields: Partial<IFieldInfo>[];\r\n    FileSavePostProcessingEnabled: boolean;\r\n    ForceCheckout: boolean;\r\n    Forms: IFormInfo[];\r\n    HasExternalDataSource: boolean;\r\n    Hidden: boolean;\r\n    Id: string;\r\n    ImagePath: { DecodedUrl: string; };\r\n    ImageUrl: string;\r\n    InformationRightsManagementSettings: any[];\r\n    IrmEnabled: boolean;\r\n    IrmExpire: boolean;\r\n    IrmReject: boolean;\r\n    IsApplicationList: boolean;\r\n    IsCatalog: boolean;\r\n    IsPrivate: boolean;\r\n    IsSiteAssetsLibrary: boolean;\r\n    IsSystemList: boolean;\r\n    ItemCount: number;\r\n    LastItemDeletedDate: string;\r\n    LastItemModifiedDate: string;\r\n    LastItemUserModifiedDate: string;\r\n    ListExperienceOptions: number;\r\n    ListItemEntityTypeFullName: string;\r\n    MajorVersionLimit: number;\r\n    MajorWithMinorVersionsLimit: number;\r\n    MultipleDataList: boolean;\r\n    NoCrawl: boolean;\r\n    OnQuickLaunch: boolean;\r\n    ParentWebPath: { DecodedUrl: string; };\r\n    ParentWebUrl: string;\r\n    ParserDisabled: boolean;\r\n    ReadSecurity: number;\r\n    RootFolder: IFolderInfo;\r\n    SchemaXml: string;\r\n    ServerTemplateCanCreateFolders: boolean;\r\n    TemplateFeatureId: string;\r\n    Title: string;\r\n    UserCustomActions: IUserCustomActionInfo[];\r\n    ValidationFormula: string;\r\n    ValidationMessage: string;\r\n    Views: IViewInfo[];\r\n    WorkflowAssociations: any[];\r\n    WriteSecurity: number;\r\n}\r\n","import { stringIsNullOrEmpty } from \"@pnp/common\";\r\nimport { LogLevel, Logger } from \"@pnp/logging\";\r\n\r\nexport function escapeQueryStrValue(value: string): string {\r\n\r\n    if (stringIsNullOrEmpty(value)) {\r\n        return \"\";\r\n    }\r\n\r\n    // replace all instance of ' with ''\r\n\r\n    if (/!(@.*?)::(.*?)/ig.test(value)) {\r\n        // to ensure our param aliasing still works we need to treat these special or we'll hear about it\r\n        // so we encode JUST the part that will end up in the url\r\n        return value.replace(/!(@.*?)::(.*)$/ig, (match, labelName, v) => {\r\n            Logger.write(`Rewriting aliased parameter from match ${match} to label: ${labelName} value: ${v}`, LogLevel.Verbose);\r\n            return `!${labelName}::${encodeURIComponent(v.replace(/\\'/ig, \"''\"))}`;\r\n        });\r\n    } else {\r\n        return encodeURIComponent(value.replace(/\\'/ig, \"''\"));\r\n    }\r\n}\r\n","import { stringIsNullOrEmpty } from \"@pnp/common\";\r\n\r\nexport function extractWebUrl(candidateUrl: string): string {\r\n\r\n    if (stringIsNullOrEmpty(candidateUrl)) {\r\n        return \"\";\r\n    }\r\n\r\n    let index = candidateUrl.indexOf(\"_api/\");\r\n\r\n    if (index < 0) {\r\n        index = candidateUrl.indexOf(\"_vti_bin/\");\r\n    }\r\n\r\n    if (index > -1) {\r\n        return candidateUrl.substr(0, index);\r\n    }\r\n\r\n    // if all else fails just give them what they gave us back\r\n    return candidateUrl;\r\n}\r\n","import {\r\n    SharePointQueryable,\r\n    _SharePointQueryableInstance,\r\n    ISharePointQueryableInstance,\r\n    _SharePointQueryableCollection,\r\n    ISharePointQueryable,\r\n    SharePointQueryableInstance,\r\n    spInvokableFactory,\r\n    deleteableWithETag,\r\n    IDeleteableWithETag,\r\n} from \"../sharepointqueryable\";\r\nimport { assign, ITypedHash, hOP } from \"@pnp/common\";\r\nimport { IListItemFormUpdateValue, List } from \"../lists/types\";\r\nimport { ODataParser, body, headers } from \"@pnp/odata\";\r\nimport { IList } from \"../lists\";\r\nimport { Logger, LogLevel } from \"@pnp/logging\";\r\nimport { metadata } from \"../utils/metadata\";\r\nimport { defaultPath } from \"../decorators\";\r\nimport { spPost } from \"../operations\";\r\nimport { tag } from \"../telemetry\";\r\n\r\n/**\r\n * Describes a collection of Item objects\r\n *\r\n */\r\n@defaultPath(\"items\")\r\nexport class _Items extends _SharePointQueryableCollection {\r\n\r\n    /**\t\r\n    * Gets an Item by id\t\r\n    *\t\r\n    * @param id The integer id of the item to retrieve\t\r\n    */\r\n    public getById(id: number): IItem {\r\n        return tag.configure(Item(this).concat(`(${id})`), \"is.getById\");\r\n    }\r\n\r\n    /**\r\n     * Gets BCS Item by string id\r\n     *\r\n     * @param stringId The string id of the BCS item to retrieve\r\n     */\r\n    public getItemByStringId(stringId: string): IItem {\r\n        // creates an item with the parent list path and append out method call\r\n        return tag.configure(Item(this.parentUrl, `getItemByStringId('${stringId}')`), \"is.getItemByStringId\");\r\n    }\r\n\r\n    /**\r\n     * Skips the specified number of items (https://msdn.microsoft.com/en-us/library/office/fp142385.aspx#sectionSection6)\r\n     *\r\n     * @param skip The starting id where the page should start, use with top to specify pages\r\n     * @param reverse It true the PagedPrev=true parameter is added allowing backwards navigation in the collection\r\n     */\r\n    public skip(skip: number, reverse = false): this {\r\n        if (reverse) {\r\n            this.query.set(\"$skiptoken\", encodeURIComponent(`Paged=TRUE&PagedPrev=TRUE&p_ID=${skip}`));\r\n        } else {\r\n            this.query.set(\"$skiptoken\", encodeURIComponent(`Paged=TRUE&p_ID=${skip}`));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets a collection designed to aid in paging through data\r\n     *\r\n     */\r\n    @tag(\"is.getPaged\")\r\n    public getPaged<T = any[]>(): Promise<PagedItemCollection<T>> {\r\n        return this.usingParser(new PagedItemCollectionParser<T>(this))();\r\n    }\r\n\r\n    /**\r\n     * Gets all the items in a list, regardless of count. Does not support batching or caching\r\n     *\r\n     *  @param requestSize Number of items to return in each request (Default: 2000)\r\n     *  @param acceptHeader Allows for setting the value of the Accept header for SP 2013 support\r\n     */\r\n    @tag(\"is.getAll\")\r\n    public getAll(requestSize = 2000, acceptHeader = \"application/json;odata=nometadata\"): Promise<any[]> {\r\n\r\n        Logger.write(\"Calling items.getAll should be done sparingly. Ensure this is the correct choice. If you are unsure, it is not.\", LogLevel.Warning);\r\n\r\n        // this will be used for the actual query\r\n        // and we set no metadata here to try and reduce traffic\r\n        const items = <IItems>Items(this, \"\").top(requestSize).configure({\r\n            headers: {\r\n                \"Accept\": acceptHeader,\r\n            },\r\n        });\r\n\r\n        // let's copy over the odata query params that can be applied\r\n        // $top - allow setting the page size this way (override what we did above)\r\n        // $select - allow picking the return fields (good behavior)\r\n        // $filter - allow setting a filter, though this may fail due for large lists\r\n        this.query.forEach((v: string, k: string) => {\r\n            if (/^\\$select|filter|top|expand$/i.test(k)) {\r\n                items.query.set(k, v);\r\n            }\r\n        });\r\n\r\n        // give back the promise\r\n        return new Promise((resolve, reject) => {\r\n\r\n            // this will eventually hold the items we return\r\n            const itemsCollector: any[] = [];\r\n\r\n            // action that will gather up our results recursively\r\n            const gatherer = (last: PagedItemCollection<any>) => {\r\n\r\n                // collect that set of results\r\n                [].push.apply(itemsCollector, last.results);\r\n\r\n                // if we have more, repeat - otherwise resolve with the collected items\r\n                if (last.hasNext) {\r\n                    last.getNext().then(gatherer).catch(reject);\r\n                } else {\r\n                    resolve(itemsCollector);\r\n                }\r\n            };\r\n\r\n            // start the cycle\r\n            items.getPaged().then(gatherer).catch(reject);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds a new item to the collection\r\n     *\r\n     * @param properties The new items's properties\r\n     * @param listItemEntityTypeFullName The type name of the list's entities\r\n     */\r\n    @tag(\"is.add\")\r\n    public async add(properties: ITypedHash<any> = {}, listItemEntityTypeFullName: string = null): Promise<IItemAddResult> {\r\n\r\n        const removeDependency = this.addBatchDependency();\r\n\r\n        const listItemEntityType = await this.ensureListItemEntityTypeName(listItemEntityTypeFullName);\r\n\r\n        const postBody = body(assign(metadata(listItemEntityType), properties));\r\n\r\n        const promise = spPost<{ Id: number }>(this.clone(Items, \"\"), postBody).then((data) => {\r\n            return {\r\n                data: data,\r\n                item: this.getById(data.Id),\r\n            };\r\n        });\r\n\r\n        removeDependency();\r\n\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * Ensures we have the proper list item entity type name, either from the value provided or from the list\r\n     *\r\n     * @param candidatelistItemEntityTypeFullName The potential type name\r\n     */\r\n    private ensureListItemEntityTypeName(candidatelistItemEntityTypeFullName: string): Promise<string> {\r\n\r\n        return candidatelistItemEntityTypeFullName ?\r\n            Promise.resolve(candidatelistItemEntityTypeFullName) :\r\n            this.getParent<IList>(List).getListItemEntityTypeFullName();\r\n    }\r\n}\r\nexport interface IItems extends _Items { }\r\nexport const Items = spInvokableFactory<IItems>(_Items);\r\n\r\n/**\r\n * Descrines a single Item instance\r\n *\r\n */\r\nexport class _Item extends _SharePointQueryableInstance {\r\n\r\n    public delete = deleteableWithETag(\"i\");\r\n\r\n    /**\r\n     * Gets the effective base permissions for the item\r\n     *\r\n     */\r\n    public get effectiveBasePermissions(): ISharePointQueryable {\r\n        return tag.configure(SharePointQueryable(this, \"EffectiveBasePermissions\"), \"i.effectiveBasePermissions\");\r\n    }\r\n\r\n    /**\r\n     * Gets the effective base permissions for the item in a UI context\r\n     *\r\n     */\r\n    public get effectiveBasePermissionsForUI(): ISharePointQueryable {\r\n        return tag.configure(SharePointQueryable(this, \"EffectiveBasePermissionsForUI\"), \"i.effectiveBasePermissionsForUI\");\r\n    }\r\n\r\n    /**\r\n     * Gets the field values for this list item in their HTML representation\r\n     *\r\n     */\r\n    public get fieldValuesAsHTML(): ISharePointQueryableInstance {\r\n        return tag.configure(SharePointQueryableInstance(this, \"FieldValuesAsHTML\"), \"i.fvHTML\");\r\n    }\r\n\r\n    /**\r\n     * Gets the field values for this list item in their text representation\r\n     *\r\n     */\r\n    public get fieldValuesAsText(): ISharePointQueryableInstance {\r\n        return tag.configure(SharePointQueryableInstance(this, \"FieldValuesAsText\"), \"i.fvText\");\r\n    }\r\n\r\n    /**\r\n     * Gets the field values for this list item for use in editing controls\r\n     *\r\n     */\r\n    public get fieldValuesForEdit(): ISharePointQueryableInstance {\r\n        return tag.configure(SharePointQueryableInstance(this, \"FieldValuesForEdit\"), \"i.fvEdit\");\r\n    }\r\n\r\n    /**\r\n     * Gets the collection of versions associated with this item\r\n     */\r\n    public get versions(): IItemVersions {\r\n        return tag.configure(ItemVersions(this), \"i.versions\");\r\n    }\r\n\r\n    public get list(): IList {\r\n        return this.getParent<IList>(List, this.parentUrl.substr(0, this.parentUrl.lastIndexOf(\"/\")));\r\n    }\r\n\r\n    /**\r\n     * Updates this list intance with the supplied properties\r\n     *\r\n     * @param properties A plain object hash of values to update for the list\r\n     * @param eTag Value used in the IF-Match header, by default \"*\"\r\n     * @param listItemEntityTypeFullName The type name of the list's entities\r\n     */\r\n    public async update(properties: ITypedHash<any>, eTag = \"*\", listItemEntityTypeFullName: string = null): Promise<IItemUpdateResult> {\r\n\r\n        const removeDependency = this.addBatchDependency();\r\n\r\n        const listItemEntityType = await this.ensureListItemEntityTypeName(listItemEntityTypeFullName);\r\n\r\n        const postBody = body(assign(metadata(listItemEntityType), properties), headers({\r\n            \"IF-Match\": eTag,\r\n            \"X-HTTP-Method\": \"MERGE\",\r\n        }));\r\n\r\n        removeDependency();\r\n\r\n        const poster = tag.configure(this.clone(Item).usingParser(new ItemUpdatedParser()), \"i.update\");\r\n        const data = await spPost(poster, postBody);\r\n\r\n        return {\r\n            data,\r\n            item: this,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Moves the list item to the Recycle Bin and returns the identifier of the new Recycle Bin item.\r\n     */\r\n    @tag(\"i.recycle\")\r\n    public recycle(): Promise<string> {\r\n        return spPost<string>(this.clone(Item, \"recycle\"));\r\n    }\r\n\r\n    /**\r\n     * Gets a string representation of the full URL to the WOPI frame.\r\n     * If there is no associated WOPI application, or no associated action, an empty string is returned.\r\n     *\r\n     * @param action Display mode: 0: view, 1: edit, 2: mobileView, 3: interactivePreview\r\n     */\r\n    @tag(\"i.getWopiFrameUrl\")\r\n    public async getWopiFrameUrl(action = 0): Promise<string> {\r\n        const i = this.clone(Item, \"getWOPIFrameUrl(@action)\");\r\n        i.query.set(\"@action\", <any>action);\r\n\r\n        const data = await spPost(i);\r\n\r\n        // handle verbose mode\r\n        if (hOP(data, \"GetWOPIFrameUrl\")) {\r\n            return data.GetWOPIFrameUrl;\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Validates and sets the values of the specified collection of fields for the list item.\r\n     *\r\n     * @param formValues The fields to change and their new values.\r\n     * @param bNewDocumentUpdate true if the list item is a document being updated after upload; otherwise false.\r\n     */\r\n    @tag(\"i.validateUpdateListItem\")\r\n    public validateUpdateListItem(formValues: IListItemFormUpdateValue[], bNewDocumentUpdate = false): Promise<IListItemFormUpdateValue[]> {\r\n        return spPost(this.clone(Item, \"validateupdatelistitem\"), body({ formValues, bNewDocumentUpdate }));\r\n    }\r\n\r\n    /**\r\n     * Ensures we have the proper list item entity type name, either from the value provided or from the list\r\n     *\r\n     * @param candidatelistItemEntityTypeFullName The potential type name\r\n     */\r\n    private ensureListItemEntityTypeName(candidatelistItemEntityTypeFullName: string): Promise<string> {\r\n\r\n        return candidatelistItemEntityTypeFullName ?\r\n            Promise.resolve(candidatelistItemEntityTypeFullName) :\r\n            this.list.getListItemEntityTypeFullName();\r\n    }\r\n}\r\nexport interface IItem extends _Item, IDeleteableWithETag { }\r\nexport const Item = spInvokableFactory<IItem>(_Item);\r\n\r\n/**\r\n * Describes a collection of Version objects\r\n *\r\n */\r\n@defaultPath(\"versions\")\r\nexport class _ItemVersions extends _SharePointQueryableCollection {\r\n    /**\t\r\n     * Gets a version by id\t\r\n     *\t\r\n     * @param versionId The id of the version to retrieve\t\r\n     */\r\n    public getById(versionId: number): IItemVersion {\r\n        return tag.configure(ItemVersion(this).concat(`(${versionId})`), \"iv.getById\");\r\n    }\r\n}\r\nexport interface IItemVersions extends _ItemVersions { }\r\nexport const ItemVersions = spInvokableFactory<IItemVersions>(_ItemVersions);\r\n\r\n/**\r\n * Describes a single Version instance\r\n *\r\n */\r\nexport class _ItemVersion extends _SharePointQueryableInstance {\r\n    public delete = deleteableWithETag(\"iv\");\r\n}\r\nexport interface IItemVersion extends _ItemVersion, IDeleteableWithETag { }\r\nexport const ItemVersion = spInvokableFactory<IItemVersion>(_ItemVersion);\r\n\r\n/**\r\n * Provides paging functionality for list items\r\n */\r\nexport class PagedItemCollection<T> {\r\n\r\n    constructor(private parent: _Items, private nextUrl: string, public results: T) { }\r\n\r\n    /**\r\n     * If true there are more results available in the set, otherwise there are not\r\n     */\r\n    public get hasNext(): boolean {\r\n        return typeof this.nextUrl === \"string\" && this.nextUrl.length > 0;\r\n    }\r\n\r\n    /**\r\n     * Gets the next set of results, or resolves to null if no results are available\r\n     */\r\n    public getNext(): Promise<PagedItemCollection<T>> {\r\n\r\n        if (this.hasNext) {\r\n            const items = tag.configure(<IItems>Items(this.nextUrl, null).configureFrom(this.parent), \"ip.getNext\");\r\n            return items.getPaged<T>();\r\n        }\r\n\r\n        return new Promise<any>(r => r(null));\r\n    }\r\n}\r\n\r\nclass PagedItemCollectionParser<T = any[]> extends ODataParser<PagedItemCollection<T>> {\r\n\r\n    constructor(private _parent: _Items) {\r\n        super();\r\n    }\r\n\r\n    public parse(r: Response): Promise<PagedItemCollection<T>> {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            if (this.handleError(r, reject)) {\r\n                r.json().then(json => {\r\n                    const nextUrl = hOP(json, \"d\") && hOP(json.d, \"__next\") ? json.d.__next : json[\"odata.nextLink\"];\r\n                    resolve(new PagedItemCollection<T>(this._parent, nextUrl, this.parseODataJSON(json)));\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nclass ItemUpdatedParser extends ODataParser<IItemUpdateResultData> {\r\n    public parse(r: Response): Promise<IItemUpdateResultData> {\r\n\r\n        return new Promise<IItemUpdateResultData>((resolve, reject) => {\r\n\r\n            if (this.handleError(r, reject)) {\r\n                resolve({\r\n                    \"odata.etag\": r.headers.get(\"etag\"),\r\n                });\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport interface IItemAddResult {\r\n    item: IItem;\r\n    data: any;\r\n}\r\n\r\nexport interface IItemUpdateResult {\r\n    item: IItem;\r\n    data: IItemUpdateResultData;\r\n}\r\n\r\nexport interface IItemUpdateResultData {\r\n    \"odata.etag\": string;\r\n}\r\n","/**\r\n * Class used to subscribe ILogListener and log messages throughout an application\r\n *\r\n */\r\nexport class Logger {\r\n\r\n  private static _instance: LoggerImpl;\r\n\r\n  /**\r\n   * Gets or sets the active log level to apply for log filtering\r\n   */\r\n  public static get activeLogLevel(): LogLevel {\r\n    return Logger.instance.activeLogLevel;\r\n  }\r\n\r\n  public static set activeLogLevel(value: LogLevel) {\r\n    Logger.instance.activeLogLevel = value;\r\n  }\r\n\r\n  private static get instance(): LoggerImpl {\r\n    if (Logger._instance === undefined || Logger._instance === null) {\r\n      Logger._instance = new LoggerImpl();\r\n    }\r\n    return Logger._instance;\r\n  }\r\n\r\n  /**\r\n   * Adds ILogListener instances to the set of subscribed listeners\r\n   *\r\n   * @param listeners One or more listeners to subscribe to this log\r\n   */\r\n  public static subscribe(...listeners: ILogListener[]): void {\r\n    listeners.forEach(listener => Logger.instance.subscribe(listener));\r\n  }\r\n\r\n  /**\r\n   * Clears the subscribers collection, returning the collection before modification\r\n   */\r\n  public static clearSubscribers(): ILogListener[] {\r\n    return Logger.instance.clearSubscribers();\r\n  }\r\n\r\n  /**\r\n   * Gets the current subscriber count\r\n   */\r\n  public static get count(): number {\r\n    return Logger.instance.count;\r\n  }\r\n\r\n  /**\r\n   * Writes the supplied string to the subscribed listeners\r\n   *\r\n   * @param message The message to write\r\n   * @param level [Optional] if supplied will be used as the level of the entry (Default: LogLevel.Info)\r\n   */\r\n  public static write(message: string, level: LogLevel = LogLevel.Info) {\r\n    Logger.instance.log({ level: level, message: message });\r\n  }\r\n\r\n  /**\r\n   * Writes the supplied string to the subscribed listeners\r\n   *\r\n   * @param json The json object to stringify and write\r\n   * @param level [Optional] if supplied will be used as the level of the entry (Default: LogLevel.Info)\r\n   */\r\n  public static writeJSON(json: any, level: LogLevel = LogLevel.Info) {\r\n    this.write(JSON.stringify(json), level);\r\n  }\r\n\r\n  /**\r\n   * Logs the supplied entry to the subscribed listeners\r\n   *\r\n   * @param entry The message to log\r\n   */\r\n  public static log(entry: ILogEntry) {\r\n    Logger.instance.log(entry);\r\n  }\r\n\r\n  /**\r\n   * Logs an error object to the subscribed listeners\r\n   * \r\n   * @param err The error object\r\n   */\r\n  public static error(err: Error) {\r\n    Logger.instance.log({ data: err, level: LogLevel.Error, message: err.message });\r\n  }\r\n}\r\n\r\nclass LoggerImpl {\r\n\r\n  constructor(public activeLogLevel: LogLevel = LogLevel.Warning, private subscribers: ILogListener[] = []) { }\r\n\r\n  public subscribe(listener: ILogListener): void {\r\n    this.subscribers.push(listener);\r\n  }\r\n\r\n  public clearSubscribers(): ILogListener[] {\r\n    const s = this.subscribers.slice(0);\r\n    this.subscribers.length = 0;\r\n    return s;\r\n  }\r\n\r\n  public get count(): number {\r\n    return this.subscribers.length;\r\n  }\r\n\r\n  public write(message: string, level: LogLevel = LogLevel.Info) {\r\n    this.log({ level: level, message: message });\r\n  }\r\n\r\n  public log(entry: ILogEntry) {\r\n    if (entry !== undefined && this.activeLogLevel <= entry.level) {\r\n      this.subscribers.map(subscriber => subscriber.log(entry));\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * A set of logging levels\r\n */\r\nexport const enum LogLevel {\r\n  Verbose = 0,\r\n  Info = 1,\r\n  Warning = 2,\r\n  Error = 3,\r\n  Off = 99,\r\n}\r\n\r\n/**\r\n * Interface that defines a log entry\r\n *\r\n */\r\nexport interface ILogEntry {\r\n  /**\r\n   * The main message to be logged\r\n   */\r\n  message: string;\r\n  /**\r\n   * The level of information this message represents\r\n   */\r\n  level: LogLevel;\r\n  /**\r\n   * Any associated data that a given logging listener may choose to log or ignore\r\n   */\r\n  data?: any;\r\n}\r\n\r\n/**\r\n * Interface that defines a log listener\r\n *\r\n */\r\nexport interface ILogListener {\r\n  /**\r\n   * Any associated data that a given logging listener may choose to log or ignore\r\n   *\r\n   * @param entry The information to be logged\r\n   */\r\n  log(entry: ILogEntry): void;\r\n}\r\n","import { ILogEntry, LogLevel, ILogListener } from \"./logger\";\r\n\r\n/**\r\n * Implementation of LogListener which logs to the console\r\n *\r\n */\r\nexport class ConsoleListener implements ILogListener {\r\n\r\n    /**\r\n     * Any associated data that a given logging listener may choose to log or ignore\r\n     *\r\n     * @param entry The information to be logged\r\n     */\r\n    public log(entry: ILogEntry): void {\r\n\r\n        const msg = this.format(entry);\r\n\r\n        switch (entry.level) {\r\n            case LogLevel.Verbose:\r\n            case LogLevel.Info:\r\n                console.log(msg);\r\n                break;\r\n            case LogLevel.Warning:\r\n                console.warn(msg);\r\n                break;\r\n            case LogLevel.Error:\r\n                console.error(msg);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Formats the message\r\n     *\r\n     * @param entry The information to format into a string\r\n     */\r\n    private format(entry: ILogEntry): string {\r\n        const msg = [];\r\n        msg.push(\"Message: \" + entry.message);\r\n        if (entry.data !== undefined) {\r\n            try {\r\n                msg.push(\" Data: \" + JSON.stringify(entry.data));\r\n            } catch (e) {\r\n                msg.push(` Data: Error in stringify of supplied data ${e}`);\r\n            }\r\n        }\r\n\r\n        return msg.join(\"\");\r\n    }\r\n}\r\n\r\n/**\r\n * Implementation of LogListener which logs to the supplied function\r\n *\r\n */\r\nexport class FunctionListener implements ILogListener {\r\n\r\n    /**\r\n     * Creates a new instance of the FunctionListener class\r\n     *\r\n     * @constructor\r\n     * @param  method The method to which any logging data will be passed\r\n     */\r\n    constructor(private method: (entry: ILogEntry) => void) { }\r\n\r\n    /**\r\n     * Any associated data that a given logging listener may choose to log or ignore\r\n     *\r\n     * @param entry The information to be logged\r\n     */\r\n    public log(entry: ILogEntry): void {\r\n        this.method(entry);\r\n    }\r\n}\r\n","import { ISPInvokableFactory } from \"./sharepointqueryable\";\r\nimport { assign, combine, hOP, isUrlAbsolute } from \"@pnp/common\";\r\nimport { Logger, LogLevel } from \"@pnp/logging\";\r\nimport { ODataParser } from \"@pnp/odata\";\r\nimport { extractWebUrl } from \"./utils/extractweburl\";\r\n\r\nexport function odataUrlFrom(candidate: any): string {\r\n\r\n    const parts: string[] = [];\r\n    const s = [\"odata.type\", \"odata.editLink\", \"__metadata\", \"odata.metadata\", \"odata.id\"];\r\n\r\n    if (hOP(candidate, s[0]) && candidate[s[0]] === \"SP.Web\") {\r\n\r\n        // webs return an absolute url in the id\r\n        if (hOP(candidate, s[4])) {\r\n            parts.push(candidate[s[4]]);\r\n        } else if (hOP(candidate, s[2])) {\r\n            // we are dealing with verbose, which has an absolute uri\r\n            parts.push(candidate.__metadata.uri);\r\n        }\r\n\r\n    } else {\r\n\r\n        if (hOP(candidate, s[3]) && hOP(candidate, s[1])) {\r\n            // we are dealign with minimal metadata (default)\r\n\r\n            // some entities return an abosolute url in the editlink while for others it is relative\r\n            // without the _api. This code is meant to handle both situations\r\n            const editLink = isUrlAbsolute(candidate[s[1]]) ? candidate[s[1]].split(\"_api\")[1] : candidate[s[1]];\r\n\r\n            parts.push(extractWebUrl(candidate[s[3]]), \"_api\", editLink);\r\n        } else if (hOP(candidate, s[1])) {\r\n            parts.push(\"_api\", candidate[s[1]]);\r\n        } else if (hOP(candidate, s[2])) {\r\n            // we are dealing with verbose, which has an absolute uri\r\n            parts.push(candidate.__metadata.uri);\r\n        }\r\n    }\r\n\r\n    if (parts.length < 1) {\r\n        Logger.write(\"No uri information found in ODataEntity parsing, chaining will fail for this object.\", LogLevel.Warning);\r\n        return \"\";\r\n    }\r\n\r\n    return combine(...parts);\r\n}\r\n\r\nclass SPODataEntityParserImpl<T, D> extends ODataParser<T & D> {\r\n\r\n    constructor(protected factory: ISPInvokableFactory<any>) {\r\n        super();\r\n    }\r\n\r\n    public hydrate = (d: D) => {\r\n        const o = this.factory(odataUrlFrom(d), null);\r\n        return assign(o, d);\r\n    }\r\n\r\n    public parse(r: Response): Promise<T & D> {\r\n        return super.parse(r).then((d: any) => {\r\n            const o = this.factory(odataUrlFrom(d), null);\r\n            return assign<T, D>(o, d);\r\n        });\r\n    }\r\n}\r\n\r\nclass SPODataEntityArrayParserImpl<T, D> extends ODataParser<(T & D)[]> {\r\n\r\n    constructor(protected factory: ISPInvokableFactory<T>) {\r\n        super();\r\n    }\r\n\r\n    public hydrate = (d: D[]) => {\r\n        return d.map(v => {\r\n            const o = this.factory(odataUrlFrom(v), null);\r\n            return assign(o, v);\r\n        });\r\n    }\r\n\r\n    public parse(r: Response): Promise<(T & D)[]> {\r\n        return super.parse(r).then((d: D[]) => {\r\n            return d.map(v => {\r\n                const o = this.factory(odataUrlFrom(v), null);\r\n                return assign(o, v);\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport function spODataEntity<T, DataType = any>(factory: ISPInvokableFactory<T>): ODataParser<T & DataType> {\r\n    return new SPODataEntityParserImpl<T, DataType>(factory);\r\n}\r\n\r\nexport function spODataEntityArray<T, DataType = any>(factory: ISPInvokableFactory<T>): ODataParser<(T & DataType)[]> {\r\n    return new SPODataEntityArrayParserImpl<T, DataType>(factory);\r\n}\r\n","import { IConfigOptions, ISPFXContext } from \"@pnp/common\";\r\nimport {\r\n    setup as _setup,\r\n    SPConfiguration,\r\n} from \"./splibconfig\";\r\n\r\n/**\r\n * Root of the SharePoint REST module\r\n */\r\nexport class SPRest {\r\n\r\n    /** \r\n     * Creates a new instance of the SPRest class\r\n     * \r\n     * @param options Additional options\r\n     * @param baseUrl A string that should form the base part of the url\r\n     */\r\n    constructor(protected _options: IConfigOptions = {}, protected _baseUrl = \"\") { }\r\n\r\n    /**\r\n     * Configures instance with additional options and baseUrl.\r\n     * Provided configuration used by other objects in a chain\r\n     * \r\n     * @param options Additional options\r\n     * @param baseUrl A string that should form the base part of the url\r\n     */\r\n    public configure(options: IConfigOptions, baseUrl = \"\"): SPRest {\r\n        return new SPRest(options, baseUrl);\r\n    }\r\n\r\n    /**\r\n     * Global SharePoint configuration options\r\n     * \r\n     * @param config The SharePoint configuration to apply\r\n     */\r\n    public setup(config: SPConfiguration | ISPFXContext) {\r\n\r\n        if ((<ISPFXContext>config).pageContext) {\r\n            _setup({\r\n                spfxContext: <ISPFXContext>config,\r\n            });\r\n        } else {\r\n            _setup(<SPConfiguration>config);\r\n        }\r\n    }\r\n}\r\n\r\nexport const sp = new SPRest();\r\n","import { _GraphQueryable } from \"./graphqueryable\";\r\nimport {\r\n    setup as _setup,\r\n    GraphConfiguration,\r\n} from \"./graphlibconfig\";\r\nimport { GraphBatch } from \"./batch\";\r\n\r\nexport class GraphRest extends _GraphQueryable {\r\n\r\n    public createBatch(): GraphBatch {\r\n        return new GraphBatch();\r\n    }\r\n\r\n    public setup(config: GraphConfiguration) {\r\n        _setup(config);\r\n    }\r\n}\r\n\r\nexport let graph = new GraphRest(\"v1.0\");\r\n","import { SharePointQueryable, _SharePointQueryableInstance, spInvokableFactory } from \"../sharepointqueryable\";\r\nimport { defaultPath } from \"../decorators\";\r\nimport { Web, IWeb } from \"../webs/types\";\r\nimport { hOP, assign } from \"@pnp/common\";\r\nimport { body } from \"@pnp/odata\";\r\nimport { odataUrlFrom } from \"../odata\";\r\nimport { spPost } from \"../operations\";\r\nimport { SPBatch } from \"../batch\";\r\nimport { escapeQueryStrValue } from \"../utils/escapeQueryStrValue\";\r\nimport { IChangeQuery } from \"../types\";\r\nimport { tag } from \"../telemetry\";\r\nimport { metadata } from \"../utils/metadata\";\r\nimport { extractWebUrl } from \"../utils/extractweburl\";\r\nimport { emptyGuid } from \"../splibconfig\";\r\n\r\n@defaultPath(\"_api/site\")\r\nexport class _Site extends _SharePointQueryableInstance {\r\n\r\n  /**\r\n  * Gets the root web of the site collection\r\n  *\r\n  */\r\n  public get rootWeb(): IWeb {\r\n    return tag.configure(Web(this, \"rootweb\"), \"si.rootWeb\");\r\n  }\r\n\r\n  /**\r\n   * Gets a Web instance representing the root web of the site collection\r\n   * correctly setup for chaining within the library\r\n   */\r\n  public async getRootWeb(): Promise<IWeb> {\r\n    const web = await this.rootWeb.select(\"Url\")<{ Url: string }>();\r\n    return tag.configure(Web(web.Url), \"si.getRootWeb\");\r\n  }\r\n\r\n  /**\r\n  * Gets the context information for this site collection\r\n  */\r\n  public async getContextInfo(): Promise<IContextInfo> {\r\n\r\n    const q = tag.configure(Site(this.parentUrl, \"_api/contextinfo\"), \"si.getContextInfo\");\r\n    const data = await spPost(q);\r\n\r\n    if (hOP(data, \"GetContextWebInformation\")) {\r\n      const info = data.GetContextWebInformation;\r\n      info.SupportedSchemaVersions = info.SupportedSchemaVersions.results;\r\n      return info;\r\n    } else {\r\n      return data;\r\n    }\r\n  }\r\n\r\n  public createBatch(): SPBatch {\r\n    return new SPBatch(this.parentUrl);\r\n  }\r\n\r\n  /**\r\n  * Deletes the current site\r\n  *\r\n  */\r\n  public async delete(): Promise<void> {\r\n\r\n    const site = await this.clone(Site, \"\").select(\"Id\")<{ Id: string }>();\r\n    const q = tag.configure(Site(this.parentUrl, \"_api/SPSiteManager/Delete\"), \"si.delete\");\r\n    await spPost(q, body({ siteId: site.Id }));\r\n  }\r\n\r\n  /**\r\n   * Gets the document libraries on a site. Static method. (SharePoint Online only)\r\n   *\r\n   * @param absoluteWebUrl The absolute url of the web whose document libraries should be returned\r\n   */\r\n  public async getDocumentLibraries(absoluteWebUrl: string): Promise<IDocumentLibraryInformation[]> {\r\n\r\n    const q = tag.configure(SharePointQueryable(\"\", \"_api/sp.web.getdocumentlibraries(@v)\"), \"si.getDocumentLibraries\");\r\n    q.query.set(\"@v\", `'${escapeQueryStrValue(absoluteWebUrl)}'`);\r\n    const data = await q();\r\n    return hOP(data, \"GetDocumentLibraries\") ? data.GetDocumentLibraries : data;\r\n  }\r\n\r\n  /**\r\n   * Gets the site url from a page url\r\n   *\r\n   * @param absolutePageUrl The absolute url of the page\r\n   */\r\n  public async getWebUrlFromPageUrl(absolutePageUrl: string): Promise<string> {\r\n\r\n    const q = tag.configure(SharePointQueryable(\"\", \"_api/sp.web.getweburlfrompageurl(@v)\"), \"si.getWebUrlFromPageUrl\");\r\n    q.query.set(\"@v\", `'${escapeQueryStrValue(absolutePageUrl)}'`);\r\n    const data = await q();\r\n    return hOP(data, \"GetWebUrlFromPageUrl\") ? data.GetWebUrlFromPageUrl : data;\r\n  }\r\n\r\n  /**\r\n   * Returns the collection of changes from the change log that have occurred within the list, based on the specified query\r\n   *\r\n   * @param query The change query\r\n   */\r\n  @tag(\"si.getChanges\")\r\n  public getChanges(query: IChangeQuery): Promise<any> {\r\n\r\n    const postBody = body({ \"query\": assign(metadata(\"SP.ChangeQuery\"), query) });\r\n    return spPost(this.clone(Web, \"getchanges\"), postBody);\r\n  }\r\n\r\n  /**\r\n  * Opens a web by id (using POST)\r\n  *\r\n  * @param webId The GUID id of the web to open\r\n  */\r\n  @tag(\"si.openWebById\")\r\n  public async openWebById(webId: string): Promise<IOpenWebByIdResult> {\r\n\r\n    const data = await spPost(this.clone(Site, `openWebById('${webId}')`));\r\n    return {\r\n      data,\r\n      web: Web(extractWebUrl(odataUrlFrom(data))),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Creates a Modern communication site.\r\n   * \r\n   * @param title The title of the site to create\r\n   * @param lcid The language to use for the site. If not specified will default to 1033 (English).\r\n   * @param shareByEmailEnabled If set to true, it will enable sharing files via Email. By default it is set to false\r\n   * @param url The fully qualified URL (e.g. https://yourtenant.sharepoint.com/sites/mysitecollection) of the site.\r\n   * @param description The description of the communication site.\r\n   * @param classification The Site classification to use. For instance 'Contoso Classified'. See https://www.youtube.com/watch?v=E-8Z2ggHcS0 for more information\r\n   * @param siteDesignId The Guid of the site design to be used.\r\n   *                     You can use the below default OOTB GUIDs:\r\n   *                     Topic: 00000000-0000-0000-0000-000000000000\r\n   *                     Showcase: 6142d2a0-63a5-4ba0-aede-d9fefca2c767\r\n   *                     Blank: f6cc5403-0d63-442e-96c0-285923709ffc \r\n   * @param hubSiteId The id of the hub site to which the new site should be associated\r\n   * @param owner Optional owner value, required if executing the method in app only mode\r\n   */\r\n  public async createCommunicationSite(\r\n    title: string,\r\n    lcid = 1033,\r\n    shareByEmailEnabled = false,\r\n    url: string,\r\n    description?: string,\r\n    classification?: string,\r\n    siteDesignId?: string,\r\n    hubSiteId?: string,\r\n    owner?: string,\r\n  ): Promise<ISiteCreationResponse> {\r\n\r\n    return this.createCommunicationSiteFromProps({\r\n      Classification: classification,\r\n      Description: description,\r\n      HubSiteId: hubSiteId,\r\n      Lcid: lcid,\r\n      Owner: owner,\r\n      ShareByEmailEnabled: shareByEmailEnabled,\r\n      SiteDesignId: siteDesignId,\r\n      Title: title,\r\n      Url: url,\r\n    });\r\n  }\r\n\r\n  public async createCommunicationSiteFromProps(props: ICreateCommSiteProps): Promise<ISiteCreationResponse> {\r\n\r\n    // handle defaults\r\n    const p = Object.assign({}, {\r\n      Classification: \"\",\r\n      Description: \"\",\r\n      HubSiteId: emptyGuid,\r\n      Lcid: 1033,\r\n      ShareByEmailEnabled: false,\r\n      SiteDesignId: emptyGuid,\r\n      WebTemplate: \"SITEPAGEPUBLISHING#0\",\r\n      WebTemplateExtensionId: emptyGuid,\r\n    }, props);\r\n\r\n    const postBody = body({\r\n      \"request\": assign(metadata(\"Microsoft.SharePoint.Portal.SPSiteCreationRequest\"), p),\r\n    });\r\n\r\n    return spPost(Site(extractWebUrl(this.toUrl()), \"/_api/SPSiteManager/Create\"), postBody);\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param url Site Url that you want to check if exists\r\n   */\r\n  public async exists(url: string): Promise<boolean> {\r\n    const postBody = body({ url });\r\n\r\n    const value = await spPost(Site(extractWebUrl(this.toUrl()), \"/_api/SP.Site.Exists\"), postBody);\r\n\r\n    return value;\r\n  }\r\n\r\n  /**\r\n  * Creates a Modern team site backed by Office 365 group. For use in SP Online only. This will not work with App-only tokens\r\n  * \r\n  * @param displayName The title or display name of the Modern team site to be created\r\n  * @param alias Alias of the underlying Office 365 Group\r\n  * @param isPublic Defines whether the Office 365 Group will be public (default), or private.\r\n  * @param lcid The language to use for the site. If not specified will default to English (1033).\r\n  * @param description The description of the site to be created.\r\n  * @param classification The Site classification to use. For instance 'Contoso Classified'. See https://www.youtube.com/watch?v=E-8Z2ggHcS0 for more information\r\n  * @param owners The Owners of the site to be created     \r\n  */\r\n  public async createModernTeamSite(\r\n    displayName: string,\r\n    alias: string,\r\n    isPublic?: boolean,\r\n    lcid?: number,\r\n    description?: string,\r\n    classification?: string,\r\n    owners?: string[],\r\n    hubSiteId?: string,\r\n    siteDesignId?: string,\r\n  ): Promise<ISiteCreationResponse> {\r\n\r\n    return this.createModernTeamSiteFromProps({\r\n      alias,\r\n      classification,\r\n      description,\r\n      displayName,\r\n      hubSiteId,\r\n      isPublic,\r\n      lcid,\r\n      owners,\r\n      siteDesignId,\r\n    });\r\n  }\r\n\r\n  public async createModernTeamSiteFromProps(props: ICreateTeamSiteProps): Promise<ISiteCreationResponse> {\r\n\r\n    // handle defaults\r\n    const p = Object.assign({}, {\r\n      classification: \"\",\r\n      description: \"\",\r\n      hubSiteId: emptyGuid,\r\n      isPublic: true,\r\n      lcid: 1033,\r\n      owners: [],\r\n    }, props);\r\n\r\n    const postBody = {\r\n      alias: p.alias,\r\n      displayName: p.displayName,\r\n      isPublic: p.isPublic,\r\n      optionalParams: {\r\n        Classification: p.classification,\r\n        CreationOptions: {\r\n          \"results\": [`SPSiteLanguage:${p.lcid}`, `HubSiteId:${p.hubSiteId}`],\r\n        },\r\n        Description: p.description,\r\n        Owners: {\r\n          \"results\": p.owners,\r\n        },\r\n      },\r\n    };\r\n\r\n    if (p.siteDesignId) {\r\n      postBody.optionalParams.CreationOptions.results.push(`implicit_formula_292aa8a00786498a87a5ca52d9f4214a_${p.siteDesignId}`);\r\n    }\r\n\r\n    return spPost(Site(extractWebUrl(this.toUrl()), \"/_api/GroupSiteManager/CreateGroupEx\"), body(postBody));\r\n  }\r\n}\r\nexport interface ISite extends _Site { }\r\nexport const Site = spInvokableFactory<ISite>(_Site);\r\n\r\n/**\r\n * The result of opening a web by id: contains the data returned as well as a chainable web instance\r\n */\r\nexport interface IOpenWebByIdResult {\r\n  data: any;\r\n  web: IWeb;\r\n}\r\n\r\n/**\r\n * This is the interface to expose data i.e. context information of a site\r\n */\r\nexport interface IContextInfo {\r\n  FormDigestTimeoutSeconds?: number;\r\n  FormDigestValue?: number;\r\n  LibraryVersion?: string;\r\n  SiteFullUrl?: string;\r\n  SupportedSchemaVersions?: string[];\r\n  WebFullUrl?: string;\r\n}\r\n\r\n/**\r\n * This is the interface to expose data for Document Library\r\n */\r\nexport interface IDocumentLibraryInformation {\r\n  AbsoluteUrl?: string;\r\n  Modified?: Date;\r\n  ModifiedFriendlyDisplay?: string;\r\n  ServerRelativeUrl?: string;\r\n  Title?: string;\r\n}\r\n\r\nexport interface ICreateCommSiteProps {\r\n  Classification?: string;\r\n  Description?: string;\r\n  HubSiteId?: string;\r\n  Lcid?: number;\r\n  Owner?: string;\r\n  ShareByEmailEnabled?: boolean;\r\n  SiteDesignId?: string;\r\n  Title: string;\r\n  Url: string;\r\n  WebTemplate?: \"SITEPAGEPUBLISHING#0\" | \"STS#3\";\r\n  WebTemplateExtensionId?: string;\r\n}\r\n\r\nexport interface ICreateTeamSiteProps {\r\n  displayName: string;\r\n  alias: string;\r\n  isPublic?: boolean;\r\n  lcid?: number;\r\n  description?: string;\r\n  classification?: string;\r\n  owners?: string[];\r\n  hubSiteId?: string;\r\n  siteDesignId?: string;\r\n}\r\n\r\nexport interface ISiteCreationResponse {\r\n  \"SiteId\": string;\r\n  \"SiteStatus\": 0 | 1 | 2 | 3;\r\n  \"SiteUrl\": string;\r\n}\r\n","import {\r\n    ILibraryConfiguration,\r\n    ITypedHash,\r\n    RuntimeConfig,\r\n    IHttpClientImpl,\r\n    FetchClient,\r\n    objectDefinedNotNull,\r\n} from \"@pnp/common\";\r\n\r\nexport const emptyGuid = \"00000000-0000-0000-0000-000000000000\";\r\n\r\nexport interface SPConfigurationPart {\r\n    sp?: {\r\n        /**\r\n         * Any headers to apply to all requests\r\n         */\r\n        headers?: ITypedHash<string>;\r\n\r\n        /**\r\n         * The base url used for all requests\r\n         */\r\n        baseUrl?: string;\r\n\r\n        /**\r\n         * Defines a factory method used to create fetch clients\r\n         */\r\n        fetchClientFactory?: () => IHttpClientImpl;\r\n    };\r\n}\r\n\r\nexport interface SPConfiguration extends ILibraryConfiguration, SPConfigurationPart { }\r\n\r\nexport function setup(config: SPConfiguration): void {\r\n    RuntimeConfig.assign(config);\r\n}\r\n\r\nexport class SPRuntimeConfigImpl {\r\n\r\n    public get headers(): ITypedHash<string> {\r\n\r\n        const spPart = RuntimeConfig.get(\"sp\");\r\n        if (spPart !== undefined && spPart.headers !== undefined) {\r\n            return spPart.headers;\r\n        }\r\n\r\n        return {};\r\n    }\r\n\r\n    public get baseUrl(): string | null {\r\n\r\n        const spPart = RuntimeConfig.get(\"sp\");\r\n        if (spPart !== undefined && spPart.baseUrl !== undefined) {\r\n            return spPart.baseUrl;\r\n        }\r\n\r\n        if (objectDefinedNotNull(RuntimeConfig.spfxContext)) {\r\n            return RuntimeConfig.spfxContext.pageContext.web.absoluteUrl;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public get fetchClientFactory(): () => IHttpClientImpl {\r\n\r\n        const spPart = RuntimeConfig.get(\"sp\");\r\n        if (spPart !== undefined && spPart.fetchClientFactory !== undefined) {\r\n            return spPart.fetchClientFactory;\r\n        } else {\r\n            return () => new FetchClient();\r\n        }\r\n    }\r\n}\r\n\r\nexport let SPRuntimeConfig = new SPRuntimeConfigImpl();\r\n","import { ITypedHash } from \"./collections\";\r\n\r\n/**\r\n * Gets a callback function which will maintain context across async calls.\r\n * Allows for the calling pattern getCtxCallback(thisobj, method, methodarg1, methodarg2, ...)\r\n *\r\n * @param context The object that will be the 'this' value in the callback\r\n * @param method The method to which we will apply the context and parameters\r\n * @param params Optional, additional arguments to supply to the wrapped method when it is invoked\r\n */\r\nexport function getCtxCallback(context: any, method: Function, ...params: any[]): Function {\r\n    return function () {\r\n        method.apply(context, params);\r\n    };\r\n}\r\n\r\nexport type DateAddInterval = \"year\" | \"quarter\" | \"month\" | \"week\" | \"day\" | \"hour\" | \"minute\" | \"second\";\r\n\r\n/**\r\n * Adds a value to a date\r\n *\r\n * @param date The date to which we will add units, done in local time\r\n * @param interval The name of the interval to add, one of: ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second']\r\n * @param units The amount to add to date of the given interval\r\n *\r\n * http://stackoverflow.com/questions/1197928/how-to-add-30-minutes-to-a-javascript-date-object\r\n */\r\nexport function dateAdd(date: Date, interval: DateAddInterval, units: number): Date | undefined {\r\n    let ret: Date | undefined = new Date(date.toString()); // don't change original date\r\n    switch (interval.toLowerCase()) {\r\n        case \"year\": ret.setFullYear(ret.getFullYear() + units); break;\r\n        case \"quarter\": ret.setMonth(ret.getMonth() + 3 * units); break;\r\n        case \"month\": ret.setMonth(ret.getMonth() + units); break;\r\n        case \"week\": ret.setDate(ret.getDate() + 7 * units); break;\r\n        case \"day\": ret.setDate(ret.getDate() + units); break;\r\n        case \"hour\": ret.setTime(ret.getTime() + units * 3600000); break;\r\n        case \"minute\": ret.setTime(ret.getTime() + units * 60000); break;\r\n        case \"second\": ret.setTime(ret.getTime() + units * 1000); break;\r\n        default: ret = undefined; break;\r\n    }\r\n    return ret;\r\n}\r\n\r\n/**\r\n * Combines an arbitrary set of paths ensuring and normalizes the slashes\r\n *\r\n * @param paths 0 to n path parts to combine\r\n */\r\nexport function combine(...paths: string[]): string {\r\n\r\n    return paths\r\n        .filter(path => !stringIsNullOrEmpty(path))\r\n        .map(path => path.replace(/^[\\\\|\\/]/, \"\").replace(/[\\\\|\\/]$/, \"\"))\r\n        .join(\"/\")\r\n        .replace(/\\\\/g, \"/\");\r\n}\r\n\r\n/**\r\n * Gets a random string of chars length\r\n * \r\n * https://stackoverflow.com/questions/1349404/generate-random-string-characters-in-javascript\r\n *\r\n * @param chars The length of the random string to generate\r\n */\r\nexport function getRandomString(chars: number): string {\r\n    const text = new Array(chars);\r\n    for (let i = 0; i < chars; i++) {\r\n        text[i] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\".charAt(Math.floor(Math.random() * 62));\r\n    }\r\n    return text.join(\"\");\r\n}\r\n\r\n/**\r\n * Gets a random GUID value\r\n *\r\n * http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\r\n */\r\n/* tslint:disable no-bitwise */\r\nexport function getGUID(): string {\r\n    let d = Date.now();\r\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\r\n        const r = (d + Math.random() * 16) % 16 | 0;\r\n        d = Math.floor(d / 16);\r\n        return (c === \"x\" ? r : (r & 0x3 | 0x8)).toString(16);\r\n    });\r\n}\r\n/* tslint:enable */\r\n\r\n/**\r\n * Determines if a given value is a function\r\n *\r\n * @param cf The thing to test for functionness\r\n */\r\nexport function isFunc(f: any): boolean {\r\n    return typeof f === \"function\";\r\n}\r\n\r\n/**\r\n * Determines if an object is both defined and not null\r\n * @param obj Object to test\r\n */\r\nexport function objectDefinedNotNull(obj: any): boolean {\r\n    return typeof obj !== \"undefined\" && obj !== null;\r\n}\r\n\r\n/**\r\n * @returns whether the provided parameter is a JavaScript Array or not.\r\n*/\r\nexport function isArray(array: any): boolean {\r\n\r\n    return Array.isArray ? Array.isArray(array) : array && typeof array.length === \"number\" && array.constructor === Array;\r\n}\r\n\r\n/**\r\n * Provides functionality to extend the given object by doing a shallow copy\r\n *\r\n * @param target The object to which properties will be copied\r\n * @param source The source object from which properties will be copied\r\n * @param noOverwrite If true existing properties on the target are not overwritten from the source\r\n * @param filter If provided allows additional filtering on what properties are copied (propName: string) => boolean\r\n *\r\n */\r\nexport function assign<T extends ITypedHash<any> = any, S extends ITypedHash<any> = any>(target: T, source: S, noOverwrite = false,\r\n    filter: (propName: string) => boolean = () => true): T & S {\r\n\r\n    if (!objectDefinedNotNull(source)) {\r\n        return <T & S>target;\r\n    }\r\n\r\n    // ensure we don't overwrite things we don't want overwritten\r\n    const check: (o: any, i: string) => Boolean = noOverwrite ? (o, i) => !(i in o) : () => true;\r\n\r\n    // final filter we will use\r\n    const f = (v: string) => check(target, v) && filter(v);\r\n\r\n    return Object.getOwnPropertyNames(source)\r\n        .filter(f)\r\n        .reduce((t: any, v: string) => {\r\n            t[v] = source[v];\r\n            return t;\r\n        }, target);\r\n}\r\n\r\n/**\r\n * Determines if a given url is absolute\r\n *\r\n * @param url The url to check to see if it is absolute\r\n */\r\nexport function isUrlAbsolute(url: string): boolean {\r\n    return /^https?:\\/\\/|^\\/\\//i.test(url);\r\n}\r\n\r\n/**\r\n * Determines if a string is null or empty or undefined\r\n *\r\n * @param s The string to test\r\n */\r\nexport function stringIsNullOrEmpty(s: string): boolean {\r\n    return s === undefined || s === null || s.length < 1;\r\n}\r\n\r\n/**\r\n * Ensures guid values are represented consistently as \"ea123463-137d-4ae3-89b8-cf3fc578ca05\"\r\n * \r\n * @param guid The candidate guid\r\n */\r\nexport function sanitizeGuid(guid: string): string {\r\n\r\n    if (stringIsNullOrEmpty(guid)) {\r\n        return guid;\r\n    }\r\n\r\n    const matches = /([0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12})/i.exec(guid);\r\n\r\n    return matches === null ? guid : matches[1];\r\n}\r\n\r\n/**\r\n * Shorthand for JSON.stringify\r\n * \r\n * @param o Any type of object\r\n */\r\nexport function jsS(o: any): string {\r\n    return JSON.stringify(o);\r\n}\r\n\r\n/**\r\n * Shorthand for Object.hasOwnProperty\r\n * \r\n * @param o Object to check for\r\n * @param p Name of the property\r\n */\r\nexport function hOP(o: any, p: string): boolean {\r\n    return Object.hasOwnProperty.call(o, p);\r\n}\r\n\r\n/**\r\n * Generates a ~unique hash code\r\n * \r\n * From: https://stackoverflow.com/questions/6122571/simple-non-secure-hash-function-for-javascript\r\n */\r\n// tslint:disable:no-bitwise\r\nexport function getHashCode(s: string): number {\r\n    let hash = 0;\r\n    if (s.length === 0) {\r\n        return hash;\r\n    }\r\n\r\n    for (let i = 0; i < s.length; i++) {\r\n        const chr = s.charCodeAt(i);\r\n        hash = ((hash << 5) - hash) + chr;\r\n        hash |= 0; // Convert to 32bit integer\r\n    }\r\n    return hash;\r\n}\r\n// tslint:enable:no-bitwise\r\n","export interface IResourcePath {\r\n    DecodedUrl: string;\r\n    __metadata: { type: \"SP.ResourcePath\" };\r\n}\r\n\r\nexport function toResourcePath(url: string): IResourcePath {\r\n    return {\r\n        DecodedUrl: url,\r\n        __metadata: { type: \"SP.ResourcePath\" },\r\n    };\r\n}\r\n","import { BearerTokenFetchClient, IFetchOptions, ISPFXContext, isUrlAbsolute, SPFxAdalClient , getADALResource } from \"@pnp/common\";\r\n// @ts-ignore\r\nimport * as adal from \"adal-angular/dist/adal.min.js\";\r\n\r\n/**\r\n * Azure AD Client for use in the browser\r\n */\r\nexport class AdalClient extends BearerTokenFetchClient {\r\n\r\n    /**\r\n     * Our auth context\r\n     */\r\n    private static _authContext: adal.AuthenticationContext | null = null;\r\n\r\n    /**\r\n     * Callback used by the adal auth system\r\n     */\r\n    private _displayCallback: ((url: string) => void) | null;\r\n\r\n    /**\r\n     * Promise used to ensure the user is logged in\r\n     */\r\n    private _loginPromise: Promise<void> | null;\r\n\r\n    /**\r\n     * Creates a new instance of AdalClient\r\n     * @param clientId Azure App Id\r\n     * @param tenant Office 365 tenant (Ex: {tenant}.onmicrosoft.com)\r\n     * @param redirectUri The redirect url used to authenticate the \r\n     */\r\n    constructor(public clientId: string, public tenant: string, public redirectUri: string) {\r\n        super(null);\r\n        this._displayCallback = null;\r\n        this._loginPromise = null;\r\n    }\r\n\r\n    /**\r\n     * Creates a new AdalClient using the values of the supplied SPFx context (requires SPFx >= 1.6)\r\n     * \r\n     * @param spfxContext Current SPFx context\r\n     * @description Using this method requires that the features described in this article\r\n     * https://docs.microsoft.com/en-us/sharepoint/dev/spfx/use-aadhttpclient are activated in the tenant.\r\n     */\r\n    public static fromSPFxContext(spfxContext: ISPFXContext | any): SPFxAdalClient {\r\n\r\n        return new SPFxAdalClient(spfxContext);\r\n    }\r\n\r\n    /**\r\n     * Conducts the fetch opertation against the AAD secured resource\r\n     * \r\n     * @param url Absolute URL for the request\r\n     * @param options Any fetch options passed to the underlying fetch implementation\r\n     */\r\n    public async fetch(url: string, options: IFetchOptions): Promise<Response> {\r\n\r\n        if (!isUrlAbsolute(url)) {\r\n            throw Error(\"You must supply absolute urls to AdalClient.fetch.\");\r\n        }\r\n\r\n        // the url we are calling is the resource\r\n        const token = await this.getToken(getADALResource(url));\r\n        this.token = token;\r\n        return super.fetch(url, options);\r\n    }\r\n\r\n    /**\r\n     * Gets a token based on the current user\r\n     * \r\n     * @param resource The resource for which we are requesting a token\r\n     */\r\n    public async getToken(resource: string): Promise<string> {\r\n\r\n        await this.ensureAuthContext();\r\n        await this.login();\r\n\r\n        let token = null;\r\n        AdalClient._authContext.acquireToken(resource, (message: string, tok: string) => {\r\n\r\n            if (message) {\r\n                throw Error(message);\r\n            }\r\n\r\n            token = tok;\r\n        });\r\n\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * Ensures we have created and setup the adal AuthenticationContext instance\r\n     */\r\n    private ensureAuthContext(): Promise<void> {\r\n\r\n        return new Promise(resolve => {\r\n\r\n            if (AdalClient._authContext === null) {\r\n                AdalClient._authContext = adal.inject({\r\n                    clientId: this.clientId,\r\n                    displayCall: (url: string) => {\r\n                        if (this._displayCallback) {\r\n                            this._displayCallback(url);\r\n                        }\r\n                    },\r\n                    navigateToLoginRequestUrl: false,\r\n                    redirectUri: this.redirectUri,\r\n                    tenant: this.tenant,\r\n                });\r\n            }\r\n\r\n            resolve();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Ensures the current user is logged in\r\n     */\r\n    private login(): Promise<void> {\r\n\r\n        if (this._loginPromise) {\r\n            return this._loginPromise;\r\n        }\r\n\r\n        this._loginPromise = new Promise((resolve, reject) => {\r\n\r\n            if (AdalClient._authContext.getCachedUser()) {\r\n                return resolve();\r\n            }\r\n\r\n            this._displayCallback = (url: string) => {\r\n\r\n                const popupWindow = window.open(url, \"login\", \"width=483, height=600\");\r\n\r\n                if (!popupWindow) {\r\n                    return reject(Error(\"Could not open pop-up window for auth. Likely pop-ups are blocked by the browser.\"));\r\n                }\r\n\r\n                if (popupWindow && popupWindow.focus) {\r\n                    popupWindow.focus();\r\n                }\r\n\r\n                const pollTimer = window.setInterval(() => {\r\n\r\n                    if (!popupWindow || popupWindow.closed || popupWindow.closed === undefined) {\r\n                        window.clearInterval(pollTimer);\r\n                    }\r\n\r\n                    try {\r\n                        if (popupWindow.document.URL.indexOf(this.redirectUri) !== -1) {\r\n                            window.clearInterval(pollTimer);\r\n                            AdalClient._authContext.handleWindowCallback(popupWindow.location.hash);\r\n                            popupWindow.close();\r\n                            resolve();\r\n                        }\r\n                    } catch (e) {\r\n                        reject(e);\r\n                    }\r\n                }, 30);\r\n            };\r\n\r\n            // this triggers the login process\r\n            this.ensureAuthContext().then(_ => {\r\n                (<any>AdalClient._authContext)._loginInProgress = false;\r\n                AdalClient._authContext.login();\r\n                this._displayCallback = null;\r\n            });\r\n        });\r\n\r\n        return this._loginPromise;\r\n    }\r\n}\r\n","import { ILibraryConfiguration, ITypedHash, RuntimeConfig, IHttpClientImpl } from \"@pnp/common\";\r\nimport { AdalClient } from \"@pnp/adaljsclient\";\r\n\r\nexport interface GraphConfigurationPart {\r\n    graph?: {\r\n        /**\r\n         * Any headers to apply to all requests\r\n         */\r\n        headers?: ITypedHash<string>;\r\n\r\n        /**\r\n         * Defines a factory method used to create fetch clients\r\n         */\r\n        fetchClientFactory?: () => IHttpClientImpl;\r\n    };\r\n}\r\n\r\nexport interface GraphConfiguration extends ILibraryConfiguration, GraphConfigurationPart { }\r\n\r\nexport function setup(config: GraphConfiguration): void {\r\n    RuntimeConfig.assign(config);\r\n}\r\n\r\nexport class GraphRuntimeConfigImpl {\r\n\r\n    public get headers(): ITypedHash<string> {\r\n\r\n        const graphPart = RuntimeConfig.get(\"graph\");\r\n        if (graphPart !== undefined && graphPart !== null && graphPart.headers !== undefined) {\r\n            return graphPart.headers;\r\n        }\r\n\r\n        return {};\r\n    }\r\n\r\n    public get fetchClientFactory(): () => IHttpClientImpl {\r\n\r\n        const graphPart = RuntimeConfig.get(\"graph\");\r\n        // use a configured factory firt\r\n        if (graphPart !== undefined && graphPart !== null && graphPart.fetchClientFactory !== undefined) {\r\n            return graphPart.fetchClientFactory;\r\n        }\r\n\r\n        // then try and use spfx context if available\r\n        if (RuntimeConfig.spfxContext !== undefined) {\r\n            return () => AdalClient.fromSPFxContext(RuntimeConfig.spfxContext);\r\n        }\r\n\r\n        throw Error(\"There is no Graph Client available, either set one using configuraiton or provide a valid SPFx Context using setup.\");\r\n    }\r\n}\r\n\r\nexport let GraphRuntimeConfig = new GraphRuntimeConfigImpl();\r\n","import { SPRest } from \"../rest\";\r\nimport { ISite, Site } from \"./types\";\r\n\r\nexport {\r\n    IOpenWebByIdResult,\r\n    ISite,\r\n    Site,\r\n    IContextInfo,\r\n    IDocumentLibraryInformation,\r\n} from \"./types\";\r\n\r\ndeclare module \"../rest\" {\r\n    interface SPRest {\r\n        readonly site: ISite;\r\n    }\r\n}\r\n\r\nReflect.defineProperty(SPRest.prototype, \"site\", {\r\n    configurable: true,\r\n    enumerable: true,\r\n    get: function (this: SPRest) {\r\n        return Site(this._baseUrl).configure(this._options);\r\n    },\r\n});\r\n","import { Web, IWeb } from \"./types\";\r\nimport { SPRest } from \"../rest\";\r\nimport { SPBatch } from \"../batch\";\r\n\r\nexport {\r\n    IWeb,\r\n    IWebs,\r\n    Web,\r\n    IWebAddResult,\r\n    IWebUpdateResult,\r\n    Webs,\r\n    IWebInfo,\r\n    IStorageEntity,\r\n    IWebInfosData,\r\n} from \"./types\";\r\n\r\ndeclare module \"../rest\" {\r\n    interface SPRest {\r\n\r\n        /**\r\n         * Access to the current web instance\r\n         */\r\n        readonly web: IWeb;\r\n\r\n        /**\r\n         * Creates a new batch object for use with the SharePointQueryable.addToBatch method\r\n         *\r\n         */\r\n        createBatch(): SPBatch;\r\n    }\r\n}\r\n\r\nReflect.defineProperty(SPRest.prototype, \"web\", {\r\n    configurable: true,\r\n    enumerable: true,\r\n    get: function (this: SPRest) {\r\n        return Web(this._baseUrl).configure(this._options);\r\n    },\r\n});\r\n\r\nSPRest.prototype.createBatch = function (this: SPRest): SPBatch {\r\n    return this.web.createBatch();\r\n};\r\n","import {\r\n    assign,\r\n    mergeHeaders,\r\n    IFetchOptions,\r\n    IRequestClient,\r\n    getCtxCallback,\r\n    IHttpClientImpl,\r\n    combine,\r\n    dateAdd,\r\n} from \"@pnp/common\";\r\nimport { SPRuntimeConfig } from \"./splibconfig\";\r\nimport { extractWebUrl } from \"./utils/extractweburl\";\r\nimport { tag } from \"./telemetry\";\r\nimport { ODataParser } from \"@pnp/odata\";\r\n\r\nexport class SPHttpClient implements IRequestClient {\r\n\r\n    private _digestCache: IGetDigest;\r\n\r\n    constructor(private _impl: IHttpClientImpl = SPRuntimeConfig.fetchClientFactory()) {\r\n        this._digestCache = getDigestFactory(this);\r\n    }\r\n\r\n    public async fetch(url: string, options: IFetchOptions = {}): Promise<Response> {\r\n\r\n        let opts = assign(options, { cache: \"no-cache\", credentials: \"same-origin\" }, true);\r\n\r\n        const headers = new Headers();\r\n\r\n        // first we add the global headers so they can be overwritten by any passed in locally to this call\r\n        mergeHeaders(headers, SPRuntimeConfig.headers);\r\n\r\n        // second we add the local options so we can overwrite the globals\r\n        mergeHeaders(headers, options.headers);\r\n\r\n        // lastly we apply any default headers we need that may not exist\r\n        if (!headers.has(\"Accept\")) {\r\n            headers.append(\"Accept\", \"application/json\");\r\n        }\r\n\r\n        if (!headers.has(\"Content-Type\")) {\r\n            headers.append(\"Content-Type\", \"application/json;odata=verbose;charset=utf-8\");\r\n        }\r\n\r\n        if (!headers.has(\"X-ClientService-ClientTag\")) {\r\n\r\n            const methodName = tag.getClientTag(headers);\r\n            let clientTag = `PnPCoreJS:$$Version$$:${methodName}`;\r\n\r\n            if (clientTag.length > 32) {\r\n                clientTag = clientTag.substr(0, 32);\r\n            }\r\n\r\n            headers.append(\"X-ClientService-ClientTag\", clientTag);\r\n        }\r\n\r\n        opts = assign(opts, { headers: headers });\r\n\r\n        // if we have either a request digest or an authorization header we don't need a digest\r\n        if (opts.method && opts.method.toUpperCase() !== \"GET\" && !headers.has(\"X-RequestDigest\") && !headers.has(\"Authorization\")) {\r\n\r\n            const digest = await this._digestCache(extractWebUrl(url));\r\n            headers.append(\"X-RequestDigest\", digest);\r\n        }\r\n\r\n        return this.fetchRaw(url, opts);\r\n    }\r\n\r\n    public fetchRaw(url: string, options: IFetchOptions = {}): Promise<Response> {\r\n\r\n        // here we need to normalize the headers\r\n        const rawHeaders = new Headers();\r\n        mergeHeaders(rawHeaders, options.headers);\r\n        options = assign(options, { headers: rawHeaders });\r\n\r\n        const retry = (ctx: IRetryContext): void => {\r\n\r\n            // handles setting the proper timeout for a retry\r\n            const setRetry = (response: Response) => {\r\n                let delay: number;\r\n\r\n                if (response.headers.has(\"Retry-After\")) {\r\n                    // if we have gotten a header, use that value as the delay value in seconds\r\n                    delay = parseInt(response.headers.get(\"Retry-After\"), 10) * 1000;\r\n                } else {\r\n                    // grab our current delay\r\n                    delay = ctx.delay;\r\n\r\n                    // Increment our counters.\r\n                    ctx.delay *= 2;\r\n                }\r\n\r\n                ctx.attempts++;\r\n\r\n                // If we have exceeded the retry count, reject.\r\n                if (ctx.retryCount <= ctx.attempts) {\r\n                    ctx.reject(Error(`Retry count exceeded (${ctx.retryCount}) for request. Response status: [${response.status}] ${response.statusText}`));\r\n                } else {\r\n                    // Set our retry timeout for {delay} milliseconds.\r\n                    setTimeout(getCtxCallback(this, retry, ctx), delay);\r\n                }\r\n            };\r\n\r\n            // send the actual request\r\n            this._impl.fetch(url, options).then((response) => {\r\n\r\n                if (response.status === 429) {\r\n                    // we have been throttled\r\n                    setRetry(response);\r\n                } else {\r\n                    ctx.resolve(response);\r\n                }\r\n\r\n            }).catch((response: Response) => {\r\n\r\n                if (response.status === 503 || response.status === 504) {\r\n                    // http status code 503 or 504, we can retry this\r\n                    setRetry(response);\r\n                } else {\r\n                    ctx.reject(response);\r\n                }\r\n            });\r\n        };\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            retry.call(this, <IRetryContext>{\r\n                attempts: 0,\r\n                delay: 100,\r\n                reject: reject,\r\n                resolve: resolve,\r\n                retryCount: 7,\r\n            });\r\n        });\r\n    }\r\n\r\n    public get(url: string, options: IFetchOptions = {}): Promise<Response> {\r\n        const opts = assign(options, { method: \"GET\" });\r\n        return this.fetch(url, opts);\r\n    }\r\n\r\n    public post(url: string, options: IFetchOptions = {}): Promise<Response> {\r\n        const opts = assign(options, { method: \"POST\" });\r\n        return this.fetch(url, opts);\r\n    }\r\n\r\n    public patch(url: string, options: IFetchOptions = {}): Promise<Response> {\r\n        const opts = assign(options, { method: \"PATCH\" });\r\n        return this.fetch(url, opts);\r\n    }\r\n\r\n    public delete(url: string, options: IFetchOptions = {}): Promise<Response> {\r\n        const opts = assign(options, { method: \"DELETE\" });\r\n        return this.fetch(url, opts);\r\n    }\r\n}\r\n\r\ninterface IRetryContext {\r\n    attempts: number;\r\n    delay: number;\r\n    reject: (reason?: any) => void;\r\n    resolve: (value?: Response | PromiseLike<Response>) => void;\r\n    retryCount: number;\r\n}\r\n\r\ninterface ICachedDigest {\r\n    expiration: Date;\r\n    value: string;\r\n}\r\n\r\ninterface IGetDigest {\r\n    (webUrl: string): Promise<string>;\r\n}\r\n\r\n// allows for the caching of digests across all HttpClient's which each have their own DigestCache wrapper.\r\nconst digests = new Map<string, ICachedDigest>();\r\n\r\nfunction getDigestFactory(client: SPHttpClient): IGetDigest {\r\n\r\n    return async (webUrl: string) => {\r\n\r\n        const cachedDigest: ICachedDigest = digests.get(webUrl);\r\n\r\n        if (cachedDigest !== undefined) {\r\n            const now = new Date();\r\n            if (now < cachedDigest.expiration) {\r\n                return cachedDigest.value;\r\n            }\r\n        }\r\n\r\n        const url = combine(webUrl, \"/_api/contextinfo\");\r\n\r\n        const headers = {\r\n            \"Accept\": \"application/json;odata=verbose\",\r\n            \"Content-Type\": \"application/json;odata=verbose;charset=utf-8\",\r\n        };\r\n\r\n        const resp = await client.fetchRaw(url, {\r\n            cache: \"no-cache\",\r\n            credentials: \"same-origin\",\r\n            headers: assign(headers, SPRuntimeConfig.headers, true),\r\n            method: \"POST\",\r\n        });\r\n\r\n        const parsed = await (new ODataParser()).parse(resp).then(r => r.GetContextWebInformation);\r\n\r\n        const newCachedDigest: ICachedDigest = {\r\n            expiration: dateAdd(new Date(), \"second\", parsed.FormDigestTimeoutSeconds),\r\n            value: parsed.FormDigestValue,\r\n        };\r\n\r\n        digests.set(webUrl, newCachedDigest);\r\n\r\n        return newCachedDigest.value;\r\n    };\r\n}\r\n","import { combine, isUrlAbsolute, hOP, safeGlobal } from \"@pnp/common\";\r\nimport { SPRuntimeConfig } from \"../splibconfig\";\r\n\r\n/**\r\n * Ensures that a given url is absolute for the current web based on context\r\n *\r\n * @param candidateUrl The url to make absolute\r\n *\r\n */\r\nexport function toAbsoluteUrl(candidateUrl: string): Promise<string> {\r\n\r\n    return new Promise((resolve) => {\r\n\r\n        if (isUrlAbsolute(candidateUrl)) {\r\n            // if we are already absolute, then just return the url\r\n            return resolve(candidateUrl);\r\n        }\r\n\r\n        if (SPRuntimeConfig.baseUrl !== null) {\r\n            // base url specified either with baseUrl of spfxContext config property\r\n            return resolve(combine(SPRuntimeConfig.baseUrl, candidateUrl));\r\n        }\r\n\r\n        if (safeGlobal._spPageContextInfo !== undefined) {\r\n\r\n            // operating in classic pages\r\n            if (hOP(safeGlobal._spPageContextInfo, \"webAbsoluteUrl\")) {\r\n                return resolve(combine(safeGlobal._spPageContextInfo.webAbsoluteUrl, candidateUrl));\r\n            } else if (hOP(safeGlobal._spPageContextInfo, \"webServerRelativeUrl\")) {\r\n                return resolve(combine(safeGlobal._spPageContextInfo.webServerRelativeUrl, candidateUrl));\r\n            }\r\n        }\r\n\r\n        // does window.location exist and have a certain path part in it?\r\n        if (safeGlobal.location !== undefined) {\r\n            const baseUrl = safeGlobal.location.toString().toLowerCase();\r\n            [\"/_layouts/\", \"/siteassets/\"].forEach((s: string) => {\r\n                const index = baseUrl.indexOf(s);\r\n                if (index > 0) {\r\n                    return resolve(combine(baseUrl.substr(0, index), candidateUrl));\r\n                }\r\n            });\r\n        }\r\n\r\n        return resolve(candidateUrl);\r\n    });\r\n}\r\n","import { Batch } from \"@pnp/odata\";\r\nimport { getGUID, isUrlAbsolute, combine, mergeHeaders, hOP } from \"@pnp/common\";\r\nimport { Logger, LogLevel } from \"@pnp/logging\";\r\nimport { SPHttpClient } from \"./sphttpclient\";\r\nimport { SPRuntimeConfig } from \"./splibconfig\";\r\nimport { toAbsoluteUrl } from \"./utils/toabsoluteurl\";\r\n\r\n/**\r\n * Manages a batch of OData operations\r\n */\r\nexport class SPBatch extends Batch {\r\n\r\n    constructor(private baseUrl: string) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Parses the response from a batch request into an array of Response instances\r\n     *\r\n     * @param body Text body of the response from the batch request\r\n     */\r\n    public static ParseResponse(body: string): Response[] {\r\n\r\n        const responses: Response[] = [];\r\n        const header = \"--batchresponse_\";\r\n        // Ex. \"HTTP/1.1 500 Internal Server Error\"\r\n        const statusRegExp = new RegExp(\"^HTTP/[0-9.]+ +([0-9]+) +(.*)\", \"i\");\r\n        const lines = body.split(\"\\n\");\r\n        let state = \"batch\";\r\n        let status: number;\r\n        let statusText: string;\r\n        for (let i = 0; i < lines.length; ++i) {\r\n            const line = lines[i];\r\n            switch (state) {\r\n                case \"batch\":\r\n                    if (line.substr(0, header.length) === header) {\r\n                        state = \"batchHeaders\";\r\n                    } else {\r\n                        if (line.trim() !== \"\") {\r\n                            throw Error(`Invalid response, line ${i}`);\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"batchHeaders\":\r\n                    if (line.trim() === \"\") {\r\n                        state = \"status\";\r\n                    }\r\n                    break;\r\n                case \"status\":\r\n                    const parts = statusRegExp.exec(line);\r\n                    if (parts.length !== 3) {\r\n                        throw Error(`Invalid status, line ${i}`);\r\n                    }\r\n                    status = parseInt(parts[1], 10);\r\n                    statusText = parts[2];\r\n                    state = \"statusHeaders\";\r\n                    break;\r\n                case \"statusHeaders\":\r\n                    if (line.trim() === \"\") {\r\n                        state = \"body\";\r\n                    }\r\n                    break;\r\n                case \"body\":\r\n                    responses.push((status === 204) ? new Response() : new Response(line, { status: status, statusText: statusText }));\r\n                    state = \"batch\";\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (state !== \"status\") {\r\n            throw Error(\"Unexpected end of input\");\r\n        }\r\n\r\n        return responses;\r\n    }\r\n\r\n    protected async executeImpl(): Promise<void> {\r\n\r\n        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Executing batch with ${this.requests.length} requests.`, LogLevel.Info);\r\n\r\n        // if we don't have any requests, don't bother sending anything\r\n        // this could be due to caching further upstream, or just an empty batch\r\n        if (this.requests.length < 1) {\r\n            Logger.write(`Resolving empty batch.`, LogLevel.Info);\r\n            return;\r\n        }\r\n\r\n        // creating the client here allows the url to be populated for nodejs client as well as potentially\r\n        // any other hacks needed for other types of clients. Essentially allows the absoluteRequestUrl\r\n        // below to be correct\r\n        const client = new SPHttpClient();\r\n\r\n        // due to timing we need to get the absolute url here so we can use it for all the individual requests\r\n        // and for sending the entire batch\r\n        const absoluteRequestUrl = await toAbsoluteUrl(this.baseUrl);\r\n\r\n        // build all the requests, send them, pipe results in order to parsers\r\n        const batchBody: string[] = [];\r\n\r\n        let currentChangeSetId = \"\";\r\n\r\n        for (let i = 0; i < this.requests.length; i++) {\r\n            const reqInfo = this.requests[i];\r\n\r\n            if (reqInfo.method === \"GET\") {\r\n\r\n                if (currentChangeSetId.length > 0) {\r\n                    // end an existing change set\r\n                    batchBody.push(`--changeset_${currentChangeSetId}--\\n\\n`);\r\n                    currentChangeSetId = \"\";\r\n                }\r\n\r\n                batchBody.push(`--batch_${this.batchId}\\n`);\r\n\r\n            } else {\r\n\r\n                if (currentChangeSetId.length < 1) {\r\n                    // start new change set\r\n                    currentChangeSetId = getGUID();\r\n                    batchBody.push(`--batch_${this.batchId}\\n`);\r\n                    batchBody.push(`Content-Type: multipart/mixed; boundary=\"changeset_${currentChangeSetId}\"\\n\\n`);\r\n                }\r\n\r\n                batchBody.push(`--changeset_${currentChangeSetId}\\n`);\r\n            }\r\n\r\n            // common batch part prefix\r\n            batchBody.push(`Content-Type: application/http\\n`);\r\n            batchBody.push(`Content-Transfer-Encoding: binary\\n\\n`);\r\n\r\n            // these are the per-request headers\r\n            const headers = new Headers();\r\n\r\n            // this is the url of the individual request within the batch\r\n            const url = isUrlAbsolute(reqInfo.url) ? reqInfo.url : combine(absoluteRequestUrl, reqInfo.url);\r\n\r\n            Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Adding request ${reqInfo.method} ${url} to batch.`, LogLevel.Verbose);\r\n\r\n            if (reqInfo.method !== \"GET\") {\r\n\r\n                let method = reqInfo.method;\r\n\r\n                const castHeaders: any = reqInfo.options.headers;\r\n                if (hOP(reqInfo, \"options\") && hOP(reqInfo.options, \"headers\") && castHeaders[\"X-HTTP-Method\"] !== undefined) {\r\n\r\n                    method = castHeaders[\"X-HTTP-Method\"];\r\n                    delete castHeaders[\"X-HTTP-Method\"];\r\n                }\r\n\r\n                batchBody.push(`${method} ${url} HTTP/1.1\\n`);\r\n\r\n                headers.set(\"Content-Type\", \"application/json;odata=verbose;charset=utf-8\");\r\n\r\n            } else {\r\n                batchBody.push(`${reqInfo.method} ${url} HTTP/1.1\\n`);\r\n            }\r\n\r\n            // merge global config headers\r\n            mergeHeaders(headers, SPRuntimeConfig.headers);\r\n\r\n            // merge per-request headers\r\n            if (reqInfo.options) {\r\n                mergeHeaders(headers, reqInfo.options.headers);\r\n            }\r\n\r\n            // lastly we apply any default headers we need that may not exist\r\n            if (!headers.has(\"Accept\")) {\r\n                headers.append(\"Accept\", \"application/json\");\r\n            }\r\n\r\n            if (!headers.has(\"Content-Type\")) {\r\n                headers.append(\"Content-Type\", \"application/json;odata=verbose;charset=utf-8\");\r\n            }\r\n\r\n            if (!headers.has(\"X-ClientService-ClientTag\")) {\r\n                headers.append(\"X-ClientService-ClientTag\", \"PnPCoreJS:@pnp-$$Version$$:batch\");\r\n            }\r\n\r\n            // write headers into batch body\r\n            headers.forEach((value: string, name: string) => {\r\n                batchBody.push(`${name}: ${value}\\n`);\r\n            });\r\n\r\n            batchBody.push(\"\\n\");\r\n\r\n            if (reqInfo.options.body) {\r\n                batchBody.push(`${reqInfo.options.body}\\n\\n`);\r\n            }\r\n        }\r\n\r\n        if (currentChangeSetId.length > 0) {\r\n            // Close the changeset\r\n            batchBody.push(`--changeset_${currentChangeSetId}--\\n\\n`);\r\n            currentChangeSetId = \"\";\r\n        }\r\n\r\n        batchBody.push(`--batch_${this.batchId}--\\n`);\r\n\r\n        const batchOptions = {\r\n            \"body\": batchBody.join(\"\"),\r\n            \"headers\": {\r\n                \"Content-Type\": `multipart/mixed; boundary=batch_${this.batchId}`,\r\n            },\r\n            \"method\": \"POST\",\r\n        };\r\n\r\n        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Sending batch request.`, LogLevel.Info);\r\n\r\n        const fetchResponse = await client.fetch(combine(absoluteRequestUrl, \"/_api/$batch\"), batchOptions);\r\n        const text = await fetchResponse.text();\r\n        const responses = SPBatch.ParseResponse(text);\r\n\r\n        if (responses.length !== this.requests.length) {\r\n            throw Error(\"Could not properly parse responses to match requests in batch.\");\r\n        }\r\n\r\n        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched requests.`, LogLevel.Info);\r\n\r\n        // this structure ensures that we resolve the batched requests in the order we expect\r\n        // using async this is not guaranteed depending on the requests\r\n        return responses.reduce((p, response, index) => p.then(async _ => {\r\n\r\n            const request = this.requests[index];\r\n\r\n            Logger.write(`[${request.id}] (${(new Date()).getTime()}) Resolving request in batch ${this.batchId}.`, LogLevel.Info);\r\n\r\n            try {\r\n\r\n                request.resolve(await request.parser.parse(response));\r\n\r\n            } catch (e) {\r\n\r\n                request.reject(e);\r\n            }\r\n\r\n        }), Promise.resolve(void (0)));\r\n    }\r\n}\r\n","import {\r\n    assign,\r\n    IRequestClient,\r\n    mergeHeaders,\r\n    IFetchOptions,\r\n    IHttpClientImpl,\r\n    getCtxCallback,\r\n} from \"@pnp/common\";\r\nimport { GraphRuntimeConfig } from \"./graphlibconfig\";\r\n\r\nexport class GraphHttpClient implements IRequestClient {\r\n\r\n    private _impl: IHttpClientImpl;\r\n\r\n    constructor() {\r\n\r\n        this._impl = GraphRuntimeConfig.fetchClientFactory();\r\n    }\r\n\r\n    public fetch(url: string, options: IFetchOptions = {}): Promise<Response> {\r\n\r\n        const headers = new Headers();\r\n\r\n        // first we add the global headers so they can be overwritten by any passed in locally to this call\r\n        mergeHeaders(headers, GraphRuntimeConfig.headers);\r\n\r\n        // second we add the local options so we can overwrite the globals\r\n        mergeHeaders(headers, options.headers);\r\n\r\n        if (!headers.has(\"Content-Type\")) {\r\n            headers.append(\"Content-Type\", \"application/json\");\r\n        }\r\n\r\n        if (!headers.has(\"SdkVersion\")) {\r\n            // this marks the requests for understanding by the service\r\n            headers.append(\"SdkVersion\", \"PnPCoreJS/$$Version$$\");\r\n        }\r\n\r\n        const opts = assign(options, { headers: headers });\r\n\r\n        return this.fetchRaw(url, opts);\r\n    }\r\n\r\n    public fetchRaw(url: string, options: IFetchOptions = {}): Promise<Response> {\r\n\r\n        // here we need to normalize the headers\r\n        const rawHeaders = new Headers();\r\n        mergeHeaders(rawHeaders, options.headers);\r\n        options = assign(options, { headers: rawHeaders });\r\n\r\n        const retry = (ctx: RetryContext): void => {\r\n\r\n            this._impl.fetch(url, options).then((response) => ctx.resolve(response)).catch((response) => {\r\n\r\n                // Check if request was throttled - http status code 429\r\n                // Check if request failed due to server unavailable - http status code 503\r\n                // Check if request failed due to gateway timeout - http status code 504\r\n                if (response.status !== 429 && response.status !== 503 && response.status !== 504) {\r\n                    ctx.reject(response);\r\n                }\r\n\r\n                // grab our current delay\r\n                const delay = ctx.delay;\r\n\r\n                // Increment our counters.\r\n                ctx.delay *= 2;\r\n                ctx.attempts++;\r\n\r\n                // If we have exceeded the retry count, reject.\r\n                if (ctx.retryCount <= ctx.attempts) {\r\n                    ctx.reject(response);\r\n                }\r\n\r\n                // Set our retry timeout for {delay} milliseconds.\r\n                setTimeout(getCtxCallback(this, retry, ctx), delay);\r\n            });\r\n        };\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            const retryContext: RetryContext = {\r\n                attempts: 0,\r\n                delay: 100,\r\n                reject: reject,\r\n                resolve: resolve,\r\n                retryCount: 7,\r\n            };\r\n\r\n            retry.call(this, retryContext);\r\n        });\r\n    }\r\n\r\n    public get(url: string, options: IFetchOptions = {}): Promise<Response> {\r\n        const opts = assign(options, { method: \"GET\" });\r\n        return this.fetch(url, opts);\r\n    }\r\n\r\n    public post(url: string, options: IFetchOptions = {}): Promise<Response> {\r\n        const opts = assign(options, { method: \"POST\" });\r\n        return this.fetch(url, opts);\r\n    }\r\n\r\n    public patch(url: string, options: IFetchOptions = {}): Promise<Response> {\r\n        const opts = assign(options, { method: \"PATCH\" });\r\n        return this.fetch(url, opts);\r\n    }\r\n\r\n    public delete(url: string, options: IFetchOptions = {}): Promise<Response> {\r\n        const opts = assign(options, { method: \"DELETE\" });\r\n        return this.fetch(url, opts);\r\n    }\r\n}\r\n\r\ninterface RetryContext {\r\n    attempts: number;\r\n    delay: number;\r\n    reject: (reason?: any) => void;\r\n    resolve: (value?: Response | PromiseLike<Response>) => void;\r\n    retryCount: number;\r\n}\r\n","import { ITypedHash, mergeMaps, objectToMap } from \"./collections\";\r\nimport { ISPFXContext } from \"./spfxcontextinterface\";\r\n\r\nexport interface ILibraryConfiguration {\r\n\r\n    /**\r\n     * Allows caching to be global disabled, default: false\r\n     */\r\n    globalCacheDisable?: boolean;\r\n\r\n    /**\r\n     * Defines the default store used by the usingCaching method, default: session\r\n     */\r\n    defaultCachingStore?: \"session\" | \"local\";\r\n\r\n    /**\r\n     * Defines the default timeout in seconds used by the usingCaching method, default 30\r\n     */\r\n    defaultCachingTimeoutSeconds?: number;\r\n\r\n    /**\r\n     * If true a timeout expired items will be removed from the cache in intervals determined by cacheTimeoutInterval\r\n     */\r\n    enableCacheExpiration?: boolean;\r\n\r\n    /**\r\n     * Determines the interval in milliseconds at which the cache is checked to see if items have expired (min: 100)\r\n     */\r\n    cacheExpirationIntervalMilliseconds?: number;\r\n\r\n    /**\r\n     * Used to supply the current context from an SPFx webpart to the library\r\n     */\r\n    spfxContext?: ISPFXContext;\r\n\r\n    /**\r\n     * Used to place the library in ie11 compat mode. Some features may not work as expected\r\n     */\r\n    ie11?: boolean;\r\n}\r\n\r\nexport function setup(config: ILibraryConfiguration): void {\r\n    RuntimeConfig.assign(config);\r\n}\r\n\r\n// lable mapping for known config values\r\nconst s = [\r\n    \"defaultCachingStore\",\r\n    \"defaultCachingTimeoutSeconds\",\r\n    \"globalCacheDisable\",\r\n    \"enableCacheExpiration\",\r\n    \"cacheExpirationIntervalMilliseconds\",\r\n    \"spfxContext\",\r\n    \"ie11\",\r\n];\r\n\r\nexport class RuntimeConfigImpl {\r\n\r\n    constructor(private _v = new Map<string, any>()) {\r\n\r\n        // setup defaults\r\n        this._v.set(s[0], \"session\");\r\n        this._v.set(s[1], 60);\r\n        this._v.set(s[2], false);\r\n        this._v.set(s[3], false);\r\n        this._v.set(s[4], 750);\r\n        this._v.set(s[5], null);\r\n        this._v.set(s[6], false);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param config The set of properties to add to the globa configuration instance\r\n     */\r\n    public assign(config: ITypedHash<any>): void {\r\n        this._v = mergeMaps(this._v, objectToMap(config));\r\n    }\r\n\r\n    public get(key: string): any {\r\n        return this._v.get(key);\r\n    }\r\n\r\n    public get defaultCachingStore(): \"session\" | \"local\" {\r\n        return this.get(s[0]);\r\n    }\r\n\r\n    public get defaultCachingTimeoutSeconds(): number {\r\n        return this.get(s[1]);\r\n    }\r\n\r\n    public get globalCacheDisable(): boolean {\r\n        return this.get(s[2]);\r\n    }\r\n\r\n    public get enableCacheExpiration(): boolean {\r\n        return this.get(s[3]);\r\n    }\r\n\r\n    public get cacheExpirationIntervalMilliseconds(): number {\r\n        return this.get(s[4]);\r\n    }\r\n\r\n    public get spfxContext(): ISPFXContext {\r\n        return this.get(s[5]);\r\n    }\r\n\r\n    public get ie11(): boolean {\r\n        return this.get(s[6]);\r\n    }\r\n}\r\n\r\nconst _runtimeConfig = new RuntimeConfigImpl();\r\n\r\nexport let RuntimeConfig = _runtimeConfig;\r\n","import { isFunc } from \"./util\";\r\n\r\ndeclare var Object: {\r\n    entries?: any;\r\n    keys(o: any): any;\r\n};\r\n\r\n/**\r\n * Interface defining an object with a known property type\r\n */\r\nexport interface ITypedHash<T> {\r\n    [key: string]: T;\r\n}\r\n\r\n/**\r\n * Used to calculate the object properties, with polyfill if needed\r\n */\r\nconst objectEntries: any = isFunc(Object.entries) ? Object.entries : (o: any): [any, any][] => Object.keys(o).map((k: any) => [k, o[k]]);\r\n\r\n/**\r\n * Converts the supplied object to a map\r\n * \r\n * @param o The object to map\r\n */\r\nexport function objectToMap<K, V>(o: any): Map<K, V> {\r\n    if (o !== undefined && o !== null) {\r\n        return new Map(objectEntries(o));\r\n    }\r\n    return new Map();\r\n}\r\n\r\n/**\r\n * Merges to Map instances together, overwriting values in target with matching keys, last in wins\r\n * \r\n * @param target map into which the other maps are merged\r\n * @param maps One or more maps to merge into the target \r\n */\r\nexport function mergeMaps<K, V>(target: Map<K, V>, ...maps: Map<K, V>[]): Map<K, V> {\r\n    for (let i = 0; i < maps.length; i++) {\r\n        maps[i].forEach((v: V, k: K) => {\r\n            target.set(k, v);\r\n        });\r\n    }\r\n\r\n    return target;\r\n}\r\n","// this is the ambient nodejs global var which may or may not exist\r\ndeclare var global: any;\r\n\r\n// all the things we expect to maybe exist on global\r\nexport interface IGlobal {\r\n    _spPageContextInfo?: {\r\n        webAbsoluteUrl?: string;\r\n        webServerRelativeUrl?: string\r\n    };\r\n\r\n    location?: string;\r\n\r\n    fetch(url: string, options: any): Promise<Response>;\r\n}\r\n\r\n// export either window or global\r\nexport const safeGlobal: IGlobal = typeof global === \"undefined\" ? window : global;\r\n","import { metadata } from \"./metadata\";\r\nimport { ITypedHash, assign } from \"@pnp/common\";\r\n\r\nexport interface ISPKeyValueCollection {\r\n    __metadata: {\r\n        type: \"Collection(SP.KeyValue)\";\r\n    };\r\n    results: {\r\n        __metadata: {\r\n            type: \"SP.KeyValue\",\r\n        },\r\n        Key: string;\r\n        Value: string,\r\n        ValueType: \"Edm.String\"\r\n    }[];\r\n}\r\n\r\n/**\r\n * Creates an object representing a SharePoint Collection(SP.KeyValue)\r\n * \r\n * @param obj The plain object defining the properties\r\n */\r\nexport function objectToSPKeyValueCollection(obj: ITypedHash<string | number | boolean>): ISPKeyValueCollection {\r\n\r\n    return <ISPKeyValueCollection>assign(metadata(\"Collection(SP.KeyValue)\"), {\r\n        results: Object.keys(obj).map(key => assign(metadata(\"SP.KeyValue\"), {\r\n            Key: key,\r\n            Value: Reflect.get(obj, key),\r\n            ValueType: \"Edm.String\",\r\n        })),\r\n    });\r\n}\r\n","export class GraphEndpoints {\r\n\r\n    public static Beta = \"beta\";\r\n    public static V1 = \"v1.0\";\r\n\r\n    /**\r\n     * \r\n     * @param url The url to set the endpoint \r\n     */\r\n    public static ensure(url: string, endpoint: string): string {\r\n        const all = [GraphEndpoints.Beta, GraphEndpoints.V1];\r\n        let regex = new RegExp(endpoint, \"i\");\r\n        const replaces = all.filter(s => !regex.test(s)).map(s => s.replace(\".\", \"\\\\.\"));\r\n        regex = new RegExp(`/?(${replaces.join(\"|\")})/`, \"ig\");\r\n        return url.replace(regex, `/${endpoint}/`);\r\n    }\r\n}\r\n","import { Batch, IODataBatchRequestInfo } from \"@pnp/odata\";\r\nimport { Logger, LogLevel } from \"@pnp/logging\";\r\nimport { assign, jsS, isUrlAbsolute, hOP } from \"@pnp/common\";\r\nimport { GraphRuntimeConfig } from \"./graphlibconfig\";\r\nimport { GraphHttpClient } from \"./graphhttpclient\";\r\n\r\ninterface GraphBatchRequestFragment {\r\n    id: string;\r\n    method: string;\r\n    url: string;\r\n    headers?: string[][] | {\r\n        [key: string]: string;\r\n    };\r\n    body?: any;\r\n}\r\n\r\ninterface GraphBatchRequest {\r\n    requests: GraphBatchRequestFragment[];\r\n}\r\n\r\ninterface GraphBatchResponseFragment {\r\n    id: string;\r\n    status: number;\r\n    statusText?: string;\r\n    method: string;\r\n    url: string;\r\n    headers?: string[][] | {\r\n        [key: string]: string;\r\n    };\r\n    body?: any;\r\n}\r\n\r\ninterface IGraphBatchResponse {\r\n    error?: {\r\n        code: string;\r\n        innerError: { \"request-id\": string, date: string };\r\n        message: string;\r\n    };\r\n    responses: GraphBatchResponseFragment[];\r\n    nextLink?: string;\r\n}\r\n\r\nexport class GraphBatch extends Batch {\r\n\r\n    constructor(private batchUrl = \"https://graph.microsoft.com/v1.0/$batch\", private maxRequests = 20) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * Urls come to the batch absolute, but the processor expects relative\r\n     * @param url Url to ensure is relative\r\n     */\r\n    private static makeUrlRelative(url: string): string {\r\n\r\n        if (!isUrlAbsolute(url)) {\r\n            // already not absolute, just give it back\r\n            return url;\r\n        }\r\n\r\n        let index = url.indexOf(\".com/v1.0/\");\r\n\r\n        if (index < 0) {\r\n\r\n            index = url.indexOf(\".com/beta/\");\r\n\r\n            if (index > -1) {\r\n\r\n                // beta url\r\n                return url.substr(index + 10);\r\n            }\r\n\r\n        } else {\r\n            // v1.0 url\r\n            return url.substr(index + 9);\r\n        }\r\n\r\n        // no idea\r\n        return url;\r\n    }\r\n\r\n    private static formatRequests(requests: IODataBatchRequestInfo[]): GraphBatchRequestFragment[] {\r\n\r\n        return requests.map((reqInfo, index) => {\r\n\r\n            let requestFragment: GraphBatchRequestFragment = {\r\n                id: `${++index}`,\r\n                method: reqInfo.method,\r\n                url: this.makeUrlRelative(reqInfo.url),\r\n            };\r\n\r\n            let headers = {};\r\n\r\n            // merge global config headers\r\n            if (GraphRuntimeConfig.headers !== undefined && GraphRuntimeConfig.headers !== null) {\r\n\r\n                headers = assign(headers, GraphRuntimeConfig.headers);\r\n            }\r\n\r\n            if (reqInfo.options !== undefined) {\r\n\r\n                // merge per request headers\r\n                if (reqInfo.options.headers !== undefined && reqInfo.options.headers !== null) {\r\n                    headers = assign(headers, reqInfo.options.headers);\r\n                }\r\n\r\n                // all non-get requests need their own content-type header\r\n                if (reqInfo.method !== \"GET\") {\r\n                    headers[\"Content-Type\"] = \"application/json\";\r\n                }\r\n\r\n                // add a request body\r\n                if (reqInfo.options.body !== undefined && reqInfo.options.body !== null) {\r\n\r\n                    // we need to parse the body which was previously turned into a string\r\n                    requestFragment = assign(requestFragment, {\r\n                        body: JSON.parse(reqInfo.options.body),\r\n                    });\r\n                }\r\n            }\r\n\r\n            requestFragment = assign(requestFragment, {\r\n                headers: headers,\r\n            });\r\n\r\n            return requestFragment;\r\n        });\r\n    }\r\n\r\n    private static parseResponse(requests: IODataBatchRequestInfo[], graphResponse: IGraphBatchResponse): Promise<{ nextLink: string, responses: Response[] }> {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            // we need to see if we have an error and report that\r\n            if (hOP(graphResponse, \"error\")) {\r\n                return reject(Error(`Error Porcessing Batch: (${graphResponse.error.code}) ${graphResponse.error.message}`));\r\n            }\r\n\r\n            const parsedResponses: Response[] = new Array(requests.length).fill(null);\r\n\r\n            for (let i = 0; i < graphResponse.responses.length; ++i) {\r\n\r\n                const response = graphResponse.responses[i];\r\n                // we create the request id by adding 1 to the index, so we place the response by subtracting one to match\r\n                // the array of requests and make it easier to map them by index\r\n                const responseId = parseInt(response.id, 10) - 1;\r\n\r\n                if (response.status === 204) {\r\n\r\n                    parsedResponses[responseId] = new Response();\r\n                } else {\r\n\r\n                    parsedResponses[responseId] = new Response(JSON.stringify(response.body), response);\r\n                }\r\n            }\r\n\r\n            resolve({\r\n                nextLink: graphResponse.nextLink,\r\n                responses: parsedResponses,\r\n            });\r\n        });\r\n    }\r\n\r\n    protected executeImpl(): Promise<void> {\r\n\r\n        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Executing batch with ${this.requests.length} requests.`, LogLevel.Info);\r\n\r\n        if (this.requests.length < 1) {\r\n            Logger.write(`Resolving empty batch.`, LogLevel.Info);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        const client = new GraphHttpClient();\r\n\r\n        // create a working copy of our requests\r\n        const requests = this.requests.slice();\r\n        let error = false;\r\n\r\n\r\n        return new Promise(async (resolve, reject) => {\r\n\r\n            // this is the root of our promise chain\r\n            while (requests.length > 0) {\r\n\r\n                const requestsChunk = requests.splice(0, this.maxRequests);\r\n\r\n                const batchRequest: GraphBatchRequest = {\r\n                    requests: GraphBatch.formatRequests(requestsChunk),\r\n                };\r\n\r\n                const batchOptions = {\r\n                    body: jsS(batchRequest),\r\n                    headers: {\r\n                        \"Accept\": \"application/json\",\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                    method: \"POST\",\r\n                };\r\n\r\n                Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Sending batch request.`, LogLevel.Info);\r\n\r\n                await client.fetch(this.batchUrl, batchOptions)\r\n                    .then(r => r.json())\r\n                    .then((j) => GraphBatch.parseResponse(requestsChunk, j))\r\n                    .then((parsedResponse: { nextLink: string, responses: Response[] }) => {\r\n\r\n                        Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched requests.`, LogLevel.Info);\r\n\r\n                        parsedResponse.responses.reduce((chain, response, index) => {\r\n\r\n                            const request = requestsChunk[index];\r\n\r\n                            Logger.write(`[${this.batchId}] (${(new Date()).getTime()}) Resolving batched request ${request.method} ${request.url}.`, LogLevel.Verbose);\r\n\r\n                            return chain.then(_ => request.parser.parse(response).then(request.resolve).catch(request.reject));\r\n\r\n                        }, Promise.resolve());\r\n                    }).catch(e => {\r\n                        reject(e);\r\n                        error = true;\r\n                    });\r\n\r\n                if (error) {\r\n                    // do not continue processing on error, we can't know what the downstream effects are\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!error) {\r\n                // if we didn't have an error go ahead and resolve the promise as successful\r\n                resolve();\r\n            }\r\n        });\r\n    }\r\n}\r\n","import { ITypedHash, mergeMaps, objectToMap, jsS } from \"@pnp/common\";\r\n\r\n/**\r\n * Interface for configuration providers\r\n *\r\n */\r\nexport interface IConfigurationProvider {\r\n\r\n    /**\r\n     * Gets the configuration from the provider\r\n     */\r\n    getConfiguration(): Promise<ITypedHash<string>>;\r\n}\r\n\r\n/**\r\n * Class used to manage the current application settings\r\n *\r\n */\r\nexport class Settings {\r\n\r\n    /**\r\n     * Creates a new instance of the settings class\r\n     *\r\n     * @constructor\r\n     */\r\n    constructor(private _settings = new Map<string, string>()) {\r\n    }\r\n\r\n    /**\r\n     * Adds a new single setting, or overwrites a previous setting with the same key\r\n     *\r\n     * @param {string} key The key used to store this setting\r\n     * @param {string} value The setting value to store\r\n     */\r\n    public add(key: string, value: string) {\r\n        this._settings.set(key, value);\r\n    }\r\n\r\n    /**\r\n     * Adds a JSON value to the collection as a string, you must use getJSON to rehydrate the object when read\r\n     *\r\n     * @param {string} key The key used to store this setting\r\n     * @param {any} value The setting value to store\r\n     */\r\n    public addJSON(key: string, value: any) {\r\n        this._settings.set(key, jsS(value));\r\n    }\r\n\r\n    /**\r\n     * Applies the supplied hash to the setting collection overwriting any existing value, or created new values\r\n     *\r\n     * @param {ITypedHash<any>} hash The set of values to add\r\n     */\r\n    public apply(hash: ITypedHash<any>): Promise<void> {\r\n        return new Promise<void>((resolve, reject) => {\r\n            try {\r\n                this._settings = mergeMaps(this._settings, objectToMap(hash));\r\n                resolve();\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Loads configuration settings into the collection from the supplied provider and returns a Promise\r\n     *\r\n     * @param {IConfigurationProvider} provider The provider from which we will load the settings\r\n     */\r\n    public load(provider: IConfigurationProvider): Promise<void> {\r\n        return new Promise<void>((resolve, reject) => {\r\n            provider.getConfiguration().then((value) => {\r\n                this._settings = mergeMaps(this._settings, objectToMap(value));\r\n                resolve();\r\n            }).catch(reject);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets a value from the configuration\r\n     *\r\n     * @param {string} key The key whose value we want to return. Returns null if the key does not exist\r\n     * @return {string} string value from the configuration\r\n     */\r\n    public get(key: string): string | null {\r\n        return this._settings.get(key) || null;\r\n    }\r\n\r\n    /**\r\n     * Gets a JSON value, rehydrating the stored string to the original object\r\n     *\r\n     * @param {string} key The key whose value we want to return. Returns null if the key does not exist\r\n     * @return {any} object from the configuration\r\n     */\r\n    public getJSON(key: string): any {\r\n        const o = this.get(key);\r\n        if (o === undefined || o === null) {\r\n            return o;\r\n        }\r\n\r\n        return JSON.parse(o);\r\n    }\r\n}\r\n","import { IConfigurationProvider } from \"../configuration\";\r\nimport { ITypedHash, IPnPClientStore, PnPClientStorage } from \"@pnp/common\";\r\n\r\n/**\r\n * A caching provider which can wrap other non-caching providers\r\n *\r\n */\r\nexport default class CachingConfigurationProvider implements IConfigurationProvider {\r\n\r\n    private store: IPnPClientStore;\r\n\r\n    /**\r\n     * Creates a new caching configuration provider\r\n     * @constructor\r\n     * @param {IConfigurationProvider} wrappedProvider Provider which will be used to fetch the configuration\r\n     * @param {string} cacheKey Key that will be used to store cached items to the cache\r\n     * @param {IPnPClientStore} cacheStore OPTIONAL storage, which will be used to store cached settings.\r\n     */\r\n    constructor(private wrappedProvider: IConfigurationProvider, private cacheKey: string, cacheStore?: IPnPClientStore) {\r\n        this.wrappedProvider = wrappedProvider;\r\n        this.store = (cacheStore) ? cacheStore : this.selectPnPCache();\r\n    }\r\n\r\n    /**\r\n     * Gets the wrapped configuration providers\r\n     *\r\n     * @return {IConfigurationProvider} Wrapped configuration provider\r\n     */\r\n    public getWrappedProvider(): IConfigurationProvider {\r\n        return this.wrappedProvider;\r\n    }\r\n\r\n    /**\r\n     * Loads the configuration values either from the cache or from the wrapped provider\r\n     *\r\n     * @return {Promise<ITypedHash<string>>} Promise of loaded configuration values\r\n     */\r\n    public getConfiguration(): Promise<ITypedHash<string>> {\r\n        // Cache not available, pass control to the wrapped provider\r\n        if ((!this.store) || (!this.store.enabled)) {\r\n            return this.wrappedProvider.getConfiguration();\r\n        }\r\n\r\n        return this.store.getOrPut(this.cacheKey, () => {\r\n            return this.wrappedProvider.getConfiguration().then((providedConfig) => {\r\n                this.store.put(this.cacheKey, providedConfig);\r\n                return providedConfig;\r\n            });\r\n        });\r\n    }\r\n\r\n    private selectPnPCache(): IPnPClientStore {\r\n        const pnpCache = new PnPClientStorage();\r\n        if ((pnpCache.local) && (pnpCache.local.enabled)) {\r\n            return pnpCache.local;\r\n        }\r\n        if ((pnpCache.session) && (pnpCache.session.enabled)) {\r\n            return pnpCache.session;\r\n        }\r\n        throw Error(\"Cannot create a caching configuration provider since cache is not available.\");\r\n    }\r\n}\r\n","import { IConfigurationProvider } from \"../configuration\";\r\nimport { ITypedHash } from \"@pnp/common\";\r\nimport { default as CachingConfigurationProvider } from \"./cachingConfigurationProvider\";\r\nimport { IWeb } from \"@pnp/sp/webs\";\r\nimport \"@pnp/sp/lists/web\";\r\nimport \"@pnp/sp/items/list\";\r\n\r\n/**\r\n * A configuration provider which loads configuration values from a SharePoint list\r\n *\r\n */\r\nexport default class SPListConfigurationProvider implements IConfigurationProvider {\r\n    /**\r\n     * Creates a new SharePoint list based configuration provider\r\n     * @constructor\r\n     * @param {string} webUrl Url of the SharePoint site, where the configuration list is located\r\n     * @param {string} listTitle Title of the SharePoint list, which contains the configuration settings (optional, default: \"config\")\r\n     * @param {string} keyFieldName The name of the field in the list to use as the setting key (optional, default: \"Title\")\r\n     * @param {string} valueFieldName The name of the field in the list to use as the setting value (optional, default: \"Value\")\r\n     */\r\n    constructor(public readonly web: IWeb, public readonly listTitle = \"config\", private keyFieldName = \"Title\", private valueFieldName = \"Value\") { }\r\n\r\n    /**\r\n     * Loads the configuration values from the SharePoint list\r\n     *\r\n     * @return {Promise<ITypedHash<string>>} Promise of loaded configuration values\r\n     */\r\n    public getConfiguration(): Promise<ITypedHash<string>> {\r\n\r\n        return this.web.lists.getByTitle(this.listTitle).items.select(this.keyFieldName, this.valueFieldName)<any[]>()\r\n            .then((data: any[]) => data.reduce((c: any, item: any) => {\r\n                c[item[this.keyFieldName]] = item[this.valueFieldName];\r\n                return c;\r\n            }, {}));\r\n    }\r\n\r\n    /**\r\n     * Wraps the current provider in a cache enabled provider\r\n     *\r\n     * @return {CachingConfigurationProvider} Caching providers which wraps the current provider\r\n     */\r\n    public asCaching(cacheKey = `pnp_configcache_splist_${this.web.toUrl()}+${this.listTitle}`): CachingConfigurationProvider {\r\n        return new CachingConfigurationProvider(this, cacheKey);\r\n    }\r\n}\r\n","// reference: https://msdn.microsoft.com/en-us/library/office/dn600183.aspx\r\n\r\n/**\r\n * Represents the unique sequential location of a change within the change log.\r\n */\r\nexport interface IChangeToken {\r\n    /**\r\n     * Gets or sets a string value that contains the serialized representation of the change token generated by the protocol server.\r\n     */\r\n    StringValue: string;\r\n}\r\n\r\n/**\r\n * Defines a query that is performed against the change log.\r\n */\r\nexport interface IChangeQuery {\r\n    /**\r\n     * Gets or sets a value that specifies whether add changes are included in the query.\r\n     */\r\n    Add?: boolean;\r\n\r\n    /**\r\n     * Gets or sets a value that specifies whether changes to alerts are included in the query.\r\n     */\r\n    Alert?: boolean;\r\n\r\n    /**\r\n     * Gets or sets a value that specifies the end date and end time for changes that are returned through the query.\r\n     */\r\n    ChangeTokenEnd?: IChangeToken;\r\n\r\n    /**\r\n     * Gets or sets a value that specifies the start date and start time for changes that are returned through the query.\r\n     */\r\n    ChangeTokenStart?: IChangeToken;\r\n\r\n    /**\r\n     * Gets or sets a value that specifies whether changes to content types are included in the query.\r\n     */\r\n    ContentType?: boolean;\r\n\r\n    /**\r\n     * Gets or sets a value that specifies whether deleted objects are included in the query.\r\n     */\r\n    DeleteObject?: boolean;\r\n\r\n    /**\r\n     * Gets or sets a value that specifies whether changes to fields are included in the query.\r\n     */\r\n    Field?: boolean;\r\n\r\n    /**\r\n     * Gets or sets a value that specifies whether changes to files are included in the query.\r\n     */\r\n    File?: boolean;\r\n\r\n    /**\r\n     * Gets or sets value that specifies whether changes to folders are included in the query.\r\n     */\r\n    Folder?: boolean;\r\n\r\n    /**\r\n     * Gets or sets a value that specifies whether changes to groups are included in the query.\r\n     */\r\n    Group?: boolean;\r\n\r\n    /**\r\n     * Gets or sets a value that specifies whether adding users to groups is included in the query.\r\n     */\r\n    GroupMembershipAdd?: boolean;\r\n\r\n    /**\r\n     * Gets or sets a value that specifies whether deleting users from the groups is included in the query.\r\n     */\r\n    GroupMembershipDelete?: boolean;\r\n\r\n    /**\r\n     * Gets or sets a value that specifies whether general changes to list items are included in the query.\r\n     */\r\n    Item?: boolean;\r\n\r\n    /**\r\n     * Gets or sets a value that specifies whether changes to lists are included in the query.\r\n     */\r\n    List?: boolean;\r\n\r\n    /**\r\n     * Gets or sets a value that specifies whether move changes are included in the query.\r\n     */\r\n    Move?: boolean;\r\n\r\n    /**\r\n     * Gets or sets a value that specifies whether changes to the navigation structure of a site collection are included in the query.\r\n     */\r\n    Navigation?: boolean;\r\n\r\n    /**\r\n     * Gets or sets a value that specifies whether renaming changes are included in the query.\r\n     */\r\n    Rename?: boolean;\r\n\r\n    /**\r\n     * Gets or sets a value that specifies whether restoring items from the recycle bin or from backups is included in the query.\r\n     */\r\n    Restore?: boolean;\r\n\r\n    /**\r\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\r\n     */\r\n    RoleAssignmentAdd?: boolean;\r\n\r\n    /**\r\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\r\n     */\r\n    RoleAssignmentDelete?: boolean;\r\n\r\n    /**\r\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\r\n     */\r\n    RoleDefinitionAdd?: boolean;\r\n\r\n    /**\r\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\r\n     */\r\n    RoleDefinitionDelete?: boolean;\r\n\r\n    /**\r\n     * Gets or sets a value that specifies whether adding role assignments is included in the query.\r\n     */\r\n    RoleDefinitionUpdate?: boolean;\r\n\r\n    /**\r\n     * Gets or sets a value that specifies whether modifications to security policies are included in the query.\r\n     */\r\n    SecurityPolicy?: boolean;\r\n\r\n    /**\r\n     * Gets or sets a value that specifies whether changes to site collections are included in the query.\r\n     */\r\n    Site?: boolean;\r\n\r\n    /**\r\n     * Gets or sets a value that specifies whether updates made using the item SystemUpdate method are included in the query.\r\n     */\r\n    SystemUpdate?: boolean;\r\n\r\n    /**\r\n     * Gets or sets a value that specifies whether update changes are included in the query.\r\n     */\r\n    Update?: boolean;\r\n\r\n    /**\r\n     * Gets or sets a value that specifies whether changes to users are included in the query.\r\n     */\r\n    User?: boolean;\r\n\r\n    /**\r\n     * Gets or sets a value that specifies whether changes to views are included in the query.\r\n     */\r\n    View?: boolean;\r\n\r\n    /**\r\n     * Gets or sets a value that specifies whether changes to Web sites are included in the query.\r\n     */\r\n    Web?: boolean;\r\n}\r\n\r\n/**\r\n * Specifies the type of a principal.\r\n */\r\n/* tslint:disable:no-bitwise */\r\nexport const enum PrincipalType {\r\n    /**\r\n     * Enumeration whose value specifies no principal type.\r\n     */\r\n    None = 0,\r\n    /**\r\n     * Enumeration whose value specifies a user as the principal type.\r\n     */\r\n    User = 1,\r\n    /**\r\n     * Enumeration whose value specifies a distribution list as the principal type.\r\n     */\r\n    DistributionList = 2,\r\n    /**\r\n     * Enumeration whose value specifies a security group as the principal type.\r\n     */\r\n    SecurityGroup = 4,\r\n    /**\r\n     * Enumeration whose value specifies a group as the principal type.\r\n     */\r\n    SharePointGroup = 8,\r\n    /**\r\n     * Enumeration whose value specifies all principal types.\r\n     */\r\n    All = SharePointGroup | SecurityGroup | DistributionList | User,\r\n}\r\n/* tslint:enable:no-bitwise */\r\n\r\n/**\r\n * Specifies the source of a principal.\r\n */\r\n/* tslint:disable:no-bitwise */\r\nexport const enum PrincipalSource {\r\n    /**\r\n     * Enumeration whose value specifies no principal source.\r\n     */\r\n    None = 0,\r\n    /**\r\n     * Enumeration whose value specifies user information list as the principal source.\r\n     */\r\n    UserInfoList = 1,\r\n    /**\r\n     * Enumeration whose value specifies Active Directory as the principal source.\r\n     */\r\n    Windows = 2,\r\n    /**\r\n     * Enumeration whose value specifies the current membership provider as the principal source.\r\n     */\r\n    MembershipProvider = 4,\r\n    /**\r\n     * Enumeration whose value specifies the current role provider as the principal source.\r\n     */\r\n    RoleProvider = 8,\r\n    /**\r\n     * Enumeration whose value specifies all principal sources.\r\n     */\r\n    All = RoleProvider | MembershipProvider | Windows | UserInfoList,\r\n}\r\n/* tslint:enable:no-bitwise */\r\n\r\nexport interface IPrincipalInfo {\r\n    Department: string;\r\n    DisplayName: string;\r\n    Email: string;\r\n    JobTitle: string;\r\n    LoginName: string;\r\n    Mobile: string;\r\n    PrincipalId: number;\r\n    PrincipalType: PrincipalType;\r\n    SIPAddress: string;\r\n}\r\n\r\nexport enum PageType {\r\n    Invalid = -1,\r\n    DefaultView,\r\n    NormalView,\r\n    DialogView,\r\n    View,\r\n    DisplayForm,\r\n    DisplayFormDialog,\r\n    EditForm,\r\n    EditFormDialog,\r\n    NewForm,\r\n    NewFormDialog,\r\n    SolutionForm,\r\n    PAGE_MAXITEMS,\r\n}\r\n","const InvalidFileFolderNameCharsOnlineRegex = /[\"*:<>?/\\\\|\\x00-\\x1f\\x7f-\\x9f]/g;\r\nconst InvalidFileFolderNameCharsOnPremiseRegex = /[\"#%*:<>?/\\\\|\\x00-\\x1f\\x7f-\\x9f]/g;\r\n\r\n/**\r\n * Checks if file or folder name contains invalid characters\r\n *\r\n * @param input File or folder name to check\r\n * @param onPremise Set to true for SharePoint On-Premise\r\n * @returns True if contains invalid chars, false otherwise\r\n */\r\nexport function containsInvalidFileFolderChars(input: string, onPremise = false): boolean {\r\n    if (onPremise) {\r\n        return InvalidFileFolderNameCharsOnPremiseRegex.test(input);\r\n    } else {\r\n        return InvalidFileFolderNameCharsOnlineRegex.test(input);\r\n    }\r\n}\r\n\r\n/**\r\n * Removes invalid characters from file or folder name\r\n *\r\n * @param input File or folder name\r\n * @param replacer Value that will replace invalid characters\r\n * @param onPremise Set to true for SharePoint On-Premise\r\n * @returns File or folder name with replaced invalid characters\r\n */\r\nexport function stripInvalidFileFolderChars(input: string, replacer = \"\", onPremise = false): string {\r\n    if (onPremise) {\r\n        return input.replace(InvalidFileFolderNameCharsOnPremiseRegex, replacer);\r\n    } else {\r\n        return input.replace(InvalidFileFolderNameCharsOnlineRegex, replacer);\r\n    }\r\n}\r\n","import { addProp } from \"@pnp/odata\";\r\nimport { _Web, Web } from \"../webs/types\";\r\nimport { Lists, ILists, IList, List } from \"./types\";\r\nimport { odataUrlFrom } from \"../odata\";\r\nimport { ISharePointQueryableCollection, SharePointQueryableCollection } from \"../sharepointqueryable\";\r\nimport { escapeQueryStrValue } from \"../utils/escapeQueryStrValue\";\r\n\r\ndeclare module \"../webs/types\" {\r\n    interface _Web {\r\n        readonly lists: ILists;\r\n        readonly siteUserInfoList: IList;\r\n        readonly defaultDocumentLibrary: IList;\r\n        readonly customListTemplates: ISharePointQueryableCollection;\r\n        getList(listRelativeUrl: string): IList;\r\n        getCatalog(type: number): Promise<IList>;\r\n    }\r\n    interface IWeb {\r\n\r\n        /**\r\n         * Gets the collection of all lists that are contained in the Web site\r\n         */\r\n        readonly lists: ILists;\r\n\r\n        /**\r\n         * Gets the UserInfo list of the site collection that contains the Web site\r\n         */\r\n        readonly siteUserInfoList: IList;\r\n\r\n        /**\r\n         * Get a reference the default documents library of a web\r\n         */\r\n        readonly defaultDocumentLibrary: IList;\r\n\r\n        /**\r\n         * Gets the collection of all list definitions and list templates that are available\r\n         */\r\n        readonly customListTemplates: ISharePointQueryableCollection;\r\n\r\n        /**\r\n         * Gets a list by server relative url (list's root folder)\r\n         *\r\n         * @param listRelativeUrl The server relative path to the list's root folder (including /sites/ if applicable)\r\n         */\r\n        getList(listRelativeUrl: string): IList;\r\n\r\n        /**\r\n         * Returns the list gallery on the site\r\n         *\r\n         * @param type The gallery type - WebTemplateCatalog = 111, WebPartCatalog = 113 ListTemplateCatalog = 114,\r\n         * MasterPageCatalog = 116, SolutionCatalog = 121, ThemeCatalog = 123, DesignCatalog = 124, AppDataCatalog = 125\r\n         */\r\n        getCatalog(type: number): Promise<IList>;\r\n    }\r\n}\r\n\r\naddProp(_Web, \"lists\", Lists);\r\naddProp(_Web, \"siteUserInfoList\", List, \"siteuserinfolist\");\r\naddProp(_Web, \"defaultDocumentLibrary\", List, \"DefaultDocumentLibrary\");\r\naddProp(_Web, \"customListTemplates\", SharePointQueryableCollection, \"getcustomlisttemplates\");\r\n\r\n_Web.prototype.getList = function (this: _Web, listRelativeUrl: string): IList {\r\n    return List(this, `getList('${escapeQueryStrValue(listRelativeUrl)}')`);\r\n};\r\n\r\n_Web.prototype.getCatalog = async function (this: _Web, type: number): Promise<IList> {\r\n    const data = await this.clone(Web, `getcatalog(${type})`).select(\"Id\").get();\r\n    return List(odataUrlFrom(data));\r\n};\r\n","import {\r\n    _SharePointQueryableInstance,\r\n    ISharePointQueryableInstance,\r\n    _SharePointQueryableCollection,\r\n    spInvokableFactory,\r\n    SharePointQueryableInstance,\r\n    IDeleteableWithETag,\r\n    deleteableWithETag,\r\n} from \"../sharepointqueryable\";\r\nimport { TextParser, BlobParser, JSONParser, BufferParser, headers, body } from \"@pnp/odata\";\r\nimport { assign, getGUID, isFunc, stringIsNullOrEmpty, isUrlAbsolute } from \"@pnp/common\";\r\nimport { Item, IItem } from \"../items\";\r\nimport { odataUrlFrom } from \"../odata\";\r\nimport { defaultPath } from \"../decorators\";\r\nimport { spPost } from \"../operations\";\r\nimport { escapeQueryStrValue } from \"../utils/escapeQueryStrValue\";\r\nimport { extractWebUrl } from \"../utils/extractweburl\";\r\nimport { tag } from \"../telemetry\";\r\nimport { toResourcePath } from \"../utils/toResourcePath\";\r\n\r\n/**\r\n * Describes a collection of File objects\r\n *\r\n */\r\n@defaultPath(\"files\")\r\nexport class _Files extends _SharePointQueryableCollection<IFileInfo[]> {\r\n\r\n    /**\r\n     * Gets a File by filename\r\n     *\r\n     * @param name The name of the file, including extension.\r\n     */\r\n    public getByName(name: string): IFile {\r\n        if (/\\%#/.test(name)) {\r\n            throw Error(\"For file names containing % or # please use web.getFileByServerRelativePath\");\r\n        }\r\n        return tag.configure(File(this).concat(`('${escapeQueryStrValue(name)}')`), \"fis.getByName\");\r\n    }\r\n\r\n    /**\r\n     * Uploads a file. Not supported for batching\r\n     *\r\n     * @param url The folder-relative url of the file.\r\n     * @param content The file contents blob.\r\n     * @param shouldOverWrite Should a file with the same name in the same location be overwritten? (default: true)\r\n     * @returns The new File and the raw response.\r\n     */\r\n    @tag(\"fis.add\")\r\n    public async add(url: string, content: string | ArrayBuffer | Blob, shouldOverWrite = true): Promise<IFileAddResult> {\r\n        const response = await spPost(Files(this, `add(overwrite=${shouldOverWrite},url='${escapeQueryStrValue(url)}')`), {\r\n            body: content,\r\n        });\r\n        return {\r\n            data: response,\r\n            file: this.getByName(url),\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Adds a file using the pound percent safe methods\r\n     * \r\n     * @param url Excoded url of the file\r\n     * @param content The file content\r\n     * @param parameters Additional parameters to control method behavior\r\n     */\r\n    @tag(\"fis.addUsingPath\")\r\n    public async addUsingPath(url: string, content: string | ArrayBuffer | Blob, parameters: IAddUsingPathProps = { Overwrite: false }): Promise<IFileAddResult> {\r\n\r\n        const path = [`AddUsingPath(decodedurl='${escapeQueryStrValue(url)}'`];\r\n\r\n        if (parameters) {\r\n            if (parameters.Overwrite) {\r\n                path.push(\",Overwrite=true\");\r\n            }\r\n            if (parameters.AutoCheckoutOnInvalidData) {\r\n                path.push(\",AutoCheckoutOnInvalidData=true\");\r\n            }\r\n            if (!stringIsNullOrEmpty(parameters.XorHash)) {\r\n                path.push(`,XorHash=${escapeQueryStrValue(parameters.XorHash)}`);\r\n            }\r\n        }\r\n\r\n        path.push(\")\");\r\n\r\n        const resp: IFileInfo = await spPost(Files(this, path.join(\"\")), { body: content });\r\n\r\n        return {\r\n            data: resp,\r\n            file: File(odataUrlFrom(resp)),\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Uploads a file. Not supported for batching\r\n     *\r\n     * @param url The folder-relative url of the file.\r\n     * @param content The Blob file content to add\r\n     * @param progress A callback function which can be used to track the progress of the upload\r\n     * @param shouldOverWrite Should a file with the same name in the same location be overwritten? (default: true)\r\n     * @param chunkSize The size of each file slice, in bytes (default: 10485760)\r\n     * @returns The new File and the raw response.\r\n     */\r\n    @tag(\"fis.addChunked\")\r\n    public async addChunked(url: string, content: Blob, progress?: (data: IFileUploadProgressData) => void, shouldOverWrite = true, chunkSize = 10485760): Promise<IFileAddResult> {\r\n\r\n        await spPost(this.clone(Files, `add(overwrite=${shouldOverWrite},url='${escapeQueryStrValue(url)}')`, false));\r\n        const file = this.getByName(url);\r\n        return await file.setContentChunked(content, progress, chunkSize);\r\n    }\r\n\r\n    /**\r\n     * Adds a ghosted file to an existing list or document library. Not supported for batching.\r\n     *\r\n     * @param fileUrl The server-relative url where you want to save the file.\r\n     * @param templateFileType The type of use to create the file.\r\n     * @returns The template file that was added and the raw response.\r\n     */\r\n    @tag(\"fis.addTemplateFile\")\r\n    public async addTemplateFile(fileUrl: string, templateFileType: TemplateFileType): Promise<IFileAddResult> {\r\n        const response = await spPost(this.clone(Files, `addTemplateFile(urloffile='${escapeQueryStrValue(fileUrl)}',templatefiletype=${templateFileType})`, false));\r\n        return {\r\n            data: response,\r\n            file: File(odataUrlFrom(response)),\r\n        };\r\n    }\r\n}\r\nexport interface IFiles extends _Files { }\r\nexport const Files = spInvokableFactory<IFiles>(_Files);\r\n\r\n/**\r\n * Describes a single File instance\r\n *\r\n */\r\nexport class _File extends _SharePointQueryableInstance<IFileInfo> {\r\n\r\n    public delete = deleteableWithETag(\"fi\");\r\n\r\n    /**\r\n     * Gets a value that specifies the list item field values for the list item corresponding to the file.\r\n     *\r\n     */\r\n    public get listItemAllFields(): ISharePointQueryableInstance {\r\n        return tag.configure(SharePointQueryableInstance(this, \"listItemAllFields\"), \"fi.listItemAllFields\");\r\n    }\r\n\r\n    /**\r\n     * Gets a collection of versions\r\n     *\r\n     */\r\n    public get versions(): IVersions {\r\n        return tag.configure(Versions(this), \"fi.versions\");\r\n    }\r\n\r\n    /**\r\n     * Approves the file submitted for content approval with the specified comment.\r\n     * Only documents in lists that are enabled for content approval can be approved.\r\n     *\r\n     * @param comment The comment for the approval.\r\n     */\r\n    @tag(\"fi.approve\")\r\n    public approve(comment = \"\"): Promise<void> {\r\n        return spPost(this.clone(File, `approve(comment='${escapeQueryStrValue(comment)}')`));\r\n    }\r\n\r\n    /**\r\n     * Stops the chunk upload session without saving the uploaded data. Does not support batching.\r\n     * If the file doesn’t already exist in the library, the partially uploaded file will be deleted.\r\n     * Use this in response to user action (as in a request to cancel an upload) or an error or exception.\r\n     * Use the uploadId value that was passed to the StartUpload method that started the upload session.\r\n     * This method is currently available only on Office 365.\r\n     *\r\n     * @param uploadId The unique identifier of the upload session.\r\n     */\r\n    @tag(\"fi.cancelUpload\")\r\n    public cancelUpload(uploadId: string): Promise<void> {\r\n        return spPost(this.clone(File, `cancelUpload(uploadId=guid'${uploadId}')`, false));\r\n    }\r\n\r\n    /**\r\n     * Checks the file in to a document library based on the check-in type.\r\n     *\r\n     * @param comment A comment for the check-in. Its length must be <= 1023.\r\n     * @param checkinType The check-in type for the file.\r\n     */\r\n    @tag(\"fi.checkin\")\r\n    public checkin(comment = \"\", checkinType = CheckinType.Major): Promise<void> {\r\n\r\n        if (comment.length > 1023) {\r\n            throw Error(\"The maximum comment length is 1023 characters.\");\r\n        }\r\n\r\n        return spPost(this.clone(File, `checkin(comment='${escapeQueryStrValue(comment)}',checkintype=${checkinType})`));\r\n    }\r\n\r\n    /**\r\n     * Checks out the file from a document library.\r\n     */\r\n    @tag(\"fi.checkout\")\r\n    public checkout(): Promise<void> {\r\n        return spPost(this.clone(File, \"checkout\"));\r\n    }\r\n\r\n    /**\r\n     * Copies the file to the destination url.\r\n     *\r\n     * @param url The absolute url or server relative url of the destination file path to copy to.\r\n     * @param shouldOverWrite Should a file with the same name in the same location be overwritten?\r\n     */\r\n    @tag(\"fi.copyTo\")\r\n    public copyTo(url: string, shouldOverWrite = true): Promise<void> {\r\n        return spPost(this.clone(File, `copyTo(strnewurl='${escapeQueryStrValue(url)}',boverwrite=${shouldOverWrite})`));\r\n    }\r\n\r\n    /**\r\n     * Copies the file by path to destination path.\r\n     * Also works with different site collections.\r\n     *\r\n     * @param destUrl The absolute url or server relative url of the destination file path to copy to.\r\n     * @param shouldOverWrite Should a file with the same name in the same location be overwritten?\r\n     * @param keepBoth Keep both if file with the same name in the same location already exists? Only relevant when shouldOverWrite is set to false.\r\n     */\r\n    @tag(\"fi.copyByPath\")\r\n    public async copyByPath(destUrl: string, shouldOverWrite: boolean, KeepBoth = false): Promise<void> {\r\n\r\n        const { ServerRelativeUrl: srcUrl, [\"odata.id\"]: absoluteUrl } = await this.select(\"ServerRelativeUrl\")();\r\n        const webBaseUrl = extractWebUrl(absoluteUrl);\r\n        const hostUrl = webBaseUrl.replace(\"://\", \"___\").split(\"/\")[0].replace(\"___\", \"://\");\r\n        await spPost(File(webBaseUrl, `/_api/SP.MoveCopyUtil.CopyFileByPath(overwrite=@a1)?@a1=${shouldOverWrite}`),\r\n            body({\r\n                destPath: toResourcePath(isUrlAbsolute(destUrl) ? destUrl : `${hostUrl}${destUrl}`),\r\n                options: {\r\n                    KeepBoth: KeepBoth,\r\n                    ResetAuthorAndCreatedOnCopy: true,\r\n                    ShouldBypassSharedLocks: true,\r\n                    __metadata: {\r\n                        type: \"SP.MoveCopyOptions\",\r\n                    },\r\n                },\r\n                srcPath: toResourcePath(isUrlAbsolute(srcUrl) ? srcUrl : `${hostUrl}${srcUrl}`),\r\n            }));\r\n    }\r\n\r\n    /**\r\n     * Denies approval for a file that was submitted for content approval.\r\n     * Only documents in lists that are enabled for content approval can be denied.\r\n     *\r\n     * @param comment The comment for the denial.\r\n     */\r\n    @tag(\"fi.deny\")\r\n    public deny(comment = \"\"): Promise<void> {\r\n        if (comment.length > 1023) {\r\n            throw Error(\"The maximum comment length is 1023 characters.\");\r\n        }\r\n        return spPost(this.clone(File, `deny(comment='${escapeQueryStrValue(comment)}')`));\r\n    }\r\n\r\n    /**\r\n     * Moves the file to the specified destination url.\r\n     *\r\n     * @param url The absolute url or server relative url of the destination file path to move to.\r\n     * @param moveOperations The bitwise MoveOperations value for how to move the file.\r\n     */\r\n    @tag(\"fi.moveTo\")\r\n    public moveTo(url: string, moveOperations = MoveOperations.Overwrite): Promise<void> {\r\n        return spPost(this.clone(File, `moveTo(newurl='${escapeQueryStrValue(url)}',flags=${moveOperations})`));\r\n    }\r\n\r\n    /**\r\n     * Moves the file by path to the specified destination url.\r\n     * Also works with different site collections.\r\n     *\r\n     * @param destUrl The absolute url or server relative url of the destination file path to move to.\r\n     * @param shouldOverWrite Should a file with the same name in the same location be overwritten?\r\n     * @param keepBoth Keep both if file with the same name in the same location already exists? Only relevant when shouldOverWrite is set to false.\r\n     */\r\n    @tag(\"fi.moveByPath\")\r\n    public async moveByPath(destUrl: string, shouldOverWrite: boolean, KeepBoth = false): Promise<void> {\r\n\r\n        const { ServerRelativeUrl: srcUrl, [\"odata.id\"]: absoluteUrl } = await this.select(\"ServerRelativeUrl\")();\r\n        const webBaseUrl = extractWebUrl(absoluteUrl);\r\n        const hostUrl = webBaseUrl.replace(\"://\", \"___\").split(\"/\")[0].replace(\"___\", \"://\");\r\n        await spPost(File(webBaseUrl, `/_api/SP.MoveCopyUtil.MoveFileByPath(overwrite=@a1)?@a1=${shouldOverWrite}`),\r\n            body({\r\n                destPath: toResourcePath(isUrlAbsolute(destUrl) ? destUrl : `${hostUrl}${destUrl}`),\r\n                options: {\r\n                    KeepBoth: KeepBoth,\r\n                    ResetAuthorAndCreatedOnCopy: false,\r\n                    ShouldBypassSharedLocks: true,\r\n                    __metadata: {\r\n                        type: \"SP.MoveCopyOptions\",\r\n                    },\r\n                },\r\n                srcPath: toResourcePath(isUrlAbsolute(srcUrl) ? srcUrl : `${hostUrl}${srcUrl}`),\r\n            }));\r\n    }\r\n\r\n    /**\r\n     * Submits the file for content approval with the specified comment.\r\n     *\r\n     * @param comment The comment for the published file. Its length must be <= 1023.\r\n     */\r\n    @tag(\"fi.publish\")\r\n    public publish(comment = \"\"): Promise<void> {\r\n        if (comment.length > 1023) {\r\n            throw Error(\"The maximum comment length is 1023 characters.\");\r\n        }\r\n        return spPost(this.clone(File, `publish(comment='${escapeQueryStrValue(comment)}')`));\r\n    }\r\n\r\n    /**\r\n     * Moves the file to the Recycle Bin and returns the identifier of the new Recycle Bin item.\r\n     *\r\n     * @returns The GUID of the recycled file.\r\n     */\r\n    @tag(\"fi.recycle\")\r\n    public recycle(): Promise<string> {\r\n        return spPost(this.clone(File, \"recycle\"));\r\n    }\r\n\r\n    /**\r\n     * Reverts an existing checkout for the file.\r\n     *\r\n     */\r\n    @tag(\"fi.undoCheckout\")\r\n    public undoCheckout(): Promise<void> {\r\n        return spPost(this.clone(File, \"undoCheckout\"));\r\n    }\r\n\r\n    /**\r\n     * Removes the file from content approval or unpublish a major version.\r\n     *\r\n     * @param comment The comment for the unpublish operation. Its length must be <= 1023.\r\n     */\r\n    @tag(\"fi.unpublish\")\r\n    public unpublish(comment = \"\"): Promise<void> {\r\n        if (comment.length > 1023) {\r\n            throw Error(\"The maximum comment length is 1023 characters.\");\r\n        }\r\n        return spPost(this.clone(File, `unpublish(comment='${escapeQueryStrValue(comment)}')`));\r\n    }\r\n\r\n    /**\r\n     * Gets the contents of the file as text. Not supported in batching.\r\n     *\r\n     */\r\n    @tag(\"fi.getText\")\r\n    public getText(): Promise<string> {\r\n\r\n        return this.clone(File, \"$value\", false).usingParser(new TextParser())(headers({ \"binaryStringResponseBody\": \"true\" }));\r\n    }\r\n\r\n    /**\r\n     * Gets the contents of the file as a blob, does not work in Node.js. Not supported in batching.\r\n     *\r\n     */\r\n    @tag(\"fi.getBlob\")\r\n    public getBlob(): Promise<Blob> {\r\n\r\n        return this.clone(File, \"$value\", false).usingParser(new BlobParser())(headers({ \"binaryStringResponseBody\": \"true\" }));\r\n    }\r\n\r\n    /**\r\n     * Gets the contents of a file as an ArrayBuffer, works in Node.js. Not supported in batching.\r\n     */\r\n    @tag(\"fi.getBuffer\")\r\n    public getBuffer(): Promise<ArrayBuffer> {\r\n\r\n        return this.clone(File, \"$value\", false).usingParser(new BufferParser())(headers({ \"binaryStringResponseBody\": \"true\" }));\r\n    }\r\n\r\n    /**\r\n     * Gets the contents of a file as an ArrayBuffer, works in Node.js. Not supported in batching.\r\n     */\r\n    @tag(\"fi.getJSON\")\r\n    public getJSON(): Promise<any> {\r\n\r\n        return this.clone(File, \"$value\", false).usingParser(new JSONParser())(headers({ \"binaryStringResponseBody\": \"true\" }));\r\n    }\r\n\r\n    /**\r\n     * Sets the content of a file, for large files use setContentChunked. Not supported in batching.\r\n     *\r\n     * @param content The file content\r\n     *\r\n     */\r\n    @tag(\"fi.setContent\")\r\n    public async setContent(content: string | ArrayBuffer | Blob): Promise<IFile> {\r\n\r\n        await spPost(this.clone(File, \"$value\", false), {\r\n            body: content,\r\n            headers: {\r\n                \"X-HTTP-Method\": \"PUT\",\r\n            },\r\n        });\r\n        return File(this);\r\n    }\r\n\r\n    /**\r\n     * Gets the associated list item for this folder, loading the default properties\r\n     */\r\n    @tag(\"fi.getItem\")\r\n    public async getItem<T>(...selects: string[]): Promise<IItem & T> {\r\n\r\n        const q = this.listItemAllFields;\r\n        const d = await q.select.apply(q, selects)();\r\n        return assign(Item(odataUrlFrom(d)), d);\r\n    }\r\n\r\n    /**\r\n     * Sets the contents of a file using a chunked upload approach. Not supported in batching.\r\n     *\r\n     * @param file The file to upload\r\n     * @param progress A callback function which can be used to track the progress of the upload\r\n     * @param chunkSize The size of each file slice, in bytes (default: 10485760)\r\n     */\r\n    public async setContentChunked(file: Blob, progress?: (data: IFileUploadProgressData) => void, chunkSize = 10485760): Promise<IFileAddResult> {\r\n\r\n        if (!isFunc(progress)) {\r\n            progress = () => null;\r\n        }\r\n\r\n        const fileSize = file.size;\r\n        const totalBlocks = parseInt((fileSize / chunkSize).toString(), 10) + ((fileSize % chunkSize === 0) ? 1 : 0);\r\n        const uploadId = getGUID();\r\n\r\n        // report that we are starting\r\n        progress({ uploadId, blockNumber: 1, chunkSize, currentPointer: 0, fileSize, stage: \"starting\", totalBlocks });\r\n        let currentPointer = await this.startUpload(uploadId, file.slice(0, chunkSize));\r\n\r\n        // skip the first and last blocks\r\n        for (let i = 2; i < totalBlocks; i++) {\r\n            progress({ uploadId, blockNumber: i, chunkSize, currentPointer, fileSize, stage: \"continue\", totalBlocks });\r\n            currentPointer = await this.continueUpload(uploadId, currentPointer, file.slice(currentPointer, currentPointer + chunkSize));\r\n        }\r\n\r\n        progress({ uploadId, blockNumber: totalBlocks, chunkSize, currentPointer, fileSize, stage: \"finishing\", totalBlocks });\r\n        return this.finishUpload(uploadId, currentPointer, file.slice(currentPointer));\r\n    }\r\n\r\n    /**\r\n     * Starts a new chunk upload session and uploads the first fragment.\r\n     * The current file content is not changed when this method completes.\r\n     * The method is idempotent (and therefore does not change the result) as long as you use the same values for uploadId and stream.\r\n     * The upload session ends either when you use the CancelUpload method or when you successfully\r\n     * complete the upload session by passing the rest of the file contents through the ContinueUpload and FinishUpload methods.\r\n     * The StartUpload and ContinueUpload methods return the size of the running total of uploaded data in bytes,\r\n     * so you can pass those return values to subsequent uses of ContinueUpload and FinishUpload.\r\n     * This method is currently available only on Office 365.\r\n     *\r\n     * @param uploadId The unique identifier of the upload session.\r\n     * @param fragment The file contents.\r\n     * @returns The size of the total uploaded data in bytes.\r\n     */\r\n    @tag(\"fi.startUpload\")\r\n    protected async startUpload(uploadId: string, fragment: ArrayBuffer | Blob): Promise<number> {\r\n        let n = await spPost(this.clone(File, `startUpload(uploadId=guid'${uploadId}')`, false), { body: fragment });\r\n        if (typeof n === \"object\") {\r\n            // When OData=verbose the payload has the following shape:\r\n            // { StartUpload: \"10485760\" }\r\n            n = (n as any).StartUpload;\r\n        }\r\n        return parseFloat(n);\r\n    }\r\n\r\n    /**\r\n     * Continues the chunk upload session with an additional fragment.\r\n     * The current file content is not changed.\r\n     * Use the uploadId value that was passed to the StartUpload method that started the upload session.\r\n     * This method is currently available only on Office 365.\r\n     *\r\n     * @param uploadId The unique identifier of the upload session.\r\n     * @param fileOffset The size of the offset into the file where the fragment starts.\r\n     * @param fragment The file contents.\r\n     * @returns The size of the total uploaded data in bytes.\r\n     */\r\n    @tag(\"fi.continueUpload\")\r\n    protected async continueUpload(uploadId: string, fileOffset: number, fragment: ArrayBuffer | Blob): Promise<number> {\r\n        let n = await spPost(this.clone(File, `continueUpload(uploadId=guid'${uploadId}',fileOffset=${fileOffset})`, false), { body: fragment });\r\n        if (typeof n === \"object\") {\r\n            // When OData=verbose the payload has the following shape:\r\n            // { ContinueUpload: \"20971520\" }\r\n            n = (n as any).ContinueUpload;\r\n        }\r\n        return parseFloat(n);\r\n    }\r\n\r\n    /**\r\n     * Uploads the last file fragment and commits the file. The current file content is changed when this method completes.\r\n     * Use the uploadId value that was passed to the StartUpload method that started the upload session.\r\n     * This method is currently available only on Office 365.\r\n     *\r\n     * @param uploadId The unique identifier of the upload session.\r\n     * @param fileOffset The size of the offset into the file where the fragment starts.\r\n     * @param fragment The file contents.\r\n     * @returns The newly uploaded file.\r\n     */\r\n    @tag(\"fi.finishUpload\")\r\n    protected async finishUpload(uploadId: string, fileOffset: number, fragment: ArrayBuffer | Blob): Promise<IFileAddResult> {\r\n        const response = await spPost(this.clone(File, `finishUpload(uploadId=guid'${uploadId}',fileOffset=${fileOffset})`, false), { body: fragment });\r\n        return {\r\n            data: response,\r\n            file: File(odataUrlFrom(response)),\r\n        };\r\n    }\r\n}\r\n\r\nexport interface IFile extends _File, IDeleteableWithETag { }\r\nexport const File = spInvokableFactory<IFile>(_File);\r\n\r\n/**\r\n * Describes a collection of Version objects\r\n *\r\n */\r\n@defaultPath(\"versions\")\r\nexport class _Versions extends _SharePointQueryableCollection {\r\n\r\n    /**\t\r\n     * Gets a version by id\t\r\n     *\t\r\n     * @param versionId The id of the version to retrieve\t\r\n     */\r\n    public getById(versionId: number): IVersion {\r\n        return tag.configure(Version(this).concat(`(${versionId})`), \"vers.getById\");\r\n    }\r\n\r\n    /**\r\n     * Deletes all the file version objects in the collection.\r\n     *\r\n     */\r\n    @tag(\"vers.deleteAll\")\r\n    public deleteAll(): Promise<void> {\r\n        return spPost(Versions(this, \"deleteAll\"));\r\n    }\r\n\r\n    /**\r\n     * Deletes the specified version of the file.\r\n     *\r\n     * @param versionId The ID of the file version to delete.\r\n     */\r\n    @tag(\"vers.deleteById\")\r\n    public deleteById(versionId: number): Promise<void> {\r\n        return spPost(this.clone(Versions, `deleteById(vid=${versionId})`));\r\n    }\r\n\r\n    /**\r\n     * Recycles the specified version of the file.\r\n     *\r\n     * @param versionId The ID of the file version to delete.\r\n     */\r\n    @tag(\"vers.recycleByID\")\r\n    public recycleByID(versionId: number): Promise<void> {\r\n        return spPost(this.clone(Versions, `recycleByID(vid=${versionId})`));\r\n    }\r\n\r\n    /**\r\n     * Deletes the file version object with the specified version label.\r\n     *\r\n     * @param label The version label of the file version to delete, for example: 1.2\r\n     */\r\n    @tag(\"vers.deleteByLabel\")\r\n    public deleteByLabel(label: string): Promise<void> {\r\n        return spPost(this.clone(Versions, `deleteByLabel(versionlabel='${escapeQueryStrValue(label)}')`));\r\n    }\r\n\r\n    /**\r\n     * Recycles the file version object with the specified version label.\r\n     *\r\n     * @param label The version label of the file version to delete, for example: 1.2\r\n     */\r\n    @tag(\"vers.recycleByLabel\")\r\n    public recycleByLabel(label: string): Promise<void> {\r\n        return spPost(this.clone(Versions, `recycleByLabel(versionlabel='${escapeQueryStrValue(label)}')`));\r\n    }\r\n\r\n    /**\r\n     * Creates a new file version from the file specified by the version label.\r\n     *\r\n     * @param label The version label of the file version to restore, for example: 1.2\r\n     */\r\n    @tag(\"vers.restoreByLabel\")\r\n    public restoreByLabel(label: string): Promise<void> {\r\n        return spPost(this.clone(Versions, `restoreByLabel(versionlabel='${escapeQueryStrValue(label)}')`));\r\n    }\r\n}\r\nexport interface IVersions extends _Versions { }\r\nexport const Versions = spInvokableFactory<IVersions>(_Versions);\r\n\r\n/**\r\n * Describes a single Version instance\r\n *\r\n */\r\nexport class _Version extends _SharePointQueryableInstance {\r\n    public delete = deleteableWithETag(\"ver\");\r\n}\r\nexport interface IVersion extends _Version, IDeleteableWithETag { }\r\nexport const Version = spInvokableFactory<IVersion>(_Version);\r\n\r\n/**\r\n * Types for document check in. \r\n * Minor = 0\r\n * Major = 1\r\n * Overwrite = 2\r\n */\r\nexport enum CheckinType {\r\n    Minor = 0,\r\n    Major = 1,\r\n    Overwrite = 2,\r\n}\r\n/**\r\n * Describes file and result\r\n */\r\nexport interface IFileAddResult {\r\n    file: IFile;\r\n    data: IFileInfo;\r\n}\r\n\r\n/**\r\n * File move opertions\r\n * Overwrite = 1\r\n * AllowBrokenThickets = 8\r\n */\r\nexport enum MoveOperations {\r\n    Overwrite = 1,\r\n    AllowBrokenThickets = 8,\r\n}\r\n\r\nexport enum TemplateFileType {\r\n    StandardPage = 0,\r\n    WikiPage = 1,\r\n    FormPage = 2,\r\n    ClientSidePage = 3,\r\n}\r\n\r\n/**\r\n * Describes SharePoint file upload progress data\r\n */\r\nexport interface IFileUploadProgressData {\r\n    uploadId: string;\r\n    stage: \"starting\" | \"continue\" | \"finishing\";\r\n    blockNumber: number;\r\n    totalBlocks: number;\r\n    chunkSize: number;\r\n    currentPointer: number;\r\n    fileSize: number;\r\n}\r\n\r\nexport interface IAddUsingPathProps {\r\n    /**\r\n     * Overwrite the file if it exists\r\n     */\r\n    Overwrite: boolean;\r\n    /**\r\n     * specifies whether to auto checkout on invalid Data. It'll be useful if the list contains validation whose requirements upload will not be able to meet.\r\n     */\r\n    AutoCheckoutOnInvalidData?: boolean;\r\n    /**\r\n     * Specifies a XOR hash of the file data which should be used to ensure end-2-end data integrity, base64 representation\r\n     */\r\n    XorHash?: string;\r\n}\r\n\r\nexport interface IFileInfo {\r\n    readonly \"odata.id\": string;\r\n    CheckInComment: string;\r\n    CheckOutType: number;\r\n    ContentTag: string;\r\n    CustomizedPageStatus: number;\r\n    ETag: string;\r\n    Exists: boolean;\r\n    IrmEnabled: boolean;\r\n    Length: string;\r\n    Level: number;\r\n    LinkingUri: string | null;\r\n    LinkingUrl: string;\r\n    MajorVersion: number;\r\n    MinorVersion: number;\r\n    Name: string;\r\n    ServerRelativeUrl: string;\r\n    TimeCreated: string;\r\n    TimeLastModified: string;\r\n    Title: string | null;\r\n    UIVersion: number;\r\n    UIVersionLabel: string;\r\n    UniqueId: string;\r\n}\r\n","import {\r\n    ISharePointQueryable,\r\n    _SharePointQueryableInstance,\r\n    _SharePointQueryableCollection,\r\n    spInvokableFactory,\r\n} from \"../sharepointqueryable\";\r\nimport { spPost } from \"../operations\";\r\nimport { odataUrlFrom } from \"../odata\";\r\nimport { extractWebUrl } from \"../utils/extractweburl\";\r\nimport { File, IFile } from \"../files/types\";\r\nimport { tag } from \"../telemetry\";\r\nimport { Web } from \"../webs\";\r\nimport \"../items\";\r\n\r\nexport class _AppCatalog extends _SharePointQueryableCollection {\r\n\r\n    constructor(baseUrl: string | ISharePointQueryable, path = \"_api/web/tenantappcatalog/AvailableApps\") {\r\n        super(extractWebUrl(typeof baseUrl === \"string\" ? baseUrl : baseUrl.toUrl()), path);\r\n    }\r\n\r\n    /**\r\n     * Get details of specific app from the app catalog\r\n     * @param id - Specify the guid of the app\r\n     */\r\n    public getAppById(id: string): IApp {\r\n        return tag.configure(App(this, `getById('${id}')`), \"ac.getAppById\");\r\n    }\r\n\r\n    /**\r\n     * Synchronize a solution to the Microsoft Teams App Catalog\r\n     * @param id - Specify the guid of the app\r\n     * @param useSharePointItemId (optional) - By default this REST call requires the SP Item id of the app, not the app id.\r\n     *                            PnPjs will try to fetch the item id by default, you can still use this parameter to pass your own item id in the first parameter \r\n     */\r\n    public async syncSolutionToTeams(id: string | number, useSharePointItemId = false): Promise<void> {\r\n\r\n        // This REST call requires that you refer the list item id of the solution in the app catalog site.\r\n        let appId = null;\r\n        const webUrl = extractWebUrl(this.toUrl());\r\n\r\n        if (useSharePointItemId) {\r\n\r\n            appId = id;\r\n        } else {\r\n\r\n            const web = Web(webUrl);\r\n            const listId = (await web.lists.select(\"Id\").filter(`EntityTypeName eq 'AppCatalog'`)())[0].Id;\r\n            const listItems = await web.lists.getById(listId).items.filter(`AppProductID eq '${id}'`).top(1)();\r\n\r\n            if (listItems && listItems.length > 0) {\r\n\r\n                appId = listItems[0].Id;\r\n            } else {\r\n\r\n                throw Error(`Did not find the app with id ${id} in the appcatalog.`);\r\n            }\r\n        }\r\n\r\n        const poster = tag.configure(AppCatalog(webUrl, `_api/web/tenantappcatalog/SyncSolutionToTeams(id=${appId})`), \"ac.syncSolutionToTeams\");\r\n\r\n        return await spPost(poster, {});\r\n    }\r\n\r\n    /**\r\n     * Uploads an app package. Not supported for batching\r\n     *\r\n     * @param filename Filename to create.\r\n     * @param content app package data (eg: the .app or .sppkg file).\r\n     * @param shouldOverWrite Should an app with the same name in the same location be overwritten? (default: true)\r\n     * @returns Promise<IAppAddResult>\r\n     */\r\n    public async add(filename: string, content: string | ArrayBuffer | Blob, shouldOverWrite = true): Promise<IAppAddResult> {\r\n\r\n        // you don't add to the availableapps collection\r\n        const adder = tag.configure(AppCatalog(extractWebUrl(this.toUrl()), `_api/web/tenantappcatalog/add(overwrite=${shouldOverWrite},url='${filename}')`), \"ac.add\");\r\n\r\n        const r = await spPost(adder, {\r\n            body: content, headers: {\r\n                \"binaryStringRequestBody\": \"true\",\r\n            },\r\n        });\r\n\r\n        return {\r\n            data: r,\r\n            file: File(odataUrlFrom(r)),\r\n        };\r\n    }\r\n}\r\nexport interface IAppCatalog extends _AppCatalog {}\r\nexport const AppCatalog = spInvokableFactory<IAppCatalog>(_AppCatalog);\r\n\r\nexport class _App extends _SharePointQueryableInstance {\r\n\r\n    /**\r\n     * This method deploys an app on the app catalog. It must be called in the context\r\n     * of the tenant app catalog web or it will fail.\r\n     * \r\n     * @param skipFeatureDeployment Deploy the app to the entire tenant\r\n     */\r\n    @tag(\"app.deploy\")\r\n    public deploy(skipFeatureDeployment = false): Promise<void> {\r\n        return this.do(`Deploy(${skipFeatureDeployment})`);\r\n    }\r\n\r\n    /**\r\n     * This method retracts a deployed app on the app catalog. It must be called in the context\r\n     * of the tenant app catalog web or it will fail.\r\n     */\r\n    @tag(\"app.retract\")\r\n    public retract(): Promise<void> {\r\n        return this.do(\"Retract\");\r\n    }\r\n\r\n    /**\r\n     * This method allows an app which is already deployed to be installed on a web\r\n     */\r\n    @tag(\"app.install\")\r\n    public install(): Promise<void> {\r\n        return this.do(\"Install\");\r\n    }\r\n\r\n    /**\r\n     * This method allows an app which is already installed to be uninstalled on a web\r\n     * Note: when you use the REST API to uninstall a solution package from the site, it is not relocated to the recycle bin\r\n     */\r\n    @tag(\"app.uninstall\")\r\n    public uninstall(): Promise<void> {\r\n        return this.do(\"Uninstall\");\r\n    }\r\n\r\n    /**\r\n     * This method allows an app which is already installed to be upgraded on a web\r\n     */\r\n    @tag(\"app.upgrade\")\r\n    public upgrade(): Promise<void> {\r\n        return this.do(\"Upgrade\");\r\n    }\r\n\r\n    /**\r\n     * This method removes an app from the app catalog. It must be called in the context\r\n     * of the tenant app catalog web or it will fail.\r\n     */\r\n    @tag(\"app.remove\")\r\n    public remove(): Promise<void> {\r\n        return this.do(\"Remove\");\r\n    }\r\n\r\n    private do(path: string): Promise<void> {\r\n        return spPost(this.clone(App, path));\r\n    }\r\n}\r\nexport interface IApp extends _App {}\r\nexport const App = spInvokableFactory<IApp>(_App);\r\n\r\n/**\r\n * Result object after adding an app\r\n */\r\nexport interface IAppAddResult {\r\n    /**\r\n     * Contains metadata of the added app\r\n     */\r\n    data: any;\r\n    /**\r\n     * A File instance to the item in SharePoint\r\n     */\r\n    file: IFile;\r\n}\r\n","import { _Web } from \"../webs/types\";\r\nimport { AppCatalog, IAppCatalog } from \"./types\";\r\n\r\ndeclare module \"../webs/types\" {\r\n    interface _Web {\r\n        getAppCatalog(url?: string | _Web): IAppCatalog;\r\n    }\r\n    interface IWeb {\r\n        /**\r\n         * Gets this web (default) or the web specifed by the optional string case\r\n         * as an IAppCatalog instance\r\n         * \r\n         * @param url [Optional] Url of the web to get (default: current web)\r\n         */\r\n        getAppCatalog(url?: string | _Web): IAppCatalog;\r\n    }\r\n}\r\n\r\n_Web.prototype.getAppCatalog = function (this: _Web, url?: string | _Web): IAppCatalog {\r\n    return AppCatalog(url || this);\r\n};\r\n","import { SPRest } from \"../rest\";\r\nimport { IWeb, Web } from \"../webs/types\";\r\n\r\nimport \"./web\";\r\nimport { SharePointQueryable } from \"../sharepointqueryable\";\r\n\r\nexport {\r\n    IAppAddResult,\r\n    IApp,\r\n    IAppCatalog,\r\n    App,\r\n    AppCatalog,\r\n} from \"./types\";\r\n\r\ndeclare module \"../rest\" {\r\n    interface SPRest {\r\n        getTenantAppCatalogWeb(): Promise<IWeb>;\r\n    }\r\n}\r\n\r\nSPRest.prototype.getTenantAppCatalogWeb = async function (this: SPRest): Promise<IWeb> {\r\n    const data: { CorporateCatalogUrl: string } = await SharePointQueryable(\"/\", \"_api/SP_TenantSettings_Current\")();\r\n    return Web(data.CorporateCatalogUrl);\r\n};\r\n","import { defaultPath } from \"../decorators\";\r\nimport { spPost } from \"../operations\";\r\nimport {\r\n    _SharePointQueryableInstance,\r\n    _SharePointQueryableCollection,\r\n    spInvokableFactory,\r\n    deleteableWithETag,\r\n    IDeleteableWithETag,\r\n} from \"../sharepointqueryable\";\r\nimport { TextParser, BlobParser, JSONParser, BufferParser, ODataParser, headers } from \"@pnp/odata\";\r\nimport { tag } from \"../telemetry\";\r\n\r\n@defaultPath(\"AttachmentFiles\")\r\nexport class _Attachments extends _SharePointQueryableCollection<IAttachmentInfo[]> {\r\n\r\n    /**\r\n    * Gets a Attachment File by filename\r\n    *\r\n    * @param name The name of the file, including extension.\r\n    */\r\n    public getByName(name: string): IAttachment {\r\n        const f = tag.configure(Attachment(this), \"ats.getByName\");\r\n        f.concat(`('${name}')`);\r\n        return f;\r\n    }\r\n\r\n    /**\r\n     * Adds a new attachment to the collection. Not supported for batching.\r\n     *\r\n     * @param name The name of the file, including extension.\r\n     * @param content The Base64 file content.\r\n     */\r\n    @tag(\"ats.add\")\r\n    public async add(name: string, content: string | Blob | ArrayBuffer): Promise<IAttachmentAddResult> {\r\n        const response = await spPost(this.clone(Attachments, `add(FileName='${name}')`, false), { body: content });\r\n        return {\r\n            data: response,\r\n            file: this.getByName(name),\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Adds multiple new attachment to the collection. Not supported for batching.\r\n     *\r\n     * @param files The collection of files to add\r\n     */\r\n    @tag(\"ats.addMultiple\")\r\n    public async addMultiple(files: IAttachmentFileInfo[]): Promise<void> {\r\n\r\n        for (let i = 0; i < files.length; i++) {\r\n            await this.add(files[i].name, files[i].content);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete multiple attachments from the collection. Not supported for batching.\r\n     *\r\n     * @param files The collection of files to delete\r\n     */\r\n    @tag(\"ats.deleteMultiple\")\r\n    public async deleteMultiple(...files: string[]): Promise<void> {\r\n\r\n        for (let i = 0; i < files.length; i++) {\r\n            await this.getByName(files[i]).delete();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete multiple attachments from the collection and send to recycle bin. Not supported for batching.\r\n     *\r\n     * @param files The collection of files to be deleted and sent to recycle bin\r\n     */\r\n    @tag(\"ats.recycleMultiple\")\r\n    public async recycleMultiple(...files: string[]): Promise<void> {\r\n        for (let i = 0; i < files.length; i++) {\r\n            await this.getByName(files[i]).recycle();\r\n        }\r\n    }\r\n}\r\nexport interface IAttachments extends _Attachments { }\r\nexport const Attachments = spInvokableFactory<IAttachments>(_Attachments);\r\n\r\nexport class _Attachment extends _SharePointQueryableInstance<IAttachmentInfo> {\r\n\r\n    public delete = deleteableWithETag(\"at\");\r\n\r\n    /**\r\n     * Gets the contents of the file as text\r\n     *\r\n     */\r\n    @tag(\"at.getText\")\r\n    public getText(): Promise<string> {\r\n\r\n        return this.getParsed(new TextParser());\r\n    }\r\n\r\n    /**\r\n     * Gets the contents of the file as a blob, does not work in Node.js\r\n     *\r\n     */\r\n    @tag(\"at.getBlob\")\r\n    public getBlob(): Promise<Blob> {\r\n\r\n        return this.getParsed(new BlobParser());\r\n    }\r\n\r\n    /**\r\n     * Gets the contents of a file as an ArrayBuffer, works in Node.js\r\n     */\r\n    @tag(\"at.getBuffer\")\r\n    public getBuffer(): Promise<ArrayBuffer> {\r\n\r\n        return this.getParsed(new BufferParser());\r\n    }\r\n\r\n    /**\r\n     * Gets the contents of a file as an ArrayBuffer, works in Node.js\r\n     */\r\n    @tag(\"at.getJSON\")\r\n    public getJSON(): Promise<any> {\r\n\r\n        return this.getParsed(new JSONParser());\r\n    }\r\n\r\n    /**\r\n     * Sets the content of a file. Not supported for batching\r\n     *\r\n     * @param content The value to set for the file contents\r\n     */\r\n    @tag(\"at.setContent\")\r\n    public async setContent(content: string | ArrayBuffer | Blob): Promise<IAttachment> {\r\n\r\n        await spPost(this.clone(Attachment, \"$value\", false), headers({ \"X-HTTP-Method\": \"PUT\" }, {\r\n            body: content,\r\n        }));\r\n\r\n        return Attachment(this);\r\n    }\r\n\r\n    /**\r\n     * Delete this attachment file and send it to recycle bin\r\n     *\r\n     * @param eTag Value used in the IF-Match header, by default \"*\"\r\n     */\r\n    @tag(\"at.recycle\")\r\n    public recycle(eTag = \"*\"): Promise<void> {\r\n\r\n        return spPost(this.clone(Attachment, \"recycleObject\"), headers({\r\n            \"IF-Match\": eTag,\r\n            \"X-HTTP-Method\": \"DELETE\",\r\n        }));\r\n    }\r\n\r\n    private getParsed<T>(parser: ODataParser<T>): Promise<T> {\r\n\r\n        return this.clone(Attachment, \"$value\", false).usingParser(parser)();\r\n    }\r\n}\r\nexport interface IAttachment extends _Attachment, IDeleteableWithETag { }\r\nexport const Attachment = spInvokableFactory<IAttachment>(_Attachment);\r\n\r\nexport interface IAttachmentAddResult {\r\n    file: IAttachment;\r\n    data: IAttachmentFileInfo;\r\n}\r\n\r\nexport interface IAttachmentFileInfo {\r\n    name: string;\r\n    content: string | Blob | ArrayBuffer;\r\n}\r\n\r\nexport interface IAttachmentInfo {\r\n    FileName: string;\r\n    FileNameAsPath: {\r\n        DecodedUrl: string;\r\n    };\r\n    ServerRelativePath: {\r\n        DecodedUrl: string;\r\n    };\r\n    ServerRelativeUrl: string;\r\n}\r\n","import { addProp } from \"@pnp/odata\";\r\nimport { _Item } from \"../items/types\";\r\nimport { Attachments, IAttachments } from \"./types\";\r\n\r\ndeclare module \"../items/types\" {\r\n    interface _Item {\r\n        readonly attachmentFiles: IAttachments;\r\n    }\r\n    interface IItem {\r\n        /**\r\n         * Read the attachment files data for an item\r\n         */\r\n        readonly attachmentFiles: IAttachments;\r\n    }\r\n}\r\n\r\naddProp(_Item, \"attachmentFiles\", Attachments);\r\n","import { hOP } from \"@pnp/common\";\r\n\r\n/**\r\n * Gets the next order value 1 based for the provided collection\r\n * \r\n * @param collection Collection of orderable things\r\n */\r\nexport function getNextOrder(collection: { order: number }[]): number {\r\n    return collection.length < 1 ? 1 : (Math.max.apply(null, collection.map(i => i.order)) + 1);\r\n}\r\n\r\n/**\r\n * Normalizes the order value for all the sections, columns, and controls to be 1 based and stepped (1, 2, 3...)\r\n * \r\n * @param collection The collection to normalize\r\n */\r\nexport function reindex(collection: { order: number, columns?: { order: number }[], controls?: { order: number }[] }[]): void {\r\n\r\n    for (let i = 0; i < collection.length; i++) {\r\n        collection[i].order = i + 1;\r\n        if (hOP(collection[i], \"columns\")) {\r\n            reindex(collection[i].columns);\r\n        } else if (hOP(collection[i], \"controls\")) {\r\n            reindex(collection[i].controls);\r\n        }\r\n    }\r\n}\r\n","import { _Web } from \"../webs/types\";\r\nimport { File, IFile } from \"./types\";\r\nimport { escapeQueryStrValue } from \"../utils/escapeQueryStrValue\";\r\n\r\ndeclare module \"../webs/types\" {\r\n    interface _Web {\r\n        getFileByServerRelativeUrl(fileRelativeUrl: string): IFile;\r\n        getFileByServerRelativePath(fileRelativeUrl: string): IFile;\r\n        getFileById(uniqueId: string): IFile;\r\n        getFileByUrl(fileUrl: string): IFile;\r\n    }\r\n    interface IWeb {\r\n\r\n        /**\r\n         * Gets a file by server relative url\r\n         *\r\n         * @param fileRelativeUrl The server relative path to the file (including /sites/ if applicable)\r\n         */\r\n        getFileByServerRelativeUrl(fileRelativeUrl: string): IFile;\r\n\r\n        /**\r\n         * Gets a file by server relative url if your file name contains # and % characters\r\n         *\r\n         * @param fileRelativeUrl The server relative path to the file (including /sites/ if applicable)\r\n         */\r\n        getFileByServerRelativePath(fileRelativeUrl: string): IFile;\r\n\r\n        /**\r\n         * Gets a file by id\r\n         *\r\n         * @param uniqueId The UniqueId of the file\r\n         */\r\n        getFileById(uniqueId: string): IFile;\r\n\r\n        /**\r\n         * Gets a file from a sharing link or absolute url\r\n         * \r\n         * @param fileUrl Absolute url of the file to get\r\n         */\r\n        getFileByUrl(fileUrl: string): IFile;\r\n    }\r\n}\r\n\r\n_Web.prototype.getFileByServerRelativeUrl = function (this: _Web, fileRelativeUrl: string): IFile {\r\n    return File(this, `getFileByServerRelativeUrl('${escapeQueryStrValue(fileRelativeUrl)}')`);\r\n};\r\n\r\n_Web.prototype.getFileByServerRelativePath = function (this: _Web, fileRelativeUrl: string): IFile {\r\n    return File(this, `getFileByServerRelativePath(decodedUrl='${escapeQueryStrValue(fileRelativeUrl)}')`);\r\n};\r\n\r\n_Web.prototype.getFileById = function (this: _Web, uniqueId: string): IFile {\r\n    return File(this, `getFileById('${uniqueId}')`);\r\n};\r\n\r\n_Web.prototype.getFileByUrl = function (this: _Web, fileUrl: string): IFile {\r\n    return File(this, `getFileByUrl('!@p1::${escapeQueryStrValue(fileUrl)}')`);\r\n};\r\n","import { defaultPath } from \"../decorators\";\r\nimport {\r\n    _SharePointQueryableInstance,\r\n    _SharePointQueryableCollection,\r\n    spInvokableFactory,\r\n} from \"../sharepointqueryable\";\r\nimport { assign } from \"@pnp/common\";\r\nimport { odataUrlFrom } from \"../odata\";\r\nimport { metadata } from \"../utils/metadata\";\r\nimport { body } from \"@pnp/odata\";\r\nimport { spPost } from \"../operations\";\r\nimport { tag } from \"../telemetry\";\r\n\r\n@defaultPath(\"comments\")\r\nexport class _Comments extends _SharePointQueryableCollection<ICommentInfo[]> {\r\n\r\n    /**\r\n     * Adds a new comment to this collection\r\n     * \r\n     * @param info Comment information to add\r\n     */\r\n    @tag(\"coms.add\")\r\n    public async add(info: string | ICommentInfo): Promise<IComment & ICommentInfo> {\r\n\r\n        if (typeof info === \"string\") {\r\n            info = <ICommentInfo>{ text: info };\r\n        }\r\n\r\n        const postBody = body(assign(metadata(\"Microsoft.SharePoint.Comments.comment\"), info));\r\n\r\n        const d = await spPost(this.clone(Comments, null), postBody);\r\n\r\n        return assign(this.getById(d.id), d);\r\n    }\r\n\r\n    /**\r\n     * Gets a comment by id\r\n     * \r\n     * @param id Id of the comment to load\r\n     */\r\n    public getById(id: string | number): IComment {\r\n        return tag.configure(Comment(this).concat(`(${id})`), \"coms.getById\");\r\n    }\r\n\r\n    /**\r\n     * Deletes all the comments in this collection\r\n     */\r\n    public clear(): Promise<boolean> {\r\n        return spPost<boolean>(tag.configure(this.clone(Comments, \"DeleteAll\"), \"coms.clear\"));\r\n    }\r\n}\r\nexport interface IComments extends _Comments {}\r\nexport const Comments = spInvokableFactory<IComments>(_Comments);\r\n\r\nexport class _Comment extends _SharePointQueryableInstance<ICommentInfo> {\r\n\r\n    /**\r\n     * A comment's replies\r\n     */\r\n    public get replies(): IReplies {\r\n        return tag.configure(Replies(this), \"com.replies\");\r\n    }\r\n\r\n    /**\r\n     * Likes the comment as the current user\r\n     */\r\n    @tag(\"com.like\")\r\n    public like(): Promise<void> {\r\n        return spPost(this.clone(Comment, \"Like\"));\r\n    }\r\n\r\n    /**\r\n     * Unlikes the comment as the current user\r\n     */\r\n    @tag(\"com.unlike\")\r\n    public unlike(): Promise<void> {\r\n        return spPost(this.clone(Comment, \"Unlike\"));\r\n    }\r\n\r\n    /**\r\n     * Deletes this comment\r\n     */\r\n    @tag(\"com.delete\")\r\n    public delete(): Promise<void> {\r\n        return spPost(this.clone(Comment, \"DeleteComment\"));\r\n    }\r\n}\r\nexport interface IComment extends _Comment {}\r\nexport const Comment = spInvokableFactory<IComment>(_Comment);\r\n\r\n@defaultPath(\"replies\")\r\nexport class _Replies extends _SharePointQueryableCollection<ICommentInfo[]> {\r\n\r\n    /**\r\n     * Adds a new reply to this collection\r\n     * \r\n     * @param info Comment information to add\r\n     */\r\n    @tag(\"reps.add\")\r\n    public async add(info: string | ICommentInfo): Promise<IComment & ICommentInfo> {\r\n\r\n        if (typeof info === \"string\") {\r\n            info = <ICommentInfo>{ text: info };\r\n        }\r\n\r\n        const postBody = body(assign(metadata(\"Microsoft.SharePoint.Comments.comment\"), info));\r\n\r\n        const d = await spPost(this.clone(Replies, null), postBody);\r\n\r\n        return assign(Comment(odataUrlFrom(d)), d);\r\n    }\r\n}\r\nexport interface IReplies extends _Replies {}\r\nexport const Replies = spInvokableFactory<IReplies>(_Replies);\r\n\r\n/**\r\n * Defines the information for a comment author\r\n */\r\nexport interface ICommentAuthorData {\r\n    email: string;\r\n    id: number;\r\n    isActive: boolean;\r\n    isExternal: boolean;\r\n    jobTitle: string | null;\r\n    loginName: string;\r\n    name: string;\r\n    principalType: number;\r\n    userId: any | null;\r\n}\r\n\r\n/**\r\n * Defines the information for a comment\r\n */\r\nexport interface ICommentInfo {\r\n    author: ICommentAuthorData;\r\n    createdDate: string;\r\n    id: string;\r\n    isLikedByUser: boolean;\r\n    isReply: boolean;\r\n    itemId: number;\r\n    likeCount: number;\r\n    listId: string;\r\n    mentions: {\r\n        loginName: string;\r\n        email: string;\r\n        name: string;\r\n    } | null;\r\n    parentId: string;\r\n    replyCount: number;\r\n    text: string;\r\n}\r\n\r\nexport interface ILikeData {\r\n    name: string;\r\n    loginName: string;\r\n    id: number;\r\n    email: string;\r\n    creationDate: string;\r\n}\r\n\r\nexport interface ILikedByInformation {\r\n    likedBy: {\r\n        creationDate: string;\r\n        email: string;\r\n        id: number;\r\n        loginName: string;\r\n        name: string;\r\n    }[];\r\n    isLikedByUser: boolean;\r\n    likeCount: number;\r\n}\r\n","import { invokableFactory, body, headers, IQueryable } from \"@pnp/odata\";\r\nimport { ITypedHash, assign, getGUID, hOP, stringIsNullOrEmpty, objectDefinedNotNull, combine, isUrlAbsolute, isArray } from \"@pnp/common\";\r\nimport { IFile } from \"../files/types\";\r\nimport { Item, IItem } from \"../items/types\";\r\nimport { SharePointQueryable, _SharePointQueryable, ISharePointQueryable, SharePointQueryableCollection } from \"../sharepointqueryable\";\r\nimport { metadata } from \"../utils/metadata\";\r\nimport { List } from \"../lists/types\";\r\nimport { odataUrlFrom } from \"../odata\";\r\nimport { Web, IWeb } from \"../webs/types\";\r\nimport { extractWebUrl } from \"../utils/extractweburl\";\r\nimport { Site } from \"../sites/types\";\r\nimport { spPost } from \"../operations\";\r\nimport { getNextOrder, reindex } from \"./funcs\";\r\nimport \"../files/web\";\r\nimport \"../comments/item\";\r\nimport { tag } from \"../telemetry\";\r\n\r\n/**\r\n * Page promotion state\r\n */\r\nexport const enum PromotedState {\r\n    /**\r\n     * Regular client side page\r\n     */\r\n    NotPromoted = 0,\r\n    /**\r\n     * Page that will be promoted as news article after publishing\r\n     */\r\n    PromoteOnPublish = 1,\r\n    /**\r\n     * Page that is promoted as news article\r\n     */\r\n    Promoted = 2,\r\n}\r\n\r\n/**\r\n * Type describing the available page layout types for client side \"modern\" pages\r\n */\r\nexport type ClientsidePageLayoutType = \"Article\" | \"Home\" | \"SingleWebPartAppPage\" | \"RepostPage\";\r\n\r\n/**\r\n * Column size factor. Max value is 12 (= one column), other options are 8,6,4 or 0\r\n */\r\nexport type CanvasColumnFactor = 0 | 2 | 4 | 6 | 8 | 12;\r\n\r\nfunction initFrom(o: ISharePointQueryable, url: string): IClientsidePage {\r\n    return ClientsidePage(extractWebUrl(o.toUrl()), url).configureFrom(o);\r\n}\r\n\r\n/** \r\n * Represents the data and methods associated with client side \"modern\" pages\r\n */\r\nexport class _ClientsidePage extends _SharePointQueryable implements IClientsidePage {\r\n\r\n    private _pageSettings: IClientsidePageSettingsSlice;\r\n    private _layoutPart: ILayoutPartsContent;\r\n    private _bannerImageDirty: boolean;\r\n\r\n    /**\r\n     * PLEASE DON'T USE THIS CONSTRUCTOR DIRECTLY, thank you 🐇\r\n     */\r\n    constructor(\r\n        baseUrl: string | ISharePointQueryable,\r\n        path?: string,\r\n        protected json?: Partial<IPageData>,\r\n        noInit = false,\r\n        public sections: CanvasSection[] = [],\r\n        public commentsDisabled = false) {\r\n\r\n        super(baseUrl, path);\r\n\r\n        this._bannerImageDirty = false;\r\n\r\n        // ensure we have a good url to build on for the pages api\r\n        if (typeof baseUrl === \"string\") {\r\n            this.data.parentUrl = \"\";\r\n            this.data.url = combine(extractWebUrl(baseUrl), path);\r\n        } else {\r\n            this.assign(initFrom(baseUrl, null), path);\r\n        }\r\n\r\n        // set a default page settings slice\r\n        this._pageSettings = { controlType: 0, pageSettingsSlice: { isDefaultDescription: true, isDefaultThumbnail: true } };\r\n\r\n        // set a default layout part\r\n        this._layoutPart = _ClientsidePage.getDefaultLayoutPart();\r\n\r\n        if (typeof json !== \"undefined\" && !noInit) {\r\n            this.fromJSON(json);\r\n        }\r\n    }\r\n\r\n    private static getDefaultLayoutPart(): ILayoutPartsContent {\r\n        return {\r\n            dataVersion: \"1.4\",\r\n            description: \"Title Region Description\",\r\n            id: \"cbe7b0a9-3504-44dd-a3a3-0e5cacd07788\",\r\n            instanceId: \"cbe7b0a9-3504-44dd-a3a3-0e5cacd07788\",\r\n            properties: {\r\n                authorByline: [],\r\n                authors: [],\r\n                layoutType: \"FullWidthImage\",\r\n                showPublishDate: false,\r\n                showTopicHeader: false,\r\n                textAlignment: \"Left\",\r\n                title: \"\",\r\n                topicHeader: \"\",\r\n            },\r\n            serverProcessedContent: { htmlStrings: {}, searchablePlainTexts: {}, imageSources: {}, links: {} },\r\n            title: \"Title area\",\r\n        };\r\n    }\r\n\r\n    public get pageLayout(): ClientsidePageLayoutType {\r\n        return this.json.PageLayoutType;\r\n    }\r\n\r\n    public set pageLayout(value: ClientsidePageLayoutType) {\r\n        this.json.PageLayoutType = value;\r\n    }\r\n\r\n    public get bannerImageUrl(): string {\r\n        return this.json.BannerImageUrl;\r\n    }\r\n\r\n    public set bannerImageUrl(value: string) {\r\n        this.json.BannerImageUrl = value;\r\n        this._bannerImageDirty = true;\r\n    }\r\n\r\n    public get topicHeader(): string {\r\n        return objectDefinedNotNull(this.json.TopicHeader) ? this.json.TopicHeader : \"\";\r\n    }\r\n\r\n    public set topicHeader(value: string) {\r\n        this.json.TopicHeader = value;\r\n        this._layoutPart.properties.topicHeader = value;\r\n        if (stringIsNullOrEmpty(value)) {\r\n            this.showTopicHeader = false;\r\n        }\r\n    }\r\n\r\n    public get title(): string {\r\n        return this._layoutPart.properties.title;\r\n    }\r\n\r\n    public set title(value: string) {\r\n        this.json.Title = value;\r\n        this._layoutPart.properties.title = value;\r\n    }\r\n\r\n    public get layoutType(): LayoutType {\r\n        return this._layoutPart.properties.layoutType;\r\n    }\r\n\r\n    public set layoutType(value: LayoutType) {\r\n        this._layoutPart.properties.layoutType = value;\r\n    }\r\n\r\n    public get headerTextAlignment(): TextAlignment {\r\n        return this._layoutPart.properties.textAlignment;\r\n    }\r\n\r\n    public set headerTextAlignment(value: TextAlignment) {\r\n        this._layoutPart.properties.textAlignment = value;\r\n    }\r\n\r\n    public get showTopicHeader(): boolean {\r\n        return this._layoutPart.properties.showTopicHeader;\r\n    }\r\n\r\n    public set showTopicHeader(value: boolean) {\r\n        this._layoutPart.properties.showTopicHeader = value;\r\n    }\r\n\r\n    public get showPublishDate(): boolean {\r\n        return this._layoutPart.properties.showPublishDate;\r\n    }\r\n\r\n    public set showPublishDate(value: boolean) {\r\n        this._layoutPart.properties.showPublishDate = value;\r\n    }\r\n\r\n    public get hasVerticalSection(): boolean {\r\n        return this.sections.findIndex(s => s.layoutIndex === 2) > -1;\r\n    }\r\n\r\n    public get authorByLine(): string | null {\r\n        if (isArray(this.json.AuthorByline) && this.json.AuthorByline.length > 0) {\r\n            return this.json.AuthorByline[0];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public get verticalSection(): CanvasSection | null {\r\n        if (this.hasVerticalSection) {\r\n            return this.addVerticalSection();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Add a section to this page\r\n     */\r\n    public addSection(): CanvasSection {\r\n        const section = new CanvasSection(this, getNextOrder(this.sections), 1);\r\n        this.sections.push(section);\r\n        return section;\r\n    }\r\n\r\n    /**\r\n     * Add a section to this page\r\n     */\r\n    public addVerticalSection(): CanvasSection {\r\n\r\n        // we can only have one vertical section so we find it if it exists\r\n        const sectionIndex = this.sections.findIndex(s => s.layoutIndex === 2);\r\n        if (sectionIndex > -1) {\r\n            return this.sections[sectionIndex];\r\n        }\r\n\r\n        const section = new CanvasSection(this, getNextOrder(this.sections), 2);\r\n        this.sections.push(section);\r\n        return section;\r\n    }\r\n\r\n    /**\r\n     * Loads this instance from the appropriate JSON data\r\n     * \r\n     * @param pageData JSON data to load (replaces any existing data)\r\n     */\r\n    public fromJSON(pageData: Partial<IPageData>): this {\r\n\r\n        this.json = pageData;\r\n\r\n        const canvasControls: IClientsideControlBaseData[] = JSON.parse(pageData.CanvasContent1);\r\n\r\n        const layouts = <ILayoutPartsContent[]>JSON.parse(pageData.LayoutWebpartsContent);\r\n        if (layouts && layouts.length > 0) {\r\n            this._layoutPart = layouts[0];\r\n        }\r\n\r\n        this.setControls(canvasControls);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Loads this page's content from the server\r\n     */\r\n    @tag(\"csp.load\")\r\n    public async load(): Promise<IClientsidePage> {\r\n\r\n        const item = await this.getItem<{ Id: number, CommentsDisabled: boolean }>(\"Id\", \"CommentsDisabled\");\r\n        const pageData = await SharePointQueryable(this, `_api/sitepages/pages(${item.Id})`)<IPageData>();\r\n        this.commentsDisabled = item.CommentsDisabled;\r\n        return this.fromJSON(pageData);\r\n    }\r\n\r\n    /**\r\n     * Persists the content changes (sections, columns, and controls) [does not work with batching]\r\n     * \r\n     * @param publish If true the page is published, if false the changes are persisted to SharePoint but not published [Default: true]\r\n     */\r\n    @tag(\"csp.save\")\r\n    public async save(publish = true): Promise<boolean> {\r\n\r\n        if (this.json.Id === null) {\r\n            throw Error(\"The id for this page is null. If you want to create a new page, please use ClientSidePage.Create\");\r\n        }\r\n\r\n        if (this._bannerImageDirty) {\r\n\r\n            // we have to do these gymnastics to set the banner image url\r\n            let origImgUrl = this.json.BannerImageUrl;\r\n\r\n            if (isUrlAbsolute(origImgUrl)) {\r\n                // do our best to make this a server relative url by removing the x.sharepoint.com part\r\n                origImgUrl = origImgUrl.replace(/^https?:\\/\\/[a-z0-9\\.]*?\\.[a-z]{2,3}\\//i, \"/\");\r\n            }\r\n\r\n            const site = Site(extractWebUrl(this.toUrl()));\r\n            const web = Web(extractWebUrl(this.toUrl()));\r\n            const imgFile = web.getFileByServerRelativePath(origImgUrl);\r\n\r\n            let siteId = \"\";\r\n            let webId = \"\";\r\n            let imgId = \"\";\r\n            let listId = \"\";\r\n            let webUrl = \"\";\r\n\r\n            const batch = web.createBatch();\r\n\r\n            site.select(\"Id\", \"Url\").inBatch(batch)().then((r1: { Id: string }) => siteId = r1.Id);\r\n            web.select(\"Id\", \"Url\").inBatch(batch)().then((r2: { Id: string, Url: string }) => { webId = r2.Id; webUrl = r2.Url; });\r\n            imgFile.listItemAllFields.select(\"UniqueId\", \"ParentList/Id\").expand(\"ParentList\").inBatch(batch)()\r\n                .then((r3: { UniqueId: string, ParentList: { Id: string } }) => { imgId = r3.UniqueId; listId = r3.ParentList.Id; });\r\n\r\n            // we know the .then calls above will run before execute resolves, ensuring the vars are set\r\n            await batch.execute();\r\n\r\n            const f = SharePointQueryable(webUrl, \"_layouts/15/getpreview.ashx\");\r\n            f.query.set(\"guidSite\", `${siteId}`);\r\n            f.query.set(\"guidWeb\", `${webId}`);\r\n            f.query.set(\"guidFile\", `${imgId}`);\r\n            this.bannerImageUrl = f.toUrlAndQuery();\r\n\r\n            if (!objectDefinedNotNull(this._layoutPart.serverProcessedContent)) {\r\n                this._layoutPart.serverProcessedContent = <any>{};\r\n            }\r\n\r\n            this._layoutPart.serverProcessedContent.imageSources = { imageSource: origImgUrl };\r\n\r\n            if (!objectDefinedNotNull(this._layoutPart.serverProcessedContent.customMetadata)) {\r\n                this._layoutPart.serverProcessedContent.customMetadata = <any>{};\r\n            }\r\n\r\n            this._layoutPart.serverProcessedContent.customMetadata.imageSource = {\r\n                listId,\r\n                siteId,\r\n                uniqueId: imgId,\r\n                webId,\r\n            };\r\n            this._layoutPart.properties.webId = webId;\r\n            this._layoutPart.properties.siteId = siteId;\r\n            this._layoutPart.properties.listId = listId;\r\n            this._layoutPart.properties.uniqueId = imgId;\r\n        }\r\n\r\n        // we try and check out the page for the user\r\n        if (!this.json.IsPageCheckedOutToCurrentUser) {\r\n            await spPost(initFrom(this, `_api/sitepages/pages(${this.json.Id})/checkoutpage`));\r\n        }\r\n\r\n        const saveBody = Object.assign(metadata(\"SP.Publishing.SitePage\"), {\r\n            AuthorByline: this.json.AuthorByline || [],\r\n            BannerImageUrl: this.bannerImageUrl,\r\n            CanvasContent1: this.getCanvasContent1(),\r\n            LayoutWebpartsContent: this.getLayoutWebpartsContent(),\r\n            Title: this.title,\r\n            TopicHeader: this.topicHeader,\r\n        });\r\n\r\n        const updater = initFrom(this, `_api/sitepages/pages(${this.json.Id})/savepage`);\r\n        await spPost<boolean>(updater, headers({ \"if-match\": \"*\" }, body(saveBody)));\r\n\r\n        let r = true;\r\n\r\n        if (publish) {\r\n            r = await spPost(initFrom(this, `_api/sitepages/pages(${this.json.Id})/publish`));\r\n            if (r) {\r\n                this.json.IsPageCheckedOutToCurrentUser = false;\r\n            }\r\n        }\r\n\r\n        this._bannerImageDirty = false;\r\n\r\n        return r;\r\n    }\r\n\r\n    /**\r\n     * Discards the checkout of this page\r\n     */\r\n    @tag(\"csp.discardPageCheckout\")\r\n    public async discardPageCheckout(): Promise<void> {\r\n\r\n        if (this.json.Id === null) {\r\n            throw Error(\"The id for this page is null. If you want to create a new page, please use ClientSidePage.Create\");\r\n        }\r\n\r\n        const d = await spPost(initFrom(this, `_api/sitepages/pages(${this.json.Id})/discardPage`), body(metadata(\"SP.Publishing.SitePage\")));\r\n\r\n        this.fromJSON(d);\r\n    }\r\n\r\n    /**\r\n     * Promotes this page as a news item\r\n     */\r\n    @tag(\"csp.promoteToNews\")\r\n    public async promoteToNews(): Promise<boolean> {\r\n        return this.promoteNewsImpl(\"promoteToNews\");\r\n    }\r\n\r\n    // API is currently broken on server side\r\n    // public async demoteFromNews(): Promise<boolean> {\r\n    //     return this.promoteNewsImpl(\"demoteFromNews\");\r\n    // }\r\n\r\n    /**\r\n     * Finds a control by the specified instance id\r\n     *\r\n     * @param id Instance id of the control to find\r\n     */\r\n    public findControlById<T extends ColumnControl<any> = ColumnControl<any>>(id: string): T {\r\n        return this.findControl((c) => c.id === id);\r\n    }\r\n\r\n    /**\r\n     * Finds a control within this page's control tree using the supplied predicate\r\n     *\r\n     * @param predicate Takes a control and returns true or false, if true that control is returned by findControl\r\n     */\r\n    public findControl<T extends ColumnControl<any> = ColumnControl<any>>(predicate: (c: ColumnControl<any>) => boolean): T {\r\n        // check all sections\r\n        for (let i = 0; i < this.sections.length; i++) {\r\n            // check all columns\r\n            for (let j = 0; j < this.sections[i].columns.length; j++) {\r\n                // check all controls\r\n                for (let k = 0; k < this.sections[i].columns[j].controls.length; k++) {\r\n                    // check to see if the predicate likes this control\r\n                    if (predicate(this.sections[i].columns[j].controls[k])) {\r\n                        return <T>this.sections[i].columns[j].controls[k];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // we found nothing so give nothing back\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Creates a copy of this page\r\n     * \r\n     * @param web The web where we will create the copy\r\n     * @param pageName The file name of the new page\r\n     * @param title The title of the new page\r\n     * @param publish If true the page will be published\r\n     */\r\n    @tag(\"csp.copy\")\r\n    public async copy(web: IWeb, pageName: string, title: string, publish = true, promotedState?: PromotedState): Promise<IClientsidePage> {\r\n\r\n        const page = await CreateClientsidePage(web, pageName, title, this.pageLayout, promotedState);\r\n\r\n        // we know the method is on the class - but it is protected so not part of the interface\r\n        (<any>page).setControls(this.getControls());\r\n\r\n        // we need to do some work to set the banner image url in the copied page\r\n        if (!stringIsNullOrEmpty(this.json.BannerImageUrl)) {\r\n\r\n            // use a URL to parse things for us\r\n            const url = new URL(this.json.BannerImageUrl);\r\n\r\n            // helper function to translate the guid strings into properly formatted guids with dashes\r\n            const makeGuid = (s: string) => s.replace(/(.{8})(.{4})(.{4})(.{4})(.{12})/g, \"$1-$2-$3-$4-$5\");\r\n\r\n            // protect against errors because the serverside impl has changed, we'll just skip\r\n            if (url.searchParams.has(\"guidSite\") && url.searchParams.has(\"guidWeb\") && url.searchParams.has(\"guidFile\")) {\r\n\r\n                const guidSite = makeGuid(url.searchParams.get(\"guidSite\"));\r\n                const guidWeb = makeGuid(url.searchParams.get(\"guidWeb\"));\r\n                const guidFile = makeGuid(url.searchParams.get(\"guidFile\"));\r\n\r\n                const site = Site(extractWebUrl(this.toUrl()));\r\n                const id = await site.select(\"Id\")<{ Id: string }>();\r\n                // the site guid must match the current site's guid or we are unable to set the image\r\n                if (id.Id === guidSite) {\r\n\r\n                    const openWeb = await site.openWebById(guidWeb);\r\n                    const file = await openWeb.web.getFileById(guidFile).select(\"ServerRelativeUrl\")();\r\n\r\n                    const props: any = {};\r\n                    if (this._layoutPart.properties) {\r\n\r\n                        if (hOP(this._layoutPart.properties, \"translateX\")) {\r\n                            props.translateX = this._layoutPart.properties.translateX;\r\n                        }\r\n\r\n\r\n                        if (hOP(this._layoutPart.properties, \"translateY\")) {\r\n                            props.translateY = this._layoutPart.properties.translateY;\r\n                        }\r\n\r\n\r\n                        if (hOP(this._layoutPart.properties, \"imageSourceType\")) {\r\n                            props.imageSourceType = this._layoutPart.properties.imageSourceType;\r\n                        }\r\n\r\n\r\n                        if (hOP(this._layoutPart.properties, \"altText\")) {\r\n                            props.altText = this._layoutPart.properties.altText;\r\n                        }\r\n                    }\r\n\r\n                    page.setBannerImage(file.ServerRelativeUrl, props);\r\n                }\r\n            }\r\n        }\r\n\r\n        await page.save(publish);\r\n\r\n        return page;\r\n    }\r\n\r\n    /**\r\n     * Sets the modern page banner image\r\n     * \r\n     * @param url Url of the image to display\r\n     * @param altText Alt text to describe the image\r\n     * @param bannerProps Additional properties to control display of the banner\r\n     */\r\n    public setBannerImage(url: string, props?: {\r\n        altText?: string;\r\n        imageSourceType?: number;\r\n        translateX?: number;\r\n        translateY?: number;\r\n    }): void {\r\n\r\n        this.bannerImageUrl = url;\r\n        this._layoutPart.properties.imageSourceType = 2; // this seems to always be true, so default?\r\n\r\n        if (objectDefinedNotNull(props)) {\r\n            if (hOP(props, \"translateX\")) {\r\n                this._layoutPart.properties.translateX = props.translateX;\r\n            }\r\n            if (hOP(props, \"translateY\")) {\r\n                this._layoutPart.properties.translateY = props.translateY;\r\n            }\r\n            if (hOP(props, \"imageSourceType\")) {\r\n                this._layoutPart.properties.imageSourceType = props.imageSourceType;\r\n            }\r\n            if (hOP(props, \"altText\")) {\r\n                this._layoutPart.properties.altText = props.altText;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the authors for this page from the supplied list of user integer ids\r\n     * \r\n     * @param authorId The integer id of the user to set as the author\r\n     */\r\n    public async setAuthorById(authorId: number): Promise<void> {\r\n\r\n        // get logins and send to loginname method?\r\n        const userLoginData = await SharePointQueryableCollection(extractWebUrl(this.toUrl()), \"/_api/web/siteusers\")\r\n            .configureFrom(this)\r\n            .filter(`Id eq ${authorId}`)\r\n            .select(\"LoginName\")<{ LoginName: string }[]>();\r\n\r\n        if (userLoginData.length < 1) {\r\n            throw Error(`Could not find user with id ${authorId}.`);\r\n        }\r\n\r\n        return this.setAuthorByLoginName(userLoginData[0].LoginName);\r\n    }\r\n\r\n    /**\r\n     * Sets the authors for this page from the supplied list of user integer ids\r\n     * \r\n     * @param authorLoginName The login name of the user (ex: i:0#.f|membership|name@tenant.com)\r\n     */\r\n    public async setAuthorByLoginName(authorLoginName: string): Promise<void> {\r\n\r\n        // get logins and send to loginname method?\r\n        const userLoginData = await SharePointQueryableCollection(extractWebUrl(this.toUrl()), \"/_api/web/siteusers\")\r\n            .configureFrom(this)\r\n            .filter(`LoginName eq '${encodeURIComponent(authorLoginName)}'`)\r\n            .select(\"UserPrincipalName\", \"Title\")<{ UserPrincipalName: string, Title: string }[]>();\r\n\r\n        if (userLoginData.length < 1) {\r\n            throw Error(`Could not find user with login name '${authorLoginName}'.`);\r\n        }\r\n\r\n        this.json.AuthorByline = [authorLoginName];\r\n        this._layoutPart.properties.authorByline = [authorLoginName];\r\n        this._layoutPart.properties.authors = [{\r\n            id: authorLoginName,\r\n            name: userLoginData[0].Title,\r\n            role: \"\",\r\n            upn: userLoginData[0].UserPrincipalName,\r\n        }];\r\n    }\r\n\r\n    /**\r\n     * Gets the list item associated with this clientside page\r\n     * \r\n     * @param selects Specific set of fields to include when getting the item\r\n     */\r\n    @tag(\"csp.getItem\")\r\n    public async getItem<T>(...selects: string[]): Promise<IItem & T> {\r\n\r\n        const initer = initFrom(this, \"/_api/lists/EnsureClientRenderedSitePagesLibrary\").select(\"EnableModeration\", \"EnableMinorVersions\", \"Id\");\r\n        const listData = await spPost<{ Id: string, \"odata.id\": string }>(initer);\r\n        const item = (List(listData[\"odata.id\"])).configureFrom(this).items.getById(this.json.Id);\r\n        const itemData: T = await item.select.apply(item, selects)();\r\n        return assign((Item(odataUrlFrom(itemData))).configureFrom(this), itemData);\r\n    }\r\n\r\n    /**\r\n     * Extends this queryable from the provided parent \r\n     * \r\n     * @param parent Parent queryable from which we will derive a base url\r\n     * @param path Additional path\r\n     */\r\n    protected assign(parent: IQueryable<any>, path?: string) {\r\n        this.data.parentUrl = parent.data.url;\r\n        this.data.url = combine(this.data.parentUrl, path || \"\");\r\n        this.configureFrom(parent);\r\n    }\r\n\r\n    protected getCanvasContent1(): string {\r\n        return JSON.stringify(this.getControls());\r\n    }\r\n\r\n    protected getLayoutWebpartsContent(): string {\r\n        if (this._layoutPart) {\r\n            return JSON.stringify([this._layoutPart]);\r\n        } else {\r\n            return JSON.stringify(null);\r\n        }\r\n    }\r\n\r\n    protected setControls(controls: IClientsideControlBaseData[]): void {\r\n\r\n        if (controls && controls.length) {\r\n\r\n            for (let i = 0; i < controls.length; i++) {\r\n\r\n                // if no control type is present this is a column which we give type 0 to let us process it\r\n                const controlType = hOP(controls[i], \"controlType\") ? controls[i].controlType : 0;\r\n\r\n                switch (controlType) {\r\n\r\n                    case 0:\r\n                        // empty canvas column or page settings\r\n                        if (hOP(controls[i], \"pageSettingsSlice\")) {\r\n                            this._pageSettings = <IClientsidePageSettingsSlice>controls[i];\r\n                        } else {\r\n                            // we have an empty column\r\n                            this.mergeColumnToTree(new CanvasColumn(<IClientsidePageColumnData>controls[i]));\r\n                        }\r\n                        break;\r\n                    case 3:\r\n                        const part = new ClientsideWebpart(<IClientsideWebPartData>controls[i]);\r\n                        this.mergePartToTree(part, part.data.position);\r\n                        break;\r\n                    case 4:\r\n                        const textData = <IClientsideTextData>controls[i];\r\n                        const text = new ClientsideText(textData.innerHTML, textData);\r\n                        this.mergePartToTree(text, text.data.position);\r\n                        break;\r\n                }\r\n            }\r\n\r\n            reindex(this.sections);\r\n        }\r\n    }\r\n\r\n    protected getControls(): IClientsideControlBaseData[] {\r\n\r\n        // reindex things\r\n        reindex(this.sections);\r\n\r\n        // rollup the control changes\r\n        const canvasData: any[] = [];\r\n\r\n        this.sections.forEach(section => {\r\n            section.columns.forEach(column => {\r\n                if (column.controls.length < 1) {\r\n                    // empty column\r\n                    canvasData.push({\r\n                        displayMode: column.data.displayMode,\r\n                        emphasis: this.getEmphasisObj(section.emphasis),\r\n                        position: column.data.position,\r\n                    });\r\n                } else {\r\n                    column.controls.forEach(control => {\r\n                        control.data.emphasis = this.getEmphasisObj(section.emphasis);\r\n                        canvasData.push(control.data);\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        canvasData.push(this._pageSettings);\r\n\r\n        return canvasData;\r\n    }\r\n\r\n    private getEmphasisObj(value: 0 | 1 | 2 | 3): IClientControlEmphasis {\r\n        if (value < 1 || value > 3) {\r\n            return {};\r\n        }\r\n\r\n        return { zoneEmphasis: value };\r\n    }\r\n\r\n    private async promoteNewsImpl(method: string): Promise<boolean> {\r\n\r\n        if (this.json.Id === null) {\r\n            throw Error(\"The id for this page is null.\");\r\n        }\r\n\r\n        // per bug #858 if we promote before we have ever published the last published date will\r\n        // forever not be updated correctly in the modern news webpart. Because this will affect very\r\n        // few folks we just go ahead and publish for them here as that is likely what they intended.\r\n        if (stringIsNullOrEmpty(this.json.VersionInfo.LastVersionCreatedBy)) {\r\n            const lastPubData = new Date(this.json.VersionInfo.LastVersionCreated);\r\n            // no modern page should reasonable be published before the year 2000 :)\r\n            if (lastPubData.getFullYear() < 2000) {\r\n                await this.save(true);\r\n            }\r\n        }\r\n\r\n        return await spPost(initFrom(this, `_api/sitepages/pages(${this.json.Id})/${method}`), body(metadata(\"SP.Publishing.SitePage\")));\r\n    }\r\n\r\n    /**\r\n     * Merges the control into the tree of sections and columns for this page\r\n     * \r\n     * @param control The control to merge\r\n     */\r\n    private mergePartToTree(control: any, positionData: IPosition): void {\r\n\r\n        let column: CanvasColumn = null;\r\n        let sectionFactor: CanvasColumnFactor = 12;\r\n        let sectionIndex = 0;\r\n        let zoneIndex = 0;\r\n        let layoutIndex = 1;\r\n\r\n        // handle case where we don't have position data (shouldn't happen?)\r\n        if (positionData) {\r\n            if (hOP(positionData, \"zoneIndex\")) {\r\n                zoneIndex = positionData.zoneIndex;\r\n            }\r\n            if (hOP(positionData, \"sectionIndex\")) {\r\n                sectionIndex = positionData.sectionIndex;\r\n            }\r\n            if (hOP(positionData, \"sectionFactor\")) {\r\n                sectionFactor = positionData.sectionFactor;\r\n            }\r\n            if (hOP(positionData, \"layoutIndex\")) {\r\n                layoutIndex = positionData.layoutIndex;\r\n            }\r\n        }\r\n\r\n        const zoneEmphasis = control.data?.emphasis?.zoneEmphasis ?? 0;\r\n        const section = this.getOrCreateSection(zoneIndex, layoutIndex, zoneEmphasis);\r\n\r\n        const columns = section.columns.filter(c => c.order === sectionIndex);\r\n        if (columns.length < 1) {\r\n            column = section.addColumn(sectionFactor, layoutIndex);\r\n        } else {\r\n            column = columns[0];\r\n        }\r\n\r\n        control.column = column;\r\n        column.addControl(control);\r\n    }\r\n\r\n    /**\r\n     * Merges the supplied column into the tree\r\n     * \r\n     * @param column Column to merge\r\n     * @param position The position data for the column\r\n     */\r\n    private mergeColumnToTree(column: CanvasColumn): void {\r\n\r\n        const order = hOP(column.data, \"position\") && hOP(column.data.position, \"zoneIndex\") ? column.data.position.zoneIndex : 0;\r\n        const layoutIndex = hOP(column.data, \"position\") && hOP(column.data.position, \"layoutIndex\") ? column.data.position.layoutIndex : 1;\r\n        const section = this.getOrCreateSection(order, layoutIndex, column.data.emphasis.zoneEmphasis || 0);\r\n        column.section = section;\r\n        section.columns.push(column);\r\n    }\r\n\r\n    /**\r\n     * Handle the logic to get or create a section based on the supplied order and layoutIndex\r\n     * \r\n     * @param order Section order\r\n     * @param layoutIndex Layout Index (1 === normal, 2 === vertical section)\r\n     * @param emphasis The section emphasis\r\n     */\r\n    private getOrCreateSection(order: number, layoutIndex: number, emphasis: 0 | 1 | 2 | 3): CanvasSection {\r\n\r\n        let section: CanvasSection = null;\r\n        const sections = this.sections.filter(s => s.order === order && s.layoutIndex === layoutIndex);\r\n\r\n        if (sections.length < 1) {\r\n            section = layoutIndex === 2 ? this.addVerticalSection() : this.addSection();\r\n            section.order = order;\r\n            section.emphasis = emphasis;\r\n        } else {\r\n            section = sections[0];\r\n        }\r\n\r\n        return section;\r\n    }\r\n}\r\nexport interface IClientsidePage extends _ClientsidePage { }\r\n\r\n/**\r\n * Invokable factory for IClientSidePage instances\r\n */\r\nconst ClientsidePage = (\r\n    baseUrl: string | ISharePointQueryable,\r\n    path?: string,\r\n    json?: Partial<IPageData>,\r\n    noInit = false,\r\n    sections: CanvasSection[] = [],\r\n    commentsDisabled = false): IClientsidePage => {\r\n\r\n    return invokableFactory<IClientsidePage>(_ClientsidePage)(baseUrl, path, json, noInit, sections, commentsDisabled);\r\n};\r\n\r\n/**\r\n * Loads a client side page from the supplied IFile instance\r\n * \r\n * @param file Source IFile instance\r\n */\r\nexport const ClientsidePageFromFile = async (file: IFile): Promise<IClientsidePage> => {\r\n\r\n    const item = await file.getItem<{ Id: number }>();\r\n    const page = ClientsidePage(extractWebUrl(file.toUrl()), \"\", { Id: item.Id }, true);\r\n    return page.configureFrom(file).load();\r\n};\r\n\r\n/**\r\n * Creates a new client side page\r\n * \r\n * @param web The web or list\r\n * @param pageName The name of the page (filename)\r\n * @param title The page's title\r\n * @param PageLayoutType Layout to use when creating the page\r\n */\r\nexport const CreateClientsidePage =\r\n    async (web: IWeb, pageName: string, title: string, PageLayoutType: ClientsidePageLayoutType = \"Article\", promotedState: PromotedState = 0): Promise<IClientsidePage> => {\r\n\r\n        // patched because previously we used the full page name with the .aspx at the end\r\n        // this allows folk's existing code to work after the re-write to the new API\r\n        pageName = pageName.replace(/\\.aspx$/i, \"\");\r\n\r\n        // initialize the page, at this point a checked-out page with a junk filename will be created.\r\n        const pageInitData: IPageData = await spPost(initFrom(web, \"_api/sitepages/pages\"), body(Object.assign(metadata(\"SP.Publishing.SitePage\"), {\r\n            PageLayoutType,\r\n            PromotedState: promotedState,\r\n        })));\r\n\r\n        // now we can init our page with the save data\r\n        const newPage = ClientsidePage(web, \"\", pageInitData);\r\n        newPage.title = pageName;\r\n        await newPage.save(false);\r\n        newPage.title = title;\r\n        return newPage;\r\n    };\r\n\r\nexport class CanvasSection {\r\n\r\n    /**\r\n     * Used to track this object inside the collection at runtime\r\n     */\r\n    private _memId: string;\r\n\r\n    private _order: number;\r\n    private _layoutIndex: number;\r\n\r\n    constructor(protected page: IClientsidePage, order: number, layoutIndex: number, public columns: CanvasColumn[] = [], private _emphasis: 0 | 1 | 2 | 3 = 0) {\r\n        this._memId = getGUID();\r\n        this._order = order;\r\n        this._layoutIndex = layoutIndex;\r\n    }\r\n\r\n    public get order(): number {\r\n        return this._order;\r\n    }\r\n\r\n    public set order(value: number) {\r\n        this._order = value;\r\n        for (let i = 0; i < this.columns.length; i++) {\r\n            this.columns[i].data.position.zoneIndex = value;\r\n        }\r\n    }\r\n\r\n    public get layoutIndex(): number {\r\n        return this._layoutIndex;\r\n    }\r\n\r\n    public set layoutIndex(value: number) {\r\n        this._layoutIndex = value;\r\n        for (let i = 0; i < this.columns.length; i++) {\r\n            this.columns[i].data.position.layoutIndex = value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Default column (this.columns[0]) for this section\r\n     */\r\n    public get defaultColumn(): CanvasColumn {\r\n\r\n        if (this.columns.length < 1) {\r\n            this.addColumn(12);\r\n        }\r\n\r\n        return this.columns[0];\r\n    }\r\n\r\n    /**\r\n     * Adds a new column to this section\r\n     */\r\n    public addColumn(factor: CanvasColumnFactor, layoutIndex = 1): CanvasColumn {\r\n        const column = new CanvasColumn();\r\n        column.section = this;\r\n        column.data.position.zoneIndex = this.order;\r\n        column.data.position.layoutIndex = layoutIndex;\r\n        column.data.position.sectionFactor = factor;\r\n        column.order = getNextOrder(this.columns);\r\n        this.columns.push(column);\r\n        return column;\r\n    }\r\n\r\n    /**\r\n     * Adds a control to the default column for this section\r\n     *\r\n     * @param control Control to add to the default column\r\n     */\r\n    public addControl(control: ColumnControl<any>): this {\r\n        this.defaultColumn.addControl(control);\r\n        return this;\r\n    }\r\n\r\n    public get emphasis(): 0 | 1 | 2 | 3 {\r\n        return this._emphasis;\r\n    }\r\n\r\n    public set emphasis(value: 0 | 1 | 2 | 3) {\r\n        this._emphasis = value;\r\n    }\r\n\r\n    /**\r\n     * Removes this section and all contained columns and controls from the collection\r\n     */\r\n    public remove(): void {\r\n        this.page.sections = this.page.sections.filter(section => section._memId !== this._memId);\r\n        reindex(this.page.sections);\r\n    }\r\n}\r\n\r\nexport class CanvasColumn {\r\n\r\n    public static Default: IClientsidePageColumnData = {\r\n        controlType: 0,\r\n        displayMode: 2,\r\n        emphasis: {},\r\n        position: {\r\n            layoutIndex: 1,\r\n            sectionFactor: 12,\r\n            sectionIndex: 1,\r\n            zoneIndex: 1,\r\n        },\r\n    };\r\n\r\n    private _section: CanvasSection | null;\r\n    private _memId: string;\r\n\r\n    constructor(protected json: IClientsidePageColumnData = JSON.parse(JSON.stringify(CanvasColumn.Default)), public controls: ColumnControl<any>[] = []) {\r\n        this._section = null;\r\n        this._memId = getGUID();\r\n    }\r\n\r\n    public get data(): IClientsidePageColumnData {\r\n        return this.json;\r\n    }\r\n\r\n    public get section(): CanvasSection {\r\n        return this._section;\r\n    }\r\n\r\n    public set section(section: CanvasSection) {\r\n        this._section = section;\r\n    }\r\n\r\n    public get order(): number {\r\n        return this.data.position.sectionIndex;\r\n    }\r\n\r\n    public set order(value: number) {\r\n        this.data.position.sectionIndex = value;\r\n        for (let i = 0; i < this.controls.length; i++) {\r\n            this.controls[i].data.position.zoneIndex = this.data.position.zoneIndex;\r\n            this.controls[i].data.position.layoutIndex = this.data.position.layoutIndex;\r\n            this.controls[i].data.position.sectionIndex = value;\r\n        }\r\n    }\r\n\r\n    public get factor(): CanvasColumnFactor {\r\n        return this.data.position.sectionFactor;\r\n    }\r\n\r\n    public set factor(value: CanvasColumnFactor) {\r\n        this.data.position.sectionFactor = value;\r\n    }\r\n\r\n    public addControl(control: ColumnControl<any>): this {\r\n        control.column = this;\r\n        this.controls.push(control);\r\n        return this;\r\n    }\r\n\r\n    public getControl<T extends ColumnControl<any>>(index: number): T {\r\n        return <T>this.controls[index];\r\n    }\r\n\r\n    public remove(): void {\r\n        this.section.columns = this.section.columns.filter(column => column._memId !== this._memId);\r\n        reindex(this.section.columns);\r\n    }\r\n}\r\n\r\nexport abstract class ColumnControl<T extends ICanvasControlBaseData> {\r\n\r\n    private _column: CanvasColumn | null;\r\n\r\n    constructor(protected json: T) { }\r\n\r\n    public abstract get order(): number;\r\n    public abstract set order(value: number);\r\n\r\n    public get id(): string {\r\n        return this.json.id;\r\n    }\r\n\r\n    public get data(): T {\r\n        return this.json;\r\n    }\r\n\r\n    public get column(): CanvasColumn | null {\r\n        return this._column;\r\n    }\r\n\r\n    public set column(value: CanvasColumn) {\r\n        this._column = value;\r\n        this.onColumnChange(this._column);\r\n    }\r\n\r\n    public remove(): void {\r\n        this.column.controls = this.column.controls.filter(control => control.id !== this.id);\r\n        reindex(this.column.controls);\r\n    }\r\n\r\n    protected setData(data: T) {\r\n        this.json = data;\r\n    }\r\n\r\n    protected abstract onColumnChange(col: CanvasColumn): void;\r\n}\r\n\r\nexport class ClientsideText extends ColumnControl<IClientsideTextData> {\r\n\r\n    public static Default: IClientsideTextData = {\r\n        addedFromPersistedData: false,\r\n        anchorComponentId: \"\",\r\n        controlType: 4,\r\n        displayMode: 2,\r\n        editorType: \"CKEditor\",\r\n        emphasis: {},\r\n        id: \"\",\r\n        innerHTML: \"\",\r\n        position: {\r\n            controlIndex: 1,\r\n            layoutIndex: 1,\r\n            sectionFactor: 12,\r\n            sectionIndex: 1,\r\n            zoneIndex: 1,\r\n        },\r\n    };\r\n\r\n    constructor(text: string, json: IClientsideTextData = JSON.parse(JSON.stringify(ClientsideText.Default))) {\r\n        if (stringIsNullOrEmpty(json.id)) {\r\n            json.id = getGUID();\r\n            json.anchorComponentId = json.id;\r\n        }\r\n        super(json);\r\n\r\n        this.text = text;\r\n    }\r\n\r\n    public get text(): string {\r\n        return this.data.innerHTML;\r\n    }\r\n\r\n    public set text(value: string) {\r\n        if (!value.startsWith(\"<p>\")) {\r\n            value = `<p>${value}</p>`;\r\n        }\r\n        this.data.innerHTML = value;\r\n    }\r\n\r\n    public get order(): number {\r\n        return this.data.position.controlIndex;\r\n    }\r\n\r\n    public set order(value: number) {\r\n        this.data.position.controlIndex = value;\r\n    }\r\n\r\n    protected onColumnChange(col: CanvasColumn): void {\r\n        this.data.position.sectionFactor = col.factor;\r\n        this.data.position.controlIndex = getNextOrder(col.controls);\r\n        this.data.position.zoneIndex = col.data.position.zoneIndex;\r\n        this.data.position.sectionIndex = col.order;\r\n        this.data.position.layoutIndex = col.data.position.layoutIndex;\r\n    }\r\n}\r\n\r\nexport class ClientsideWebpart extends ColumnControl<IClientsideWebPartData> {\r\n\r\n    public static Default: IClientsideWebPartData = {\r\n        addedFromPersistedData: false,\r\n        controlType: 3,\r\n        displayMode: 2,\r\n        emphasis: {},\r\n        id: null,\r\n        position: {\r\n            controlIndex: 1,\r\n            layoutIndex: 1,\r\n            sectionFactor: 12,\r\n            sectionIndex: 1,\r\n            zoneIndex: 1,\r\n        },\r\n        reservedHeight: 500,\r\n        reservedWidth: 500,\r\n        webPartData: null,\r\n        webPartId: null,\r\n    };\r\n\r\n    constructor(json: IClientsideWebPartData = JSON.parse(JSON.stringify(ClientsideWebpart.Default))) {\r\n        super(json);\r\n    }\r\n\r\n    public static fromComponentDef(definition: IClientsidePageComponent): ClientsideWebpart {\r\n        const part = new ClientsideWebpart();\r\n        part.import(definition);\r\n        return part;\r\n    }\r\n\r\n    public get title(): string {\r\n        return this.data.webPartData.title;\r\n    }\r\n\r\n    public set title(value: string) {\r\n        this.data.webPartData.title = value;\r\n    }\r\n\r\n    public get description(): string {\r\n        return this.data.webPartData.description;\r\n    }\r\n\r\n    public set description(value: string) {\r\n        this.data.webPartData.description = value;\r\n    }\r\n\r\n    public get order(): number {\r\n        return this.data.position.controlIndex;\r\n    }\r\n\r\n    public set order(value: number) {\r\n        this.data.position.controlIndex = value;\r\n    }\r\n\r\n    public get height(): number {\r\n        return this.data.reservedHeight;\r\n    }\r\n\r\n    public set height(value: number) {\r\n        this.data.reservedHeight = value;\r\n    }\r\n\r\n    public get width(): number {\r\n        return this.data.reservedWidth;\r\n    }\r\n\r\n    public set width(value: number) {\r\n        this.data.reservedWidth = value;\r\n    }\r\n\r\n    public get dataVersion(): string {\r\n        return this.data.webPartData.dataVersion;\r\n    }\r\n\r\n    public set dataVersion(value: string) {\r\n        this.data.webPartData.dataVersion = value;\r\n    }\r\n\r\n    public setProperties<T = any>(properties: T): this {\r\n        this.data.webPartData.properties = assign(this.data.webPartData.properties, properties);\r\n        return this;\r\n    }\r\n\r\n    public getProperties<T = any>(): T {\r\n        return <T>this.data.webPartData.properties;\r\n    }\r\n\r\n    protected onColumnChange(col: CanvasColumn): void {\r\n        this.data.position.sectionFactor = col.factor;\r\n        this.data.position.controlIndex = getNextOrder(col.controls);\r\n        this.data.position.zoneIndex = col.data.position.zoneIndex;\r\n        this.data.position.sectionIndex = col.data.position.sectionIndex;\r\n        this.data.position.layoutIndex = col.data.position.layoutIndex;\r\n    }\r\n\r\n    protected import(component: IClientsidePageComponent): void {\r\n\r\n        const id = getGUID();\r\n        const componendId = component.Id.replace(/^\\{|\\}$/g, \"\").toLowerCase();\r\n        const manifest: IClientSidePageComponentManifest = JSON.parse(component.Manifest);\r\n        const preconfiguredEntries = manifest.preconfiguredEntries[0];\r\n\r\n        this.setData(Object.assign({}, this.data, <IClientsideWebPartData>{\r\n            id,\r\n            webPartData: {\r\n                dataVersion: \"1.0\",\r\n                description: preconfiguredEntries.description.default,\r\n                id: componendId,\r\n                instanceId: id,\r\n                properties: preconfiguredEntries.properties,\r\n                title: preconfiguredEntries.title.default,\r\n            },\r\n            webPartId: componendId,\r\n        }));\r\n    }\r\n}\r\n\r\nexport interface IPageData {\r\n    readonly \"odata.metadata\": string;\r\n    readonly \"odata.type\": \"SP.Publishing.SitePage\";\r\n    readonly \"odata.id\": string;\r\n    readonly \"odata.editLink\": string;\r\n    AbsoluteUrl: string;\r\n    AuthorByline: string[] | null;\r\n    BannerImageUrl: string;\r\n    ContentTypeId: null | string;\r\n    Description: string;\r\n    DoesUserHaveEditPermission: boolean;\r\n    FileName: string;\r\n    readonly FirstPublished: string;\r\n    readonly Id: number;\r\n    IsPageCheckedOutToCurrentUser: boolean;\r\n    IsWebWelcomePage: boolean;\r\n    readonly Modified: string;\r\n    PageLayoutType: ClientsidePageLayoutType;\r\n    Path: {\r\n        DecodedUrl: string;\r\n    };\r\n    PromotedState: number;\r\n    Title: string;\r\n    TopicHeader: null | string;\r\n    readonly UniqueId: string;\r\n    Url: string;\r\n    readonly Version: string;\r\n    readonly VersionInfo: {\r\n        readonly LastVersionCreated: string;\r\n        readonly LastVersionCreatedBy: string;\r\n    };\r\n    AlternativeUrlMap: string;\r\n    CanvasContent1: string;\r\n    LayoutWebpartsContent: string;\r\n}\r\n\r\n/**\r\n * Client side webpart object (retrieved via the _api/web/GetClientSideWebParts REST call)\r\n */\r\nexport interface IClientsidePageComponent {\r\n    /**\r\n     * Component type for client side webpart object\r\n     */\r\n    ComponentType: number;\r\n    /**\r\n     * Id for client side webpart object\r\n     */\r\n    Id: string;\r\n    /**\r\n     * Manifest for client side webpart object\r\n     */\r\n    Manifest: string;\r\n    /**\r\n     * Manifest type for client side webpart object\r\n     */\r\n    ManifestType: number;\r\n    /**\r\n     * Name for client side webpart object\r\n     */\r\n    Name: string;\r\n    /**\r\n     * Status for client side webpart object\r\n     */\r\n    Status: number;\r\n}\r\n\r\ninterface IClientSidePageComponentManifest {\r\n    alias: string;\r\n    componentType: \"WebPart\" | \"\" | null;\r\n    disabledOnClassicSharepoint: boolean;\r\n    hiddenFromToolbox: boolean;\r\n    id: string;\r\n    imageLinkPropertyNames: any;\r\n    isInternal: boolean;\r\n    linkPropertyNames: boolean;\r\n    loaderConfig: any;\r\n    manifestVersion: number;\r\n    preconfiguredEntries: {\r\n        description: { default: string };\r\n        group: { default: string };\r\n        groupId: string;\r\n        iconImageUrl: string;\r\n        officeFabricIconFontName: string;\r\n        properties: ITypedHash<any>;\r\n        title: { default: string };\r\n\r\n    }[];\r\n    preloadComponents: any | null;\r\n    requiredCapabilities: any | null;\r\n    searchablePropertyNames: any | null;\r\n    supportsFullBleed: boolean;\r\n    version: string;\r\n}\r\n\r\nexport interface IClientsideControlBaseData {\r\n    controlType: number;\r\n}\r\n\r\nexport interface ICanvasControlBaseData extends IClientsideControlBaseData {\r\n    id: string;\r\n    emphasis: IClientControlEmphasis;\r\n    displayMode: number;\r\n}\r\n\r\nexport interface IClientsidePageSettingsSlice extends IClientsideControlBaseData {\r\n    pageSettingsSlice: {\r\n        \"isDefaultDescription\": boolean;\r\n        \"isDefaultThumbnail\": boolean;\r\n    };\r\n}\r\n\r\nexport interface IClientsidePageColumnData extends IClientsideControlBaseData {\r\n    controlType: 0;\r\n    displayMode: number;\r\n    emphasis: IClientControlEmphasis;\r\n    position: IPosition;\r\n}\r\n\r\ninterface IPosition {\r\n    zoneIndex: number;\r\n    sectionIndex: number;\r\n    controlIndex?: number;\r\n    sectionFactor?: CanvasColumnFactor;\r\n    layoutIndex: number;\r\n}\r\n\r\nexport interface IClientsideTextData extends ICanvasControlBaseData {\r\n    controlType: 4;\r\n    position: IPosition;\r\n    anchorComponentId: string;\r\n    editorType: \"CKEditor\";\r\n    addedFromPersistedData: boolean;\r\n    innerHTML: string;\r\n}\r\n\r\nexport interface IClientsideWebPartData<PropertiesType = any> extends ICanvasControlBaseData {\r\n    controlType: 3;\r\n    position: IPosition;\r\n    webPartId: string;\r\n    reservedHeight: number;\r\n    reservedWidth: number;\r\n    addedFromPersistedData: boolean;\r\n    webPartData: {\r\n        id: string;\r\n        instanceId: string;\r\n        title: string;\r\n        description: string;\r\n        serverProcessedContent?: {\r\n            \"htmlStrings\": ITypedHash<string>;\r\n            \"searchablePlainTexts\": ITypedHash<string>;\r\n            \"imageSources\": ITypedHash<string>;\r\n            \"links\": ITypedHash<string>;\r\n        };\r\n        dataVersion: string;\r\n        properties: PropertiesType;\r\n    };\r\n}\r\n\r\nexport interface IClientControlEmphasis {\r\n    zoneEmphasis?: 0 | 1 | 2 | 3;\r\n}\r\n\r\nexport type LayoutType = \"FullWidthImage\" | \"NoImage\" | \"ColorBlock\" | \"CutInShape\";\r\nexport type TextAlignment = \"Left\" | \"Center\";\r\n\r\ninterface ILayoutPartsContent {\r\n    id: string;\r\n    instanceId: string;\r\n    title: string;\r\n    description: string;\r\n    serverProcessedContent: {\r\n        htmlStrings: ITypedHash<string>;\r\n        searchablePlainTexts: ITypedHash<string>;\r\n        imageSources: ITypedHash<string>;\r\n        links: ITypedHash<string>;\r\n        customMetadata?: {\r\n            imageSource?: {\r\n                siteId: string;\r\n                webId: string;\r\n                listId: string;\r\n                uniqueId: string;\r\n            },\r\n        }\r\n    };\r\n    dataVersion: string;\r\n    properties: {\r\n        title: string;\r\n        imageSourceType?: number;\r\n        layoutType: LayoutType;\r\n        textAlignment: TextAlignment;\r\n        showTopicHeader: boolean;\r\n        showPublishDate: boolean;\r\n        topicHeader: string;\r\n        authorByline: string[];\r\n        authors: {\r\n            id: string,\r\n            upn: string;\r\n            name: string;\r\n            role: string;\r\n        }[];\r\n        webId?: string;\r\n        siteId?: string;\r\n        listId?: string;\r\n        uniqueId?: string;\r\n        translateX?: number;\r\n        translateY?: number;\r\n        altText?: string;\r\n    };\r\n}\r\n","import { addProp } from \"@pnp/odata\";\r\nimport { _Item, Item } from \"../items/types\";\r\nimport { Comments, IComments, ILikeData, ILikedByInformation } from \"./types\";\r\nimport { spPost } from \"../operations\";\r\n\r\ndeclare module \"../items/types\" {\r\n    interface _Item {\r\n        readonly comments: IComments;\r\n        getLikedBy(): Promise<ILikeData[]>;\r\n        like(): Promise<void>;\r\n        unlike(): Promise<void>;\r\n        getLikedByInformation(): Promise<ILikedByInformation>;\r\n    }\r\n    interface IItem {\r\n        readonly comments: IComments;\r\n        /**\r\n         * Gets the collection of people who have liked this item\r\n         */\r\n        getLikedBy(): Promise<ILikeData[]>;\r\n        /**\r\n         * Likes this item as the current user\r\n         */\r\n        like(): Promise<void>;\r\n        /**\r\n         * Unlikes this item as the current user\r\n         */\r\n        unlike(): Promise<void>;\r\n        /**\r\n         * Get the like by information for a modern site page     \r\n         */\r\n        getLikedByInformation(): Promise<ILikedByInformation>;\r\n    }\r\n}\r\n\r\naddProp(_Item, \"comments\", Comments);\r\n\r\n_Item.prototype.getLikedBy = function (this: _Item): Promise<ILikeData[]> {\r\n    return spPost<ILikeData[]>(this.clone(Item, \"likedBy\"));\r\n};\r\n\r\n_Item.prototype.like = function (this: _Item): Promise<void> {\r\n    return spPost<void>(this.clone(Item, \"like\"));\r\n};\r\n\r\n_Item.prototype.unlike = function (this: _Item): Promise<void> {\r\n    return spPost<void>(this.clone(Item, \"unlike\"));\r\n};\r\n\r\n_Item.prototype.getLikedByInformation = function (this: _Item): Promise<ILikedByInformation> {\r\n    return this.clone(Item, \"likedByInformation\").expand(\"likedby\")<ILikedByInformation>();\r\n};\r\n","import { _Web, IWeb } from \"../webs/types\";\r\nimport { IClientsidePageComponent, CreateClientsidePage, IClientsidePage, ClientsidePageLayoutType, ClientsidePageFromFile, PromotedState } from \"./types\";\r\nimport { SharePointQueryableCollection } from \"../sharepointqueryable\";\r\n\r\ndeclare module \"../webs/types\" {\r\n    interface _Web {\r\n        getClientsideWebParts(): Promise<IClientsidePageComponent[]>;\r\n        addClientsidePage(pageName: string, title?: string, libraryTitle?: string, promotedState?: PromotedState): Promise<IClientsidePage>;\r\n        loadClientsidePage(path: string): Promise<IClientsidePage>;\r\n    }\r\n    interface IWeb {\r\n\r\n        /**\r\n         * Gets the collection of available client side web parts for this web instance\r\n         */\r\n        getClientsideWebParts(): Promise<IClientsidePageComponent[]>;\r\n\r\n        /**\r\n         * Creates a new client side page\r\n         *\r\n         * @param pageName Name of the new page\r\n         * @param title Display title of the new page\r\n         */\r\n        addClientsidePage(pageName: string, title?: string, PageLayoutType?: ClientsidePageLayoutType, promotedState?: PromotedState): Promise<IClientsidePage>;\r\n\r\n        /**\r\n         * Loads a page from the provided server relative path to the file\r\n         * \r\n         * @param path Server relative path to the file (ex: \"/sites/dev/sitepages/page.aspx\")\r\n         */\r\n        loadClientsidePage(path: string): Promise<IClientsidePage>;\r\n    }\r\n}\r\n\r\n_Web.prototype.getClientsideWebParts = function (): Promise<IClientsidePageComponent[]> {\r\n    return this.clone(SharePointQueryableCollection, \"GetClientSideWebParts\")();\r\n};\r\n\r\n_Web.prototype.addClientsidePage =\r\n    function (this: IWeb, pageName: string, title = pageName.replace(/\\.[^/.]+$/, \"\"), layout?: ClientsidePageLayoutType, promotedState?: PromotedState): Promise<IClientsidePage> {\r\n        return CreateClientsidePage(this, pageName, title, layout, promotedState);\r\n    };\r\n\r\n_Web.prototype.loadClientsidePage = function (this: IWeb, path: string): Promise<IClientsidePage> {\r\n    return ClientsidePageFromFile(this.getFileByServerRelativePath(path));\r\n};\r\n","import { assign, ITypedHash, isUrlAbsolute } from \"@pnp/common\";\r\nimport {\r\n    SharePointQueryable,\r\n    SharePointQueryableCollection,\r\n    SharePointQueryableInstance,\r\n    _SharePointQueryableInstance,\r\n    ISharePointQueryableCollection,\r\n    _SharePointQueryableCollection,\r\n    ISharePointQueryableInstance,\r\n    ISharePointQueryable,\r\n    spInvokableFactory,\r\n    deleteableWithETag,\r\n    IDeleteableWithETag,\r\n} from \"../sharepointqueryable\";\r\nimport { odataUrlFrom } from \"../odata\";\r\nimport { IItem, Item } from \"../items/types\";\r\nimport { body } from \"@pnp/odata\";\r\nimport { defaultPath } from \"../decorators\";\r\nimport { spPost } from \"../operations\";\r\nimport { escapeQueryStrValue } from \"../utils/escapeQueryStrValue\";\r\nimport { extractWebUrl } from \"../utils/extractweburl\";\r\nimport { tag } from \"../telemetry\";\r\nimport { toResourcePath, IResourcePath } from \"../utils/toResourcePath\";\r\n\r\n@defaultPath(\"folders\")\r\nexport class _Folders extends _SharePointQueryableCollection<IFolderInfo[]> {\r\n\r\n    /**\r\n     * Gets a folder by it's name\r\n     * \r\n     * @param name Folder's name\r\n     */\r\n    public getByName(name: string): IFolder {\r\n        return tag.configure(Folder(this).concat(`('${escapeQueryStrValue(name)}')`), \"fs.getByName\");\r\n    }\r\n\r\n    /**\r\n     * Adds a new folder at the specified URL\r\n     * \r\n     * @param url \r\n     */\r\n    @tag(\"fs.add\")\r\n    public async add(url: string): Promise<IFolderAddResult> {\r\n\r\n        const data = await spPost(this.clone(Folders, `add('${escapeQueryStrValue(url)}')`));\r\n\r\n        return {\r\n            data,\r\n            folder: this.getByName(url),\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Adds a new folder by path and should be prefered over add\r\n     * \r\n     * @param serverRelativeUrl The server relative url of the new folder to create\r\n     * @param overwrite True to overwrite an existing folder, default false\r\n     */\r\n    @tag(\"fs.addUsingPath\")\r\n    public async addUsingPath(serverRelativeUrl: string, overwrite = false): Promise<IFolderAddResult> {\r\n\r\n        const data = await spPost(this.clone(Folders, `addUsingPath(DecodedUrl='${escapeQueryStrValue(serverRelativeUrl)}',overwrite=${overwrite})`));\r\n\r\n        return {\r\n            data,\r\n            folder: Folder(extractWebUrl(this.toUrl()), `_api/web/getFolderByServerRelativePath(decodedUrl='${escapeQueryStrValue(serverRelativeUrl)}')`),\r\n        };\r\n    }\r\n}\r\nexport interface IFolders extends _Folders { }\r\nexport const Folders = spInvokableFactory<IFolders>(_Folders);\r\n\r\n\r\nexport class _Folder extends _SharePointQueryableInstance<IFolderInfo> {\r\n\r\n    public delete = deleteableWithETag(\"f\");\r\n\r\n    /**\r\n     * Specifies the sequence in which content types are displayed.\r\n     *\r\n     */\r\n    public get contentTypeOrder(): ISharePointQueryableCollection {\r\n        return tag.configure(SharePointQueryableCollection(this, \"contentTypeOrder\"), \"f.contentTypeOrder\");\r\n    }\r\n\r\n    /**\r\n     * Gets this folder's sub folders\r\n     *\r\n     */\r\n    public get folders(): IFolders {\r\n        return Folders(this);\r\n    }\r\n\r\n    /**\r\n     * Gets this folder's list item field values\r\n     *\r\n     */\r\n    public get listItemAllFields(): ISharePointQueryableInstance {\r\n        return tag.configure(SharePointQueryableInstance(this, \"listItemAllFields\"), \"f.listItemAllFields\");\r\n    }\r\n\r\n    /**\r\n     * Gets the parent folder, if available\r\n     *\r\n     */\r\n    public get parentFolder(): IFolder {\r\n        return tag.configure(Folder(this, \"parentFolder\"), \"f.parentFolder\");\r\n    }\r\n\r\n    /**\r\n     * Gets this folder's properties\r\n     *\r\n     */\r\n    public get properties(): ISharePointQueryableInstance {\r\n        return tag.configure(SharePointQueryableInstance(this, \"properties\"), \"f.properties\");\r\n    }\r\n\r\n    /**\r\n     * Gets this folder's server relative url\r\n     *\r\n     */\r\n    public get serverRelativeUrl(): ISharePointQueryable {\r\n        return tag.configure(SharePointQueryable(this, \"serverRelativeUrl\"), \"f.serverRelativeUrl\");\r\n    }\r\n\r\n    /**\r\n     * Gets a value that specifies the content type order.\r\n     *\r\n     */\r\n    public get uniqueContentTypeOrder(): ISharePointQueryableCollection {\r\n        return tag.configure(SharePointQueryableCollection(this, \"uniqueContentTypeOrder\"), \"f.uniqueContentTypeOrder\");\r\n    }\r\n\r\n    /**\r\n     * Updates folder's properties\r\n     * @param props Folder's properties to update\r\n     */\r\n    public update = this._update<IFolderUpdateResult, ITypedHash<any>>(\"SP.Folder\", data => ({ data, folder: <any>this }));\r\n\r\n    /**\r\n     * Moves the folder to the Recycle Bin and returns the identifier of the new Recycle Bin item.\r\n     */\r\n    @tag(\"f.recycle\")\r\n    public recycle(): Promise<string> {\r\n        return spPost(this.clone(Folder, \"recycle\"));\r\n    }\r\n\r\n    /**\r\n     * Gets the associated list item for this folder, loading the default properties\r\n     */\r\n    @tag(\"f.getItem\")\r\n    public async getItem<T>(...selects: string[]): Promise<IItem & T> {\r\n        const q = await this.listItemAllFields.select(...selects)();\r\n        return assign(Item(odataUrlFrom(q)), q);\r\n    }\r\n\r\n    /**\r\n     * Moves a folder to destination path\r\n     *\r\n     * @param destUrl Absolute or relative URL of the destination path\r\n     */\r\n    @tag(\"f.moveTo\")\r\n    public async moveTo(destUrl: string): Promise<void> {\r\n\r\n        const { ServerRelativeUrl: srcUrl, [\"odata.id\"]: absoluteUrl } = await this.select(\"ServerRelativeUrl\")();\r\n        const webBaseUrl = extractWebUrl(absoluteUrl);\r\n        const hostUrl = webBaseUrl.replace(\"://\", \"___\").split(\"/\")[0].replace(\"___\", \"://\");\r\n        await spPost(Folder(webBaseUrl, \"/_api/SP.MoveCopyUtil.MoveFolder()\"),\r\n            body({\r\n                destUrl: isUrlAbsolute(destUrl) ? destUrl : `${hostUrl}${destUrl}`,\r\n                srcUrl: `${hostUrl}${srcUrl}`,\r\n            }));\r\n    }\r\n\r\n    /**\r\n     * Moves a folder by path to destination path\r\n     * Also works with different site collections.\r\n     *\r\n     * @param destUrl Absolute or relative URL of the destination path\r\n     * @param keepBoth Keep both if folder with the same name in the same location already exists?\r\n     */\r\n    @tag(\"f.moveByPath\")\r\n    public async moveByPath(destUrl: string, KeepBoth = false): Promise<void> {\r\n\r\n        const { ServerRelativeUrl: srcUrl, [\"odata.id\"]: absoluteUrl } = await this.select(\"ServerRelativeUrl\")();\r\n        const webBaseUrl = extractWebUrl(absoluteUrl);\r\n        const hostUrl = webBaseUrl.replace(\"://\", \"___\").split(\"/\")[0].replace(\"___\", \"://\");\r\n        await spPost(Folder(webBaseUrl, `/_api/SP.MoveCopyUtil.MoveFolderByPath()`),\r\n            body({\r\n                destPath: toResourcePath(isUrlAbsolute(destUrl) ? destUrl : `${hostUrl}${destUrl}`),\r\n                options: {\r\n                    KeepBoth: KeepBoth,\r\n                    ResetAuthorAndCreatedOnCopy: true,\r\n                    ShouldBypassSharedLocks: true,\r\n                    __metadata: {\r\n                        type: \"SP.MoveCopyOptions\",\r\n                    },\r\n                },\r\n                srcPath: toResourcePath(isUrlAbsolute(srcUrl) ? srcUrl : `${hostUrl}${srcUrl}`),\r\n            }));\r\n    }\r\n\r\n    /**\r\n     * Copies a folder to destination path\r\n     *\r\n     * @param destUrl Absolute or relative URL of the destination path\r\n     */\r\n    @tag(\"f.copyTo\")\r\n    public async copyTo(destUrl: string): Promise<void> {\r\n\r\n        const { ServerRelativeUrl: srcUrl, [\"odata.id\"]: absoluteUrl } = await this.select(\"ServerRelativeUrl\")();\r\n        const webBaseUrl = extractWebUrl(absoluteUrl);\r\n        const hostUrl = webBaseUrl.replace(\"://\", \"___\").split(\"/\")[0].replace(\"___\", \"://\");\r\n        await spPost(Folder(webBaseUrl, \"/_api/SP.MoveCopyUtil.CopyFolder()\"),\r\n            body({\r\n                destUrl: isUrlAbsolute(destUrl) ? destUrl : `${hostUrl}${destUrl}`,\r\n                srcUrl: `${hostUrl}${srcUrl}`,\r\n            }));\r\n    }\r\n\r\n    /**\r\n     * Copies a folder by path to destination path\r\n     * Also works with different site collections.\r\n     *\r\n     * @param destUrl Absolute or relative URL of the destination path\r\n     * @param keepBoth Keep both if folder with the same name in the same location already exists?\r\n     */\r\n    @tag(\"f.copyByPath\")\r\n    public async copyByPath(destUrl: string, KeepBoth = false): Promise<void> {\r\n\r\n        const { ServerRelativeUrl: srcUrl, [\"odata.id\"]: absoluteUrl } = await this.select(\"ServerRelativeUrl\")();\r\n        const webBaseUrl = extractWebUrl(absoluteUrl);\r\n        const hostUrl = webBaseUrl.replace(\"://\", \"___\").split(\"/\")[0].replace(\"___\", \"://\");\r\n        await spPost(Folder(webBaseUrl, `/_api/SP.MoveCopyUtil.CopyFolderByPath()`),\r\n            body({\r\n                destPath: toResourcePath(isUrlAbsolute(destUrl) ? destUrl : `${hostUrl}${destUrl}`),\r\n                options: {\r\n                    KeepBoth: KeepBoth,\r\n                    ResetAuthorAndCreatedOnCopy: true,\r\n                    ShouldBypassSharedLocks: true,\r\n                    __metadata: {\r\n                        type: \"SP.MoveCopyOptions\",\r\n                    },\r\n                },\r\n                srcPath: toResourcePath(isUrlAbsolute(srcUrl) ? srcUrl : `${hostUrl}${srcUrl}`),\r\n            }));\r\n    }\r\n\r\n    /**\r\n     * Gets the shareable item associated with this folder\r\n     */\r\n    @tag(\"f.getShareable\")\r\n    protected async getShareable(): Promise<IItem> {\r\n        // sharing only works on the item end point, not the file one - so we create a folder instance with the item url internally\r\n        const d = await this.clone(SharePointQueryableInstance, \"listItemAllFields\", false).select(\"odata.id\")();\r\n\r\n        let shareable = Item(odataUrlFrom(d));\r\n\r\n        // we need to handle batching\r\n        if (this.hasBatch) {\r\n            shareable = shareable.inBatch(this.batch);\r\n        }\r\n\r\n        return shareable;\r\n    }\r\n}\r\nexport interface IFolder extends _Folder, IDeleteableWithETag { }\r\nexport const Folder = spInvokableFactory<IFolder>(_Folder);\r\n\r\n/**\r\n * Describes result of adding a folder\r\n */\r\nexport interface IFolderAddResult {\r\n\r\n    /**\r\n     * A folder's instance\r\n     */\r\n    folder: IFolder;\r\n\r\n    /**\r\n     * Additional data from the server \r\n     */\r\n    data: any;\r\n}\r\n\r\n/**\r\n * Describes result of updating a folder\r\n */\r\nexport interface IFolderUpdateResult {\r\n\r\n    /**\r\n     * A folder's instance\r\n     */\r\n    folder: IFolder;\r\n\r\n    /**\r\n     * Additional data from the server \r\n     */\r\n    data: any;\r\n}\r\n\r\nexport interface IFolderInfo {\r\n    readonly \"odata.id\": string;\r\n    Exists: boolean;\r\n    IsWOPIEnabled: boolean;\r\n    ItemCount: number;\r\n    Name: string;\r\n    ProgID: string | null;\r\n    ServerRelativeUrl: string;\r\n    ServerRelativePath: IResourcePath;\r\n    TimeCreated: string;\r\n    TimeLastModified: string;\r\n    UniqueId: string;\r\n    WelcomePage: string;\r\n}\r\n","import { addProp, TextParser, headers, body } from \"@pnp/odata\";\r\nimport { _List, List } from \"../lists/types\";\r\nimport { Folder } from \"../folders/types\";\r\nimport { IFieldDefault } from \"./types\";\r\nimport { IResourcePath } from \"../utils/toResourcePath\";\r\nimport { combine, isArray } from \"@pnp/common\";\r\nimport { escapeQueryStrValue } from \"../utils/escapeQueryStrValue\";\r\nimport { Logger, LogLevel } from \"@pnp/logging\";\r\nimport { spPost } from \"../operations\";\r\nimport { SharePointQueryableCollection } from \"../presets/all\";\r\n\r\ndeclare module \"../lists/types\" {\r\n    interface _List {\r\n        getDefaultColumnValues(): Promise<IFieldDefault[]>;\r\n        setDefaultColumnValues(defaults: IFieldDefault[]): Promise<void>;\r\n    }\r\n    interface IList {\r\n        /**\r\n         * Gets the default column value for a given list\r\n         */\r\n        getDefaultColumnValues(): Promise<IFieldDefault[]>;\r\n\r\n        /**\r\n         * Replaces all the column defaults with the supplied values\r\n         * \r\n         * @param defaults \r\n         */\r\n        setDefaultColumnValues(defaults: IFieldDefault[]): Promise<void>;\r\n    }\r\n}\r\n\r\naddProp(_List, \"rootFolder\", Folder, \"rootFolder\");\r\n\r\n_List.prototype.getDefaultColumnValues = async function (this: _List): Promise<IFieldDefault[]> {\r\n\r\n    const pathPart: { ServerRelativePath: IResourcePath } = await this.rootFolder.select(\"ServerRelativePath\")();\r\n    const webUrl: { ParentWeb: { Url: string } } = await this.select(\"ParentWeb/Url\").expand(\"ParentWeb\")();\r\n    const path = combine(\"/\", pathPart.ServerRelativePath.DecodedUrl, \"Forms/client_LocationBasedDefaults.html\");\r\n    const baseFilePath = combine(webUrl.ParentWeb.Url, \"_api/web\", `getFileByServerRelativePath(decodedUrl='${escapeQueryStrValue(path)}')`);\r\n\r\n    // we do this because we don't want to import file if we don't have to\r\n    let xml = \"\";\r\n\r\n    try {\r\n\r\n        xml = await Folder(baseFilePath, \"$value\").usingParser(new TextParser())(headers({ \"binaryStringResponseBody\": \"true\" }));\r\n\r\n    } catch (e) {\r\n\r\n        // if this call fails we assume it is because the file is 404\r\n        if (e && e.status && e.status === 404) {\r\n\r\n            // return an empty array\r\n            return [];\r\n        }\r\n\r\n        throw e;\r\n    }\r\n\r\n    // get all the tags from the xml\r\n    const matches = xml.match(/<a.*?<\\/a>/ig);\r\n    const tags = matches === null ? [] : matches.map(t => t.trim());\r\n\r\n    // now we need to turn these tags of form into objects\r\n    // <a href=\"/sites/dev/My%20Title\"><DefaultValue FieldName=\"TextField\">Test</DefaultValue></a>\r\n\r\n    return tags.map(t => {\r\n        const m = /<a href=\"(.*?)\"><DefaultValue FieldName=\"(.*?)\">(.*?)<\\/DefaultValue>/ig.exec(t);\r\n        // if things worked our captures are:\r\n        // 0: whole string\r\n        // 1: ENCODED server relative path\r\n        // 2: Field internal name\r\n        // 3: Default value as string\r\n\r\n        if (m.length < 1) {\r\n            // this indicates an error somewhere, but we have no way to meaningfully recover\r\n            // perhaps the way the tags are stored has changed on the server? Check that first.\r\n            Logger.write(`Could not parse default column value from '${t}'`, LogLevel.Warning);\r\n            return null;\r\n        }\r\n\r\n        // return the parsed out values\r\n        return {\r\n            name: m[2],\r\n            path: decodeURIComponent(m[1]),\r\n            value: m[3],\r\n        };\r\n\r\n    }).filter(v => v !== null);\r\n};\r\n\r\n_List.prototype.setDefaultColumnValues = async function (this: _List, defaults: IFieldDefault[]): Promise<void> {\r\n\r\n    // we need the field types from the list to map the values\r\n    const fieldDefs: { InternalName: string; TypeAsString: string; }[] = await SharePointQueryableCollection(this, \"fields\").select(\"InternalName\", \"TypeAsString\").filter(\"Hidden ne true\")();\r\n\r\n    // map the values into the right format and produce our xml elements\r\n    const tags: string[] = defaults.map(fieldDefault => {\r\n\r\n        const index = fieldDefs.findIndex(fd => fd.InternalName === fieldDefault.name);\r\n\r\n        if (index < 0) {\r\n            throw Error(`Field '${fieldDefault.name}' does not exist in the list. Please check the internal field name. Failed to set defaults.`);\r\n        }\r\n\r\n        const fieldDef = fieldDefs[index];\r\n        let value = \"\";\r\n\r\n        switch (fieldDef.TypeAsString) {\r\n            case \"Boolean\":\r\n            case \"Currency\":\r\n            case \"Text\":\r\n            case \"DateTime\":\r\n            case \"Number\":\r\n            case \"Choice\":\r\n            case \"User\":\r\n                if (isArray(fieldDefault.value)) {\r\n                    throw Error(`The type '${fieldDef.TypeAsString}' does not support multiple values.`);\r\n                }\r\n                value = `${fieldDefault.value}`;\r\n                break;\r\n\r\n            case \"MultiChoice\":\r\n                if (isArray(fieldDefault.value)) {\r\n                    value = (<any[]>fieldDefault.value).map(v => `${v}`).join(\";\");\r\n                } else {\r\n                    value = `${fieldDefault.value}`;\r\n                }\r\n                break;\r\n\r\n            case \"UserMulti\":\r\n                if (isArray(fieldDefault.value)) {\r\n                    value = (<any[]>fieldDefault.value).map(v => `${v}`).join(\";#\");\r\n                } else {\r\n                    value = `${fieldDefault.value}`;\r\n                }\r\n                break;\r\n\r\n            case \"Taxonomy\":\r\n                if (isArray(fieldDefault.value)) {\r\n                    throw Error(`The type '${fieldDef.TypeAsString}' does not support multiple values.`);\r\n                } else {\r\n                    value = `${(<any>fieldDefault.value).wssId};#${(<any>fieldDefault.value).termName}|${(<any>fieldDefault.value).termId}`;\r\n                }\r\n                break;\r\n\r\n            case \"TaxonomyMulti\":\r\n                if (isArray(fieldDefault.value)) {\r\n                    value = (<{ wssId: string, termName: string, termId: string }[]>fieldDefault.value).map(v => `${v.wssId};#${v.termName}|${v.termId}`).join(\";#\");\r\n                }\r\n                value = `${(<any>fieldDefault.value).wssId};#${(<any>fieldDefault.value).termName}|${(<any>fieldDefault.value).termId}`;\r\n                break;\r\n        }\r\n\r\n        return `<a href=\"${fieldDefault.path.replace(/ /gi, \"%20\")}\"><DefaultValue FieldName=\"${fieldDefault.name}\">${value}</DefaultValue></a>`;\r\n    });\r\n\r\n    const xml = `<MetadataDefaults>${tags.join(\"\")}</MetadataDefaults>`;\r\n    const pathPart: { ServerRelativePath: IResourcePath } = await this.rootFolder.select(\"ServerRelativePath\")();\r\n    const webUrl: { ParentWeb: { Url: string } } = await this.select(\"ParentWeb/Url\").expand(\"ParentWeb\")();\r\n    const path = combine(\"/\", pathPart.ServerRelativePath.DecodedUrl, \"Forms\");\r\n    const baseFilePath = combine(webUrl.ParentWeb.Url, \"_api/web\", `getFolderByServerRelativePath(decodedUrl='${escapeQueryStrValue(path)}')`, \"files\");\r\n\r\n    await spPost(Folder(baseFilePath, `add(overwrite=true,url='client_LocationBasedDefaults.html')`), { body: xml });\r\n\r\n    // finally we need to ensure this list has the right event receiver added\r\n    const existingReceivers = await this.eventReceivers.filter(\"ReceiverName eq 'LocationBasedMetadataDefaultsReceiver ItemAdded'\").select(\"ReceiverId\")();\r\n\r\n    if (existingReceivers.length < 1) {\r\n        await spPost(List(this.eventReceivers, \"add\"), body({\r\n            eventReceiverCreationInformation: {\r\n                EventType: 10001,\r\n                ReceiverAssembly: \"Microsoft.Office.DocumentManagement, Version=16.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c\",\r\n                ReceiverClass: \"Microsoft.Office.DocumentManagement.LocationBasedMetadataDefaultsReceiver\",\r\n                ReceiverName: \"LocationBasedMetadataDefaultsReceiver ItemAdded\",\r\n                SequenceNumber: 1000,\r\n                Synchronization: 1,\r\n            },\r\n        }));\r\n    }\r\n};\r\n","import { _SharePointQueryableInstance, _SharePointQueryableCollection } from \"../sharepointqueryable\";\r\nimport { odataUrlFrom } from \"../odata\";\r\nimport { extractWebUrl } from \"../utils/extractweburl\";\r\nimport { IResourcePath } from \"../utils/toResourcePath\";\r\nimport { Web } from \"../webs/types\";\r\nimport \"../lists/web\";\r\nimport { _Folder, Folder } from \"../folders/types\";\r\nimport { IFieldDefault, IFieldDefaultProps } from \"./types\";\r\n\r\ndeclare module \"../folders/types\" {\r\n    interface _Folder {\r\n        getDefaultColumnValues(): Promise<IFieldDefault[]>;\r\n        setDefaultColumnValues(defaults: IFieldDefaultProps[], merge?: boolean): Promise<void>;\r\n        clearDefaultColumnValues(): Promise<void>;\r\n    }\r\n    interface IFolder {\r\n        /**\r\n         * Gets the default column value for a given list\r\n         */\r\n        getDefaultColumnValues(): Promise<IFieldDefault[]>;\r\n        /**\r\n         * \r\n         * Sets the default column values for this folder\r\n         * \r\n         * @param fieldDefaults The values to set including field name and appropriate value\r\n         * @param merge If true (default) existing values will be updated and new values added, otherwise all defaults are replaced for this folder\r\n         */\r\n        setDefaultColumnValues(defaults: IFieldDefaultProps[], merge?: boolean): Promise<void>;\r\n        /**\r\n         * Clears all defaults from this folder\r\n         */\r\n        clearDefaultColumnValues(): Promise<void>;\r\n    }\r\n}\r\n\r\n_Folder.prototype.getDefaultColumnValues = async function (this: _Folder): Promise<IFieldDefault[]> {\r\n\r\n    const folderProps = await Folder(this, \"Properties\").select(\"vti_x005f_listname\")<{ vti_x005f_listname: string; }>();\r\n    const { ServerRelativePath: serRelPath } = await this.select(\"ServerRelativePath\")<{ ServerRelativePath: IResourcePath }>();\r\n\r\n    const web = Web(extractWebUrl(odataUrlFrom(folderProps)));\r\n    const docLib = web.lists.getById(folderProps.vti_x005f_listname);\r\n\r\n    // and we return the defaults associated with this folder's server relative path only\r\n    // if you want all the defaults use list.getDefaultColumnValues()\r\n    return (await docLib.getDefaultColumnValues()).filter(v => v.path.toLowerCase() === serRelPath.DecodedUrl.toLowerCase());\r\n};\r\n\r\n_Folder.prototype.setDefaultColumnValues = async function (fieldDefaults: IFieldDefaultProps[], merge = true): Promise<void> {\r\n\r\n    // we start by figuring out where we are\r\n    const folderProps = await Folder(this, \"Properties\").select(\"vti_x005f_listname\")<{ vti_x005f_listname: string; }>();\r\n\r\n    // now we create a web, list and batch to get some info we need\r\n    const web = Web(extractWebUrl(odataUrlFrom(folderProps)));\r\n    const docLib = web.lists.getById(folderProps.vti_x005f_listname);\r\n\r\n    // we need the proper folder path\r\n    const folderPath = (await this.select(\"ServerRelativePath\")()).ServerRelativePath.DecodedUrl;\r\n\r\n    // at this point we should have all the defaults to update\r\n    // and we need to get all the defaults to update the entire doc\r\n    const existingDefaults = await docLib.getDefaultColumnValues();\r\n\r\n    // we filter all defaults to remove any associated with this folder if merge is false\r\n    const filteredExistingDefaults = merge ? existingDefaults : existingDefaults.filter(f => f.path !== folderPath);\r\n\r\n    // we update / add any new defaults from those passed to this method\r\n    fieldDefaults.forEach(d => {\r\n\r\n        const existing = filteredExistingDefaults.find(ed => ed.name === d.name && ed.path === folderPath);\r\n\r\n        if (existing) {\r\n            existing.value = d.value;\r\n        } else {\r\n            filteredExistingDefaults.push({\r\n                name: d.name,\r\n                path: folderPath,\r\n                value: d.value,\r\n            });\r\n        }\r\n    });\r\n\r\n    // after this operation filteredExistingDefaults should contain all the value we want to write to the file\r\n    await docLib.setDefaultColumnValues(filteredExistingDefaults);\r\n};\r\n\r\n_Folder.prototype.clearDefaultColumnValues = async function (this: _Folder): Promise<void> {\r\n    await this.setDefaultColumnValues([], false);\r\n};\r\n","import { ITypedHash } from \"@pnp/common\";\r\nimport { body } from \"@pnp/odata\";\r\nimport {\r\n    SharePointQueryableCollection,\r\n    _SharePointQueryableInstance,\r\n    ISharePointQueryableCollection,\r\n    _SharePointQueryableCollection,\r\n    spInvokableFactory,\r\n    deleteable,\r\n    IDeleteable,\r\n} from \"../sharepointqueryable\";\r\nimport { defaultPath } from \"../decorators\";\r\nimport { metadata } from \"../utils/metadata\";\r\nimport { spPost } from \"../operations\";\r\nimport { tag } from \"../telemetry\";\r\n\r\n@defaultPath(\"contenttypes\")\r\nexport class _ContentTypes extends _SharePointQueryableCollection<IContentTypeInfo[]> {\r\n\r\n    /**\r\n     * Adds an existing contenttype to a content type collection\r\n     *\r\n     * @param contentTypeId in the following format, for example: 0x010102\r\n     */\r\n    @tag(\"cts.addAvailableContentType\")\r\n    public async addAvailableContentType(contentTypeId: string): Promise<IContentTypeAddResult> {\r\n\r\n        const data = await spPost(this.clone(ContentTypes, \"addAvailableContentType\"), body({ \"contentTypeId\": contentTypeId }));\r\n        return {\r\n            contentType: this.getById(data.id),\r\n            data: data,\r\n        };\r\n    }\r\n\r\n    /**\t\r\n     * Gets a ContentType by content type id\r\n     * @param id The id of the content type to get, in the following format, for example: 0x010102\t\r\n     */\r\n    public getById(id: string): IContentType {\r\n        return tag.configure(ContentType(this).concat(`('${id}')`), \"cts.getById\");\r\n    }\r\n\r\n    /**\r\n     * Adds a new content type to the collection\r\n     *\r\n     * @param id The desired content type id for the new content type (also determines the parent content type)\r\n     * @param name The name of the content type\r\n     * @param description The description of the content type\r\n     * @param group The group in which to add the content type\r\n     * @param additionalSettings Any additional settings to provide when creating the content type\r\n     *\r\n     */\r\n    @tag(\"cts.add\")\r\n    public async add(\r\n        id: string,\r\n        name: string,\r\n        description = \"\",\r\n        group = \"Custom Content Types\",\r\n        additionalSettings: ITypedHash<string | number | boolean> = {}): Promise<IContentTypeAddResult> {\r\n\r\n        const postBody = body(Object.assign(metadata(\"SP.ContentType\"), {\r\n            \"Description\": description,\r\n            \"Group\": group,\r\n            \"Id\": { \"StringValue\": id },\r\n            \"Name\": name,\r\n        }, additionalSettings));\r\n\r\n        const data = await spPost(this, postBody);\r\n\r\n        return { contentType: this.getById(data.id), data };\r\n    }\r\n}\r\nexport interface IContentTypes extends _ContentTypes { }\r\nexport const ContentTypes = spInvokableFactory<IContentTypes>(_ContentTypes);\r\n\r\n\r\nexport class _ContentType extends _SharePointQueryableInstance<IContentTypeInfo> {\r\n\r\n    public delete = deleteable(\"ct\");\r\n\r\n    /**\r\n     * Gets the column (also known as field) references in the content type.\r\n     */\r\n    public get fieldLinks(): IFieldLinks {\r\n        return tag.configure(FieldLinks(this), \"ct.fieldLinks\");\r\n    }\r\n\r\n    /**\r\n     * Gets a value that specifies the collection of fields for the content type.\r\n     */\r\n    public get fields(): ISharePointQueryableCollection {\r\n        return tag.configure(SharePointQueryableCollection(this, \"fields\"), \"ct.fields\");\r\n    }\r\n\r\n    /**\r\n     * Gets the parent content type of the content type.\r\n     */\r\n    public get parent(): IContentType {\r\n        return tag.configure(ContentType(this, \"parent\"), \"ct.parent\");\r\n    }\r\n\r\n    /**\r\n     * Gets a value that specifies the collection of workflow associations for the content type.\r\n     */\r\n    public get workflowAssociations(): ISharePointQueryableCollection {\r\n        return tag.configure(SharePointQueryableCollection(this, \"workflowAssociations\"), \"ct.workflowAssociations\");\r\n    }\r\n}\r\nexport interface IContentType extends _ContentType, IDeleteable { }\r\nexport const ContentType = spInvokableFactory<IContentType>(_ContentType);\r\n\r\n/**\r\n * Represents the output of adding a content type\r\n */\r\nexport interface IContentTypeAddResult {\r\n    contentType: IContentType;\r\n    data: Partial<IContentTypeInfo>;\r\n}\r\n\r\nexport interface IContentTypeInfo {\r\n    Description: string;\r\n    DisplayFormTemplateName: string;\r\n    DisplayFormUrl: string;\r\n    DocumentTemplate: string;\r\n    DocumentTemplateUrl: string;\r\n    EditFormTemplateName: string;\r\n    EditFormUrl: string;\r\n    Group: string;\r\n    Hidden: boolean;\r\n    Id: { StringValue: string; };\r\n    JSLink: string;\r\n    MobileDisplayFormUrl: string;\r\n    MobileEditFormUrl: string;\r\n    MobileNewFormUrl: string;\r\n    Name: string;\r\n    NewFormTemplateName: string;\r\n    NewFormUrl: string;\r\n    ReadOnly: boolean;\r\n    SchemaXml: string;\r\n    Scope: string;\r\n    Sealed: boolean;\r\n    StringId: string;\r\n}\r\n\r\n@defaultPath(\"fieldlinks\")\r\nexport class _FieldLinks extends _SharePointQueryableCollection<IFieldLinkInfo[]> {\r\n\r\n    /**\r\n    *  Gets a FieldLink by GUID id\t\r\n    * \r\n    * @param id The GUID id of the field link\r\n    */\r\n    public getById(id: string): IFieldLink {\r\n        return tag.configure(FieldLink(this).concat(`(guid'${id}')`), \"fls.getById\");\r\n    }\r\n}\r\nexport interface IFieldLinks extends _FieldLinks { }\r\nexport const FieldLinks = spInvokableFactory<IFieldLinks>(_FieldLinks);\r\n\r\nexport class _FieldLink extends _SharePointQueryableInstance<IFieldLinkInfo> { }\r\nexport interface IFieldLink extends _FieldLink { }\r\nexport const FieldLink = spInvokableFactory<IFieldLink>(_FieldLink);\r\n\r\nexport interface IFieldLinkInfo {\r\n    FieldInternalName: string | null;\r\n    Hidden: boolean;\r\n    Id: string;\r\n    Name: string;\r\n    Required: boolean;\r\n}\r\n","import { addProp } from \"@pnp/odata\";\r\nimport { _Web } from \"../webs/types\";\r\nimport { ContentTypes, IContentTypes } from \"./types\";\r\n\r\ndeclare module \"../webs/types\" {\r\n    interface _Web {\r\n        readonly contentTypes: IContentTypes;\r\n    }\r\n    interface IWeb {\r\n        /**\r\n         * Content types contained in this web\r\n         */\r\n        readonly contentTypes: IContentTypes;\r\n    }\r\n}\r\n\r\naddProp(_Web, \"contentTypes\", ContentTypes);\r\n","import { addProp } from \"@pnp/odata\";\r\nimport { _Item } from \"../items/types\";\r\nimport { ContentType, IContentType } from \"./types\";\r\n\r\ndeclare module \"../items/types\" {\r\n    interface _Item {\r\n        readonly contentType: IContentType;\r\n    }\r\n    interface IItem {\r\n        /**\r\n         * The content type of this item\r\n         */\r\n        readonly contentType: IContentType;\r\n    }\r\n}\r\n\r\naddProp(_Item, \"contentType\", ContentType, \"ContentType\");\r\n","import { addProp } from \"@pnp/odata\";\r\nimport { _List } from \"../lists/types\";\r\nimport { ContentTypes, IContentTypes } from \"./types\";\r\n\r\ndeclare module \"../lists/types\" {\r\n    interface _List {\r\n        readonly contentTypes: IContentTypes;\r\n    }\r\n    interface IList {\r\n        /**\r\n         * Content types available on this list\r\n         */\r\n        readonly contentTypes: IContentTypes;\r\n    }\r\n}\r\n\r\naddProp(_List, \"contentTypes\", ContentTypes);\r\n","import { body } from \"@pnp/odata\";\r\nimport {\r\n    _SharePointQueryableInstance,\r\n    _SharePointQueryableCollection,\r\n    spInvokableFactory,\r\n} from \"../sharepointqueryable\";\r\nimport { defaultPath } from \"../decorators\";\r\nimport { spPost } from \"../operations\";\r\nimport { SPBatch } from \"../batch\";\r\nimport { tag } from \"../telemetry\";\r\n\r\n@defaultPath(\"features\")\r\nexport class _Features extends _SharePointQueryableCollection<IFeatureInfo[]> {\r\n\r\n    /**\r\n     * Adds (activates) the specified feature\r\n     *\r\n     * @param id The Id of the feature (GUID)\r\n     * @param force If true the feature activation will be forced\r\n     */\r\n    @tag(\"fes.add\")\r\n    public async add(id: string, force = false): Promise<IFeatureAddResult> {\r\n\r\n        const data = await spPost(this.clone(Features, \"add\"), body({\r\n            featdefScope: 0,\r\n            featureId: id,\r\n            force: force,\r\n        }));\r\n\r\n        return {\r\n            data: data,\r\n            feature: this.getById(id),\r\n        };\r\n    }\r\n\r\n    /**\t    \r\n     * Gets a feature from the collection with the specified guid\r\n     *\t    \r\n     * @param id The Id of the feature (GUID)\t    \r\n     */\r\n    public getById(id: string): IFeature {\r\n        const feature = Feature(this);\r\n        feature.concat(`('${id}')`);\r\n        return tag.configure(feature, \"fes.getById\");\r\n    }\r\n\r\n    /**\r\n     * Removes (deactivates) a feature from the collection\r\n     *\r\n     * @param id The Id of the feature (GUID)\r\n     * @param force If true the feature deactivation will be forced\r\n     */\r\n    @tag(\"fes.remove\")\r\n    public remove(id: string, force = false): Promise<any> {\r\n\r\n        return spPost(this.clone(Features, \"remove\"), body({\r\n            featureId: id,\r\n            force: force,\r\n        }));\r\n    }\r\n}\r\nexport interface IFeatures extends _Features {}\r\nexport const Features = spInvokableFactory<IFeatures>(_Features);\r\n\r\nexport class _Feature extends _SharePointQueryableInstance<IFeatureInfo> {\r\n\r\n    /**\r\n     * Removes (deactivates) the feature\r\n     *\r\n     * @param force If true the feature deactivation will be forced\r\n     */\r\n    @tag(\"fe.deactivate\")\r\n    public async deactivate(force = false): Promise<any> {\r\n\r\n        const removeDependency = this.addBatchDependency();\r\n\r\n        const feature = await Feature(this).select(\"DefinitionId\")<{ DefinitionId: string; }>();\r\n\r\n        const promise = this.getParent<IFeatures>(Features, this.parentUrl, \"\", <SPBatch>this.batch).remove(feature.DefinitionId, force);\r\n\r\n        removeDependency();\r\n\r\n        return promise;\r\n    }\r\n}\r\nexport interface IFeature extends _Feature {}\r\nexport const Feature = spInvokableFactory<IFeature>(_Feature);\r\n\r\n/**\r\n * Result from adding (activating) a feature to the collection\r\n */\r\nexport interface IFeatureAddResult {\r\n    data: IFeatureInfo;\r\n    feature: IFeature;\r\n}\r\n\r\nexport interface IFeatureInfo {\r\n    DefinitionId: string;\r\n}\r\n","import { addProp } from \"@pnp/odata\";\r\nimport { _Site } from \"../sites/types\";\r\nimport { Features, IFeatures } from \"./types\";\r\n\r\ndeclare module \"../sites/types\" {\r\n    interface _Site {\r\n        readonly features: IFeatures;\r\n    }\r\n    interface ISite {\r\n        /**\r\n         * Access the features activated in this site\r\n         */\r\n        readonly features: IFeatures;\r\n    }\r\n}\r\n\r\naddProp(_Site, \"features\", Features);\r\n","import { addProp } from \"@pnp/odata\";\r\nimport { _Web } from \"../webs/types\";\r\nimport { Features, IFeatures } from \"./types\";\r\n\r\ndeclare module \"../webs/types\" {\r\n    interface _Web {\r\n        readonly features: IFeatures;\r\n    }\r\n    interface IWeb {\r\n        /**\r\n         * Access the features activated in this web\r\n         */\r\n        readonly features: IFeatures;\r\n    }\r\n}\r\n\r\naddProp(_Web, \"features\", Features);\r\n","import {\r\n  _SharePointQueryableInstance,\r\n  _SharePointQueryableCollection,\r\n  spInvokableFactory,\r\n  deleteable,\r\n  IDeleteable,\r\n} from \"../sharepointqueryable\";\r\nimport { assign, ITypedHash } from \"@pnp/common\";\r\nimport { metadata } from \"../utils/metadata\";\r\nimport { body, headers } from \"@pnp/odata\";\r\nimport { defaultPath } from \"../decorators\";\r\nimport { spPost } from \"../operations\";\r\nimport { tag } from \"../telemetry\";\r\n\r\n@defaultPath(\"fields\")\r\nexport class _Fields extends _SharePointQueryableCollection<IFieldInfo[]> {\r\n\r\n  /**\r\n   * Gets a field from the collection by id\r\n   *\r\n   * @param id The Id of the list\r\n   */\r\n  public getById(id: string): IField {\r\n    return tag.configure(Field(this).concat(`('${id}')`), \"fs.getById\");\r\n  }\r\n\r\n  /**\r\n   * Gets a field from the collection by title\r\n   *\r\n   * @param title The case-sensitive title of the field\r\n   */\r\n  public getByTitle(title: string): IField {\r\n    return tag.configure(Field(this, `getByTitle('${title}')`), \"fs.getByTitle\");\r\n  }\r\n\r\n  /**\r\n   * Gets a field from the collection by using internal name or title\r\n   *\r\n   * @param name The case-sensitive internal name or title of the field\r\n   */\r\n  public getByInternalNameOrTitle(name: string): IField {\r\n    return tag.configure(Field(this, `getByInternalNameOrTitle('${name}')`), \"fs.getByInternalNameOrTitle\");\r\n  }\r\n\r\n  /**\r\n   * Creates a field based on the specified schema\r\n   *\r\n   * @param xml A string or XmlSchemaFieldCreationInformation instance descrbing the field to create\r\n   */\r\n  @tag(\"fs.createFieldAsXml\")\r\n  public async createFieldAsXml(xml: string | IXmlSchemaFieldCreationInformation): Promise<IFieldAddResult> {\r\n\r\n    if (typeof xml === \"string\") {\r\n      xml = { SchemaXml: xml };\r\n    }\r\n\r\n    const postBody = body({\r\n      \"parameters\":\r\n        assign(metadata(\"SP.XmlSchemaFieldCreationInformation\"), xml),\r\n    });\r\n\r\n    const data = await spPost<{ Id: string; }>(this.clone(Fields, \"createfieldasxml\"), postBody);\r\n\r\n    return {\r\n      data,\r\n      field: this.getById(data.Id),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Adds a new field to the collection\r\n   *\r\n   * @param title The new field's title\r\n   * @param fieldType The new field's type (ex: SP.FieldText)\r\n   * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\r\n   */\r\n  public async add(title: string, fieldType: string, properties: IFieldCreationProperties & { FieldTypeKind: number }): Promise<IFieldAddResult> {\r\n\r\n    const postBody = body(Object.assign(metadata(fieldType), {\r\n      \"Title\": title,\r\n    }, properties));\r\n\r\n    if (!tag.isTagged(this)) {\r\n      tag.configure(this, \"fs.add\");\r\n    }\r\n\r\n    const data = await spPost<{ Id: string; }>(this.clone(Fields, null), postBody);\r\n\r\n    return {\r\n      data,\r\n      field: this.getById(data.Id),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Adds a new SP.FieldText to the collection\r\n   *\r\n   * @param title The field title\r\n   * @param maxLength The maximum number of characters allowed in the value of the field.\r\n   * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\r\n   */\r\n  @tag(\"fs.addText\")\r\n  public addText(title: string, maxLength = 255, properties?: IFieldCreationProperties): Promise<IFieldAddResult> {\r\n\r\n    const props: { FieldTypeKind: number, MaxLength: number } = {\r\n      FieldTypeKind: 2,\r\n      MaxLength: maxLength,\r\n    };\r\n\r\n    return this.add(title, \"SP.FieldText\", assign(props, properties));\r\n  }\r\n\r\n  /**\r\n   * Adds a new SP.FieldCalculated to the collection\r\n   *\r\n   * @param title The field title.\r\n   * @param formula The formula for the field.\r\n   * @param dateFormat The date and time format that is displayed in the field.\r\n   * @param outputType Specifies the output format for the field. Represents a FieldType value.\r\n   * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\r\n   */\r\n  @tag(\"fs.addCalculated\")\r\n  public addCalculated(\r\n    title: string,\r\n    formula: string,\r\n    dateFormat: DateTimeFieldFormatType,\r\n    outputType: FieldTypes = FieldTypes.Text,\r\n    properties?: IFieldCreationProperties): Promise<IFieldAddResult> {\r\n\r\n    const props: {\r\n      DateFormat: DateTimeFieldFormatType;\r\n      FieldTypeKind: number;\r\n      Formula: string;\r\n      OutputType: FieldTypes;\r\n    } = {\r\n      DateFormat: dateFormat,\r\n      FieldTypeKind: 17,\r\n      Formula: formula,\r\n      OutputType: outputType,\r\n    };\r\n\r\n    return this.add(title, \"SP.FieldCalculated\", assign(props, properties));\r\n  }\r\n\r\n  /**\r\n   * Adds a new SP.FieldDateTime to the collection\r\n   *\r\n   * @param title The field title\r\n   * @param displayFormat The format of the date and time that is displayed in the field.\r\n   * @param calendarType Specifies the calendar type of the field.\r\n   * @param friendlyDisplayFormat The type of friendly display format that is used in the field.\r\n   * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\r\n   */\r\n  @tag(\"fs.addDateTime\")\r\n  public addDateTime(\r\n    title: string,\r\n    displayFormat: DateTimeFieldFormatType = DateTimeFieldFormatType.DateOnly,\r\n    calendarType: CalendarType = CalendarType.Gregorian,\r\n    friendlyDisplayFormat: DateTimeFieldFriendlyFormatType = DateTimeFieldFriendlyFormatType.Unspecified,\r\n    properties?: IFieldCreationProperties): Promise<IFieldAddResult> {\r\n\r\n    const props = {\r\n      DateTimeCalendarType: calendarType,\r\n      DisplayFormat: displayFormat,\r\n      FieldTypeKind: 4,\r\n      FriendlyDisplayFormat: friendlyDisplayFormat,\r\n    };\r\n\r\n    return this.add(title, \"SP.FieldDateTime\", assign(props, properties));\r\n  }\r\n\r\n  /**\r\n   * Adds a new SP.FieldNumber to the collection\r\n   *\r\n   * @param title The field title\r\n   * @param minValue The field's minimum value\r\n   * @param maxValue The field's maximum value\r\n   * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\r\n   */\r\n  @tag(\"fs.addNumber\")\r\n  public addNumber(\r\n    title: string,\r\n    minValue?: number,\r\n    maxValue?: number,\r\n    properties?: IFieldCreationProperties): Promise<IFieldAddResult> {\r\n\r\n    let props: { FieldTypeKind: number } = { FieldTypeKind: 9 };\r\n\r\n    if (minValue !== undefined) {\r\n      props = assign({ MinimumValue: minValue }, props);\r\n    }\r\n\r\n    if (maxValue !== undefined) {\r\n      props = assign({ MaximumValue: maxValue }, props);\r\n    }\r\n\r\n    return this.add(title, \"SP.FieldNumber\", assign(props, properties));\r\n  }\r\n\r\n  /**\r\n   * Adds a new SP.FieldCurrency to the collection\r\n   *\r\n   * @param title The field title\r\n   * @param minValue The field's minimum value\r\n   * @param maxValue The field's maximum value\r\n   * @param currencyLocalId Specifies the language code identifier (LCID) used to format the value of the field\r\n   * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\r\n   */\r\n  @tag(\"fs.addCurrency\")\r\n  public addCurrency(\r\n    title: string,\r\n    minValue?: number,\r\n    maxValue?: number,\r\n    currencyLocalId = 1033,\r\n    properties?: IFieldCreationProperties): Promise<IFieldAddResult> {\r\n\r\n    let props: { CurrencyLocaleId: number; FieldTypeKind: number; } = {\r\n      CurrencyLocaleId: currencyLocalId,\r\n      FieldTypeKind: 10,\r\n    };\r\n\r\n    if (minValue !== undefined) {\r\n      props = assign({ MinimumValue: minValue }, props);\r\n    }\r\n\r\n    if (maxValue !== undefined) {\r\n      props = assign({ MaximumValue: maxValue }, props);\r\n    }\r\n\r\n    return this.add(title, \"SP.FieldCurrency\", assign(props, properties));\r\n  }\r\n\r\n  /**\r\n   * Adds a new SP.FieldMultiLineText to the collection\r\n   *\r\n   * @param title The field title\r\n   * @param numberOfLines Specifies the number of lines of text to display for the field.\r\n   * @param richText Specifies whether the field supports rich formatting.\r\n   * @param restrictedMode Specifies whether the field supports a subset of rich formatting.\r\n   * @param appendOnly Specifies whether all changes to the value of the field are displayed in list forms.\r\n   * @param allowHyperlink Specifies whether a hyperlink is allowed as a value of the field.\r\n   * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\r\n   *\r\n   */\r\n  @tag(\"fs.addMultilineText\")\r\n  public addMultilineText(\r\n    title: string,\r\n    numberOfLines = 6,\r\n    richText = true,\r\n    restrictedMode = false,\r\n    appendOnly = false,\r\n    allowHyperlink = true,\r\n    properties?: IFieldCreationProperties): Promise<IFieldAddResult> {\r\n\r\n    const props = {\r\n      AllowHyperlink: allowHyperlink,\r\n      AppendOnly: appendOnly,\r\n      FieldTypeKind: 3,\r\n      NumberOfLines: numberOfLines,\r\n      RestrictedMode: restrictedMode,\r\n      RichText: richText,\r\n    };\r\n\r\n    return this.add(title, \"SP.FieldMultiLineText\", assign(props, properties));\r\n  }\r\n\r\n  /**\r\n   * Adds a new SP.FieldUrl to the collection\r\n   *\r\n   * @param title The field title\r\n   */\r\n  @tag(\"fs.addUrl\")\r\n  public addUrl(title: string, displayFormat: UrlFieldFormatType = UrlFieldFormatType.Hyperlink, properties?: IFieldCreationProperties): Promise<IFieldAddResult> {\r\n\r\n    const props = {\r\n      DisplayFormat: displayFormat,\r\n      FieldTypeKind: 11,\r\n    };\r\n\r\n    return this.add(title, \"SP.FieldUrl\", assign(props, properties));\r\n  }\r\n\r\n  /** Adds a user field to the colleciton\r\n  *\r\n  * @param title The new field's title\r\n  * @param selectionMode The selection mode of the field\r\n  * @param selectionGroup Value that specifies the identifier of the SharePoint group whose members can be selected as values of the field\r\n  * @param properties\r\n  */\r\n  @tag(\"fs.addUser\")\r\n  public addUser(title: string, selectionMode: FieldUserSelectionMode, properties?: IFieldCreationProperties): Promise<IFieldAddResult> {\r\n\r\n    const props = {\r\n      FieldTypeKind: 20,\r\n      SelectionMode: selectionMode,\r\n    };\r\n\r\n    return this.add(title, \"SP.FieldUser\", assign(props, properties));\r\n  }\r\n\r\n  /**\r\n   * Adds a SP.FieldLookup to the collection\r\n   *\r\n   * @param title The new field's title\r\n   * @param lookupListId The guid id of the list where the source of the lookup is found\r\n   * @param lookupFieldName The internal name of the field in the source list\r\n   * @param properties Set of additional properties to set on the new field\r\n   */\r\n  @tag(\"fs.addLookup\")\r\n  public async addLookup(\r\n    title: string,\r\n    lookupListId: string,\r\n    lookupFieldName: string,\r\n    properties?: IFieldCreationProperties): Promise<IFieldAddResult> {\r\n\r\n    const props = assign({\r\n      FieldTypeKind: 7,\r\n      LookupFieldName: lookupFieldName,\r\n      LookupListId: lookupListId,\r\n      Title: title,\r\n    }, properties);\r\n\r\n    const postBody = body({\r\n      \"parameters\":\r\n        assign(metadata(\"SP.FieldCreationInformation\"), props),\r\n    });\r\n\r\n    const data = await spPost<{ Id: string; }>(this.clone(Fields, \"addfield\"), postBody);\r\n\r\n    return {\r\n      data,\r\n      field: this.getById(data.Id),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Adds a new SP.FieldChoice to the collection\r\n   *\r\n   * @param title The field title.\r\n   * @param choices The choices for the field.\r\n   * @param format The display format of the available options for the field.\r\n   * @param fillIn Specifies whether the field allows fill-in values.\r\n   * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\r\n   */\r\n  @tag(\"fs.addChoice\")\r\n  public addChoice(\r\n    title: string,\r\n    choices: string[],\r\n    format: ChoiceFieldFormatType = ChoiceFieldFormatType.Dropdown,\r\n    fillIn?: boolean,\r\n    properties?: IFieldCreationProperties): Promise<IFieldAddResult> {\r\n\r\n    const props = {\r\n      Choices: {\r\n        results: choices,\r\n      },\r\n      EditFormat: format,\r\n      FieldTypeKind: 6,\r\n      FillInChoice: fillIn,\r\n    };\r\n\r\n    return this.add(title, \"SP.FieldChoice\", assign(props, properties));\r\n  }\r\n\r\n  /**\r\n   * Adds a new SP.FieldMultiChoice to the collection\r\n   *\r\n   * @param title The field title.\r\n   * @param choices The choices for the field.\r\n   * @param fillIn Specifies whether the field allows fill-in values.\r\n   * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\r\n   */\r\n  @tag(\"fs.addMultiChoice\")\r\n  public addMultiChoice(title: string, choices: string[], fillIn?: boolean, properties?: IFieldCreationProperties): Promise<IFieldAddResult> {\r\n\r\n    const props = {\r\n      Choices: {\r\n        results: choices,\r\n      },\r\n      FieldTypeKind: 15,\r\n      FillInChoice: fillIn,\r\n    };\r\n\r\n    return this.add(title, \"SP.FieldMultiChoice\", assign(props, properties));\r\n  }\r\n\r\n  /**\r\n   * Adds a new SP.FieldBoolean to the collection\r\n   *\r\n   * @param title The field title.\r\n   * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\r\n   */\r\n  @tag(\"fs.addBoolean\")\r\n  public addBoolean(title: string, properties?: IFieldCreationProperties): Promise<IFieldAddResult> {\r\n\r\n    const props = {\r\n      FieldTypeKind: 8,\r\n    };\r\n\r\n    return this.add(title, \"SP.Field\", assign(props, properties));\r\n  }\r\n\r\n  /**\r\n  * Creates a secondary (dependent) lookup field, based on the Id of the primary lookup field.\r\n  *\r\n  * @param displayName The display name of the new field.\r\n  * @param primaryLookupFieldId The guid of the primary Lookup Field.\r\n  * @param showField Which field to show from the lookup list.\r\n  */\r\n  @tag(\"fs.addDependentLookupField\")\r\n  public async addDependentLookupField(displayName: string, primaryLookupFieldId: string, showField: string): Promise<IFieldAddResult> {\r\n\r\n    const path = `adddependentlookupfield(displayName='${displayName}', primarylookupfieldid='${primaryLookupFieldId}', showfield='${showField}')`;\r\n\r\n    const data = await spPost(this.clone(Fields, path));\r\n\r\n    return {\r\n      data,\r\n      field: this.getById(data.Id),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Adds a new SP.FieldLocation to the collection\r\n   *\r\n   * @param title The field title.\r\n   * @param properties Differ by type of field being created (see: https://msdn.microsoft.com/en-us/library/office/dn600182.aspx)\r\n   */\r\n  @tag(\"fs.addLocation\")\r\n  public addLocation(title: string, properties?: IFieldCreationProperties): Promise<IFieldAddResult> {\r\n\r\n    const props = { FieldTypeKind: 33 };\r\n\r\n    return this.add(title, \"SP.FieldLocation\", assign(props, properties));\r\n  }\r\n}\r\nexport interface IFields extends _Fields { }\r\nexport const Fields = spInvokableFactory<IFields>(_Fields);\r\n\r\nexport class _Field extends _SharePointQueryableInstance<IFieldInfo> {\r\n\r\n  public delete = deleteable(\"f\");\r\n\r\n  /**\r\n   * Updates this field instance with the supplied properties\r\n   *\r\n   * @param properties A plain object hash of values to update for the list\r\n   * @param fieldType The type value such as SP.FieldLookup. Optional, looked up from the field if not provided\r\n   */\r\n  @tag(\"f.update\")\r\n  public async update(properties: Partial<IFieldInfo>, fieldType?: string): Promise<IFieldUpdateResult> {\r\n\r\n    if (typeof fieldType === \"undefined\" || fieldType === null) {\r\n      const info = await this.select(\"FieldTypeKind\")();\r\n      fieldType = `SP.Field${FieldTypes[info.FieldTypeKind]}`;\r\n    }\r\n\r\n    const req = body(assign(metadata(fieldType), properties), headers({ \"X-HTTP-Method\": \"MERGE\" }));\r\n\r\n    const data = await spPost(this, req);\r\n\r\n    return {\r\n      data,\r\n      field: <any>this,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Sets the value of the ShowInDisplayForm property for this field.\r\n   */\r\n  @tag(\"f.setShowInDisplayForm\")\r\n  public setShowInDisplayForm(show: boolean): Promise<void> {\r\n    return spPost(this.clone(Field, `setshowindisplayform(${show})`));\r\n  }\r\n\r\n  /**\r\n   * Sets the value of the ShowInEditForm property for this field.\r\n   */\r\n  @tag(\"f.setShowInEditForm\")\r\n  public setShowInEditForm(show: boolean): Promise<void> {\r\n    return spPost(this.clone(Field, `setshowineditform(${show})`));\r\n  }\r\n\r\n  /**\r\n   * Sets the value of the ShowInNewForm property for this field.\r\n   */\r\n  @tag(\"f.setShowInNewForm\")\r\n  public setShowInNewForm(show: boolean): Promise<void> {\r\n    return spPost(this.clone(Field, `setshowinnewform(${show})`));\r\n  }\r\n}\r\nexport interface IField extends _Field, IDeleteable { }\r\nexport const Field = spInvokableFactory<IField>(_Field);\r\n\r\n/**\r\n * This interface defines the result of adding a field\r\n */\r\nexport interface IFieldAddResult {\r\n  data: Partial<IFieldInfo>;\r\n  field: IField;\r\n}\r\n\r\n/**\r\n * This interface defines the result of updating a field\r\n */\r\nexport interface IFieldUpdateResult {\r\n  data: Partial<IFieldInfo>;\r\n  field: IField;\r\n}\r\n\r\n/**\r\n * Specifies the type of the field.\r\n */\r\nexport enum FieldTypes {\r\n  Invalid = 0,\r\n  Integer = 1,\r\n  Text = 2,\r\n  Note = 3,\r\n  DateTime = 4,\r\n  Counter = 5,\r\n  Choice = 6,\r\n  Lookup = 7,\r\n  Boolean = 8,\r\n  Number = 9,\r\n  Currency = 10,\r\n  URL = 11,\r\n  Computed = 12,\r\n  Threading = 13,\r\n  Guid = 14,\r\n  MultiChoice = 15,\r\n  GridChoice = 16,\r\n  Calculated = 17,\r\n  File = 18,\r\n  Attachments = 19,\r\n  User = 20,\r\n  Recurrence = 21,\r\n  CrossProjectLink = 22,\r\n  ModStat = 23,\r\n  Error = 24,\r\n  ContentTypeId = 25,\r\n  PageSeparator = 26,\r\n  ThreadIndex = 27,\r\n  WorkflowStatus = 28,\r\n  AllDayEvent = 29,\r\n  WorkflowEventType = 30,\r\n}\r\n\r\nexport enum DateTimeFieldFormatType {\r\n  DateOnly = 0,\r\n  DateTime = 1,\r\n}\r\n\r\nexport enum DateTimeFieldFriendlyFormatType {\r\n  Unspecified = 0,\r\n  Disabled = 1,\r\n  Relative = 2,\r\n}\r\n\r\n/**\r\n * Specifies the control settings while adding a field.\r\n */\r\nexport enum AddFieldOptions {\r\n  /**\r\n   *  Specify that a new field added to the list must also be added to the default content type in the site collection\r\n   */\r\n  DefaultValue = 0,\r\n  /**\r\n   * Specify that a new field added to the list must also be added to the default content type in the site collection.\r\n   */\r\n  AddToDefaultContentType = 1,\r\n  /**\r\n   * Specify that a new field must not be added to any other content type\r\n   */\r\n  AddToNoContentType = 2,\r\n  /**\r\n   *  Specify that a new field that is added to the specified list must also be added to all content types in the site collection\r\n   */\r\n  AddToAllContentTypes = 4,\r\n  /**\r\n   * Specify adding an internal field name hint for the purpose of avoiding possible database locking or field renaming operations\r\n   */\r\n  AddFieldInternalNameHint = 8,\r\n  /**\r\n   * Specify that a new field that is added to the specified list must also be added to the default list view\r\n   */\r\n  AddFieldToDefaultView = 16,\r\n  /**\r\n   * Specify to confirm that no other field has the same display name\r\n   */\r\n  AddFieldCheckDisplayName = 32,\r\n}\r\n\r\nexport interface IXmlSchemaFieldCreationInformation {\r\n  Options?: AddFieldOptions;\r\n  SchemaXml: string;\r\n}\r\n\r\nexport enum CalendarType {\r\n  Gregorian = 1,\r\n  Japan = 3,\r\n  Taiwan = 4,\r\n  Korea = 5,\r\n  Hijri = 6,\r\n  Thai = 7,\r\n  Hebrew = 8,\r\n  GregorianMEFrench = 9,\r\n  GregorianArabic = 10,\r\n  GregorianXLITEnglish = 11,\r\n  GregorianXLITFrench = 12,\r\n  KoreaJapanLunar = 14,\r\n  ChineseLunar = 15,\r\n  SakaEra = 16,\r\n  UmAlQura = 23,\r\n}\r\n\r\nexport enum UrlFieldFormatType {\r\n  Hyperlink = 0,\r\n  Image = 1,\r\n}\r\n\r\nexport enum FieldUserSelectionMode {\r\n  PeopleAndGroups = 1,\r\n  PeopleOnly = 0,\r\n}\r\n\r\nexport interface IFieldCreationProperties extends ITypedHash<string | number | boolean> {\r\n  DefaultFormula?: string;\r\n  Description?: string;\r\n  EnforceUniqueValues?: boolean;\r\n  FieldTypeKind?: number;\r\n  Group?: string;\r\n  Hidden?: boolean;\r\n  Indexed?: boolean;\r\n  Required?: boolean;\r\n  Title?: string;\r\n  ValidationFormula?: string;\r\n  ValidationMessage?: string;\r\n}\r\n\r\nexport enum ChoiceFieldFormatType {\r\n  Dropdown,\r\n  RadioButtons,\r\n}\r\n\r\nexport interface IFieldInfo {\r\n  DefaultFormula: string | null;\r\n  DefaultValue: string | null;\r\n  Description: string;\r\n  Direction: string;\r\n  EnforceUniqueValues: boolean;\r\n  EntityPropertyName: string;\r\n  FieldTypeKind: FieldTypes;\r\n  Filterable: boolean;\r\n  FromBaseType: boolean;\r\n  Group: string;\r\n  Hidden: boolean;\r\n  Id: string;\r\n  Indexed: boolean;\r\n  IndexStatus: number;\r\n  InternalName: string;\r\n  JSLink: string;\r\n  PinnedToFiltersPane: boolean;\r\n  ReadOnlyField: boolean;\r\n  Required: boolean;\r\n  SchemaXml: string;\r\n  Scope: string;\r\n  Sealed: boolean;\r\n  ShowInFiltersPane: number;\r\n  Sortable: boolean;\r\n  StaticName: string;\r\n  Title: string;\r\n  TypeAsString: string;\r\n  TypeDisplayName: string;\r\n  TypeShortDescription: string;\r\n  ValidationFormula: string | null;\r\n  ValidationMessage: string | null;\r\n}\r\n","import { addProp } from \"@pnp/odata\";\r\nimport { _Web } from \"../webs/types\";\r\nimport { Fields, IFields } from \"./types\";\r\n\r\ndeclare module \"../webs/types\" {\r\n  interface _Web {\r\n    readonly fields: IFields;\r\n    readonly availablefields: IFields;\r\n  }\r\n  interface IWeb {\r\n    /**\r\n     * This web's collection of fields\r\n     */\r\n    readonly fields: IFields;\r\n    /**\r\n     * This web's collection of available fields\r\n     */\r\n    readonly availablefields: IFields;\r\n  }\r\n}\r\n\r\naddProp(_Web, \"fields\", Fields);\r\naddProp(_Web, \"availablefields\", Fields, \"availablefields\");\r\n","import { addProp } from \"@pnp/odata\";\r\nimport { _List } from \"../lists/types\";\r\nimport { Fields, IFields } from \"./types\";\r\n\r\ndeclare module \"../lists/types\" {\r\n  interface _List {\r\n    readonly fields: IFields;\r\n  }\r\n  interface IList {\r\n    /**\r\n     * This list's collection of fields\r\n     */\r\n    readonly fields: IFields;\r\n  }\r\n}\r\n\r\naddProp(_List, \"fields\", Fields);\r\n","import { addProp } from \"@pnp/odata\";\r\nimport { _Folder } from \"../folders/types\";\r\nimport { IFiles, Files } from \"./types\";\r\n\r\ndeclare module \"../folders/types\" {\r\n    interface _Folder {\r\n        readonly files: IFiles;\r\n    }\r\n    interface IFolder {\r\n        /**\r\n         * Folder containing files\r\n         */\r\n        readonly files: IFiles;\r\n    }\r\n}\r\n\r\naddProp(_Folder, \"files\", Files);\r\n","import { addProp } from \"@pnp/odata\";\r\nimport { _Item } from \"../items/types\";\r\nimport { File, IFile } from \"./types\";\r\n\r\ndeclare module \"../items/types\" {\r\n    interface _Item {\r\n        readonly file: IFile;\r\n    }\r\n    interface IItem {\r\n        /**\r\n         * File in sharepoint site\r\n         */\r\n        readonly file: IFile;\r\n    }\r\n}\r\n\r\naddProp(_Item, \"file\", File, \"file\");\r\n","import { addProp } from \"@pnp/odata\";\r\nimport { _Item } from \"../items/types\";\r\nimport { Folder, IFolder } from \"./types\";\r\n\r\ndeclare module \"../items/types\" {\r\n    interface _Item {\r\n        readonly folder: IFolder;\r\n\r\n    }\r\n    interface IItem {\r\n        readonly folder: IFolder;\r\n\r\n    }\r\n}\r\n\r\naddProp(_Item, \"folder\", Folder, \"folder\");\r\n","import { addProp } from \"@pnp/odata\";\r\nimport { _List } from \"../lists/types\";\r\nimport { Folder, IFolder } from \"./types\";\r\n\r\ndeclare module \"../lists/types\" {\r\n    interface _List {\r\n        readonly rootFolder: IFolder;\r\n    }\r\n    interface IList {\r\n        /**\r\n         * Root folder for this list/library\r\n         */\r\n        readonly rootFolder: IFolder;\r\n    }\r\n}\r\n\r\naddProp(_List, \"rootFolder\", Folder, \"rootFolder\");\r\n","import { addProp } from \"@pnp/odata\";\r\nimport { _Web } from \"../webs/types\";\r\nimport { Folders, IFolders, Folder, IFolder } from \"./types\";\r\nimport { escapeQueryStrValue } from \"../utils/escapeQueryStrValue\";\r\n\r\ndeclare module \"../webs/types\" {\r\n    interface _Web {\r\n        readonly folders: IFolders;\r\n        readonly rootFolder: IFolder;\r\n        getFolderByServerRelativeUrl(folderRelativeUrl: string): IFolder;\r\n        getFolderByServerRelativePath(folderRelativeUrl: string): IFolder;\r\n        getFolderById(uniqueId: string): IFolder;\r\n    }\r\n    interface IWeb {\r\n\r\n        /**\r\n         * Gets the collection of folders in this web\r\n         */\r\n        readonly folders: IFolders;\r\n\r\n        /**\r\n         * Gets the root folder of the web\r\n         */\r\n        readonly rootFolder: IFolder;\r\n\r\n        /**\r\n         * Gets a folder by server relative url\r\n         *\r\n         * @param folderRelativeUrl The server relative path to the folder (including /sites/ if applicable)\r\n         */\r\n        getFolderByServerRelativeUrl(folderRelativeUrl: string): IFolder;\r\n\r\n        /**\r\n         * Gets a folder by server relative path if your folder name contains # and % characters\r\n         * This works only in SharePoint online.\r\n         *\r\n         * @param folderRelativeUrl The server relative path to the folder (including /sites/ if applicable)\r\n         */\r\n        getFolderByServerRelativePath(folderRelativeUrl: string): IFolder;\r\n\r\n        /**\r\n         * Gets a folder by id\r\n         *\r\n         * @param uniqueId The UniqueId of the folder\r\n         */\r\n        getFolderById(uniqueId: string): IFolder;\r\n    }\r\n}\r\n\r\naddProp(_Web, \"folders\", Folders);\r\naddProp(_Web, \"rootFolder\", Folder, \"rootFolder\");\r\n\r\n_Web.prototype.getFolderByServerRelativeUrl = function (this: _Web, folderRelativeUrl: string): IFolder {\r\n    return Folder(this, `getFolderByServerRelativeUrl('${escapeQueryStrValue(folderRelativeUrl)}')`);\r\n};\r\n\r\n_Web.prototype.getFolderByServerRelativePath = function (this: _Web, folderRelativeUrl: string): IFolder {\r\n    return Folder(this, `getFolderByServerRelativePath(decodedUrl='${escapeQueryStrValue(folderRelativeUrl)}')`);\r\n};\r\n\r\n_Web.prototype.getFolderById = function (this: _Web, uniqueId: string): IFolder {\r\n    return Folder(this, `getFolderById('${uniqueId}')`);\r\n};\r\n","import {\r\n    _SharePointQueryableInstance,\r\n    _SharePointQueryableCollection,\r\n    spInvokableFactory,\r\n} from \"../sharepointqueryable\";\r\nimport { defaultPath } from \"../decorators\";\r\nimport { PageType } from \"../types\";\r\nimport { tag } from \"../telemetry\";\r\n\r\n/**\r\n * Describes a collection of Form objects\r\n *\r\n */\r\n@defaultPath(\"forms\")\r\nexport class _Forms extends _SharePointQueryableCollection<IFormInfo[]> {\r\n    /**\t\r\n     * Gets a form by id\t\r\n     *\t\r\n     * @param id The guid id of the item to retrieve\t\r\n     */\r\n    public getById(id: string): IForm {\r\n        return tag.configure(Form(this).concat(`('${id}')`), \"fos.getById\");\r\n    }\r\n}\r\nexport interface IForms extends _Forms { }\r\nexport const Forms = spInvokableFactory<IForms>(_Forms);\r\n\r\n/**\r\n * Describes a single of Form instance\r\n *\r\n */\r\nexport class _Form extends _SharePointQueryableInstance<IFormInfo> { }\r\nexport interface IForm extends _Form { }\r\nexport const Form = spInvokableFactory<IForm>(_Form);\r\n\r\nexport interface IFormInfo {\r\n    FormType: PageType;\r\n    Id: string;\r\n    ResourcePath: { DecodedUrl: string; };\r\n    DecodedUrl: string;\r\n    ServerRelativeUrl: string;\r\n}\r\n","import { addProp } from \"@pnp/odata\";\r\nimport { _List } from \"../lists/types\";\r\nimport { Forms, IForms } from \"./types\";\r\n\r\ndeclare module \"../lists/types\" {\r\n    interface _List {\r\n        readonly forms: IForms;\r\n    }\r\n    interface IList {\r\n        readonly forms: IForms;\r\n    }\r\n}\r\n\r\naddProp(_List, \"forms\", Forms, \"forms\");\r\n","import {\r\n    _SharePointQueryableInstance,\r\n    _SharePointQueryableCollection,\r\n    spInvokableFactory,\r\n} from \"../sharepointqueryable\";\r\nimport { ISerializableNavigationNode } from \"../navigation/types\";\r\nimport { defaultPath } from \"../decorators\";\r\nimport { Site, ISite } from \"../sites/types\";\r\nimport { tag } from \"../telemetry\";\r\n\r\n@defaultPath(\"_api/hubsites\")\r\nexport class _HubSites extends _SharePointQueryableCollection<IHubSiteInfo[]> {\r\n\r\n    /**\t    \r\n     * Gets a Hub Site from the collection by id\t     \r\n     *\t    \r\n     * @param id The Id of the Hub Site\t    \r\n     */\r\n    public getById(id: string): IHubSite {\r\n        return tag.configure(HubSite(this, `GetById?hubSiteId='${id}'`), \"hss.getById\");\r\n\r\n    }\r\n}\r\nexport interface IHubSites extends _HubSites { }\r\nexport const HubSites = spInvokableFactory<IHubSites>(_HubSites);\r\n\r\nexport class _HubSite extends _SharePointQueryableInstance<IHubSiteInfo> {\r\n\r\n    /**\r\n     * Gets the ISite instance associated with this hubsite\r\n     */\r\n    @tag(\"hs.getSite\")\r\n    public async getSite(): Promise<ISite> {\r\n        const d = await this.select(\"SiteUrl\")();\r\n        return Site(d.SiteUrl);\r\n    }\r\n}\r\nexport interface IHubSite extends _HubSite { }\r\nexport const HubSite = spInvokableFactory<IHubSite>(_HubSite);\r\n\r\nexport interface IHubSiteInfo {\r\n    ID: string;\r\n    Title: string;\r\n    SiteId: string;\r\n    TenantInstanceId: string;\r\n    SiteUrl: string;\r\n    LogoUrl: string;\r\n    Description: string;\r\n    Targets: string;\r\n    SiteDesignId: string;\r\n    RequiresJoinApproval: boolean;\r\n    RelatedHubSiteIds: string[];\r\n    ParentHubSiteId: string;\r\n    HideNameInNavigation: boolean;\r\n    EnablePermissionsSync: boolean;\r\n}\r\n\r\nexport interface IHubSiteWebData {\r\n    headerEmphasis: string | null;\r\n    themeKey: string | null;\r\n    name: string | null;\r\n    url: string;\r\n    logoUrl: string | null;\r\n    usesMetadataNavigation: boolean;\r\n    megaMenuEnabled: boolean;\r\n    navigation: ISerializableNavigationNode[];\r\n    isNavAudienceTargeted: boolean;\r\n    siteDesignId: string;\r\n    requiresJoinApproval: boolean;\r\n    hideNameInNavigation: boolean;\r\n    parentHubSiteId: string;\r\n    relatedHubSiteIds: string | null;\r\n}\r\n","import { _Site, Site } from \"../sites/types\";\r\nimport { spPost } from \"../operations\";\r\n\r\ndeclare module \"../sites/types\" {\r\n    interface _Site {\r\n        joinHubSite(siteId: string): Promise<void>;\r\n        registerHubSite(): Promise<void>;\r\n        unRegisterHubSite(): Promise<void>;\r\n    }\r\n    interface ISite {\r\n\r\n        /**\r\n         * Associates a site collection to a hub site.\r\n         * \r\n         * @param siteId Id of the hub site collection you want to join.\r\n         * If you want to disassociate the site collection from hub site, then\r\n         * pass the siteId as 00000000-0000-0000-0000-000000000000\r\n         */\r\n        joinHubSite(siteId: string): Promise<void>;\r\n\r\n        /**\r\n         * Registers the current site collection as hub site collection\r\n         */\r\n        registerHubSite(): Promise<void>;\r\n\r\n        /**\r\n         * Unregisters the current site collection as hub site collection.\r\n         */\r\n        unRegisterHubSite(): Promise<void>;\r\n    }\r\n}\r\n\r\n_Site.prototype.joinHubSite = async function (this: _Site, siteId: string): Promise<void> {\r\n    await spPost(this.clone(Site, `joinHubSite('${siteId}')`));\r\n};\r\n\r\n_Site.prototype.registerHubSite = async function (this: _Site): Promise<void> {\r\n    await spPost(this.clone(Site, `registerHubSite`));\r\n};\r\n\r\n_Site.prototype.unRegisterHubSite = async function (this: _Site): Promise<void> {\r\n    await spPost(this.clone(Site, `unRegisterHubSite`));\r\n};\r\n","import { _Web, Web } from \"../webs/types\";\r\nimport { IHubSiteWebData } from \"./types\";\r\nimport { spPost } from \"../operations\";\r\n\r\ndeclare module \"../webs/types\" {\r\n    interface _Web {\r\n        hubSiteData(forceRefresh?: boolean): Promise<Partial<IHubSiteWebData>>;\r\n        syncHubSiteTheme(): Promise<void>;\r\n    }\r\n    interface IWeb {\r\n\r\n        /**\r\n         * Gets hub site data for the current web.\r\n         *\r\n         * @param forceRefresh Default value is false. When false, the data is returned from the server's cache.\r\n         * When true, the cache is refreshed with the latest updates and then returned.\r\n         * Use this if you just made changes and need to see those changes right away.\r\n         */\r\n        hubSiteData(forceRefresh?: boolean): Promise<Partial<IHubSiteWebData>>;\r\n\r\n        /**\r\n         * Applies theme updates from the parent hub site collection.\r\n         */\r\n        syncHubSiteTheme(): Promise<void>;\r\n    }\r\n}\r\n\r\n_Web.prototype.hubSiteData = async function (this: _Web, forceRefresh = false): Promise<IHubSiteWebData> {\r\n    const data = await this.clone(Web, `hubSiteData(${forceRefresh})`)<IHubSiteWebData>();\r\n    if (typeof data === \"string\") {\r\n        return JSON.parse(data);\r\n    }\r\n    return data;\r\n};\r\n\r\n_Web.prototype.syncHubSiteTheme = function (this: _Web): Promise<void> {\r\n    return spPost(this.clone(Web, `syncHubSiteTheme`));\r\n};\r\n","import { SPRest } from \"../rest\";\r\nimport { HubSites, IHubSites } from \"./types\";\r\n\r\nimport \"./site\";\r\nimport \"./web\";\r\n\r\nexport {\r\n    HubSite,\r\n    HubSites,\r\n    IHubSite,\r\n    IHubSiteInfo,\r\n    IHubSiteWebData,\r\n    IHubSites,\r\n} from \"./types\";\r\n\r\ndeclare module \"../rest\" {\r\n    interface SPRest {\r\n        /**\r\n         * Lists all of the subsites\r\n         */\r\n        readonly hubSites: IHubSites;\r\n    }\r\n}\r\n\r\nReflect.defineProperty(SPRest.prototype, \"hubSites\", {\r\n    configurable: true,\r\n    enumerable: true,\r\n    get: function (this: SPRest) {\r\n        return HubSites(this._baseUrl).configure(this._options);\r\n    },\r\n});\r\n","import {\r\n    _SharePointQueryableInstance,\r\n    _SharePointQueryableCollection,\r\n    _SharePointQueryable,\r\n    spInvokableFactory,\r\n    deleteable,\r\n    IDeleteable,\r\n} from \"../sharepointqueryable\";\r\nimport { assign } from \"@pnp/common\";\r\nimport { metadata } from \"../utils/metadata\";\r\nimport { body, headers } from \"@pnp/odata\";\r\nimport { defaultPath } from \"../decorators\";\r\nimport { spPost } from \"../operations\";\r\nimport { tag } from \"../telemetry\";\r\n\r\n/**\r\n * Represents a collection of navigation nodes\r\n *\r\n */\r\nexport class _NavigationNodes extends _SharePointQueryableCollection<INavNodeInfo[]> {\r\n\r\n    /**\t    \r\n     * Gets a navigation node by id\t\r\n     *\t\r\n     * @param id The id of the node\t\r\n     */\r\n    public getById(id: number): INavigationNode {\r\n        return tag.configure(NavigationNode(this).concat(`(${id})`), \"nns.getById\");\r\n    }\r\n\r\n    /**\r\n     * Adds a new node to the collection\r\n     *\r\n     * @param title Display name of the node\r\n     * @param url The url of the node\r\n     * @param visible If true the node is visible, otherwise it is hidden (default: true)\r\n     */\r\n    @tag(\"nns.add\")\r\n    public async add(title: string, url: string, visible = true): Promise<INavigationNodeAddResult> {\r\n\r\n        const postBody = body(assign(metadata(\"SP.NavigationNode\"), {\r\n            IsVisible: visible,\r\n            Title: title,\r\n            Url: url,\r\n        }));\r\n\r\n        const data = await spPost(this.clone(NavigationNodes, null), postBody);\r\n\r\n        return {\r\n            data,\r\n            node: this.getById(data.Id),\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Moves a node to be after another node in the navigation\r\n     *\r\n     * @param nodeId Id of the node to move\r\n     * @param previousNodeId Id of the node after which we move the node specified by nodeId\r\n     */\r\n    @tag(\"nns.moveAfter\")\r\n    public moveAfter(nodeId: number, previousNodeId: number): Promise<void> {\r\n\r\n        const postBody = body({\r\n            nodeId: nodeId,\r\n            previousNodeId: previousNodeId,\r\n        });\r\n\r\n        return spPost(this.clone(NavigationNodes, \"MoveAfter\"), postBody);\r\n    }\r\n}\r\nexport interface INavigationNodes extends _NavigationNodes { }\r\nexport const NavigationNodes = spInvokableFactory<INavigationNodes>(_NavigationNodes);\r\n\r\n\r\n/**\r\n * Represents an instance of a navigation node\r\n *\r\n */\r\nexport class _NavigationNode extends _SharePointQueryableInstance<INavNodeInfo> {\r\n\r\n    public delete = deleteable(\"nn\");\r\n\r\n    /**\r\n     * Represents the child nodes of this node\r\n     */\r\n    public get children(): INavigationNodes {\r\n        return tag.configure(NavigationNodes(this, \"children\"), \"nn.children\");\r\n    }\r\n\r\n    /**\r\n     * Updates this node\r\n     * \r\n     * @param properties Properties used to update this node\r\n     */\r\n    @tag(\"nn.update\")\r\n    public async update(properties: Partial<INavNodeInfo>): Promise<INavNodeUpdateResult> {\r\n\r\n        const postBody = body(assign(metadata(\"SP.NavigationNode\"), properties), headers({ \"X-HTTP-Method\": \"MERGE\" }));\r\n\r\n        const data = await spPost(this, postBody);\r\n\r\n        return {\r\n            data,\r\n            node: <any>this,\r\n        };\r\n    }\r\n}\r\nexport interface INavigationNode extends _NavigationNode, IDeleteable { }\r\nexport const NavigationNode = spInvokableFactory<INavigationNode>(_NavigationNode);\r\n\r\nexport interface INavNodeUpdateResult {\r\n    data: any;\r\n    node: INavigationNode;\r\n}\r\n\r\n/**\r\n * Exposes the navigation components\r\n *\r\n */\r\n@defaultPath(\"navigation\")\r\nexport class _Navigation extends _SharePointQueryable {\r\n\r\n    /**\r\n     * Gets the quicklaunch navigation nodes for the current context\r\n     *\r\n     */\r\n    public get quicklaunch(): INavigationNodes {\r\n        return tag.configure(NavigationNodes(this, \"quicklaunch\"), \"n.quicklaunch\");\r\n    }\r\n\r\n    /**\r\n     * Gets the top bar navigation nodes for the current context\r\n     *\r\n     */\r\n    public get topNavigationBar(): INavigationNodes {\r\n        return tag.configure(NavigationNodes(this, \"topnavigationbar\"), \"n.topnavigationbar\");\r\n    }\r\n}\r\nexport interface INavigation {\r\n    readonly quicklaunch: INavigationNodes;\r\n    readonly topNavigationBar: INavigationNodes;\r\n}\r\nexport const Navigation = spInvokableFactory<INavigation>(_Navigation);\r\n\r\n/**\r\n * Represents the top level navigation service\r\n */\r\nexport class _NavigationService extends _SharePointQueryable {\r\n\r\n    constructor(path: string = null) {\r\n        super(\"_api/navigation\", path);\r\n    }\r\n\r\n    /**\r\n     * The MenuState service operation returns a Menu-State (dump) of a SiteMapProvider on a site.\r\n     * \r\n     * @param menuNodeKey MenuNode.Key of the start node within the SiteMapProvider If no key is provided the SiteMapProvider.RootNode will be the root of the menu state.\r\n     * @param depth Depth of the dump. If no value is provided a dump with the depth of 10 is returned\r\n     * @param mapProviderName The name identifying the SiteMapProvider to be used\r\n     * @param customProperties comma seperated list of custom properties to be returned.\r\n     */\r\n    @tag(\"ns.getMenuState\")\r\n    public getMenuState(menuNodeKey: string = null, depth = 10, mapProviderName: string = null, customProperties: string = null): Promise<IMenuNodeCollection> {\r\n\r\n        return spPost(<any>NavigationService(\"MenuState\"), body({\r\n            customProperties,\r\n            depth,\r\n            mapProviderName,\r\n            menuNodeKey,\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Tries to get a SiteMapNode.Key for a given URL within a site collection.\r\n     * \r\n     * @param currentUrl A url representing the SiteMapNode\r\n     * @param mapProviderName The name identifying the SiteMapProvider to be used\r\n     */\r\n    @tag(\"ns.getMenuNodeKey\")\r\n    public getMenuNodeKey(currentUrl: string, mapProviderName: string = null): Promise<string> {\r\n\r\n        return spPost(<any>NavigationService(\"MenuNodeKey\"), body({\r\n            currentUrl,\r\n            mapProviderName,\r\n        }));\r\n    }\r\n}\r\nexport interface INavigationService extends _NavigationService { }\r\nexport const NavigationService = (path?: string) => <INavigationService>new _NavigationService(path);\r\n\r\nexport interface IMenuNode {\r\n    CustomProperties: any[];\r\n    FriendlyUrlSegment: string;\r\n    IsDeleted: boolean;\r\n    IsHidden: boolean;\r\n    Key: string;\r\n    Nodes: IMenuNode[];\r\n    NodeType: number;\r\n    SimpleUrl: string;\r\n    Title: string;\r\n}\r\n\r\nexport interface IMenuNodeCollection {\r\n    FriendlyUrlPrefix: string;\r\n    Nodes: IMenuNode[];\r\n    SimpleUrl: string;\r\n    SPSitePrefix: string;\r\n    SPWebPrefix: string;\r\n    StartingNodeKey: string;\r\n    StartingNodeTitle: string;\r\n    Version: Date;\r\n}\r\n\r\nexport interface ISerializableNavigationNode {\r\n    Id: number;\r\n    Title: string;\r\n    Url: string;\r\n    IsDocLib: boolean;\r\n    IsExternal: boolean;\r\n    ParentId: number;\r\n    ListTemplateType: number;\r\n    AudienceIds: string[];\r\n    Children: ISerializableNavigationNode[];\r\n}\r\n\r\n/**\r\n * Result from adding a navigation node\r\n *\r\n */\r\nexport interface INavigationNodeAddResult {\r\n    data: INavNodeInfo;\r\n    node: INavigationNode;\r\n}\r\n\r\n/**\r\n * Represents the information describing a navigation node\r\n */\r\nexport interface INavNodeInfo {\r\n    AudienceIds: string[] | null;\r\n    Id: number;\r\n    IsDocLib: boolean;\r\n    IsExternal: boolean;\r\n    IsVisible: boolean;\r\n    ListTemplateType: number;\r\n    Title: string;\r\n    Url: string;\r\n}\r\n","import { addProp } from \"@pnp/odata\";\r\nimport { _Web } from \"../webs/types\";\r\nimport { Navigation, INavigation } from \"./types\";\r\n\r\ndeclare module \"../webs/types\" {\r\n    interface _Web {\r\n        navigation: INavigation;\r\n    }\r\n    interface IWeb {\r\n\r\n        /**\r\n         * Gets a navigation object that represents navigation on the Web site,\r\n         * including the Quick Launch area and the top navigation bar\r\n         */\r\n        navigation: INavigation;\r\n    }\r\n}\r\n\r\naddProp(_Web, \"navigation\", Navigation);\r\n","import { SPRest } from \"../rest\";\r\nimport { NavigationService, INavigationService } from \"./types\";\r\n\r\nimport \"./web\";\r\n\r\nexport {\r\n    INavNodeUpdateResult,\r\n    INavigation,\r\n    INavigationNode,\r\n    INavigationNodeAddResult,\r\n    INavigationNodes,\r\n    INavigationService,\r\n    Navigation,\r\n    NavigationNode,\r\n    NavigationNodes,\r\n    NavigationService,\r\n    IMenuNode,\r\n    IMenuNodeCollection,\r\n    ISerializableNavigationNode,\r\n    INavNodeInfo,\r\n} from \"./types\";\r\n\r\ndeclare module \"../rest\" {\r\n    interface SPRest {\r\n        readonly navigation: INavigationService;\r\n    }\r\n}\r\n\r\nReflect.defineProperty(SPRest.prototype, \"navigation\", {\r\n    configurable: true,\r\n    enumerable: true,\r\n    get: function (this: SPRest) {\r\n        return NavigationService().configure(this._options);\r\n    },\r\n});\r\n","import {\r\n    _SharePointQueryableInstance,\r\n    SharePointQueryableCollection,\r\n    ISharePointQueryableCollection,\r\n    _SharePointQueryable,\r\n    ISharePointQueryable,\r\n    spInvokableFactory,\r\n} from \"../sharepointqueryable\";\r\nimport { assign } from \"@pnp/common\";\r\nimport { metadata } from \"../utils/metadata\";\r\nimport { body } from \"@pnp/odata\";\r\nimport { PrincipalType, PrincipalSource } from \"../types\";\r\nimport { defaultPath } from \"../decorators\";\r\nimport { spPost } from \"../operations\";\r\n\r\nexport class _Profiles extends _SharePointQueryableInstance {\r\n\r\n    private clientPeoplePickerQuery: ClientPeoplePickerQuery;\r\n    private profileLoader: ProfileLoader;\r\n\r\n    /**\r\n     * Creates a new instance of the UserProfileQuery class\r\n     *\r\n     * @param baseUrl The url or SharePointQueryable which forms the parent of this user profile query\r\n     */\r\n    constructor(baseUrl: string | ISharePointQueryable, path = \"_api/sp.userprofiles.peoplemanager\") {\r\n        super(baseUrl, path);\r\n\r\n        this.clientPeoplePickerQuery = (new ClientPeoplePickerQuery(baseUrl)).configureFrom(this);\r\n        this.profileLoader = (new ProfileLoader(baseUrl)).configureFrom(this);\r\n    }\r\n\r\n    /**\r\n     * The url of the edit profile page for the current user\r\n     */\r\n    public get editProfileLink(): Promise<string> {\r\n        return this.clone(Profiles, \"EditProfileLink\").get();\r\n    }\r\n\r\n    /**\r\n     * A boolean value that indicates whether the current user's \"People I'm Following\" list is public\r\n     */\r\n    public get isMyPeopleListPublic(): Promise<boolean> {\r\n        return this.clone(Profiles, \"IsMyPeopleListPublic\").get();\r\n    }\r\n\r\n    /**\r\n     * A boolean value that indicates whether the current user is being followed by the specified user\r\n     *\r\n     * @param loginName The account name of the user\r\n     */\r\n    public amIFollowedBy(loginName: string): Promise<boolean> {\r\n        const q = this.clone(Profiles, \"amifollowedby(@v)\");\r\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\r\n        return q.get();\r\n    }\r\n\r\n    /**\r\n     * A boolean value that indicates whether the current user is following the specified user\r\n     *\r\n     * @param loginName The account name of the user\r\n     */\r\n    public amIFollowing(loginName: string): Promise<boolean> {\r\n        const q = this.clone(Profiles, \"amifollowing(@v)\");\r\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\r\n        return q.get();\r\n    }\r\n\r\n    /**\r\n     * Gets tags that the current user is following\r\n     *\r\n     * @param maxCount The maximum number of tags to retrieve (default is 20)\r\n     */\r\n    public getFollowedTags(maxCount = 20): Promise<string[]> {\r\n        return this.clone(Profiles, `getfollowedtags(${maxCount})`).get();\r\n    }\r\n\r\n    /**\r\n     * Gets the people who are following the specified user\r\n     *\r\n     * @param loginName The account name of the user\r\n     */\r\n    public getFollowersFor(loginName: string): Promise<any[]> {\r\n        const q = this.clone(Profiles, \"getfollowersfor(@v)\");\r\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\r\n        return q.get();\r\n    }\r\n\r\n    /**\r\n     * Gets the people who are following the current user\r\n     *\r\n     */\r\n    public get myFollowers(): ISharePointQueryableCollection {\r\n        return SharePointQueryableCollection(this, \"getmyfollowers\");\r\n    }\r\n\r\n    /**\r\n     * Gets user properties for the current user\r\n     *\r\n     */\r\n    public get myProperties(): _SharePointQueryableInstance {\r\n        return new _Profiles(this, \"getmyproperties\");\r\n    }\r\n\r\n    /**\r\n     * Gets the people who the specified user is following\r\n     *\r\n     * @param loginName The account name of the user.\r\n     */\r\n    public getPeopleFollowedBy(loginName: string): Promise<any[]> {\r\n        const q = this.clone(Profiles, \"getpeoplefollowedby(@v)\");\r\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\r\n        return q.get();\r\n    }\r\n\r\n    /**\r\n     * Gets user properties for the specified user.\r\n     *\r\n     * @param loginName The account name of the user.\r\n     */\r\n    public getPropertiesFor(loginName: string): Promise<any> {\r\n        const q = this.clone(Profiles, \"getpropertiesfor(@v)\");\r\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\r\n        return q.get();\r\n    }\r\n\r\n    /**\r\n     * Gets the 20 most popular hash tags over the past week, sorted so that the most popular tag appears first\r\n     *\r\n     */\r\n    public get trendingTags(): Promise<IHashTagCollection> {\r\n        const q = this.clone(Profiles, null);\r\n        q.concat(\".gettrendingtags\");\r\n        return q.get();\r\n    }\r\n\r\n    /**\r\n     * Gets the specified user profile property for the specified user\r\n     *\r\n     * @param loginName The account name of the user\r\n     * @param propertyName The case-sensitive name of the property to get\r\n     */\r\n    public getUserProfilePropertyFor(loginName: string, propertyName: string): Promise<string> {\r\n        const q = this.clone(Profiles, `getuserprofilepropertyfor(accountname=@v, propertyname='${propertyName}')`);\r\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\r\n        return q.get();\r\n    }\r\n\r\n    /**\r\n     * Removes the specified user from the user's list of suggested people to follow\r\n     *\r\n     * @param loginName The account name of the user\r\n     */\r\n    public hideSuggestion(loginName: string): Promise<void> {\r\n        const q = this.clone(Profiles, \"hidesuggestion(@v)\");\r\n        q.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\r\n        return spPost(q);\r\n    }\r\n\r\n    /**\r\n     * A boolean values that indicates whether the first user is following the second user\r\n     *\r\n     * @param follower The account name of the user who might be following the followee\r\n     * @param followee The account name of the user who might be followed by the follower\r\n     */\r\n    public isFollowing(follower: string, followee: string): Promise<boolean> {\r\n        const q = this.clone(Profiles, null);\r\n        q.concat(`.isfollowing(possiblefolloweraccountname=@v, possiblefolloweeaccountname=@y)`);\r\n        q.query.set(\"@v\", `'${encodeURIComponent(follower)}'`);\r\n        q.query.set(\"@y\", `'${encodeURIComponent(followee)}'`);\r\n        return q.get();\r\n    }\r\n\r\n    /**\r\n     * Uploads and sets the user profile picture (Users can upload a picture to their own profile only). Not supported for batching.\r\n     *\r\n     * @param profilePicSource Blob data representing the user's picture in BMP, JPEG, or PNG format of up to 4.76MB\r\n     */\r\n    public setMyProfilePic(profilePicSource: Blob): Promise<void> {\r\n        let buffer: any = null;\r\n        const reader = new FileReader();\r\n        reader.onload = (e: any) => buffer = e.target.result;\r\n        reader.readAsArrayBuffer(profilePicSource);\r\n        const request = new _Profiles(this, \"setmyprofilepicture\");\r\n        return spPost(request, body(String.fromCharCode.apply(null, <any>new Uint16Array(buffer))));\r\n    }\r\n\r\n    /**\r\n     * Sets single value User Profile property\r\n     *\r\n     * @param accountName The account name of the user\r\n     * @param propertyName Property name\r\n     * @param propertyValue Property value\r\n     */\r\n    public setSingleValueProfileProperty(accountName: string, propertyName: string, propertyValue: string): Promise<void> {\r\n\r\n        return spPost(this.clone(Profiles, \"SetSingleValueProfileProperty\"), body({\r\n            accountName: accountName,\r\n            propertyName: propertyName,\r\n            propertyValue: propertyValue,\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Sets multi valued User Profile property\r\n     *\r\n     * @param accountName The account name of the user\r\n     * @param propertyName Property name\r\n     * @param propertyValues Property values\r\n     */\r\n    public setMultiValuedProfileProperty(accountName: string, propertyName: string, propertyValues: string[]): Promise<void> {\r\n\r\n        return spPost(this.clone(Profiles, \"SetMultiValuedProfileProperty\"), body({\r\n            accountName: accountName,\r\n            propertyName: propertyName,\r\n            propertyValues: propertyValues,\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Provisions one or more users' personal sites. (My Site administrator on SharePoint Online only)\r\n     *\r\n     * @param emails The email addresses of the users to provision sites for\r\n     */\r\n    public createPersonalSiteEnqueueBulk(...emails: string[]): Promise<void> {\r\n        return this.profileLoader.createPersonalSiteEnqueueBulk(emails);\r\n    }\r\n\r\n    /**\r\n     * Gets the user profile of the site owner\r\n     *\r\n     */\r\n    public get ownerUserProfile(): Promise<IUserProfile> {\r\n        return this.profileLoader.ownerUserProfile;\r\n    }\r\n\r\n    /**\r\n     * Gets the user profile for the current user\r\n     */\r\n    public get userProfile(): Promise<any> {\r\n        return this.profileLoader.userProfile;\r\n    }\r\n\r\n    /**\r\n     * Enqueues creating a personal site for this user, which can be used to share documents, web pages, and other files\r\n     *\r\n     * @param interactiveRequest true if interactively (web) initiated request, or false (default) if non-interactively (client) initiated request\r\n     */\r\n    public createPersonalSite(interactiveRequest = false): Promise<void> {\r\n        return this.profileLoader.createPersonalSite(interactiveRequest);\r\n    }\r\n\r\n    /**\r\n     * Sets the privacy settings for this profile\r\n     *\r\n     * @param share true to make all social data public; false to make all social data private\r\n     */\r\n    public shareAllSocialData(share: boolean): Promise<void> {\r\n        return this.profileLoader.shareAllSocialData(share);\r\n    }\r\n\r\n    /**\r\n     * Resolves user or group using specified query parameters\r\n     *\r\n     * @param queryParams The query parameters used to perform resolve\r\n     */\r\n    public clientPeoplePickerResolveUser(queryParams: IClientPeoplePickerQueryParameters): Promise<IPeoplePickerEntity> {\r\n        return this.clientPeoplePickerQuery.clientPeoplePickerResolveUser(queryParams);\r\n    }\r\n\r\n    /**\r\n     * Searches for users or groups using specified query parameters\r\n     *\r\n     * @param queryParams The query parameters used to perform search\r\n     */\r\n    public clientPeoplePickerSearchUser(queryParams: IClientPeoplePickerQueryParameters): Promise<IPeoplePickerEntity[]> {\r\n        return this.clientPeoplePickerQuery.clientPeoplePickerSearchUser(queryParams);\r\n    }\r\n}\r\nexport interface IProfiles extends _Profiles {}\r\nexport const Profiles = spInvokableFactory<IProfiles>(_Profiles);\r\n\r\n@defaultPath(\"_api/sp.userprofiles.profileloader.getprofileloader\")\r\nclass ProfileLoader extends _SharePointQueryable {\r\n\r\n    /**\r\n     * Provisions one or more users' personal sites. (My Site administrator on SharePoint Online only) Doesn't support batching\r\n     *\r\n     * @param emails The email addresses of the users to provision sites for\r\n     */\r\n    public createPersonalSiteEnqueueBulk(emails: string[]): Promise<void> {\r\n\r\n        return spPost(this.clone(ProfileLoaderFactory, \"createpersonalsiteenqueuebulk\", false), body({ \"emailIDs\": emails }));\r\n    }\r\n\r\n    /**\r\n     * Gets the user profile of the site owner.\r\n     *\r\n     */\r\n    public get ownerUserProfile(): Promise<IUserProfile> {\r\n        let q = this.getParent(ProfileLoaderFactory, this.parentUrl, \"_api/sp.userprofiles.profileloader.getowneruserprofile\");\r\n\r\n        if (this.hasBatch) {\r\n            q = q.inBatch(this.batch);\r\n        }\r\n\r\n        return spPost(q);\r\n    }\r\n\r\n    /**\r\n     * Gets the user profile of the current user.\r\n     *\r\n     */\r\n    public get userProfile(): Promise<IUserProfile> {\r\n        return spPost(this.clone(ProfileLoaderFactory, \"getuserprofile\"));\r\n    }\r\n\r\n    /**\r\n     * Enqueues creating a personal site for this user, which can be used to share documents, web pages, and other files.\r\n     *\r\n     * @param interactiveRequest true if interactively (web) initiated request, or false (default) if non-interactively (client) initiated request\r\n     */\r\n    public createPersonalSite(interactiveRequest = false): Promise<void> {\r\n        return spPost(this.clone(ProfileLoaderFactory, `getuserprofile/createpersonalsiteenque(${interactiveRequest})`));\r\n    }\r\n\r\n    /**\r\n     * Sets the privacy settings for this profile\r\n     *\r\n     * @param share true to make all social data public; false to make all social data private.\r\n     */\r\n    public shareAllSocialData(share: boolean): Promise<void> {\r\n        return spPost(this.clone(ProfileLoaderFactory, `getuserprofile/shareallsocialdata(${share})`));\r\n    }\r\n}\r\n\r\nconst ProfileLoaderFactory = (baseUrl: string | ISharePointQueryable, path?: string) => {\r\n    return new ProfileLoader(baseUrl, path);\r\n};\r\n\r\n@defaultPath(\"_api/sp.ui.applicationpages.clientpeoplepickerwebserviceinterface\")\r\nclass ClientPeoplePickerQuery extends _SharePointQueryable {\r\n\r\n    /**\r\n     * Resolves user or group using specified query parameters\r\n     *\r\n     * @param queryParams The query parameters used to perform resolve\r\n     */\r\n    public async clientPeoplePickerResolveUser(queryParams: IClientPeoplePickerQueryParameters): Promise<IPeoplePickerEntity> {\r\n        const q = this.clone(ClientPeoplePickerFactory, null);\r\n        q.concat(\".clientpeoplepickerresolveuser\");\r\n        const res = await spPost<string | { ClientPeoplePickerResolveUser: string }>(q, this.getBodyFrom(queryParams));\r\n\r\n        return JSON.parse(typeof res === \"object\" ? res.ClientPeoplePickerResolveUser : res);\r\n    }\r\n\r\n    /**\r\n     * Searches for users or groups using specified query parameters\r\n     *\r\n     * @param queryParams The query parameters used to perform search\r\n     */\r\n    public async clientPeoplePickerSearchUser(queryParams: IClientPeoplePickerQueryParameters): Promise<IPeoplePickerEntity[]> {\r\n        const q = this.clone(ClientPeoplePickerFactory, null);\r\n        q.concat(\".clientpeoplepickersearchuser\");\r\n        const res = await spPost<string | { ClientPeoplePickerSearchUser: string }>(q, this.getBodyFrom(queryParams));\r\n\r\n        return JSON.parse(typeof res === \"object\" ? res.ClientPeoplePickerSearchUser : res);\r\n    }\r\n\r\n    /**\r\n     * Creates ClientPeoplePickerQueryParameters request body\r\n     *\r\n     * @param queryParams The query parameters to create request body\r\n     */\r\n    private getBodyFrom(queryParams: IClientPeoplePickerQueryParameters): { body: string } {\r\n        return body({ \"queryParams\": assign(metadata(\"SP.UI.ApplicationPages.ClientPeoplePickerQueryParameters\"), queryParams) });\r\n    }\r\n}\r\n\r\nconst ClientPeoplePickerFactory = (baseUrl: string | ISharePointQueryable, path?: string) => {\r\n    return new ClientPeoplePickerQuery(baseUrl, path);\r\n};\r\n\r\n/**\r\n * Client people picker query parameters\r\n */\r\nexport interface IClientPeoplePickerQueryParameters {\r\n    /**\r\n     * Gets or sets a value that specifies whether e-mail addresses can be used to perform search.\r\n     */\r\n    AllowEmailAddresses?: boolean;\r\n    /**\r\n     * Gets or sets a value that specifies whether multiple entities are allowed.\r\n     */\r\n    AllowMultipleEntities?: boolean;\r\n    /**\r\n     * Gets or sets a value that specifies whether only e-mail addresses can be used to perform search.\r\n     */\r\n    AllowOnlyEmailAddresses?: boolean;\r\n    /**\r\n     * Gets or sets a value that specifies whether all URL zones are used to perform search.\r\n     */\r\n    AllUrlZones?: boolean;\r\n    /**\r\n     * Gets or sets a value that specifies claim providers that are used to perform search.\r\n     */\r\n    EnabledClaimProviders?: string;\r\n    /**\r\n     * Gets or sets a value that specifies whether claims are forced (if yes, multiple results for single entity can be returned).\r\n     */\r\n    ForceClaims?: boolean;\r\n    /**\r\n     * Gets or sets a value that specifies limit of results returned.\r\n     */\r\n    MaximumEntitySuggestions: number;\r\n    /**\r\n     * Gets or sets a value that specifies principal sources to perform search.\r\n     */\r\n    PrincipalSource?: PrincipalSource;\r\n    /**\r\n     * Gets or sets a value that specifies principal types to search for.\r\n     */\r\n    PrincipalType?: PrincipalType;\r\n    /**\r\n     * Gets or sets a value that specifies additional query settings.\r\n     */\r\n    QuerySettings?: IPeoplePickerQuerySettings;\r\n    /**\r\n     * Gets or sets a value that specifies the term to search for.\r\n     */\r\n    QueryString: string;\r\n    /**\r\n     * Gets or sets a value that specifies ID of the SharePoint Group that will be used to perform search.\r\n     */\r\n    SharePointGroupID?: number;\r\n    /**\r\n     * Gets or sets a value that specifies URL zones that are used to perform search.\r\n     */\r\n    UrlZone?: UrlZone;\r\n    /**\r\n     * Gets or sets a value that specifies whether search is limited to specific URL zone.\r\n     */\r\n    UrlZoneSpecified?: boolean;\r\n    /**\r\n     * Gets or sets a value that specifies GUID of the Web Application that is used to perform search.\r\n     */\r\n    WebApplicationID?: string;\r\n}\r\n\r\nexport interface IHashTagCollection {\r\n    Items: IHashTag[];\r\n}\r\n\r\n/**\r\n * People picker query settings\r\n */\r\nexport interface IPeoplePickerQuerySettings {\r\n    ExcludeAllUsersOnTenantClaim?: boolean;\r\n}\r\n\r\n/**\r\n * People picker entity\r\n */\r\nexport interface IPeoplePickerEntity {\r\n    Description: string;\r\n    DisplayText: string;\r\n    EntityData: IPeoplePickerEntityData;\r\n    EntityType: string;\r\n    IsResolved: boolean;\r\n    Key: string;\r\n    MultipleMatches: IPeoplePickerEntityData[];\r\n    ProviderDisplayName: string;\r\n    ProviderName: string;\r\n}\r\n\r\n/**\r\n * People picker entity data\r\n */\r\nexport interface IPeoplePickerEntityData {\r\n    AccountName?: string;\r\n    Department?: string;\r\n    Email?: string;\r\n    IsAltSecIdPresent?: string;\r\n    MobilePhone?: string;\r\n    ObjectId?: string;\r\n    OtherMails?: string;\r\n    PrincipalType?: string;\r\n    SPGroupID?: string;\r\n    SPUserID?: string;\r\n    Title?: string;\r\n}\r\n\r\n/**\r\n * Specifies the originating zone of a request received.\r\n */\r\nexport const enum UrlZone {\r\n    /**\r\n     * Specifies the default zone used for requests unless another zone is specified.\r\n     */\r\n    DefaultZone,\r\n    /**\r\n     * Specifies an intranet zone.\r\n     */\r\n    Intranet,\r\n    /**\r\n     * Specifies an Internet zone.\r\n     */\r\n    Internet,\r\n    /**\r\n     * Specifies a custom zone.\r\n     */\r\n    Custom,\r\n    /**\r\n     * Specifies an extranet zone.\r\n     */\r\n    Extranet,\r\n}\r\n\r\nexport interface IHashTag {\r\n    /**\r\n     * The hash tag's internal name.\r\n     */\r\n    Name?: string;\r\n    /**\r\n     * The number of times that the hash tag is used.\r\n     */\r\n    UseCount?: number;\r\n}\r\n\r\nexport interface IFollowedContent {\r\n    FollowedDocumentsUrl: string;\r\n    FollowedSitesUrl: string;\r\n}\r\n\r\nexport interface IUserProfile {\r\n    /**\r\n     * An object containing the user's FollowedDocumentsUrl and FollowedSitesUrl.\r\n     */\r\n    FollowedContent?: IFollowedContent;\r\n    /**\r\n     * The account name of the user. (SharePoint Online only)\r\n     */\r\n    AccountName?: string;\r\n    /**\r\n     * The display name of the user. (SharePoint Online only)\r\n     */\r\n    DisplayName?: string;\r\n    /**\r\n     * The FirstRun flag of the user. (SharePoint Online only)\r\n     */\r\n    O15FirstRunExperience?: number;\r\n    /**\r\n     * The personal site of the user.\r\n     */\r\n    PersonalSite?: string;\r\n    /**\r\n     * The capabilities of the user's personal site. Represents a bitwise PersonalSiteCapabilities value:\r\n     * None = 0; Profile Value = 1; Social Value = 2; Storage Value = 4; MyTasksDashboard Value = 8; Education Value = 16; Guest Value = 32.\r\n     */\r\n    PersonalSiteCapabilities?: number;\r\n    /**\r\n     * The error thrown when the user's personal site was first created, if any. (SharePoint Online only)\r\n     */\r\n    PersonalSiteFirstCreationError?: string;\r\n    /**\r\n     * The date and time when the user's personal site was first created. (SharePoint Online only)\r\n     */\r\n    PersonalSiteFirstCreationTime?: Date;\r\n    /**\r\n     * The status for the state of the personal site instantiation\r\n     */\r\n    PersonalSiteInstantiationState?: number;\r\n    /**\r\n     * The date and time when the user's personal site was last created. (SharePoint Online only)\r\n     */\r\n    PersonalSiteLastCreationTime?: Date;\r\n    /**\r\n     * The number of attempts made to create the user's personal site. (SharePoint Online only)\r\n     */\r\n    PersonalSiteNumberOfRetries?: number;\r\n    /**\r\n     * Indicates whether the user's picture is imported from Exchange.\r\n     */\r\n    PictureImportEnabled?: boolean;\r\n    /**\r\n     * The public URL of the personal site of the current user. (SharePoint Online only)\r\n     */\r\n    PublicUrl?: string;\r\n    /**\r\n     * The URL used to create the user's personal site.\r\n     */\r\n    UrlToCreatePersonalSite?: string;\r\n}\r\n","import { SPRest } from \"../rest\";\r\nimport { Profiles, IProfiles } from \"./types\";\r\n\r\nexport {\r\n    IProfiles,\r\n    Profiles,\r\n    IClientPeoplePickerQueryParameters,\r\n    IFollowedContent,\r\n    IHashTag,\r\n    IHashTagCollection,\r\n    IPeoplePickerEntity,\r\n    IPeoplePickerEntityData,\r\n    IPeoplePickerQuerySettings,\r\n    IUserProfile,\r\n    UrlZone,\r\n} from \"./types\";\r\n\r\ndeclare module \"../rest\" {\r\n    interface SPRest {\r\n        readonly profiles: IProfiles;\r\n    }\r\n}\r\n\r\nReflect.defineProperty(SPRest.prototype, \"profiles\", {\r\n    configurable: true,\r\n    enumerable: true,\r\n    get: function (this: SPRest) {\r\n        return Profiles(this._baseUrl);\r\n    },\r\n});\r\n","import { dateAdd, hOP } from \"@pnp/common\";\r\nimport {\r\n    _SharePointQueryableInstance,\r\n    SharePointQueryableCollection,\r\n    ISharePointQueryableCollection,\r\n    _SharePointQueryableCollection,\r\n    spInvokableFactory,\r\n} from \"../sharepointqueryable\";\r\nimport { defaultPath } from \"../decorators\";\r\nimport { spODataEntity } from \"../odata\";\r\nimport { spPost } from \"../operations\";\r\nimport { tag } from \"../telemetry\";\r\n\r\n@defaultPath(\"regionalsettings\")\r\nexport class _RegionalSettings extends _SharePointQueryableInstance<IRegionalSettingsInfo> {\r\n\r\n    /**\r\n     * Gets the collection of languages used in a server farm.\r\n     * ** Please use getInstalledLanguages instead of this method **\r\n     */\r\n    public get installedLanguages(): ISharePointQueryableCollection<{ Items: IInstalledLanguageInfo[] }> {\r\n        console.warn(\"Deprecated: RegionalSettings.installedLanguages is deprecated, please use RegionalSettings.getInstalledLanguages\");\r\n        return <any>tag.configure(SharePointQueryableCollection(this, \"installedlanguages\"), \"rs.installedLanguages\");\r\n    }\r\n\r\n    /**\r\n     * Gets time zone\r\n     */\r\n    public get timeZone(): ITimeZone {\r\n        return tag.configure(TimeZone(this), \"rs.tz\");\r\n    }\r\n\r\n    /**\r\n     * Gets time zones\r\n     */\r\n    public get timeZones(): ITimeZones {\r\n        return tag.configure(TimeZones(this), \"rs.tzs\");\r\n    }\r\n\r\n    /**\r\n     * Gets the collection of languages used in a server farm.\r\n     */\r\n    public async getInstalledLanguages(): Promise<IInstalledLanguageInfo[]> {\r\n        const results: { Items: IInstalledLanguageInfo[] } = await tag.configure(SharePointQueryableCollection(this, \"installedlanguages\"), \"rs.getInstalledLanguages\")();\r\n        return results.Items;\r\n    }\r\n}\r\nexport interface IRegionalSettings extends _RegionalSettings { }\r\nexport const RegionalSettings = spInvokableFactory<IRegionalSettings>(_RegionalSettings);\r\n\r\n@defaultPath(\"timezone\")\r\nexport class _TimeZone extends _SharePointQueryableInstance<ITimeZoneInfo> {\r\n\r\n    /**\r\n     * Gets an Local Time by UTC Time\r\n     *\r\n     * @param utcTime UTC Time as Date or ISO String\r\n     */\r\n    @tag(\"tz.utcToLocalTime\")\r\n    public async utcToLocalTime(utcTime: string | Date): Promise<string> {\r\n\r\n        let dateIsoString: string;\r\n\r\n        if (typeof utcTime === \"string\") {\r\n            dateIsoString = utcTime;\r\n        } else {\r\n            dateIsoString = utcTime.toISOString();\r\n        }\r\n\r\n        const res = await spPost(this.clone(TimeZone, `utctolocaltime('${dateIsoString}')`));\r\n        return hOP(res, \"UTCToLocalTime\") ? res.UTCToLocalTime : res;\r\n    }\r\n\r\n    /**\r\n     * Gets an UTC Time by Local Time\r\n     *\r\n     * @param localTime Local Time as Date or ISO String\r\n     */\r\n    @tag(\"tz.localTimeToUTC\")\r\n    public async localTimeToUTC(localTime: string | Date): Promise<string> {\r\n\r\n        let dateIsoString: string;\r\n\r\n        if (typeof localTime === \"string\") {\r\n            dateIsoString = localTime;\r\n        } else {\r\n            dateIsoString = dateAdd(localTime, \"minute\", localTime.getTimezoneOffset() * -1).toISOString();\r\n        }\r\n\r\n        const res = await spPost(this.clone(TimeZone, `localtimetoutc('${dateIsoString}')`));\r\n\r\n        return hOP(res, \"LocalTimeToUTC\") ? res.LocalTimeToUTC : res;\r\n    }\r\n}\r\nexport interface ITimeZone extends _TimeZone { }\r\nexport const TimeZone = spInvokableFactory<ITimeZone>(_TimeZone);\r\n\r\n@defaultPath(\"timezones\")\r\nexport class _TimeZones extends _SharePointQueryableCollection<ITimeZoneInfo[]> {\r\n\r\n    /**\r\n     * Gets an TimeZone by id (see: https://msdn.microsoft.com/en-us/library/office/jj247008.aspx)\r\n     *\r\n     * @param id The integer id of the timezone to retrieve\r\n     */\r\n    @tag(\"tzs.getById\")\r\n    public getById(id: number): Promise<ITimeZone & ITimeZoneInfo> {\r\n        // do the post and merge the result into a TimeZone instance so the data and methods are available\r\n        return spPost(this.clone(TimeZones, `GetById(${id})`).usingParser(spODataEntity(TimeZone)));\r\n    }\r\n}\r\nexport interface ITimeZones extends _TimeZones { }\r\nexport const TimeZones = spInvokableFactory<ITimeZones>(_TimeZones);\r\n\r\n/**\r\n * This is the data for Regional Settings\r\n */\r\nexport interface IRegionalSettingsInfo {\r\n    AdjustHijriDays: number;\r\n    AlternateCalendarType: number;\r\n    AM: string;\r\n    CalendarType: number;\r\n    Collation: number;\r\n    CollationLCID: number;\r\n    DateFormat: number;\r\n    DateSeparator: string;\r\n    DecimalSeparator: string;\r\n    DigitGrouping: string;\r\n    FirstDayOfWeek: number;\r\n    FirstWeekOfYear: number;\r\n    IsEastAsia: boolean;\r\n    IsRightToLeft: boolean;\r\n    IsUIRightToLeft: boolean;\r\n    ListSeparator: string;\r\n    LocaleId: number;\r\n    NegativeSign: string;\r\n    NegNumberMode: number;\r\n    PM: string;\r\n    PositiveSign: string;\r\n    ShowWeeks: boolean;\r\n    ThousandSeparator: string;\r\n    Time24: boolean;\r\n    TimeMarkerPosition: number;\r\n    TimeSeparator: string;\r\n    WorkDayEndHour: number;\r\n    WorkDays: number;\r\n    WorkDayStartHour: number;\r\n}\r\n\r\nexport interface IInstalledLanguageInfo {\r\n    DisplayName: string;\r\n    LanguageTag: string;\r\n    Lcid: number;\r\n}\r\n\r\nexport interface ITimeZoneInfo {\r\n    Description: string;\r\n    Id: number;\r\n    Information: {\r\n        Bias: number;\r\n        DaylightBias: number;\r\n        StandardBias: number;\r\n    };\r\n}\r\n\r\nexport interface IUserResources {\r\n    /**\r\n     * Gets the resource string for the title\r\n     */\r\n    titleResource(cultureName: string): Promise<string>;\r\n    /**\r\n     * Gets the resource string for the title description\r\n     */\r\n    descriptionResource(cultureName: string): Promise<string>;\r\n}\r\n","import { _SharePointQueryable, SharePointQueryable } from \"../sharepointqueryable\";\r\nimport { spPost } from \"../operations\";\r\nimport { body } from \"@pnp/odata\";\r\n\r\nexport function getValueForUICultureBinder(propName: string): (this: _SharePointQueryable, cultureName: string) => Promise<string> {\r\n    return function (this: _SharePointQueryable, cultureName: string): Promise<string> {\r\n        return spPost(this.clone(SharePointQueryable, `${propName}/getValueForUICulture`), body({ cultureName }));\r\n    };\r\n}\r\n","import { addProp } from \"@pnp/odata\";\r\nimport { _Web } from \"../webs/types\";\r\nimport { RegionalSettings, IRegionalSettings, IUserResources } from \"./types\";\r\nimport { getValueForUICultureBinder } from \"./funcs\";\r\n\r\ndeclare module \"../webs/types\" {\r\n    interface _Web extends IUserResources {\r\n        regionalSettings: IRegionalSettings;\r\n    }\r\n    interface IWeb extends IUserResources {\r\n        /**\r\n         * Regional settings for this web\r\n         */\r\n        regionalSettings: IRegionalSettings;\r\n    }\r\n}\r\n\r\naddProp(_Web, \"regionalSettings\", RegionalSettings);\r\n\r\n_Web.prototype.titleResource = getValueForUICultureBinder(\"titleResource\");\r\n_Web.prototype.descriptionResource = getValueForUICultureBinder(\"descriptionResource\");\r\n","import {\r\n    _SharePointQueryableInstance,\r\n    _SharePointQueryableCollection,\r\n    spInvokableFactory,\r\n    deleteable,\r\n    IDeleteable,\r\n} from \"../sharepointqueryable\";\r\nimport { assign, ITypedHash } from \"@pnp/common\";\r\nimport { body } from \"@pnp/odata\";\r\nimport { defaultPath } from \"../decorators\";\r\nimport { spPost } from \"../operations\";\r\nimport { tag } from \"../telemetry\";\r\nimport { IBasePermissions } from \"../security\";\r\nimport { metadata } from \"../utils/metadata\";\r\n\r\n@defaultPath(\"usercustomactions\")\r\nexport class _UserCustomActions extends _SharePointQueryableCollection<IUserCustomActionInfo[]> {\r\n\r\n    /**\t   \r\n     * Returns the user custom action with the specified id\t     \r\n     *\t    \r\n     * @param id The GUID id of the user custom action to retrieve\t     \r\n     */\r\n    public getById(id: string): IUserCustomAction {\r\n        return tag.configure(UserCustomAction(this).concat(`('${id}')`), \"ucas.getById\");\r\n    }\r\n\r\n    /**\r\n     * Creates a user custom action\r\n     *\r\n     * @param properties The information object of property names and values which define the new user custom action\r\n     */\r\n    @tag(\"ucas.add\")\r\n    public async add(properties: ITypedHash<any>): Promise<IUserCustomActionAddResult> {\r\n        const data = await spPost(this, body(assign(metadata(\"SP.UserCustomAction\"), properties)));\r\n        return {\r\n            action: this.getById(data.Id),\r\n            data,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Deletes all user custom actions in the collection\r\n     */\r\n    @tag(\"ucas.clear\")\r\n    public clear(): Promise<void> {\r\n        return spPost(this.clone(UserCustomActions, \"clear\"));\r\n    }\r\n}\r\nexport interface IUserCustomActions extends _UserCustomActions { }\r\nexport const UserCustomActions = spInvokableFactory<IUserCustomActions>(_UserCustomActions);\r\n\r\nexport class _UserCustomAction extends _SharePointQueryableInstance<IUserCustomActionInfo> {\r\n\r\n    public delete = deleteable(\"uca\");\r\n\r\n    /**\r\n    * Updates this user custom action with the supplied properties\r\n    *\r\n    * @param properties An information object of property names and values to update for this user custom action\r\n    */\r\n    public update: any = this._update<IUserCustomActionUpdateResult, ITypedHash<any>>(\"SP.UserCustomAction\", (data) => ({ data, action: <any>this }));\r\n}\r\nexport interface IUserCustomAction extends _UserCustomAction, IDeleteable { }\r\nexport const UserCustomAction = spInvokableFactory<IUserCustomAction>(_UserCustomAction);\r\n\r\n/**\r\n * Result from adding a user custom action\r\n */\r\nexport interface IUserCustomActionAddResult {\r\n    /*\r\n     * The raw data returned from the add operation\r\n     */\r\n    data: any;\r\n\r\n    /*\r\n     * The added UserCustomAction\r\n     */\r\n    action: IUserCustomAction;\r\n}\r\n\r\n/**\r\n * Result from udating a user custom action\r\n */\r\nexport interface IUserCustomActionUpdateResult {\r\n    /*\r\n     * The raw data returned from the update operation\r\n     */\r\n    data: any;\r\n\r\n    /*\r\n     * The updated UserCustomAction\r\n     */\r\n    action: IUserCustomAction;\r\n}\r\n\r\nexport enum UserCustomActionRegistrationType {\r\n    None,\r\n    List,\r\n    ContentType,\r\n    ProgId,\r\n    FileType,\r\n}\r\n\r\nexport enum UserCustomActionScope {\r\n    Unknown,\r\n    Site = 2,\r\n    Web,\r\n    List,\r\n}\r\n\r\nexport interface IUserCustomActionInfo {\r\n    CommandUIExtension: string;\r\n    Description: string;\r\n    Group: string;\r\n    Id: string;\r\n    ImageUrl: string;\r\n    Location: string;\r\n    Name: string;\r\n    RegistrationId: string;\r\n    RegistrationType: UserCustomActionRegistrationType;\r\n    Rights: IBasePermissions;\r\n    Scope: UserCustomActionScope;\r\n    ScriptBlock: string;\r\n    ScriptSrc: string;\r\n    Sequence: number;\r\n    Title: string;\r\n    Url: string;\r\n    VersionOfUserCustomAction: string;\r\n}\r\n","import { _UserCustomAction } from \"../user-custom-actions/types\";\r\nimport { getValueForUICultureBinder } from \"./funcs\";\r\nimport { IUserResources } from \"./types\";\r\n\r\ndeclare module \"../user-custom-actions/types\" {\r\n    interface _UserCustomAction extends IUserResources {}\r\n    interface IUserCustomAction extends IUserResources {}\r\n}\r\n\r\n_UserCustomAction.prototype.titleResource = getValueForUICultureBinder(\"titleResource\");\r\n_UserCustomAction.prototype.descriptionResource = getValueForUICultureBinder(\"descriptionResource\");\r\n","import { _List } from \"../lists/types\";\r\nimport { getValueForUICultureBinder } from \"./funcs\";\r\nimport { IUserResources } from \"./types\";\r\n\r\ndeclare module \"../lists/types\" {\r\n    interface _List extends IUserResources {}\r\n    interface IList extends IUserResources {}\r\n}\r\n\r\n_List.prototype.titleResource = getValueForUICultureBinder(\"titleResource\");\r\n_List.prototype.descriptionResource = getValueForUICultureBinder(\"descriptionResource\");\r\n","import { _Field } from \"../fields/types\";\r\nimport { getValueForUICultureBinder } from \"./funcs\";\r\nimport { IUserResources } from \"./types\";\r\n\r\ndeclare module \"../fields/types\" {\r\n    interface _Field extends IUserResources {}\r\n    interface IField extends IUserResources {}\r\n}\r\n\r\n_Field.prototype.titleResource = getValueForUICultureBinder(\"titleResource\");\r\n_Field.prototype.descriptionResource = getValueForUICultureBinder(\"descriptionResource\");\r\n","import { _ContentType } from \"../content-types/types\";\r\nimport { getValueForUICultureBinder } from \"./funcs\";\r\nimport { IUserResources } from \"./types\";\r\n\r\ndeclare module \"../content-types/types\" {\r\n    interface _ContentType extends IUserResources {}\r\n    interface IContentType extends IUserResources {}\r\n}\r\n\r\n_ContentType.prototype.titleResource = getValueForUICultureBinder(\"titleResource\");\r\n_ContentType.prototype.descriptionResource = getValueForUICultureBinder(\"descriptionResource\");\r\n","import { _SharePointQueryable, ISharePointQueryable } from \"../sharepointqueryable\";\r\nimport { extractWebUrl } from \"../utils/extractweburl\";\r\nimport { defaultPath } from \"../decorators\";\r\nimport { spPost } from \"../operations\";\r\nimport { body } from \"@pnp/odata\";\r\nimport { tag } from \"../telemetry\";\r\n\r\n@defaultPath(\"_api/SP.RelatedItemManager\")\r\nexport class _RelatedItemManager extends _SharePointQueryable implements IRelatedItemManager {\r\n\r\n    @tag(\"rim.getRelatedItems\")\r\n    public getRelatedItems(sourceListName: string, sourceItemId: number): Promise<IRelatedItem[]> {\r\n\r\n        const query = this.clone(<any>RelatedItemManager, null);\r\n        query.concat(\".GetRelatedItems\");\r\n\r\n        return spPost(query, body({\r\n            SourceItemID: sourceItemId,\r\n            SourceListName: sourceListName,\r\n        }));\r\n    }\r\n\r\n    @tag(\"rim.getPageOneRelatedItems\")\r\n    public getPageOneRelatedItems(sourceListName: string, sourceItemId: number): Promise<IRelatedItem[]> {\r\n\r\n        const query = this.clone(<any>RelatedItemManager, null);\r\n        query.concat(\".GetPageOneRelatedItems\");\r\n\r\n        return spPost(query, body({\r\n            SourceItemID: sourceItemId,\r\n            SourceListName: sourceListName,\r\n        }));\r\n    }\r\n\r\n    @tag(\"rim.addSingleLink\")\r\n    public addSingleLink(sourceListName: string,\r\n        sourceItemId: number,\r\n        sourceWebUrl: string,\r\n        targetListName: string,\r\n        targetItemID: number,\r\n        targetWebUrl: string,\r\n        tryAddReverseLink = false): Promise<void> {\r\n\r\n        const query = this.clone(<any>RelatedItemManager, null);\r\n        query.concat(\".AddSingleLink\");\r\n\r\n        return spPost(query, body({\r\n            SourceItemID: sourceItemId,\r\n            SourceListName: sourceListName,\r\n            SourceWebUrl: sourceWebUrl,\r\n            TargetItemID: targetItemID,\r\n            TargetListName: targetListName,\r\n            TargetWebUrl: targetWebUrl,\r\n            TryAddReverseLink: tryAddReverseLink,\r\n        }));\r\n    }\r\n\r\n    @tag(\"rim.ToUrl\")\r\n    public addSingleLinkToUrl(sourceListName: string, sourceItemId: number, targetItemUrl: string, tryAddReverseLink = false): Promise<void> {\r\n\r\n        const query = this.clone(<any>RelatedItemManager, null);\r\n        query.concat(\".AddSingleLinkToUrl\");\r\n\r\n        return spPost(query, body({\r\n            SourceItemID: sourceItemId,\r\n            SourceListName: sourceListName,\r\n            TargetItemUrl: targetItemUrl,\r\n            TryAddReverseLink: tryAddReverseLink,\r\n        }));\r\n    }\r\n\r\n    @tag(\"rim.FromUrl\")\r\n    public addSingleLinkFromUrl(sourceItemUrl: string, targetListName: string, targetItemId: number, tryAddReverseLink = false): Promise<void> {\r\n\r\n        const query = this.clone(<any>RelatedItemManager, null);\r\n        query.concat(\".AddSingleLinkFromUrl\");\r\n\r\n        return spPost(query, body({\r\n            SourceItemUrl: sourceItemUrl,\r\n            TargetItemID: targetItemId,\r\n            TargetListName: targetListName,\r\n            TryAddReverseLink: tryAddReverseLink,\r\n        }));\r\n    }\r\n\r\n    @tag(\"rim.deleteSingleLink\")\r\n    public deleteSingleLink(sourceListName: string,\r\n        sourceItemId: number,\r\n        sourceWebUrl: string,\r\n        targetListName: string,\r\n        targetItemId: number,\r\n        targetWebUrl: string,\r\n        tryDeleteReverseLink = false): Promise<void> {\r\n\r\n        const query = this.clone(<any>RelatedItemManager, null);\r\n        query.concat(\".DeleteSingleLink\");\r\n\r\n        return spPost(query, body({\r\n            SourceItemID: sourceItemId,\r\n            SourceListName: sourceListName,\r\n            SourceWebUrl: sourceWebUrl,\r\n            TargetItemID: targetItemId,\r\n            TargetListName: targetListName,\r\n            TargetWebUrl: targetWebUrl,\r\n            TryDeleteReverseLink: tryDeleteReverseLink,\r\n        }));\r\n    }\r\n}\r\n\r\nexport interface IRelatedItemManager {\r\n\r\n    /**\r\n     * Gets all the related items for the given item specification\r\n     * \r\n     * @param sourceListName The list name or list id\r\n     * @param sourceItemId The item id\r\n     */\r\n    getRelatedItems(sourceListName: string, sourceItemId: number): Promise<IRelatedItem[]>;\r\n\r\n    /**\r\n     * Gets the first page of related items for the given item specification\r\n     * \r\n     * @param sourceListName The list name or list id\r\n     * @param sourceItemId The item id\r\n     */\r\n    getPageOneRelatedItems(sourceListName: string, sourceItemId: number): Promise<IRelatedItem[]>;\r\n\r\n    /**\r\n     * Adds a single link using full specifications for source and target\r\n     * \r\n     * @param sourceListName The source list name or list id\r\n     * @param sourceItemId The source item id\r\n     * @param sourceWebUrl The source web absolute url\r\n     * @param targetListName The target list name or list id\r\n     * @param targetItemID The target item id\r\n     * @param targetWebUrl The target web absolute url\r\n     * @param tryAddReverseLink If set to true try to add the reverse link (will not return error if it fails)\r\n     */\r\n    addSingleLink(sourceListName: string,\r\n        sourceItemId: number,\r\n        sourceWebUrl: string,\r\n        targetListName: string,\r\n        targetItemID: number,\r\n        targetWebUrl: string,\r\n        tryAddReverseLink?: boolean): Promise<void>;\r\n\r\n    /**\r\n     * Adds a related item link from an item specified by list name and item id, to an item specified by url\r\n     *\r\n     * @param sourceListName The source list name or list id\r\n     * @param sourceItemId The source item id\r\n     * @param targetItemUrl The target item url\r\n     * @param tryAddReverseLink If set to true try to add the reverse link (will not return error if it fails)\r\n     */\r\n    addSingleLinkToUrl(sourceListName: string, sourceItemId: number, targetItemUrl: string, tryAddReverseLink?: boolean): Promise<void>;\r\n\r\n    /**\r\n     * Adds a related item link from an item specified by url, to an item specified by list name and item id\r\n     *\r\n     * @param sourceItemUrl The source item url\r\n     * @param targetListName The target list name or list id\r\n     * @param targetItemId The target item id\r\n     * @param tryAddReverseLink If set to true try to add the reverse link (will not return error if it fails)\r\n     */\r\n    addSingleLinkFromUrl(sourceItemUrl: string, targetListName: string, targetItemId: number, tryAddReverseLink?: boolean): Promise<void>;\r\n\r\n    /**\r\n     * Deletes a single link\r\n     * \r\n     * @param sourceListName \r\n     * @param sourceItemId \r\n     * @param sourceWebUrl \r\n     * @param targetListName \r\n     * @param targetItemId \r\n     * @param targetWebUrl \r\n     * @param tryDeleteReverseLink \r\n     */\r\n    deleteSingleLink(sourceListName: string,\r\n        sourceItemId: number,\r\n        sourceWebUrl: string,\r\n        targetListName: string,\r\n        targetItemId: number,\r\n        targetWebUrl: string,\r\n        tryDeleteReverseLink?: boolean): Promise<void>;\r\n}\r\n\r\nexport const RelatedItemManager = (url: string | ISharePointQueryable): IRelatedItemManager => new _RelatedItemManager(extractWebUrl(typeof url === \"string\" ? url : url.toUrl()));\r\n\r\nexport interface IRelatedItem {\r\n    ListId: string;\r\n    ItemId: number;\r\n    Url: string;\r\n    Title: string;\r\n    WebId: string;\r\n    IconUrl: string;\r\n}\r\n","import { _SharePointQueryableInstance, ISharePointQueryable } from \"../sharepointqueryable\";\r\nimport { assign, hOP, getHashCode, objectDefinedNotNull, isArray, IConfigOptions } from \"@pnp/common\";\r\nimport { metadata } from \"../utils/metadata\";\r\nimport { CachingOptions, body } from \"@pnp/odata\";\r\nimport { ISearchQuery, ISearchResponse, ISearchResult, ISearchBuilder, SearchQueryInit } from \"./types\";\r\nimport { spPost } from \"../operations\";\r\nimport { defaultPath } from \"../decorators\";\r\nimport { tag } from \"../telemetry\";\r\n\r\nconst funcs = new Map<string, string>([\r\n    [\"text\", \"Querytext\"],\r\n    [\"template\", \"QueryTemplate\"],\r\n    [\"sourceId\", \"SourceId\"],\r\n    [\"trimDuplicatesIncludeId\", \"\"],\r\n    [\"startRow\", \"\"],\r\n    [\"rowLimit\", \"\"],\r\n    [\"rankingModelId\", \"\"],\r\n    [\"rowsPerPage\", \"\"],\r\n    [\"selectProperties\", \"\"],\r\n    [\"culture\", \"\"],\r\n    [\"timeZoneId\", \"\"],\r\n    [\"refinementFilters\", \"\"],\r\n    [\"refiners\", \"\"],\r\n    [\"hiddenConstraints\", \"\"],\r\n    [\"sortList\", \"\"],\r\n    [\"timeout\", \"\"],\r\n    [\"hithighlightedProperties\", \"\"],\r\n    [\"clientType\", \"\"],\r\n    [\"personalizationData\", \"\"],\r\n    [\"resultsURL\", \"\"],\r\n    [\"queryTag\", \"\"],\r\n    [\"properties\", \"\"],\r\n    [\"queryTemplatePropertiesUrl\", \"\"],\r\n    [\"reorderingRules\", \"\"],\r\n    [\"hitHighlightedMultivaluePropertyLimit\", \"\"],\r\n    [\"collapseSpecification\", \"\"],\r\n    [\"uiLanguage\", \"\"],\r\n    [\"desiredSnippetLength\", \"\"],\r\n    [\"maxSnippetLength\", \"\"],\r\n    [\"summaryLength\", \"\"],\r\n]);\r\n\r\nconst props = new Map<string, string>([]);\r\n\r\nfunction toPropCase(str: string) {\r\n    return str.replace(/^(.)/, ($1) => $1.toUpperCase());\r\n}\r\n\r\n/**\r\n * Creates a new instance of the SearchQueryBuilder\r\n * \r\n * @param queryText Initial query text\r\n * @param _query Any initial query configuration\r\n */\r\nexport function SearchQueryBuilder(queryText = \"\", _query = {}): ISearchBuilder {\r\n\r\n    return new Proxy(<any>{\r\n        query: Object.assign({\r\n            Querytext: queryText,\r\n        }, _query),\r\n    },\r\n        {\r\n            get(self, propertyKey, proxy) {\r\n\r\n                const pk = propertyKey.toString();\r\n\r\n                if (pk === \"toSearchQuery\") {\r\n                    return () => self.query;\r\n                }\r\n\r\n                if (funcs.has(pk)) {\r\n                    return (...value: any[]) => {\r\n                        const mappedPk = funcs.get(pk);\r\n                        self.query[mappedPk.length > 0 ? mappedPk : toPropCase(pk)] = value.length > 1 ? value : value[0];\r\n                        return proxy;\r\n                    };\r\n                }\r\n                const propKey = props.has(pk) ? props.get(pk) : toPropCase(pk);\r\n                self.query[propKey] = true;\r\n                return proxy;\r\n            },\r\n        });\r\n}\r\n\r\nconst queryRegex = /_api\\/search\\/postquery$/i;\r\n\r\n/**\r\n * Describes the search API\r\n *\r\n */\r\n@defaultPath(\"_api/search/postquery\")\r\nexport class _Search extends _SharePointQueryableInstance {\r\n\r\n    /**\r\n     * @returns Promise\r\n     */\r\n    @tag(\"se.execute\")\r\n    public async execute(queryInit: SearchQueryInit): Promise<SearchResults> {\r\n\r\n        const query = this.parseQuery(queryInit);\r\n\r\n        const postBody = body({\r\n            request: assign(\r\n                metadata(\"Microsoft.Office.Server.Search.REST.SearchRequest\"),\r\n                Object.assign(\r\n                    {},\r\n                    query,\r\n                    {\r\n                        HitHighlightedProperties: this.fixArrProp(query.HitHighlightedProperties),\r\n                        Properties: this.fixArrProp(query.Properties),\r\n                        RefinementFilters: this.fixArrProp(query.RefinementFilters),\r\n                        ReorderingRules: this.fixArrProp(query.ReorderingRules),\r\n                        SelectProperties: this.fixArrProp(query.SelectProperties),\r\n                        SortList: this.fixArrProp(query.SortList),\r\n                    })),\r\n        });\r\n\r\n        // if we are using caching with this search request, then we need to handle some work upfront to enable that\r\n        if (this.data.useCaching) {\r\n\r\n            // force use of the cache for this request if .usingCaching was called\r\n            this._forceCaching = true;\r\n\r\n            // because all the requests use the same url they would collide in the cache we use a special key\r\n            const cacheKey = `PnPjs.SearchWithCaching(${getHashCode(postBody.body)})`;\r\n\r\n            if (objectDefinedNotNull(this.data.cachingOptions)) {\r\n                // if our key ends in the postquery url we overwrite it\r\n                if (queryRegex.test(this.data.cachingOptions.key)) {\r\n                    this.data.cachingOptions.key = cacheKey;\r\n                }\r\n            } else {\r\n                this.data.cachingOptions = new CachingOptions(cacheKey);\r\n            }\r\n        }\r\n\r\n        const data = await spPost(this, postBody);\r\n        return new SearchResults(data, this.toUrl(), query);\r\n    }\r\n\r\n    /**\r\n     * Fix array property\r\n     *\r\n     * @param prop property to fix for container struct\r\n     */\r\n    private fixArrProp(prop: any): { results: any[] } {\r\n        if (typeof prop === \"undefined\") {\r\n            return ({ results: [] });\r\n        }\r\n\r\n        return { results: isArray(prop) ? prop : [prop] };\r\n    }\r\n\r\n    /**\r\n     * Translates one of the query initializers into a SearchQuery instance\r\n     * \r\n     * @param query \r\n     */\r\n    private parseQuery(query: SearchQueryInit): ISearchQuery {\r\n\r\n        let finalQuery: ISearchQuery;\r\n\r\n        if (typeof query === \"string\") {\r\n            finalQuery = { Querytext: query };\r\n        } else if ((query as ISearchBuilder).toSearchQuery) {\r\n            finalQuery = (query as ISearchBuilder).toSearchQuery();\r\n        } else {\r\n            finalQuery = <ISearchQuery>query;\r\n        }\r\n\r\n        return finalQuery;\r\n    }\r\n}\r\n\r\nexport interface ISearch {\r\n    (queryInit: SearchQueryInit): Promise<SearchResults>;\r\n}\r\n\r\nexport const Search = (baseUrl: string | ISharePointQueryable, options: IConfigOptions = {}): ISearch => (queryInit: SearchQueryInit) => {\r\n    return (new _Search(baseUrl)).configure(options).execute(queryInit);\r\n};\r\n\r\nexport class SearchResults {\r\n\r\n    constructor(rawResponse: any,\r\n        private _url: string,\r\n        private _query: ISearchQuery,\r\n        private _raw: ISearchResponse = null,\r\n        private _primary: ISearchResult[] = null) {\r\n\r\n        this._url = this._url.replace(queryRegex, \"\");\r\n        this._raw = rawResponse.postquery ? rawResponse.postquery : rawResponse;\r\n    }\r\n\r\n    public get ElapsedTime(): number {\r\n        return this?.RawSearchResults?.ElapsedTime || 0;\r\n    }\r\n\r\n    public get RowCount(): number {\r\n        return this?.RawSearchResults?.PrimaryQueryResult?.RelevantResults?.RowCount || 0;\r\n    }\r\n\r\n    public get TotalRows(): number {\r\n        return this?.RawSearchResults?.PrimaryQueryResult?.RelevantResults?.TotalRows || 0;\r\n    }\r\n\r\n    public get TotalRowsIncludingDuplicates(): number {\r\n        return this?.RawSearchResults?.PrimaryQueryResult?.RelevantResults?.TotalRowsIncludingDuplicates || 0;\r\n    }\r\n\r\n    public get RawSearchResults(): ISearchResponse {\r\n        return this._raw;\r\n    }\r\n\r\n    public get PrimarySearchResults(): ISearchResult[] {\r\n        if (this._primary === null) {\r\n            this._primary = this.formatSearchResults(this._raw?.PrimaryQueryResult?.RelevantResults?.Table?.Rows || null);\r\n        }\r\n        return this._primary;\r\n    }\r\n\r\n    /**\r\n     * Gets a page of results\r\n     *\r\n     * @param pageNumber Index of the page to return. Used to determine StartRow\r\n     * @param pageSize Optional, items per page (default = 10)\r\n     */\r\n    public getPage(pageNumber: number, pageSize?: number): Promise<SearchResults> {\r\n\r\n        // if we got all the available rows we don't have another page\r\n        if (this.TotalRows < this.RowCount) {\r\n            return Promise.resolve(null);\r\n        }\r\n\r\n        // if pageSize is supplied, then we use that regardless of any previous values\r\n        // otherwise get the previous RowLimit or default to 10\r\n        const rows = pageSize !== undefined ? pageSize : hOP(this._query, \"RowLimit\") ? this._query.RowLimit : 10;\r\n\r\n        const query: ISearchQuery = assign(this._query, {\r\n            RowLimit: rows,\r\n            StartRow: rows * (pageNumber - 1),\r\n        });\r\n\r\n        // we have reached the end\r\n        if (query.StartRow > this.TotalRows) {\r\n            return Promise.resolve(null);\r\n        }\r\n\r\n        return Search(this._url)(query);\r\n    }\r\n\r\n    /**\r\n     * Formats a search results array\r\n     *\r\n     * @param rawResults The array to process\r\n     */\r\n    protected formatSearchResults(rawResults: any): ISearchResult[] {\r\n\r\n        const results = new Array<ISearchResult>();\r\n\r\n        if (typeof (rawResults) === \"undefined\" || rawResults == null) {\r\n            return [];\r\n        }\r\n\r\n        const tempResults = rawResults.results ? rawResults.results : rawResults;\r\n\r\n        for (const tempResult of tempResults) {\r\n\r\n            const cells: { Key: string, Value: any }[] = tempResult.Cells.results ? tempResult.Cells.results : tempResult.Cells;\r\n\r\n            results.push(cells.reduce((res, cell) => {\r\n\r\n                Reflect.defineProperty(res, cell.Key,\r\n                    {\r\n                        configurable: false,\r\n                        enumerable: true,\r\n                        value: cell.Value,\r\n                        writable: false,\r\n                    });\r\n\r\n                return res;\r\n\r\n            }, {}));\r\n        }\r\n\r\n        return results;\r\n    }\r\n}\r\n","export type SearchQueryInit = string | ISearchQuery | ISearchBuilder;\r\n\r\nexport interface ISearchBuilder {\r\n    query: any;\r\n    readonly bypassResultTypes: this;\r\n    readonly enableStemming: this;\r\n    readonly enableInterleaving: this;\r\n    readonly enableFql: this;\r\n    readonly enableNicknames: this;\r\n    readonly enablePhonetic: this;\r\n    readonly trimDuplicates: this;\r\n    readonly processBestBets: this;\r\n    readonly enableQueryRules: this;\r\n    readonly enableSorting: this;\r\n    readonly generateBlockRankLog: this;\r\n    readonly processPersonalFavorites: this;\r\n    readonly enableOrderingHitHighlightedProperty: this;\r\n\r\n    culture(culture: number): this;\r\n    rowLimit(n: number): this;\r\n    startRow(n: number): this;\r\n    sourceId(id: string): this;\r\n    text(queryText: string): this;\r\n    template(template: string): this;\r\n    trimDuplicatesIncludeId(n: number): this;\r\n    rankingModelId(id: string): this;\r\n    rowsPerPage(n: number): this;\r\n    selectProperties(...properties: string[]): this;\r\n    timeZoneId(id: number): this;\r\n    refinementFilters(...filters: string[]): this;\r\n    refiners(refiners: string): this;\r\n    hiddenConstraints(constraints: string): this;\r\n    sortList(...sorts: ISort[]): this;\r\n    timeout(milliseconds: number): this;\r\n    hithighlightedProperties(...properties: string[]): this;\r\n    clientType(clientType: string): this;\r\n    personalizationData(data: string): this;\r\n    resultsURL(url: string): this;\r\n    queryTag(tags: string): this;\r\n    properties(...properties: ISearchProperty[]): this;\r\n    queryTemplatePropertiesUrl(url: string): this;\r\n    reorderingRules(...rules: IReorderingRule[]): this;\r\n    hitHighlightedMultivaluePropertyLimit(limit: number): this;\r\n    collapseSpecification(spec: string): this;\r\n    uiLanguage(lang: number): this;\r\n    desiredSnippetLength(len: number): this;\r\n    maxSnippetLength(len: number): this;\r\n    summaryLength(len: number): this;\r\n\r\n    /* included method */\r\n    toSearchQuery(): ISearchQuery;\r\n}\r\n\r\n/**\r\n * Describes the SearchQuery interface\r\n */\r\nexport interface ISearchQuery {\r\n\r\n    /**\r\n     * A string that contains the text for the search query.\r\n     */\r\n    Querytext?: string;\r\n\r\n    /**\r\n     * A string that contains the text that replaces the query text, as part of a query transform.\r\n     */\r\n    QueryTemplate?: string;\r\n\r\n    /**\r\n     * A Boolean value that specifies whether the result tables that are returned for\r\n     * the result block are mixed with the result tables that are returned for the original query.\r\n     */\r\n    EnableInterleaving?: boolean;\r\n\r\n    /**\r\n     * A Boolean value that specifies whether stemming is enabled.\r\n     */\r\n    EnableStemming?: boolean;\r\n\r\n    /**\r\n     * A Boolean value that specifies whether duplicate items are removed from the results.\r\n     */\r\n    TrimDuplicates?: boolean;\r\n\r\n    /**\r\n     * A Boolean value that specifies whether the exact terms in the search query are used to find matches, or if nicknames are used also.\r\n     */\r\n    EnableNicknames?: boolean;\r\n\r\n    /**\r\n     * A Boolean value that specifies whether the query uses the FAST Query Language (FQL).\r\n     */\r\n    EnableFQL?: boolean;\r\n\r\n    /**\r\n     * A Boolean value that specifies whether the phonetic forms of the query terms are used to find matches.\r\n     */\r\n    EnablePhonetic?: boolean;\r\n\r\n    /**\r\n     * A Boolean value that specifies whether to perform result type processing for the query.\r\n     */\r\n    BypassResultTypes?: boolean;\r\n\r\n    /**\r\n     * A Boolean value that specifies whether to return best bet results for the query.\r\n     * This parameter is used only when EnableQueryRules is set to true, otherwise it is ignored.\r\n     */\r\n    ProcessBestBets?: boolean;\r\n\r\n    /**\r\n     * A Boolean value that specifies whether to enable query rules for the query.\r\n     */\r\n    EnableQueryRules?: boolean;\r\n\r\n    /**\r\n     * A Boolean value that specifies whether to sort search results.\r\n     */\r\n    EnableSorting?: boolean;\r\n\r\n    /**\r\n     * Specifies whether to return block rank log information in the BlockRankLog property of the interleaved result table.\r\n     * A block rank log contains the textual information on the block score and the documents that were de-duplicated.\r\n     */\r\n    GenerateBlockRankLog?: boolean;\r\n\r\n    /**\r\n     * The result source ID to use for executing the search query.\r\n     */\r\n    SourceId?: string;\r\n\r\n    /**\r\n     * The ID of the ranking model to use for the query.\r\n     */\r\n    RankingModelId?: string;\r\n\r\n    /**\r\n     * The first row that is included in the search results that are returned.\r\n     * You use this parameter when you want to implement paging for search results.\r\n     */\r\n    StartRow?: number;\r\n\r\n    /**\r\n     * The maximum number of rows overall that are returned in the search results.\r\n     * Compared to RowsPerPage, RowLimit is the maximum number of rows returned overall.\r\n     */\r\n    RowLimit?: number;\r\n\r\n    /**\r\n     * The maximum number of rows to return per page.\r\n     * Compared to RowLimit, RowsPerPage refers to the maximum number of rows to return per page,\r\n     * and is used primarily when you want to implement paging for search results.\r\n     */\r\n    RowsPerPage?: number;\r\n\r\n    /**\r\n     * The managed properties to return in the search results.\r\n     */\r\n    SelectProperties?: string[];\r\n\r\n    /**\r\n     * The locale ID (LCID) for the query.\r\n     */\r\n    Culture?: number;\r\n\r\n    /**\r\n     * The set of refinement filters used when issuing a refinement query (FQL)\r\n     */\r\n    RefinementFilters?: string[];\r\n\r\n    /**\r\n     * The set of refiners to return in a search result.\r\n     */\r\n    Refiners?: string;\r\n\r\n    /**\r\n     * The additional query terms to append to the query.\r\n     */\r\n    HiddenConstraints?: string;\r\n\r\n    /**\r\n     * The list of properties by which the search results are ordered.\r\n     */\r\n    SortList?: ISort[];\r\n\r\n    /**\r\n     * The amount of time in milliseconds before the query request times out.\r\n     */\r\n    Timeout?: number;\r\n\r\n    /**\r\n     * The properties to highlight in the search result summary when the property value matches the search terms entered by the user.\r\n     */\r\n    HitHighlightedProperties?: string[];\r\n\r\n    /**\r\n     * The type of the client that issued the query.\r\n     */\r\n    ClientType?: string;\r\n\r\n    /**\r\n     * The GUID for the user who submitted the search query.\r\n     */\r\n    PersonalizationData?: string;\r\n\r\n    /**\r\n     * The URL for the search results page.\r\n     */\r\n    ResultsUrl?: string;\r\n\r\n    /**\r\n     * Custom tags that identify the query. You can specify multiple query tags\r\n     */\r\n    QueryTag?: string;\r\n\r\n    /**\r\n     * Properties to be used to configure the search query\r\n     */\r\n    Properties?: ISearchProperty[];\r\n\r\n    /**\r\n     *  A Boolean value that specifies whether to return personal favorites with the search results.\r\n     */\r\n    ProcessPersonalFavorites?: boolean;\r\n\r\n    /**\r\n     * The location of the queryparametertemplate.xml file. This file is used to enable anonymous users to make Search REST queries.\r\n     */\r\n    QueryTemplatePropertiesUrl?: string;\r\n\r\n    /**\r\n     * Special rules for reordering search results.\r\n     * These rules can specify that documents matching certain conditions are ranked higher or lower in the results.\r\n     * This property applies only when search results are sorted based on rank.\r\n     */\r\n    ReorderingRules?: IReorderingRule[];\r\n\r\n    /**\r\n     * The number of properties to show hit highlighting for in the search results.\r\n     */\r\n    HitHighlightedMultivaluePropertyLimit?: number;\r\n\r\n    /**\r\n     * A Boolean value that specifies whether the hit highlighted properties can be ordered.\r\n     */\r\n    EnableOrderingHitHighlightedProperty?: boolean;\r\n\r\n    /**\r\n     * The managed properties that are used to determine how to collapse individual search results.\r\n     * Results are collapsed into one or a specified number of results if they match any of the individual collapse specifications.\r\n     * In a collapse specification, results are collapsed if their properties match all individual properties in the collapse specification.\r\n     */\r\n    CollapseSpecification?: string;\r\n\r\n    /**\r\n     * The locale identifier (LCID) of the user interface\r\n     */\r\n    UIlanguage?: number;\r\n\r\n    /**\r\n     * The preferred number of characters to display in the hit-highlighted summary generated for a search result.\r\n     */\r\n    DesiredSnippetLength?: number;\r\n\r\n    /**\r\n     * The maximum number of characters to display in the hit-highlighted summary generated for a search result.\r\n     */\r\n    MaxSnippetLength?: number;\r\n\r\n    /**\r\n     * The number of characters to display in the result summary for a search result.\r\n     */\r\n    SummaryLength?: number;\r\n\r\n}\r\n\r\n/**\r\n * Provides hints at the properties which may be available on the result object\r\n */\r\nexport interface ISearchResult {\r\n\r\n    Rank?: number;\r\n    DocId?: number;\r\n    WorkId?: number;\r\n    Title?: string;\r\n    Author?: string;\r\n    Size?: number;\r\n    Path?: string;\r\n    Description?: string;\r\n    Write?: Date;\r\n    LastModifiedTime?: Date;\r\n    CollapsingStatus?: number;\r\n    HitHighlightedSummary?: string;\r\n    HitHighlightedProperties?: string;\r\n    contentclass?: string;\r\n    PictureThumbnailURL?: string;\r\n    ServerRedirectedURL?: string;\r\n    ServerRedirectedEmbedURL?: string;\r\n    ServerRedirectedPreviewURL?: string;\r\n    FileExtension?: string;\r\n    ContentTypeId?: string;\r\n    ParentLink?: string;\r\n    ViewsLifetime?: number;\r\n    ViewsRecent?: number;\r\n    SectionNames?: string;\r\n    SectionIndexes?: string;\r\n    SiteLogo?: string;\r\n    SiteDescription?: string;\r\n    importance?: number;\r\n    SiteName?: string;\r\n    IsDocument?: boolean;\r\n    FileType?: string;\r\n    IsContainer?: boolean;\r\n    WebTemplate?: string;\r\n    SPWebUrl?: string;\r\n    UniqueId?: string;\r\n    ProgId?: string;\r\n    OriginalPath?: string;\r\n    RenderTemplateId?: string;\r\n    PartitionId?: string;\r\n    UrlZone?: number;\r\n    Culture?: string;\r\n}\r\n\r\nexport interface ISearchResponse {\r\n    ElapsedTime: number;\r\n    Properties?: { Key: string, Value: any, ValueType: string }[];\r\n    PrimaryQueryResult?: IResultTableCollection;\r\n    SecondaryQueryResults?: IResultTableCollection;\r\n    SpellingSuggestion?: string;\r\n    TriggeredRules?: any[];\r\n}\r\n\r\nexport interface IResultTableCollection {\r\n\r\n    QueryErrors?: Map<string, any>;\r\n    QueryId?: string;\r\n    QueryRuleId?: string;\r\n    CustomResults?: IResultTable;\r\n    RefinementResults?: IResultTable;\r\n    RelevantResults?: IResultTable;\r\n    SpecialTermResults?: IResultTable;\r\n}\r\n\r\nexport interface IRefiner {\r\n    Name: string;\r\n    Entries: { RefinementCount: string; RefinementName: string; RefinementToken: string; RefinementValue: string; }[];\r\n}\r\n\r\nexport interface IResultTable {\r\n    GroupTemplateId?: string;\r\n    ItemTemplateId?: string;\r\n    Properties?: { Key: string, Value: any, ValueType: string }[];\r\n    Table?: { Rows: { Cells: { Key: string, Value: any, ValueType: string }[] }[] };\r\n    Refiners?: IRefiner[];\r\n    ResultTitle?: string;\r\n    ResultTitleUrl?: string;\r\n    RowCount?: number;\r\n    TableType?: string;\r\n    TotalRows?: number;\r\n    TotalRowsIncludingDuplicates?: number;\r\n}\r\n\r\n/**\r\n * Defines how search results are sorted.\r\n */\r\nexport interface ISort {\r\n\r\n    /**\r\n     * The name for a property by which the search results are ordered.\r\n     */\r\n    Property: string;\r\n\r\n    /**\r\n     * The direction in which search results are ordered.\r\n     */\r\n    Direction: SortDirection;\r\n}\r\n\r\n/**\r\n * Defines one search property\r\n */\r\nexport interface ISearchProperty {\r\n    Name: string;\r\n    Value: ISearchPropertyValue;\r\n}\r\n\r\n/**\r\n * Defines one search property value. Set only one of StrlVal/BoolVal/IntVal/StrArray.\r\n */\r\nexport interface ISearchPropertyValue {\r\n    StrVal?: string;\r\n    BoolVal?: boolean;\r\n    IntVal?: number;\r\n    StrArray?: string[];\r\n    QueryPropertyValueTypeIndex: QueryPropertyValueType;\r\n}\r\n\r\n/**\r\n * defines the SortDirection enum\r\n */\r\nexport enum SortDirection {\r\n    Ascending = 0,\r\n    Descending = 1,\r\n    FQLFormula = 2,\r\n}\r\n\r\n/**\r\n * Defines how ReorderingRule interface, used for reordering results\r\n */\r\nexport interface IReorderingRule {\r\n\r\n    /**\r\n     * The value to match on\r\n     */\r\n    MatchValue: string;\r\n\r\n    /**\r\n     * The rank boosting\r\n     */\r\n    Boost: number;\r\n\r\n    /**\r\n    * The rank boosting\r\n    */\r\n    MatchType: ReorderingRuleMatchType;\r\n}\r\n\r\n/**\r\n * defines the ReorderingRuleMatchType  enum\r\n */\r\nexport enum ReorderingRuleMatchType {\r\n    ResultContainsKeyword = 0,\r\n    TitleContainsKeyword = 1,\r\n    TitleMatchesKeyword = 2,\r\n    UrlStartsWith = 3,\r\n    UrlExactlyMatches = 4,\r\n    ContentTypeIs = 5,\r\n    FileExtensionMatches = 6,\r\n    ResultHasTag = 7,\r\n    ManualCondition = 8,\r\n}\r\n\r\n/**\r\n * Specifies the type value for the property\r\n */\r\nexport enum QueryPropertyValueType {\r\n    None = 0,\r\n    StringType = 1,\r\n    Int32Type = 2,\r\n    BooleanType = 3,\r\n    StringArrayType = 4,\r\n    UnSupportedType = 5,\r\n}\r\n\r\nexport class SearchBuiltInSourceId {\r\n    public static readonly Documents = \"e7ec8cee-ded8-43c9-beb5-436b54b31e84\";\r\n    public static readonly ItemsMatchingContentType = \"5dc9f503-801e-4ced-8a2c-5d1237132419\";\r\n    public static readonly ItemsMatchingTag = \"e1327b9c-2b8c-4b23-99c9-3730cb29c3f7\";\r\n    public static readonly ItemsRelatedToCurrentUser = \"48fec42e-4a92-48ce-8363-c2703a40e67d\";\r\n    public static readonly ItemsWithSameKeywordAsThisItem = \"5c069288-1d17-454a-8ac6-9c642a065f48\";\r\n    public static readonly LocalPeopleResults = \"b09a7990-05ea-4af9-81ef-edfab16c4e31\";\r\n    public static readonly LocalReportsAndDataResults = \"203fba36-2763-4060-9931-911ac8c0583b\";\r\n    public static readonly LocalSharePointResults = \"8413cd39-2156-4e00-b54d-11efd9abdb89\";\r\n    public static readonly LocalVideoResults = \"78b793ce-7956-4669-aa3b-451fc5defebf\";\r\n    public static readonly Pages = \"5e34578e-4d08-4edc-8bf3-002acf3cdbcc\";\r\n    public static readonly Pictures = \"38403c8c-3975-41a8-826e-717f2d41568a\";\r\n    public static readonly Popular = \"97c71db1-58ce-4891-8b64-585bc2326c12\";\r\n    public static readonly RecentlyChangedItems = \"ba63bbae-fa9c-42c0-b027-9a878f16557c\";\r\n    public static readonly RecommendedItems = \"ec675252-14fa-4fbe-84dd-8d098ed74181\";\r\n    public static readonly Wiki = \"9479bf85-e257-4318-b5a8-81a180f5faa1\";\r\n}\r\n","import { _SharePointQueryableInstance, ISharePointQueryable } from \"../sharepointqueryable\";\r\nimport { hOP, IConfigOptions } from \"@pnp/common\";\r\nimport { defaultPath } from \"../decorators\";\r\nimport { tag } from \"../telemetry\";\r\n\r\n@defaultPath(\"_api/search/suggest\")\r\nexport class _Suggest extends _SharePointQueryableInstance {\r\n\r\n    @tag(\"su.execute\")\r\n    public async execute(query: ISuggestQuery): Promise<ISuggestResult> {\r\n\r\n        this.mapQueryToQueryString(query);\r\n\r\n        const response = await this.get();\r\n        const mapper = hOP(response, \"suggest\") ? (s_1: string) => response.suggest[s_1].results : (s_2: string) => response[s_2];\r\n\r\n        return {\r\n            PeopleNames: mapper(\"PeopleNames\"),\r\n            PersonalResults: mapper(\"PersonalResults\"),\r\n            Queries: mapper(\"Queries\"),\r\n        };\r\n    }\r\n\r\n    private mapQueryToQueryString(query: ISuggestQuery): void {\r\n\r\n        const setProp = (q: ISuggestQuery) => (checkProp: string) => (sp: string) => {\r\n            if (hOP(q, checkProp)) {\r\n                this.query.set(sp, q[checkProp].toString());\r\n            }\r\n        };\r\n\r\n        this.query.set(\"querytext\", `'${query.querytext}'`);\r\n\r\n        const querySetter = setProp(query);\r\n\r\n        querySetter(\"count\")(\"inumberofquerysuggestions\");\r\n        querySetter(\"personalCount\")(\"inumberofresultsuggestions\");\r\n        querySetter(\"preQuery\")(\"fprequerysuggestions\");\r\n        querySetter(\"hitHighlighting\")(\"fhithighlighting\");\r\n        querySetter(\"capitalize\")(\"fcapitalizefirstletters\");\r\n        querySetter(\"culture\")(\"culture\");\r\n        querySetter(\"stemming\")(\"enablestemming\");\r\n        querySetter(\"includePeople\")(\"showpeoplenamesuggestions\");\r\n        querySetter(\"queryRules\")(\"enablequeryrules\");\r\n        querySetter(\"prefixMatch\")(\"fprefixmatchallterms\");\r\n    }\r\n}\r\n\r\nexport interface ISuggest {\r\n    (query: ISuggestQuery): Promise<ISuggestResult>;\r\n}\r\n\r\nexport const Suggest = (baseUrl: string | ISharePointQueryable, options: IConfigOptions = {}): ISuggest => (query: ISuggestQuery) => {\r\n    return (new _Suggest(baseUrl)).configure(options).execute(query);\r\n};\r\n\r\n/**\r\n * Defines a query execute against the search/suggest endpoint (see https://msdn.microsoft.com/en-us/library/office/dn194079.aspx)\r\n */\r\nexport interface ISuggestQuery {\r\n\r\n    [key: string]: string | number | boolean;\r\n\r\n    /**\r\n     * A string that contains the text for the search query.\r\n     */\r\n    querytext: string;\r\n\r\n    /**\r\n     * The number of query suggestions to retrieve. Must be greater than zero (0). The default value is 5.\r\n     */\r\n    count?: number;\r\n\r\n    /**\r\n     * The number of personal results to retrieve. Must be greater than zero (0). The default value is 5.\r\n     */\r\n    personalCount?: number;\r\n\r\n    /**\r\n     * A Boolean value that specifies whether to retrieve pre-query or post-query suggestions. true to return pre-query suggestions; otherwise, false. The default value is false.\r\n     */\r\n    preQuery?: boolean;\r\n\r\n    /**\r\n     * A Boolean value that specifies whether to hit-highlight or format in bold the query suggestions. true to format in bold the terms in the returned query suggestions\r\n     * that match terms in the specified query; otherwise, false. The default value is true.\r\n     */\r\n    hitHighlighting?: boolean;\r\n\r\n    /**\r\n     * A Boolean value that specifies whether to capitalize the first letter in each term in the returned query suggestions. true to capitalize the first letter in each term;\r\n     * otherwise, false. The default value is false.\r\n     */\r\n    capitalize?: boolean;\r\n\r\n    /**\r\n     * The locale ID (LCID) for the query (see https://msdn.microsoft.com/en-us/library/cc233982.aspx).\r\n     */\r\n    culture?: string;\r\n\r\n    /**\r\n     * A Boolean value that specifies whether stemming is enabled. true to enable stemming; otherwise, false. The default value is true.\r\n     */\r\n    stemming?: boolean;\r\n\r\n    /**\r\n     * A Boolean value that specifies whether to include people names in the returned query suggestions. true to include people names in the returned query suggestions;\r\n     * otherwise, false. The default value is true.\r\n     */\r\n    includePeople?: boolean;\r\n\r\n    /**\r\n     * A Boolean value that specifies whether to turn on query rules for this query. true to turn on query rules; otherwise, false. The default value is true.\r\n     */\r\n    queryRules?: boolean;\r\n\r\n    /**\r\n     * A Boolean value that specifies whether to return query suggestions for prefix matches. true to return query suggestions based on prefix matches, otherwise, false when\r\n     * query suggestions should match the full query word.\r\n     */\r\n    prefixMatch?: boolean;\r\n}\r\n\r\nexport interface ISuggestResult {\r\n    readonly PeopleNames: string[];\r\n    readonly PersonalResults: IPersonalResultSuggestion[];\r\n    readonly Queries: any[];\r\n}\r\n\r\nexport interface IPersonalResultSuggestion {\r\n    readonly HighlightedTitle?: string;\r\n    readonly IsBestBet?: boolean;\r\n    readonly Title?: string;\r\n    readonly TypeId?: string;\r\n    readonly Url?: string;\r\n}\r\n","import { SPRest } from \"../rest\";\r\nimport { SearchQueryInit } from \"./types\";\r\nimport { _Search } from \"./query\";\r\nimport { ICachingOptions } from \"@pnp/odata\";\r\nimport { SearchResults, Search } from \"./query\";\r\nimport { ISuggestQuery, ISuggestResult, Suggest } from \"./suggest\";\r\n\r\nexport * from \"./types\";\r\n\r\nexport {\r\n    ISearch,\r\n    SearchQueryBuilder,\r\n    SearchResults,\r\n    Search,\r\n} from \"./query\";\r\n\r\nexport {\r\n    ISuggest,\r\n    IPersonalResultSuggestion,\r\n    ISuggestQuery,\r\n    ISuggestResult,\r\n    Suggest,\r\n} from \"./suggest\";\r\n\r\ndeclare module \"../rest\" {\r\n    interface SPRest {\r\n        /**\r\n         * Conduct a search\r\n         * \r\n         * @param query Parameters for the search\r\n         */\r\n        search(query: SearchQueryInit): Promise<SearchResults>;\r\n        /**\r\n         * Conduct a search with caching enabled\r\n         * \r\n         * @param query Parameters for the search\r\n         * @param options Optional, caching options\r\n         */\r\n        searchWithCaching(query: SearchQueryInit, options?: ICachingOptions): Promise<SearchResults>;\r\n        /**\r\n         * Conduct a suggest search query\r\n         * \r\n         * @param query Parameters for the search\r\n         */\r\n        searchSuggest(query: string | ISuggestQuery): Promise<ISuggestResult>;\r\n    }\r\n}\r\n\r\nSPRest.prototype.search = function (this: SPRest, query: SearchQueryInit): Promise<SearchResults> {\r\n\r\n    return Search(this._baseUrl, this._options)(query);\r\n};\r\n\r\nSPRest.prototype.searchWithCaching = function (this: SPRest, query: SearchQueryInit, options?: ICachingOptions): Promise<SearchResults> {\r\n\r\n    return (new _Search(this._baseUrl)).configure(this._options).usingCaching(options).execute(query);\r\n};\r\n\r\nSPRest.prototype.searchSuggest = function (this: SPRest, query: string | ISuggestQuery): Promise<ISuggestResult> {\r\n\r\n    return Suggest(this._baseUrl, this._options)(typeof query === \"string\" ? { querytext: query } : query);\r\n};\r\n","import {\r\n    _SharePointQueryableInstance,\r\n    _SharePointQueryableCollection,\r\n    spInvokableFactory,\r\n    IDeleteable,\r\n    deleteable,\r\n} from \"../sharepointqueryable\";\r\nimport { SiteGroups, ISiteGroups } from \"../site-groups/types\";\r\nimport { ITypedHash, assign } from \"@pnp/common\";\r\nimport { metadata } from \"../utils/metadata\";\r\nimport { body } from \"@pnp/odata\";\r\nimport { defaultPath } from \"../decorators\";\r\nimport { spPost } from \"../operations\";\r\nimport { PrincipalType } from \"../types\";\r\nimport { tag } from \"../telemetry\";\r\n\r\n@defaultPath(\"siteusers\")\r\nexport class _SiteUsers extends _SharePointQueryableCollection<ISiteUserInfo[]> {\r\n\r\n    /**\r\n     * Gets a user from the collection by id\r\n     *\r\n     * @param id The id of the user to retrieve\r\n     */\r\n    public getById(id: number): ISiteUser {\r\n        return tag.configure(SiteUser(this, `getById(${id})`), \"sus.getById\");\r\n    }\r\n\r\n    /**\r\n     * Gets a user from the collection by email\r\n     *\r\n     * @param email The email address of the user to retrieve\r\n     */\r\n    public getByEmail(email: string): ISiteUser {\r\n        return tag.configure(SiteUser(this, `getByEmail('${email}')`), \"sus.getByEmail\");\r\n    }\r\n\r\n    /**\r\n     * Gets a user from the collection by login name\r\n     *\r\n     * @param loginName The login name of the user to retrieve\r\n     */\r\n    public getByLoginName(loginName: string): ISiteUser {\r\n        return tag.configure(SiteUser(this).concat(`('!@v::${encodeURIComponent(loginName)}')`), \"sus.getByLoginName\");\r\n    }\r\n\r\n    /**\r\n     * Removes a user from the collection by id\r\n     *\r\n     * @param id The id of the user to remove\r\n     */\r\n    @tag(\"sus.remId\")\r\n    public removeById(id: number): Promise<any> {\r\n        return spPost(this.clone(SiteUsers, `removeById(${id})`));\r\n    }\r\n\r\n    /**\r\n     * Removes a user from the collection by login name\r\n     *\r\n     * @param loginName The login name of the user to remove\r\n     */\r\n    @tag(\"sus.remLoginName\")\r\n    public removeByLoginName(loginName: string): Promise<any> {\r\n        const o = this.clone(SiteUsers, `removeByLoginName(@v)`);\r\n        o.query.set(\"@v\", `'${encodeURIComponent(loginName)}'`);\r\n        return spPost(o);\r\n    }\r\n\r\n    /**\r\n     * Adds a user to a site collection\r\n     *\r\n     * @param loginName The login name of the user to add  to a site collection\r\n     *\r\n     */\r\n    @tag(\"sus.add\")\r\n    public async add(loginName: string): Promise<ISiteUser> {\r\n        await spPost(this, body(assign(metadata(\"SP.User\"), { LoginName: loginName })));\r\n        return this.getByLoginName(loginName);\r\n    }\r\n}\r\nexport interface ISiteUsers extends _SiteUsers { }\r\nexport const SiteUsers = spInvokableFactory<ISiteUsers>(_SiteUsers);\r\n\r\n/**\r\n * Describes a single user\r\n *\r\n */\r\nexport class _SiteUser extends _SharePointQueryableInstance<ISiteUserInfo> {\r\n\r\n    public delete = deleteable(\"su\");\r\n\r\n    /**\r\n     * Gets the groups for this user\r\n     *\r\n     */\r\n    public get groups(): ISiteGroups {\r\n        return tag.configure(SiteGroups(this, \"groups\"), \"su.groups\");\r\n    }\r\n\r\n    /**\r\n    * Updates this user instance with the supplied properties\r\n    *\r\n    * @param properties A plain object of property names and values to update for the user\r\n    */\r\n    public update: (props: ITypedHash<any>) => Promise<IUserUpdateResult> = this._update<IUserUpdateResult, ITypedHash<any>>(\"SP.User\", data => ({ data, user: <any>this }));\r\n}\r\nexport interface ISiteUser extends _SiteUser, IDeleteable { }\r\nexport const SiteUser = spInvokableFactory<ISiteUser>(_SiteUser);\r\n\r\nexport interface ISiteUserInfo extends ISiteUserProps {\r\n\r\n    Expiration: string;\r\n    IsEmailAuthenticationGuestUser: boolean;\r\n    UserId: {\r\n        NameId: string;\r\n        NameIdIssuer: string;\r\n    };\r\n    UserPrincipalName: string | null;\r\n}\r\n\r\n/**\r\n * Describes a single user properties\r\n *\r\n */\r\nexport interface ISiteUserProps {\r\n\r\n    /**\r\n     * Contains Site user email\r\n     * \r\n     */\r\n    Email: string;\r\n\r\n    /**\r\n     * Contains Site user Id\r\n     * \r\n     */\r\n    Id: number;\r\n\r\n    /**\r\n     * Site user IsHiddenInUI\r\n     * \r\n     */\r\n    IsHiddenInUI: boolean;\r\n\r\n    /**\r\n     * Site user IsShareByEmailGuestUser \r\n     * \r\n     */\r\n    IsShareByEmailGuestUser: boolean;\r\n\r\n    /**\r\n     * Describes if Site user Is Site Admin \r\n     * \r\n     */\r\n    IsSiteAdmin: boolean;\r\n\r\n    /**\r\n     * Site user LoginName\r\n     * \r\n     */\r\n    LoginName: string;\r\n\r\n    /**\r\n     * Site user Principal type\r\n     * \r\n     */\r\n    PrincipalType: number | PrincipalType;\r\n\r\n    /**\r\n     * Site user Title\r\n     * \r\n     */\r\n    Title: string;\r\n}\r\n\r\n/**\r\n * Properties that provide both a getter, and a setter.\r\n *\r\n */\r\nexport interface IUserUpdateResult {\r\n    user: ISiteUser;\r\n    data: any;\r\n}\r\n\r\n/**\r\n * Result from ensuring a user\r\n *\r\n */\r\nexport interface IWebEnsureUserResult {\r\n    data: ISiteUserProps;\r\n    user: ISiteUser;\r\n}\r\n","import { assign, hOP } from \"@pnp/common\";\r\nimport { body, headers } from \"@pnp/odata\";\r\nimport {\r\n    _SharePointQueryableInstance,\r\n    SharePointQueryableCollection,\r\n    ISharePointQueryableCollection,\r\n    _SharePointQueryableCollection,\r\n    spInvokableFactory,\r\n    IDeleteable,\r\n    deleteable,\r\n} from \"../sharepointqueryable\";\r\nimport { SiteGroups, ISiteGroups } from \"../site-groups/types\";\r\nimport { metadata } from \"../utils/metadata\";\r\nimport { defaultPath } from \"../decorators\";\r\nimport { spPost } from \"../operations\";\r\nimport { tag } from \"../telemetry\";\r\n\r\nexport type SecurableQueryable = _SharePointQueryableInstance & ISecurableMethods;\r\n\r\n/**\r\n * Describes a set of role assignments for the current scope\r\n *\r\n */\r\n@defaultPath(\"roleassignments\")\r\nexport class _RoleAssignments extends _SharePointQueryableCollection<IRoleAssignmentInfo[]> {\r\n\r\n    /**\t\r\n     * Gets the role assignment associated with the specified principal id from the collection.\t\r\n     *\t\r\n     * @param id The id of the role assignment\t\r\n     */\r\n    public getById(id: number): IRoleAssignment {\r\n        return RoleAssignment(this).concat(`(${id})`);\r\n    }\r\n\r\n    /**\r\n     * Adds a new role assignment with the specified principal and role definitions to the collection\r\n     *\r\n     * @param principalId The id of the user or group to assign permissions to\r\n     * @param roleDefId The id of the role definition that defines the permissions to assign\r\n     *\r\n     */\r\n    public async add(principalId: number, roleDefId: number): Promise<void> {\r\n        await spPost(this.clone(RoleAssignments, `addroleassignment(principalid=${principalId}, roledefid=${roleDefId})`));\r\n    }\r\n\r\n    /**\r\n     * Removes the role assignment with the specified principal and role definition from the collection\r\n     *\r\n     * @param principalId The id of the user or group in the role assignment\r\n     * @param roleDefId The id of the role definition in the role assignment\r\n     *\r\n     */\r\n    public async remove(principalId: number, roleDefId: number): Promise<void> {\r\n        await spPost(this.clone(RoleAssignments, `removeroleassignment(principalid=${principalId}, roledefid=${roleDefId})`));\r\n    }\r\n}\r\nexport interface IRoleAssignments extends _RoleAssignments { }\r\nexport const RoleAssignments = spInvokableFactory<IRoleAssignments>(_RoleAssignments);\r\n\r\n/**\r\n * Describes a role assignment\r\n *\r\n */\r\nexport class _RoleAssignment extends _SharePointQueryableInstance<IRoleAssignmentInfo> {\r\n\r\n    public delete = deleteable(\"ra\");\r\n\r\n    /**\r\n     * Gets the groups that directly belong to the access control list (ACL) for this securable object\r\n     *\r\n     */\r\n    public get groups(): ISiteGroups {\r\n        return tag.configure(SiteGroups(this, \"groups\"), \"ra.groups\");\r\n    }\r\n\r\n    /**\r\n     * Gets the role definition bindings for this role assignment\r\n     *\r\n     */\r\n    public get bindings(): ISharePointQueryableCollection {\r\n        return SharePointQueryableCollection(this, \"roledefinitionbindings\");\r\n    }\r\n}\r\nexport interface IRoleAssignment extends _RoleAssignment, IDeleteable { }\r\nexport const RoleAssignment = spInvokableFactory<IRoleAssignment>(_RoleAssignment);\r\n\r\n/**\r\n * Describes a collection of role definitions\r\n *\r\n */\r\n@defaultPath(\"roledefinitions\")\r\nexport class _RoleDefinitions extends _SharePointQueryableCollection<IRoleDefinitionInfo[]> {\r\n\r\n    /**\t   \r\n     * Gets the role definition with the specified id from the collection\t    \r\n     *\t     \r\n     * @param id The id of the role definition\t     \r\n     *\t     \r\n     */\r\n    public getById(id: number): IRoleDefinition {\r\n        return RoleDefinition(this, `getById(${id})`);\r\n    }\r\n\r\n    /**\r\n     * Gets the role definition with the specified name\r\n     *\r\n     * @param name The name of the role definition\r\n     *\r\n     */\r\n    public getByName(name: string): IRoleDefinition {\r\n        return RoleDefinition(this, `getbyname('${name}')`);\r\n    }\r\n\r\n    /**\r\n     * Gets the role definition with the specified role type\r\n     *\r\n     * @param roleTypeKind The roletypekind of the role definition (None=0, Guest=1, Reader=2, Contributor=3, WebDesigner=4, Administrator=5, Editor=6, System=7)\r\n     *\r\n     */\r\n    public getByType(roleTypeKind: RoleTypeKind): IRoleDefinition {\r\n        return RoleDefinition(this, `getbytype(${roleTypeKind})`);\r\n    }\r\n\r\n    /**\r\n     * Creates a role definition\r\n     *\r\n     * @param name The new role definition's name\r\n     * @param description The new role definition's description\r\n     * @param order The order in which the role definition appears\r\n     * @param basePermissions The permissions mask for this role definition\r\n     *\r\n     */\r\n    public async add(name: string, description: string, order: number, basePermissions: IBasePermissions): Promise<IRoleDefinitionAddResult> {\r\n\r\n        const postBody = body({\r\n            BasePermissions: assign(metadata(\"SP.BasePermissions\"), basePermissions),\r\n            Description: description,\r\n            Name: name,\r\n            Order: order,\r\n            __metadata: { \"type\": \"SP.RoleDefinition\" },\r\n        });\r\n\r\n        const data = await spPost(this, postBody);\r\n\r\n        return {\r\n            data: data,\r\n            definition: this.getById(data.Id),\r\n        };\r\n    }\r\n}\r\nexport interface IRoleDefinitions extends _RoleDefinitions { }\r\nexport const RoleDefinitions = spInvokableFactory<IRoleDefinitions>(_RoleDefinitions);\r\n\r\n/**\r\n * Describes a role definition\r\n *\r\n */\r\nexport class _RoleDefinition extends _SharePointQueryableInstance<IRoleDefinitionInfo> {\r\n\r\n    public delete = deleteable(\"rd\");\r\n\r\n    /**\r\n     * Updates this role definition with the supplied properties\r\n     *\r\n     * @param properties A plain object hash of values to update for the role definition\r\n     */\r\n    /* tslint:disable no-string-literal */\r\n    public async update(properties: Partial<IRoleDefinitionInfo>): Promise<IRoleDefinitionUpdateResult> {\r\n\r\n        const s = [\"BasePermissions\"];\r\n        if (hOP(properties, s[0]) !== undefined) {\r\n            properties[s[0]] = assign(metadata(`SP.${s[0]}`), properties[s[0]]);\r\n        }\r\n\r\n        const postBody = body(assign(metadata(\"SP.RoleDefinition\"), properties), headers({ \"X-HTTP-Method\": \"MERGE\" }));\r\n\r\n        const data = await spPost(this, postBody);\r\n\r\n        let definition: IRoleDefinition = <any>this;\r\n        if (hOP(properties, \"Name\")) {\r\n            const parent = this.getParent<IRoleDefinitions>(RoleDefinitions, this.parentUrl, \"\");\r\n            definition = parent.getByName((<string>properties[\"Name\"]));\r\n        }\r\n        return {\r\n            data,\r\n            definition,\r\n        };\r\n    }\r\n    /* tslint:enable */\r\n}\r\nexport interface IRoleDefinition extends _RoleDefinition, IDeleteable { }\r\nexport const RoleDefinition = spInvokableFactory<IRoleDefinition>(_RoleDefinition);\r\n\r\nexport interface ISecurableMethods {\r\n    readonly roleAssignments: IRoleAssignments;\r\n    readonly firstUniqueAncestorSecurableObject: _SharePointQueryableInstance;\r\n    getUserEffectivePermissions(loginName: string): Promise<IBasePermissions>;\r\n    getCurrentUserEffectivePermissions(): Promise<IBasePermissions>;\r\n    breakRoleInheritance(copyRoleAssignments?: boolean, clearSubscopes?: boolean): Promise<any>;\r\n    resetRoleInheritance(): Promise<any>;\r\n    userHasPermissions(loginName: string, permission: PermissionKind): Promise<boolean>;\r\n    currentUserHasPermissions(permission: PermissionKind): Promise<boolean>;\r\n    hasPermissions(value: IBasePermissions, perm: PermissionKind): boolean;\r\n}\r\n\r\n/**\r\n * Result from updating a role definition\r\n *\r\n */\r\nexport interface IRoleDefinitionUpdateResult {\r\n    definition: IRoleDefinition;\r\n    data: any;\r\n}\r\n\r\n/**\r\n * Result from adding a role definition\r\n *\r\n */\r\nexport interface IRoleDefinitionAddResult {\r\n    definition: IRoleDefinition;\r\n    data: any;\r\n}\r\n\r\nexport interface IBasePermissions {\r\n    Low: number;\r\n    High: number;\r\n}\r\n\r\nexport interface IRoleAssignmentInfo {\r\n    PrincipalId: number;\r\n}\r\n\r\nexport interface IRoleDefinitionInfo {\r\n    BasePermissions: IBasePermissions;\r\n    Description: string;\r\n    Hidden: boolean;\r\n    Id: number;\r\n    Name: string;\r\n    Order: number;\r\n    RoleTypeKind: RoleTypeKind;\r\n}\r\n\r\nexport type RoleTypeKind = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;\r\n\r\nexport enum PermissionKind {\r\n\r\n    /**\r\n     * Has no permissions on the Site. Not available through the user interface.\r\n     */\r\n    EmptyMask = 0,\r\n\r\n    /**\r\n     * View items in lists, documents in document libraries, and Web discussion comments.\r\n     */\r\n    ViewListItems = 1,\r\n\r\n    /**\r\n     * Add items to lists, documents to document libraries, and Web discussion comments.\r\n     */\r\n    AddListItems = 2,\r\n\r\n    /**\r\n     * Edit items in lists, edit documents in document libraries, edit Web discussion comments\r\n     * in documents, and customize Web Part Pages in document libraries.\r\n     */\r\n    EditListItems = 3,\r\n\r\n    /**\r\n     * Delete items from a list, documents from a document library, and Web discussion\r\n     * comments in documents.\r\n     */\r\n    DeleteListItems = 4,\r\n\r\n    /**\r\n     * Approve a minor version of a list item or document.\r\n     */\r\n    ApproveItems = 5,\r\n\r\n    /**\r\n     * View the source of documents with server-side file handlers.\r\n     */\r\n    OpenItems = 6,\r\n\r\n    /**\r\n     * View past versions of a list item or document.\r\n     */\r\n    ViewVersions = 7,\r\n\r\n    /**\r\n     * Delete past versions of a list item or document.\r\n     */\r\n    DeleteVersions = 8,\r\n\r\n    /**\r\n     * Discard or check in a document which is checked out to another user.\r\n     */\r\n    CancelCheckout = 9,\r\n\r\n    /**\r\n     * Create, change, and delete personal views of lists.\r\n     */\r\n    ManagePersonalViews = 10,\r\n\r\n    /**\r\n     * Create and delete lists, add or remove columns in a list, and add or remove public views of a list.\r\n     */\r\n    ManageLists = 12,\r\n\r\n    /**\r\n     * View forms, views, and application pages, and enumerate lists.\r\n     */\r\n    ViewFormPages = 13,\r\n\r\n    /**\r\n     * Make content of a list or document library retrieveable for anonymous users through SharePoint search.\r\n     * The list permissions in the site do not change.\r\n     */\r\n    AnonymousSearchAccessList = 14,\r\n\r\n    /**\r\n     * Allow users to open a Site, list, or folder to access items inside that container.\r\n     */\r\n    Open = 17,\r\n\r\n    /**\r\n     * View pages in a Site.\r\n     */\r\n    ViewPages = 18,\r\n\r\n    /**\r\n     * Add, change, or delete HTML pages or Web Part Pages, and edit the Site using\r\n     * a Windows SharePoint Services compatible editor.\r\n     */\r\n    AddAndCustomizePages = 19,\r\n\r\n    /**\r\n     * Apply a theme or borders to the entire Site.\r\n     */\r\n    ApplyThemeAndBorder = 20,\r\n\r\n    /**\r\n     * Apply a style sheet (.css file) to the Site.\r\n     */\r\n    ApplyStyleSheets = 21,\r\n\r\n    /**\r\n     * View reports on Site usage.\r\n     */\r\n    ViewUsageData = 22,\r\n\r\n    /**\r\n     * Create a Site using Self-Service Site Creation.\r\n     */\r\n    CreateSSCSite = 23,\r\n\r\n    /**\r\n     * Create subsites such as team sites, Meeting Workspace sites, and Document Workspace sites.\r\n     */\r\n    ManageSubwebs = 24,\r\n\r\n    /**\r\n     * Create a group of users that can be used anywhere within the site collection.\r\n     */\r\n    CreateGroups = 25,\r\n\r\n    /**\r\n     * Create and change permission levels on the Site and assign permissions to users\r\n     * and groups.\r\n     */\r\n    ManagePermissions = 26,\r\n\r\n    /**\r\n     * Enumerate files and folders in a Site using Microsoft Office SharePoint Designer\r\n     * and WebDAV interfaces.\r\n     */\r\n    BrowseDirectories = 27,\r\n\r\n    /**\r\n     * View information about users of the Site.\r\n     */\r\n    BrowseUserInfo = 28,\r\n\r\n    /**\r\n     * Add or remove personal Web Parts on a Web Part Page.\r\n     */\r\n    AddDelPrivateWebParts = 29,\r\n\r\n    /**\r\n     * Update Web Parts to display personalized information.\r\n     */\r\n    UpdatePersonalWebParts = 30,\r\n\r\n    /**\r\n     * Grant the ability to perform all administration tasks for the Site as well as\r\n     * manage content, activate, deactivate, or edit properties of Site scoped Features\r\n     * through the object model or through the user interface (UI). When granted on the\r\n     * root Site of a Site Collection, activate, deactivate, or edit properties of\r\n     * site collection scoped Features through the object model. To browse to the Site\r\n     * Collection Features page and activate or deactivate Site Collection scoped Features\r\n     * through the UI, you must be a Site Collection administrator.\r\n     */\r\n    ManageWeb = 31,\r\n\r\n    /**\r\n     * Content of lists and document libraries in the Web site will be retrieveable for anonymous users through\r\n     * SharePoint search if the list or document library has AnonymousSearchAccessList set.\r\n     */\r\n    AnonymousSearchAccessWebLists = 32,\r\n\r\n    /**\r\n     * Use features that launch client applications. Otherwise, users must work on documents\r\n     * locally and upload changes.\r\n     */\r\n    UseClientIntegration = 37,\r\n\r\n    /**\r\n     * Use SOAP, WebDAV, or Microsoft Office SharePoint Designer interfaces to access the Site.\r\n     */\r\n    UseRemoteAPIs = 38,\r\n\r\n    /**\r\n     * Manage alerts for all users of the Site.\r\n     */\r\n    ManageAlerts = 39,\r\n\r\n    /**\r\n     * Create e-mail alerts.\r\n     */\r\n    CreateAlerts = 40,\r\n\r\n    /**\r\n     * Allows a user to change his or her user information, such as adding a picture.\r\n     */\r\n    EditMyUserInfo = 41,\r\n\r\n    /**\r\n     * Enumerate permissions on Site, list, folder, document, or list item.\r\n     */\r\n    EnumeratePermissions = 63,\r\n\r\n    /**\r\n     * Has all permissions on the Site. Not available through the user interface.\r\n     */\r\n    FullMask = 65,\r\n}\r\n","import { IPrincipalInfo } from \"../types\";\r\nimport { _Web } from \"../webs/types\";\r\nimport { _File } from \"../files/types\";\r\nimport { _Item } from \"../items/types\";\r\nimport { _Folder } from \"../folders/types\";\r\n\r\nexport type ShareableQueryable = _Web | _File | _Folder | _Item;\r\n\r\n/**\r\n * Indicates the role of the sharing link\r\n */\r\nexport enum SharingRole {\r\n    None = 0,\r\n    View = 1,\r\n    Edit = 2,\r\n    Owner = 3,\r\n}\r\n\r\nexport enum SPSharedObjectType {\r\n    Unknown = 0,\r\n    File = 1,\r\n    Folder = 2,\r\n    Item = 3,\r\n    List = 4,\r\n    Web = 5,\r\n    Max = 6,\r\n}\r\n\r\nexport enum SharingDomainRestrictionMode {\r\n    None = 0,\r\n    AllowList = 1,\r\n    BlockList = 2,\r\n}\r\n\r\nexport enum SharingOperationStatusCode {\r\n    /**\r\n     * The share operation completed without errors.\r\n     */\r\n    CompletedSuccessfully = 0,\r\n    /**\r\n     * The share operation completed and generated requests for access.\r\n     */\r\n    AccessRequestsQueued = 1,\r\n    /**\r\n     * The share operation failed as there were no resolved users.\r\n     */\r\n    NoResolvedUsers = -1,\r\n    /**\r\n     * The share operation failed due to insufficient permissions.\r\n     */\r\n    AccessDenied = -2,\r\n    /**\r\n     * The share operation failed when attempting a cross site share, which is not supported.\r\n     */\r\n    CrossSiteRequestNotSupported = -3,\r\n    /**\r\n     * The sharing operation failed due to an unknown error.\r\n     */\r\n    UnknowError = -4,\r\n    /**\r\n     * The text you typed is too long. Please shorten it.\r\n     */\r\n    EmailBodyTooLong = -5,\r\n    /**\r\n     * The maximum number of unique scopes in the list has been exceeded.\r\n     */\r\n    ListUniqueScopesExceeded = -6,\r\n    /**\r\n     * The share operation failed because a sharing capability is disabled in the site.\r\n     */\r\n    CapabilityDisabled = -7,\r\n    /**\r\n     * The specified object for the share operation is not supported.\r\n     */\r\n    ObjectNotSupported = -8,\r\n    /**\r\n     * A SharePoint group cannot contain another SharePoint group.\r\n     */\r\n    NestedGroupsNotSupported = -9,\r\n}\r\n\r\nexport enum SharingLinkKind {\r\n    /**\r\n     * Uninitialized link\r\n     */\r\n    Uninitialized = 0,\r\n    /**\r\n     * Direct link to the object being shared\r\n     */\r\n    Direct = 1,\r\n    /**\r\n     * Organization-shareable link to the object being shared with view permissions\r\n     */\r\n    OrganizationView = 2,\r\n    /**\r\n     * Organization-shareable link to the object being shared with edit permissions\r\n     */\r\n    OrganizationEdit = 3,\r\n    /**\r\n     * View only anonymous link\r\n     */\r\n    AnonymousView = 4,\r\n    /**\r\n     * Read/Write anonymous link\r\n     */\r\n    AnonymousEdit = 5,\r\n    /**\r\n     * Flexible sharing Link where properties can change without affecting link URL\r\n     */\r\n    Flexible = 6,\r\n}\r\n\r\nexport interface ISharedFuncs {\r\n    /**\r\n     * Gets a link suitable for sharing for this item\r\n     *\r\n     * @param kind The type of link to share\r\n     * @param expiration The optional expiration date\r\n     */\r\n    getShareLink(kind: SharingLinkKind, expiration?: Date): Promise<IShareLinkResponse>;\r\n    /**\r\n     * Checks Permissions on the list of Users and returns back role the users have on the Item.\r\n     *\r\n     * @param recipients The array of Entities for which Permissions need to be checked.\r\n     */\r\n    checkSharingPermissions(recipients: ISharingRecipient[]): Promise<ISharingEntityPermission[]>;\r\n    /**\r\n     * Get Sharing Information.\r\n     *\r\n     * @param request The SharingInformationRequest Object.\r\n     * @param expands Expand more fields.\r\n     * \r\n     */\r\n    getSharingInformation(request?: ISharingInformationRequest, expands?: string[]): Promise<ISharingInformation>;\r\n    /**\r\n     * Gets the sharing settings of an item.\r\n     *\r\n     * @param useSimplifiedRoles Determines whether to use simplified roles.\r\n     */\r\n    getObjectSharingSettings(useSimplifiedRoles?: boolean): Promise<IObjectSharingSettings>;\r\n    /**\r\n     * Unshare this item\r\n     */\r\n    unshare(): Promise<ISharingResult>;\r\n    /**\r\n     * Deletes a sharing link by kind\r\n     *\r\n     * @param kind Deletes a sharing link by the kind of link\r\n     */\r\n    deleteSharingLinkByKind(kind: SharingLinkKind): Promise<void>;\r\n    /**\r\n     * Removes the specified link to the item.\r\n     *\r\n     * @param kind The kind of link to be deleted.\r\n     * @param shareId\r\n     */\r\n    unshareLink(kind: SharingLinkKind, shareId?: string): Promise<void>;\r\n}\r\n\r\nexport interface IShareObjectOptions {\r\n    url?: string;\r\n    loginNames?: string | string[];\r\n    role: SharingRole;\r\n    emailData?: ISharingEmailData;\r\n    group?: RoleType;\r\n    propagateAcl?: boolean;\r\n    includeAnonymousLinkInEmail?: boolean;\r\n    useSimplifiedRoles?: boolean;\r\n}\r\n\r\n/**\r\n * Represents email data.\r\n */\r\nexport interface ISharingEmailData {\r\n\r\n    /**\r\n     * The e-mail subject.\r\n     */\r\n    subject?: string;\r\n\r\n    /**\r\n     * The e-mail body.\r\n     */\r\n    body: string;\r\n}\r\n\r\nexport interface IShareLinkSettings {\r\n    /**\r\n     * The optional unique identifier of an existing sharing link to be retrieved and updated if necessary.\r\n     */\r\n    shareId?: string;\r\n\r\n    /**\r\n     * The kind of the sharing link to be created.\r\n     */\r\n    linkKind: SharingLinkKind;\r\n\r\n    /**\r\n     * A date/time string for which the format conforms to the ISO 8601:2004(E) complete representation for calendar date and time of day and\r\n     * which represents the time and date of expiry for the anonymous link. Both the minutes and hour value must be specified for the\r\n     * difference between the local and UTC time. Midnight is represented as 00:00:00.\r\n     */\r\n    expiration?: string;\r\n\r\n    /**\r\n     * The role to be used for the sharing link. This is required for Flexible links, and ignored for legacy link kinds.\r\n     */\r\n    role?: SharingRole;\r\n\r\n    /**\r\n     * Indicates if the sharing link, should support anonymous access. This is required for Flexible links, and ignored for legacy link kinds.\r\n     */\r\n    allowAnonymousAccess?: boolean;\r\n}\r\n\r\nexport interface IShareLinkRequest {\r\n\r\n    /**\r\n     * A string of JSON representing users in people picker format. Only needed if an e-mail notification should be sent.\r\n     */\r\n    peoplePickerInput?: string;\r\n\r\n    /**\r\n     * Whether to create the link or not if it doesn't exist yet.\r\n     */\r\n    createLink: boolean;\r\n\r\n    /**\r\n     * The e-mail data. Only needed if an e-mail notification should be sent.\r\n     */\r\n    emailData?: ISharingEmailData;\r\n\r\n    /**\r\n     * The settings for the sharing link to be created/updated\r\n     */\r\n    settings: IShareLinkSettings;\r\n}\r\n\r\n/**\r\n * Represents a response for sharing a link\r\n */\r\nexport interface IShareLinkResponse {\r\n    /**\r\n     * A SharingLinkInfo that represents the sharing link. Will be populated if sharing operation is returning a sharing link.\r\n     */\r\n    sharingLinkInfo: ISharingLinkInfo;\r\n}\r\n\r\nexport interface ISharingLinkInfo {\r\n\r\n    AllowsAnonymousAccess: boolean;\r\n    Created: string;\r\n    CreatedBy: IPrincipalInfo;\r\n    Expiration: string;\r\n    IsActive: boolean;\r\n    IsEditLink: boolean;\r\n    IsFormsLink: boolean;\r\n    IsUnhealthy: boolean;\r\n    LastModified: string;\r\n    LastModifiedBy: IPrincipalInfo;\r\n    LinkKind: SharingLinkKind;\r\n    ShareId: string;\r\n    Url: string;\r\n}\r\n\r\nexport interface ISharingResult {\r\n\r\n    /**\r\n     * The relative URL of a page which can be navigated to, to show permissions.\r\n     */\r\n    PermissionsPageRelativeUrl?: string;\r\n\r\n    /**\r\n     * A collection of users which have new pending access requests as a result of sharing.\r\n     */\r\n    UsersWithAccessRequests?: any[]; // SPSharingUserCollection\r\n\r\n    /**\r\n     * An enumeration which summarizes the result of the sharing operation.\r\n     */\r\n    StatusCode?: SharingOperationStatusCode;\r\n\r\n    /**\r\n     * An error message about the failure if sharing was unsuccessful.\r\n     */\r\n    ErrorMessage?: string;\r\n\r\n    /**\r\n     * A list of UserSharingResults from attempting to share a securable with unique permissions.\r\n     */\r\n    UniquelyPermissionedUsers?: IUserSharingResult[];\r\n    /**\r\n     * Groups which were granted permissions.\r\n     */\r\n    GroupsSharedWith?: any[]; // SPGroupCollection\r\n\r\n    /**\r\n     * The SharePoint group users were added to, if any were added to a group.\r\n     */\r\n    GroupUsersAddedTo?: any; // SPGroup\r\n\r\n    /**\r\n     * A list of users being added to a SharePoint permissions goup\r\n     */\r\n    UsersAddedToGroup?: IUserSharingResult[];\r\n\r\n    /**\r\n     * A list of SPInvitationCreationResult for external users being invited to have access.\r\n     */\r\n    InvitedUsers?: IInvitationCreationResult[];\r\n\r\n    /**\r\n     * The name of the securable being shared.\r\n     */\r\n    Name?: string;\r\n\r\n    /**\r\n     * The url of the securable being shared.\r\n     */\r\n    Url?: string;\r\n\r\n    /**\r\n     * IconUrl\r\n     */\r\n    IconUrl?: string;\r\n}\r\n\r\nexport interface IInvitationCreationResult {\r\n    Succeeded?: boolean;\r\n    Email?: string;\r\n    InvitationLink?: string;\r\n}\r\n\r\nexport interface IUserSharingResult {\r\n    IsUserKnown?: boolean;\r\n    Status?: boolean;\r\n    Message?: string;\r\n    User?: string;\r\n    DisplayName?: string;\r\n    Email?: string;\r\n    CurrentRole?: SharingRole;\r\n    AllowedRoles?: SharingRole[];\r\n    InvitationLink?: string;\r\n}\r\n\r\nexport interface ISharingRecipient {\r\n    email?: string;\r\n    alias?: string;\r\n}\r\n\r\nexport interface ISharingEntityPermission {\r\n    /**\r\n     * The Input Entity provided to the Call.\r\n     */\r\n    inputEntity: string;\r\n    /**\r\n     * The Resolved Entity after resolving using PeoplePicker API.\r\n     */\r\n    resolvedEntity: string;\r\n    /**\r\n     * Does the Entity have Access to the Securable Object\r\n     */\r\n    hasAccess: boolean;\r\n    /**\r\n     * Role of the Entity on ListItem\r\n     */\r\n    role: SharingRole;\r\n}\r\n\r\nexport interface ISharingInformationRequest {\r\n    /**\r\n     * Max Principal's to return.\r\n     */\r\n    maxPrincipalsToReturn: number;\r\n    /**\r\n     * Supported Features (For future use by Office Client).\r\n     */\r\n    clientSupportedFeatures: string;\r\n}\r\n\r\nexport interface IObjectSharingSettings {\r\n    /**\r\n     * The URL pointing to the containing SPWeb object\r\n     */\r\n    WebUrl: string;\r\n    /**\r\n     * The unique ID of the parent list (if applicable)\r\n     */\r\n    ListId?: string;\r\n    /**\r\n     * The list item ID (if applicable)\r\n     */\r\n    ItemId?: string;\r\n    /**\r\n     * The object title\r\n     */\r\n    ItemName: string;\r\n    /**\r\n     * The server relative object URL\r\n     */\r\n    ItemUrl: string;\r\n    /**\r\n     * Contains information about the sharing state of a shareable object\r\n     */\r\n    ObjectSharingInformation: any; // SPObjectSharingInformation\r\n    /**\r\n     * Boolean indicating whether the sharing context operates under the access request mode\r\n     */\r\n    AccessRequestMode: boolean;\r\n    /**\r\n     * Boolean indicating whether the sharing context operates under the permissions only mode\r\n     * (i.e. adding to a group or hiding the groups dropdown in the SharePoint UI)\r\n     */\r\n    PermissionsOnlyMode: boolean;\r\n    /**\r\n     * URL of the site from which the shared object inherits permissions\r\n     */\r\n    InheritingWebLink: string;\r\n    /**\r\n     * Boolean flag denoting if guest users are enabled for the site collection\r\n     */\r\n    ShareByEmailEnabled: boolean;\r\n    /**\r\n     * Boolean indicating whether the current user is a guest user\r\n     */\r\n    IsGuestUser: boolean;\r\n    /**\r\n     * Boolean indicating whether the site has the standard \"Editor\" role\r\n     */\r\n    HasEditRole: boolean;\r\n    /**\r\n     * Boolean indicating whether the site has the standard \"Reader\" role\r\n     */\r\n    HasReadRole: boolean;\r\n    /**\r\n     * Boolean indicating whether the object to share is a picture library\r\n     */\r\n    IsPictureLibrary: boolean;\r\n    /**\r\n     * Boolean indicating whether the folder object can be shared\r\n     */\r\n    CanShareFolder: boolean;\r\n    /**\r\n     * Boolean indicating whether email invitations can be sent\r\n     */\r\n    CanSendEmail: boolean;\r\n    /**\r\n     * Default share link type\r\n     */\r\n    DefaultShareLinkType: SharingLinkKind;\r\n    /**\r\n     * Boolean indicating whether the object to share supports ACL propagation\r\n     */\r\n    SupportsAclPropagation: boolean;\r\n    /**\r\n     * Boolean indicating whether the current user can only share within the tenancy\r\n     */\r\n    CanCurrentUserShareInternally: boolean;\r\n    /**\r\n     * Boolean indicating whether the current user can share outside the tenancy, by inviting external users\r\n     */\r\n    CanCurrentUserShareExternally: boolean;\r\n    /**\r\n     * Boolean indicating whether the current user can retrieve an anonymous View link, if one has already been created\r\n     * If one has not been created, the user cannot create one\r\n     */\r\n    CanCurrentUserRetrieveReadonlyLink: boolean;\r\n    /**\r\n     * Boolean indicating whether the current user can create or disable an anonymous Edit link\r\n     */\r\n    CanCurrentUserManageReadonlyLink: boolean;\r\n    /**\r\n     * Boolean indicating whether the current user can retrieve an anonymous Edit link, if one has already been created\r\n     * If one has not been created, the user cannot create one\r\n     */\r\n    CanCurrentUserRetrieveReadWriteLink: boolean;\r\n    /**\r\n     * Boolean indicating whether the current user can create or disable an anonymous Edit link\r\n     */\r\n    CanCurrentUserManageReadWriteLink: boolean;\r\n    /**\r\n     * Boolean indicating whether the current user can retrieve an organization View link, if one has already been created\r\n     * If one has not been created, the user cannot create one\r\n     */\r\n    CanCurrentUserRetrieveOrganizationReadonlyLink: boolean;\r\n    /**\r\n     * Boolean indicating whether the current user can create or disable an organization Edit link\r\n     */\r\n    CanCurrentUserManageOrganizationReadonlyLink: boolean;\r\n    /**\r\n     * Boolean indicating whether the current user can retrieve an organization Edit link, if one has already been created\r\n     * If one has not been created, the user cannot create one\r\n     */\r\n    CanCurrentUserRetrieveOrganizationReadWriteLink: boolean;\r\n    /**\r\n     * Boolean indicating whether the current user can create or disable an organization Edit link\r\n     */\r\n    CanCurrentUserManageOrganizationReadWriteLink: boolean;\r\n    /**\r\n     * Boolean indicating whether the current user can make use of Share-By-Link\r\n     */\r\n    CanSendLink: boolean;\r\n    /**\r\n     * Boolean indicating whether the client logic should warn the user\r\n     * that they are about to share with external email addresses.\r\n     */\r\n    ShowExternalSharingWarning: boolean;\r\n    /**\r\n     * A list of SharingPermissionInformation objects that can be used to share\r\n     */\r\n    SharingPermissions: any[]; // SPSharingPermissionInformationCollection\r\n    /**\r\n     * A dictionary object that lists the display name and the id of\r\n     * the SharePoint simplified roles (edit, view)\r\n     */\r\n    SimplifiedRoles: { [key: string]: string };\r\n    /**\r\n     * A dictionary object that lists the display name and the id of the SharePoint groups\r\n     */\r\n    GroupsList: { [key: string]: string };\r\n    /**\r\n     * A dictionary object that lists the display name and the id of the SharePoint regular roles\r\n     */\r\n    Roles: { [key: string]: string };\r\n    /**\r\n     * An object containing the SharePoint UI specific sharing settings.\r\n     */\r\n    SharePointSettings: any; // SharePointSharingSettings\r\n    /**\r\n     * Boolean indicating whether the current user is a site collection administrator\r\n     */\r\n    IsUserSiteAdmin: boolean;\r\n    /**\r\n     * A value that indicates number of days an anonymous link can be valid before it expires\r\n     */\r\n    RequiredAnonymousLinkExpirationInDays: number;\r\n}\r\n\r\nexport interface ISharingInformation {\r\n    /**\r\n     * External Sharing.\r\n     */\r\n    canAddExternalPrincipal?: boolean;\r\n    /**\r\n     * Internal Sharing.\r\n     */\r\n    canAddInternalPrincipal?: boolean;\r\n    /**\r\n     * Can Send Email.\r\n     */\r\n    canSendEmail?: boolean;\r\n    /**\r\n     * Can Use Simplified Roles present in Roles Enum.\r\n     */\r\n    canUseSimplifiedRoles?: boolean;\r\n    /**\r\n     * Has Unique Permissions.\r\n     */\r\n    hasUniquePermissions?: boolean;\r\n    /**\r\n     * Current Users Role on the Item.\r\n     */\r\n    currentRole?: SharingRole;\r\n    /**\r\n     * Does the User+Item require Approval from Admin for Sharing.\r\n     */\r\n    requiresAccessApproval?: boolean;\r\n    /**\r\n     * (Owners only)Whether there are pending access requests for the securable object.\r\n     */\r\n    hasPendingAccessRequests?: boolean;\r\n    /**\r\n     * (Owners only)The link to the access requests page for the securable object, or an empty string if the link is not available.\r\n     */\r\n    pendingAccessRequestsLink?: string;\r\n    /**\r\n     * sharedObjectType\r\n     */\r\n    sharedObjectType?: SPSharedObjectType;\r\n    /**\r\n     * Url for the Securable Object (Encoded).\r\n     */\r\n    directUrl?: string;\r\n    /**\r\n     * Parent Web Url for the Securable Object (Encoded).\r\n     */\r\n    webUrl?: string;\r\n    /**\r\n     * Default SharingLinkKind.\r\n     */\r\n    defaultLinkKind?: SharingLinkKind;\r\n    /**\r\n     * Tenant's SharingDomainRestrictionMode.\r\n     */\r\n    domainRestrictionMode?: SharingDomainRestrictionMode;\r\n    /**\r\n     * Tenant's RestrictedDomains.\r\n     */\r\n    RestrictedDomains?: string;\r\n    /**\r\n     * Tenant's Anonymous Link Expiration Restriction in Days.\r\n     */\r\n    anonymousLinkExpirationRestrictionDays?: number;\r\n    /**\r\n     * The PermissionCollection that are on the Securable Object (Princpals & Links)\r\n     */\r\n    permissionsInformation?: any; // PermissionCollection\r\n    /**\r\n     * PickerSettings used by the PeoplePicker Control.\r\n     */\r\n    pickerSettings?: any; // PickerSettings\r\n}\r\n\r\nexport enum RoleType {\r\n    None = 0,\r\n    Guest = 1,\r\n    Reader = 2,\r\n    Contributor = 3,\r\n    WebDesigner = 4,\r\n    Administrator = 5,\r\n}\r\n","import {\r\n    _SharePointQueryableInstance,\r\n    _SharePointQueryableCollection,\r\n    spInvokableFactory,\r\n} from \"../sharepointqueryable\";\r\nimport { SiteUsers, ISiteUsers } from \"../site-users/types\";\r\nimport { assign, ITypedHash, hOP } from \"@pnp/common\";\r\nimport { metadata } from \"../utils/metadata\";\r\nimport { body } from \"@pnp/odata\";\r\nimport { defaultPath } from \"../decorators\";\r\nimport { spPost } from \"../operations\";\r\nimport { tag } from \"../telemetry\";\r\n\r\n@defaultPath(\"sitegroups\")\r\nexport class _SiteGroups extends _SharePointQueryableCollection<ISiteGroupInfo[]> {\r\n\r\n    /**\t\r\n     * Gets a group from the collection by id\t\r\n     *\t\r\n     * @param id The id of the group to retrieve\t\r\n     */\r\n    public getById(id: number): ISiteGroup {\r\n        return tag.configure(SiteGroup(this).concat(`(${id})`), \"sgs.getById\");\r\n    }\r\n\r\n    /**\r\n     * Adds a new group to the site collection\r\n     *\r\n     * @param properties The group properties object of property names and values to be set for the group\r\n     */\r\n    public async add(properties: ITypedHash<any>): Promise<IGroupAddResult> {\r\n\r\n        const postBody = body(assign(metadata(\"SP.Group\"), properties));\r\n\r\n        const data = await spPost(tag.configure(this, \"sgs.add\"), postBody);\r\n        return {\r\n            data,\r\n            group: this.getById(data.Id),\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets a group from the collection by name\r\n     *\r\n     * @param groupName The name of the group to retrieve\r\n     */\r\n    public getByName(groupName: string): ISiteGroup {\r\n        return tag.configure(SiteGroup(this, `getByName('${groupName}')`), \"sgs.getByName\");\r\n    }\r\n\r\n    /**\r\n     * Removes the group with the specified member id from the collection\r\n     *\r\n     * @param id The id of the group to remove\r\n     */\r\n    @tag(\"sgs.removeById\")\r\n    public removeById(id: number): Promise<void> {\r\n        return spPost(this.clone(SiteGroups, `removeById('${id}')`));\r\n    }\r\n\r\n    /**\r\n     * Removes the cross-site group with the specified name from the collection\r\n     *\r\n     * @param loginName The name of the group to remove\r\n     */\r\n    @tag(\"sgs.removeByLoginName\")\r\n    public removeByLoginName(loginName: string): Promise<any> {\r\n        return spPost(this.clone(SiteGroups, `removeByLoginName('${loginName}')`));\r\n    }\r\n}\r\nexport interface ISiteGroups extends _SiteGroups { }\r\nexport const SiteGroups = spInvokableFactory<ISiteGroups>(_SiteGroups);\r\n\r\nexport class _SiteGroup extends _SharePointQueryableInstance<ISiteGroupInfo> {\r\n\r\n    /**\r\n     * Gets the users for this group\r\n     *\r\n     */\r\n    public get users(): ISiteUsers {\r\n        return tag.configure(SiteUsers(this, \"users\"), \"sg.users\");\r\n    }\r\n\r\n    /**\r\n     * Updates the group with the given property values\r\n     * \r\n     * @param props The group properties object of property names and values to be set for the group\r\n     */\r\n    public update = this._update<IGroupUpdateResult, ITypedHash<any>>(\"SP.Group\", (d, p) => {\r\n\r\n        let retGroup: ISiteGroup = this;\r\n\r\n        if (hOP(p, \"Title\")) {\r\n            /* tslint:disable-next-line no-string-literal */\r\n            retGroup = this.getParent(SiteGroup, this.parentUrl, `getByName('${p[\"Title\"]}')`);\r\n        }\r\n\r\n        return {\r\n            data: d,\r\n            group: retGroup,\r\n        };\r\n    });\r\n\r\n    /**\r\n     * Set the owner of a group using a user id\r\n     * @param userId the id of the user that will be set as the owner of the current group\r\n     */\r\n    @tag(\"sg.setUserAsOwner\")\r\n    public setUserAsOwner(userId: number): Promise<any> {\r\n        return spPost(this.clone(SiteGroup, `SetUserAsOwner(${userId})`));\r\n    }\r\n}\r\nexport interface ISiteGroup extends _SiteGroup { }\r\nexport const SiteGroup = spInvokableFactory<ISiteGroup>(_SiteGroup);\r\n\r\n/**\r\n * Result from updating a group\r\n *\r\n */\r\nexport interface IGroupUpdateResult {\r\n    group: ISiteGroup;\r\n    data: any;\r\n}\r\n\r\n/**\r\n * Results from adding a group\r\n *\r\n */\r\nexport interface IGroupAddResult {\r\n    group: ISiteGroup;\r\n    data: any;\r\n}\r\n\r\nexport interface ISiteGroupInfo {\r\n    AllowMembersEditMembership: boolean;\r\n    AllowRequestToJoinLeave: boolean;\r\n    AutoAcceptRequestToJoinLeave: boolean;\r\n    Description: string;\r\n    Id: number;\r\n    IsHiddenInUI: boolean;\r\n    LoginName: string;\r\n    OnlyAllowMembersViewMembership: boolean;\r\n    OwnerTitle: string;\r\n    PrincipalType: number;\r\n    RequestToJoinLeaveEmailSetting: string | null;\r\n    Title: string;\r\n}\r\n","import { SecurableQueryable, IBasePermissions, PermissionKind } from \"./types\";\r\nimport { _SharePointQueryableInstance, _SharePointQueryable, SharePointQueryableInstance, SharePointQueryable } from \"../sharepointqueryable\";\r\nimport { hOP } from \"@pnp/common\";\r\nimport { spPost } from \"../operations\";\r\n\r\n/**\r\n* Gets the effective permissions for the user supplied\r\n*\r\n* @param loginName The claims username for the user (ex: i:0#.f|membership|user@domain.com)\r\n*/\r\nexport async function getUserEffectivePermissions(this: SecurableQueryable, loginName: string): Promise<IBasePermissions> {\r\n\r\n    const q = this.clone(SharePointQueryableInstance, \"getUserEffectivePermissions(@user)\");\r\n    q.query.set(\"@user\", `'${encodeURIComponent(loginName)}'`);\r\n    const r = await q.get<any>();\r\n    // handle verbose mode\r\n    return hOP(r, \"GetUserEffectivePermissions\") ? r.GetUserEffectivePermissions : r;\r\n}\r\n\r\n/**\r\n * Gets the effective permissions for the current user\r\n */\r\nexport async function getCurrentUserEffectivePermissions(this: SecurableQueryable): Promise<IBasePermissions> {\r\n\r\n    const q = this.clone(SharePointQueryable, \"EffectiveBasePermissions\");\r\n    return q.get<any>().then(r => {\r\n        // handle verbose mode\r\n        return hOP(r, \"EffectiveBasePermissions\") ? r.EffectiveBasePermissions : r;\r\n    });\r\n}\r\n\r\n/**\r\n * Breaks the security inheritance at this level optinally copying permissions and clearing subscopes\r\n *\r\n * @param copyRoleAssignments If true the permissions are copied from the current parent scope\r\n * @param clearSubscopes Optional. true to make all child securable objects inherit role assignments from the current object\r\n */\r\nexport async function breakRoleInheritance(this: SecurableQueryable, copyRoleAssignments = false, clearSubscopes = false): Promise<void> {\r\n    await spPost(this.clone(SharePointQueryable, `breakroleinheritance(copyroleassignments=${copyRoleAssignments}, clearsubscopes=${clearSubscopes})`));\r\n}\r\n\r\n/**\r\n * Removes the local role assignments so that it re-inherit role assignments from the parent object.\r\n *\r\n */\r\nexport async function resetRoleInheritance(this: SecurableQueryable): Promise<void> {\r\n    await spPost(this.clone(SharePointQueryable, \"resetroleinheritance\"));\r\n}\r\n\r\n/**\r\n * Determines if a given user has the appropriate permissions\r\n *\r\n * @param loginName The user to check\r\n * @param permission The permission being checked\r\n */\r\nexport async function userHasPermissions(this: SecurableQueryable, loginName: string, permission: PermissionKind): Promise<boolean> {\r\n\r\n    const perms = await getUserEffectivePermissions.call(this, loginName);\r\n    return this.hasPermissions(perms, permission);\r\n}\r\n\r\n/**\r\n * Determines if the current user has the requested permissions\r\n *\r\n * @param permission The permission we wish to check\r\n */\r\nexport async function currentUserHasPermissions(this: SecurableQueryable, permission: PermissionKind): Promise<boolean> {\r\n\r\n    const perms = await getCurrentUserEffectivePermissions.call(this);\r\n    return this.hasPermissions(perms, permission);\r\n}\r\n\r\n/**\r\n * Taken from sp.js, checks the supplied permissions against the mask\r\n *\r\n * @param value The security principal's permissions on the given object\r\n * @param perm The permission checked against the value\r\n */\r\n/* tslint:disable:no-bitwise */\r\nexport function hasPermissions(value: IBasePermissions, perm: PermissionKind): boolean {\r\n\r\n    if (!perm) {\r\n        return true;\r\n    }\r\n    if (perm === PermissionKind.FullMask) {\r\n        return (value.High & 32767) === 32767 && value.Low === 65535;\r\n    }\r\n\r\n    perm = perm - 1;\r\n    let num = 1;\r\n\r\n    if (perm >= 0 && perm < 32) {\r\n        num = num << perm;\r\n        return 0 !== (value.Low & num);\r\n    } else if (perm >= 32 && perm < 64) {\r\n        num = num << perm - 32;\r\n        return 0 !== (value.High & num);\r\n    }\r\n    return false;\r\n}\r\n/* tslint:enable */\r\n","import { addProp } from \"@pnp/odata\";\r\nimport { _Item } from \"../items/types\";\r\nimport { RoleAssignments, ISecurableMethods } from \"./types\";\r\nimport { _SharePointQueryableInstance, SharePointQueryableInstance } from \"../sharepointqueryable\";\r\nimport {\r\n    getUserEffectivePermissions,\r\n    getCurrentUserEffectivePermissions,\r\n    breakRoleInheritance,\r\n    resetRoleInheritance,\r\n    userHasPermissions,\r\n    currentUserHasPermissions,\r\n    hasPermissions,\r\n} from \"./funcs\";\r\n\r\ndeclare module \"../items/types\" {\r\n    interface _Item extends ISecurableMethods { }\r\n    interface IItem extends ISecurableMethods { }\r\n}\r\n\r\naddProp(_Item, \"roleAssignments\", RoleAssignments);\r\naddProp(_Item, \"firstUniqueAncestorSecurableObject\", SharePointQueryableInstance);\r\n\r\n_Item.prototype.getUserEffectivePermissions = getUserEffectivePermissions;\r\n_Item.prototype.getCurrentUserEffectivePermissions = getCurrentUserEffectivePermissions;\r\n_Item.prototype.breakRoleInheritance = breakRoleInheritance;\r\n_Item.prototype.resetRoleInheritance = resetRoleInheritance;\r\n_Item.prototype.userHasPermissions = userHasPermissions;\r\n_Item.prototype.currentUserHasPermissions = currentUserHasPermissions;\r\n_Item.prototype.hasPermissions = hasPermissions;\r\n","import { addProp } from \"@pnp/odata\";\r\nimport { _List } from \"../lists/types\";\r\nimport { RoleAssignments, ISecurableMethods } from \"./types\";\r\nimport { SharePointQueryableInstance } from \"../sharepointqueryable\";\r\nimport {\r\n    getUserEffectivePermissions,\r\n    getCurrentUserEffectivePermissions,\r\n    breakRoleInheritance,\r\n    resetRoleInheritance,\r\n    userHasPermissions,\r\n    currentUserHasPermissions,\r\n    hasPermissions,\r\n} from \"./funcs\";\r\n\r\ndeclare module \"../lists/types\" {\r\n    interface _List extends ISecurableMethods { }\r\n    interface IList extends ISecurableMethods { }\r\n}\r\n\r\naddProp(_List, \"roleAssignments\", RoleAssignments);\r\naddProp(_List, \"firstUniqueAncestorSecurableObject\", SharePointQueryableInstance);\r\n\r\n_List.prototype.getUserEffectivePermissions = getUserEffectivePermissions;\r\n_List.prototype.getCurrentUserEffectivePermissions = getCurrentUserEffectivePermissions;\r\n_List.prototype.breakRoleInheritance = breakRoleInheritance;\r\n_List.prototype.resetRoleInheritance = resetRoleInheritance;\r\n_List.prototype.userHasPermissions = userHasPermissions;\r\n_List.prototype.currentUserHasPermissions = currentUserHasPermissions;\r\n_List.prototype.hasPermissions = hasPermissions;\r\n","import { addProp } from \"@pnp/odata\";\r\nimport { _Web } from \"../webs/types\";\r\nimport { RoleDefinitions, IRoleDefinitions, RoleAssignments, ISecurableMethods } from \"./types\";\r\nimport { SharePointQueryableInstance } from \"../sharepointqueryable\";\r\nimport {\r\n    getUserEffectivePermissions,\r\n    getCurrentUserEffectivePermissions,\r\n    breakRoleInheritance,\r\n    resetRoleInheritance,\r\n    userHasPermissions,\r\n    currentUserHasPermissions,\r\n    hasPermissions,\r\n} from \"./funcs\";\r\n\r\ndeclare module \"../webs/types\" {\r\n    interface _Web extends ISecurableMethods {\r\n        roleDefinitions: IRoleDefinitions;\r\n    }\r\n    interface IWeb extends ISecurableMethods {\r\n        roleDefinitions: IRoleDefinitions;\r\n    }\r\n}\r\n\r\naddProp(_Web, \"roleDefinitions\", RoleDefinitions);\r\naddProp(_Web, \"roleAssignments\", RoleAssignments);\r\naddProp(_Web, \"firstUniqueAncestorSecurableObject\", SharePointQueryableInstance);\r\n\r\n_Web.prototype.getUserEffectivePermissions = getUserEffectivePermissions;\r\n_Web.prototype.getCurrentUserEffectivePermissions = getCurrentUserEffectivePermissions;\r\n_Web.prototype.breakRoleInheritance = breakRoleInheritance;\r\n_Web.prototype.resetRoleInheritance = resetRoleInheritance;\r\n_Web.prototype.userHasPermissions = userHasPermissions;\r\n_Web.prototype.currentUserHasPermissions = currentUserHasPermissions;\r\n_Web.prototype.hasPermissions = hasPermissions;\r\n","import { body } from \"@pnp/odata\";\r\nimport { jsS, assign } from \"@pnp/common\";\r\nimport { SharePointQueryableCollection, _SharePointQueryableInstance, SharePointQueryableInstance } from \"../sharepointqueryable\";\r\nimport { extractWebUrl } from \"../utils/extractweburl\";\r\nimport { Web, _Web } from \"../webs/types\";\r\nimport { _File } from \"../files/types\";\r\nimport {\r\n    ShareableQueryable,\r\n    ISharingResult,\r\n    SharingRole,\r\n    IShareObjectOptions,\r\n    SharingLinkKind,\r\n    IShareLinkResponse,\r\n    ISharingInformationRequest,\r\n    ISharingRecipient,\r\n    ISharingEntityPermission,\r\n    ISharingInformation,\r\n    IObjectSharingSettings,\r\n    ISharingEmailData,\r\n    RoleType,\r\n} from \"./types\";\r\nimport { spPost } from \"../operations\";\r\nimport { tag } from \"../telemetry\";\r\nimport { RoleDefinitions } from \"../security/types\";\r\nimport { emptyGuid } from \"../splibconfig\";\r\n\r\n/**\r\n * Shares an object based on the supplied options\r\n *\r\n * @param options The set of options to send to the ShareObject method\r\n * @param bypass If true any processing is skipped and the options are sent directly to the ShareObject method\r\n */\r\nexport async function shareObject(o: ShareableQueryable, options: IShareObjectOptions, bypass = false): Promise<ISharingResult> {\r\n\r\n    if (bypass) {\r\n\r\n        // if the bypass flag is set send the supplied parameters directly to the service\r\n        return sendShareObjectRequest(o, options);\r\n    }\r\n\r\n    // extend our options with some defaults\r\n    options = assign(options, {\r\n        group: null,\r\n        includeAnonymousLinkInEmail: false,\r\n        propagateAcl: false,\r\n        useSimplifiedRoles: true,\r\n    }, true);\r\n\r\n    const roleValue = await getRoleValue(options.role, options.group);\r\n\r\n    // handle the multiple input types\r\n    if (!Array.isArray(options.loginNames)) {\r\n        options.loginNames = [options.loginNames];\r\n    }\r\n\r\n    const userStr = jsS(options.loginNames.map(Key => ({ Key })));\r\n\r\n    let postBody = {\r\n        peoplePickerInput: userStr,\r\n        roleValue: roleValue,\r\n        url: options.url,\r\n    };\r\n\r\n    if (options.emailData !== undefined && options.emailData !== null) {\r\n        postBody = assign(postBody, {\r\n            emailBody: options.emailData.body,\r\n            emailSubject: options.emailData.subject !== undefined ? options.emailData.subject : \"Shared with you.\",\r\n            sendEmail: true,\r\n        });\r\n    }\r\n\r\n    return sendShareObjectRequest(o, postBody);\r\n}\r\n\r\n/**\r\n * Gets a sharing link for the supplied\r\n *\r\n * @param kind The kind of link to share\r\n * @param expiration The optional expiration for this link\r\n */\r\nexport function getShareLink(this: ShareableQueryable, kind: SharingLinkKind, expiration: Date = null): Promise<IShareLinkResponse> {\r\n\r\n    // date needs to be an ISO string or null\r\n    const expString = expiration !== null ? expiration.toISOString() : null;\r\n\r\n    // clone using the factory and send the request\r\n    const o = tag.configure(this.clone(SharePointQueryableInstance, \"shareLink\"), \"sh.getShareLink\");\r\n    return spPost<IShareLinkResponse>(o, body({\r\n        request: {\r\n            createLink: true,\r\n            emailData: null,\r\n            settings: {\r\n                expiration: expString,\r\n                linkKind: kind,\r\n            },\r\n        },\r\n    }));\r\n}\r\n\r\n/**\r\n * Checks Permissions on the list of Users and returns back role the users have on the Item.\r\n *\r\n * @param recipients The array of Entities for which Permissions need to be checked.\r\n */\r\nexport function checkPermissions(this: ShareableQueryable, recipients: ISharingRecipient[]): Promise<ISharingEntityPermission[]> {\r\n\r\n    const o = tag.configure(this.clone(SharePointQueryableInstance, \"checkPermissions\"), \"sh.checkPermissions\");\r\n    return spPost<ISharingEntityPermission[]>(o, body({ recipients }));\r\n}\r\n\r\n/**\r\n * Get Sharing Information.\r\n *\r\n * @param request The SharingInformationRequest Object.\r\n * @param expands Expand more fields.\r\n * \r\n */\r\nexport function getSharingInformation(this: ShareableQueryable, request: ISharingInformationRequest = null, expands: string[] = []): Promise<ISharingInformation> {\r\n\r\n    const o = tag.configure(this.clone(SharePointQueryableInstance, \"getSharingInformation\"), \"sh.getSharingInformation\");\r\n    return spPost(o.expand(...expands), body({ request }));\r\n}\r\n\r\n/**\r\n * Gets the sharing settings of an item.\r\n *\r\n * @param useSimplifiedRoles Determines whether to use simplified roles.\r\n */\r\nexport function getObjectSharingSettings(this: ShareableQueryable, useSimplifiedRoles = true): Promise<IObjectSharingSettings> {\r\n\r\n    const o = tag.configure(this.clone(SharePointQueryableInstance, \"getObjectSharingSettings\"), \"sh.getObjectSharingSettings\");\r\n    return spPost<IObjectSharingSettings>(o, body({ useSimplifiedRoles }));\r\n}\r\n\r\n/**\r\n * Unshares this object\r\n */\r\nexport function unshareObject(this: ShareableQueryable): Promise<ISharingResult> {\r\n\r\n    return spPost(tag.configure(this.clone(SharePointQueryableInstance, \"unshareObject\"), \"sh.unshareObject\"));\r\n}\r\n\r\n/**\r\n * Deletes a link by type\r\n *\r\n * @param kind Deletes a sharing link by the kind of link\r\n */\r\nexport function deleteLinkByKind(this: ShareableQueryable, linkKind: SharingLinkKind): Promise<void> {\r\n\r\n    return spPost(tag.configure(this.clone(SharePointQueryableInstance, \"deleteLinkByKind\"), \"sh.deleteLinkByKind\"), body({ linkKind }));\r\n}\r\n\r\n/**\r\n * Removes the specified link to the item.\r\n *\r\n * @param kind The kind of link to be deleted.\r\n * @param shareId\r\n */\r\nexport function unshareLink(this: ShareableQueryable, linkKind: SharingLinkKind, shareId = emptyGuid): Promise<void> {\r\n\r\n    return spPost(tag.configure(this.clone(SharePointQueryableInstance, \"unshareLink\"), \"sh.unshareLink\"), body({ linkKind, shareId }));\r\n}\r\n\r\n/**\r\n * Shares this instance with the supplied users\r\n *\r\n * @param loginNames Resolved login names to share\r\n * @param role The role\r\n * @param requireSignin True to require the user is authenticated, otherwise false\r\n * @param propagateAcl True to apply this share to all children\r\n * @param emailData If supplied an email will be sent with the indicated properties\r\n */\r\nexport async function shareWith(\r\n    o: ShareableQueryable,\r\n    loginNames: string | string[],\r\n    role: SharingRole,\r\n    requireSignin = false,\r\n    propagateAcl = false,\r\n    emailData?: ISharingEmailData): Promise<ISharingResult> {\r\n\r\n    // handle the multiple input types\r\n    if (!Array.isArray(loginNames)) {\r\n        loginNames = [loginNames];\r\n    }\r\n\r\n    const userStr = jsS(loginNames.map(login => { return { Key: login }; }));\r\n    const roleFilter = role === SharingRole.Edit ? RoleType.Contributor : RoleType.Reader;\r\n\r\n    // start by looking up the role definition id we need to set the roleValue\r\n    // remove need to reference Web here, which created a circular build issue\r\n    const w = SharePointQueryableCollection(\"_api/web\", \"roledefinitions\");\r\n    const def = await w.select(\"Id\").filter(`RoleTypeKind eq ${roleFilter}`).get();\r\n    if (!Array.isArray(def) || def.length < 1) {\r\n        throw Error(`Could not locate a role defintion with RoleTypeKind ${roleFilter}`);\r\n    }\r\n    let postBody = {\r\n        includeAnonymousLinkInEmail: requireSignin,\r\n        peoplePickerInput: userStr,\r\n        propagateAcl: propagateAcl,\r\n        roleValue: `role:${def[0].Id}`,\r\n        useSimplifiedRoles: true,\r\n    };\r\n    if (emailData !== undefined) {\r\n        postBody = assign(postBody, {\r\n            emailBody: emailData.body,\r\n            emailSubject: emailData.subject !== undefined ? emailData.subject : \"\",\r\n            sendEmail: true,\r\n        });\r\n    }\r\n\r\n    return spPost<ISharingResult>(tag.configure(o.clone(SharePointQueryableInstance, \"shareObject\"), \"sh.shareWith\"), body(postBody));\r\n}\r\n\r\nfunction sendShareObjectRequest(o: ShareableQueryable, options: any): Promise<ISharingResult> {\r\n\r\n    const w = tag.configure(Web(extractWebUrl(o.toUrl()), \"/_api/SP.Web.ShareObject\"), \"sh.sendShareObjectRequest\");\r\n    return spPost(w.expand(\"UsersWithAccessRequests\", \"GroupsSharedWith\"), body(options));\r\n}\r\n\r\n/**\r\n * Calculates the roleValue string used in the sharing query\r\n *\r\n * @param role The Sharing Role\r\n * @param group The Group type\r\n */\r\nasync function getRoleValue(role: SharingRole, group: RoleType): Promise<string> {\r\n\r\n    // we will give group precedence, because we had to make a choice\r\n    if (group !== undefined && group !== null) {\r\n\r\n        switch (group) {\r\n            case RoleType.Contributor:\r\n                const g1 = await Web(\"_api/web\", \"associatedmembergroup\").select(\"Id\")<{ Id: number; }>();\r\n                return `group: ${g1.Id}`;\r\n            case RoleType.Reader:\r\n            case RoleType.Guest:\r\n                const g2 = await Web(\"_api/web\", \"associatedvisitorgroup\").select(\"Id\")<{ Id: number; }>();\r\n                return `group: ${g2.Id}`;\r\n            default:\r\n                throw Error(\"Could not determine role value for supplied value. Contributor, Reader, and Guest are supported\");\r\n        }\r\n    } else {\r\n\r\n        const roleFilter = role === SharingRole.Edit ? RoleType.Contributor : RoleType.Reader;\r\n        const def = await RoleDefinitions(\"_api/web\").select(\"Id\").top(1).filter(`RoleTypeKind eq ${roleFilter}`)<{ Id: number; }[]>();\r\n        if (def.length < 1) {\r\n            throw Error(\"Could not locate associated role definition for supplied role. Edit and View are supported\");\r\n        }\r\n        return `role: ${def[0].Id}`;\r\n    }\r\n}\r\n\r\n","import { _File } from \"../files/types\";\r\nimport {\r\n    ISharingEmailData,\r\n    ISharingResult,\r\n    SharingRole,\r\n    ISharedFuncs,\r\n} from \"./types\";\r\nimport {\r\n    shareWith,\r\n    getShareLink,\r\n    checkPermissions,\r\n    getSharingInformation,\r\n    getObjectSharingSettings,\r\n    unshareObject,\r\n    deleteLinkByKind,\r\n    unshareLink,\r\n} from \"./funcs\";\r\n\r\ndeclare module \"../files/types\" {\r\n    interface _File extends ISharedFuncs {\r\n        shareWith(loginNames: string | string[], role?: SharingRole, requireSignin?: boolean, emailData?: ISharingEmailData): Promise<ISharingResult>;\r\n    }\r\n    interface IFile extends ISharedFuncs {\r\n        /**\r\n         * Shares this item with one or more users\r\n         *\r\n         * @param loginNames string or string[] of resolved login names to which this item will be shared\r\n         * @param role The role (View | Edit) applied to the share\r\n         * @param shareEverything Share everything in this folder, even items with unique permissions.\r\n         * @param requireSignin If true the user must signin to view link, otherwise anyone with the link can access the resource\r\n         * @param emailData Optional, if inlucded an email will be sent. Note subject currently has no effect.\r\n         */\r\n        shareWith(loginNames: string | string[], role?: SharingRole, requireSignin?: boolean, emailData?: ISharingEmailData): Promise<ISharingResult>;\r\n    }\r\n}\r\n\r\n_File.prototype.shareWith = function (\r\n    this: _File,\r\n    loginNames: string | string[],\r\n    role: SharingRole = SharingRole.View,\r\n    requireSignin = false,\r\n    emailData?: ISharingEmailData): Promise<ISharingResult> {\r\n\r\n    return shareWith(this, loginNames, role, requireSignin, false, emailData);\r\n};\r\n\r\n_File.prototype.getShareLink = getShareLink;\r\n_File.prototype.checkSharingPermissions = checkPermissions;\r\n_File.prototype.getSharingInformation = getSharingInformation;\r\n_File.prototype.getObjectSharingSettings = getObjectSharingSettings;\r\n_File.prototype.unshare = unshareObject;\r\n_File.prototype.deleteSharingLinkByKind = deleteLinkByKind;\r\n_File.prototype.unshareLink = unshareLink;\r\n","import {\r\n    _Folder,\r\n} from \"../folders/types\";\r\nimport {\r\n    ISharingEmailData,\r\n    ISharingResult,\r\n    SharingRole,\r\n    ISharedFuncs,\r\n    ISharingInformationRequest,\r\n    SharingLinkKind,\r\n    ISharingRecipient,\r\n} from \"./types\";\r\n\r\ndeclare module \"../folders/types\" {\r\n    interface _Folder extends ISharedFuncs {\r\n        shareWith(loginNames: string | string[], role?: SharingRole, requireSignin?: boolean, shareEverything?: boolean, emailData?: ISharingEmailData): Promise<ISharingResult>;\r\n    }\r\n    interface IFolder extends ISharedFuncs {\r\n        shareWith(loginNames: string | string[], role?: SharingRole, requireSignin?: boolean, shareEverything?: boolean, emailData?: ISharingEmailData): Promise<ISharingResult>;\r\n    }\r\n}\r\n\r\n_Folder.prototype.shareWith = async function (\r\n    loginNames: string | string[],\r\n    role: SharingRole = SharingRole.View,\r\n    requireSignin = false,\r\n    shareEverything = false,\r\n    emailData?: ISharingEmailData): Promise<ISharingResult> {\r\n\r\n    const dependency = this.addBatchDependency();\r\n\r\n    const shareable = await this.getShareable();\r\n    dependency();\r\n    return shareable.shareWith(loginNames, role, requireSignin, shareEverything, emailData);\r\n};\r\n\r\n_Folder.prototype.getShareLink = async function (this: _Folder, kind: SharingLinkKind, expiration: Date = null): Promise<any> {\r\n    const dependency = this.addBatchDependency();\r\n\r\n    const shareable = await this.getShareable();\r\n    dependency();\r\n    return shareable.getShareLink(kind, expiration);\r\n};\r\n\r\n_Folder.prototype.checkSharingPermissions = async function (this: _Folder, recipients: ISharingRecipient[]): Promise<any> {\r\n    const dependency = this.addBatchDependency();\r\n\r\n    const shareable = await this.getShareable();\r\n    dependency();\r\n    return shareable.checkSharingPermissions(recipients);\r\n};\r\n\r\n_Folder.prototype.getSharingInformation = async function (this: _Folder, request?: ISharingInformationRequest, expands?: string[]): Promise<any> {\r\n    const dependency = this.addBatchDependency();\r\n\r\n    const shareable = await this.getShareable();\r\n    dependency();\r\n    return shareable.getSharingInformation(request, expands);\r\n};\r\n\r\n_Folder.prototype.getObjectSharingSettings = async function (this: _Folder, useSimplifiedRoles = true): Promise<any> {\r\n    const dependency = this.addBatchDependency();\r\n\r\n    const shareable = await this.getShareable();\r\n    dependency();\r\n    return shareable.getObjectSharingSettings(useSimplifiedRoles);\r\n};\r\n\r\n_Folder.prototype.unshare = async function (this: _Folder): Promise<any> {\r\n    const dependency = this.addBatchDependency();\r\n\r\n    const shareable = await this.getShareable();\r\n    dependency();\r\n    return shareable.unshare();\r\n};\r\n\r\n_Folder.prototype.deleteSharingLinkByKind = async function (this: _Folder, kind: SharingLinkKind): Promise<any> {\r\n    const dependency = this.addBatchDependency();\r\n\r\n    const shareable = await this.getShareable();\r\n    dependency();\r\n    return shareable.deleteSharingLinkByKind(kind);\r\n};\r\n\r\n_Folder.prototype.unshareLink = async function (this: _Folder, kind: SharingLinkKind, shareId?: string): Promise<any> {\r\n    const dependency = this.addBatchDependency();\r\n\r\n    const shareable = await this.getShareable();\r\n    dependency();\r\n    return shareable.unshareLink(kind, shareId);\r\n};\r\n","import { _Item } from \"../items/types\";\r\nimport {\r\n    ISharingEmailData,\r\n    ISharingResult,\r\n    SharingRole,\r\n    ISharedFuncs,\r\n} from \"./types\";\r\n\r\nimport {\r\n    shareWith,\r\n    getShareLink,\r\n    checkPermissions,\r\n    getSharingInformation,\r\n    getObjectSharingSettings,\r\n    unshareObject,\r\n    deleteLinkByKind,\r\n    unshareLink,\r\n} from \"./funcs\";\r\n\r\ndeclare module \"../items/types\" {\r\n    interface _Item extends ISharedFuncs {\r\n        shareWith(loginNames: string | string[], role?: SharingRole, requireSignin?: boolean, emailData?: ISharingEmailData): Promise<ISharingResult>;\r\n    }\r\n    interface IItem extends ISharedFuncs {\r\n        /**\r\n         * Shares this item with one or more users\r\n         *\r\n         * @param loginNames string or string[] of resolved login names to which this item will be shared\r\n         * @param role The role (View | Edit) applied to the share\r\n         * @param emailData Optional, if inlucded an email will be sent. Note subject currently has no effect.\r\n         */\r\n        shareWith(loginNames: string | string[], role?: SharingRole, requireSignin?: boolean, emailData?: ISharingEmailData): Promise<ISharingResult>;\r\n    }\r\n}\r\n\r\n\r\n_Item.prototype.shareWith = function (\r\n    this: _Item,\r\n    loginNames: string | string[],\r\n    role: SharingRole = SharingRole.View,\r\n    requireSignin = false,\r\n    emailData?: ISharingEmailData): Promise<ISharingResult> {\r\n\r\n    return shareWith(this, loginNames, role, requireSignin, false, emailData);\r\n};\r\n\r\n_Item.prototype.getShareLink = getShareLink;\r\n_Item.prototype.checkSharingPermissions = checkPermissions;\r\n_Item.prototype.getSharingInformation = getSharingInformation;\r\n_Item.prototype.getObjectSharingSettings = getObjectSharingSettings;\r\n_Item.prototype.unshare = unshareObject;\r\n_Item.prototype.deleteSharingLinkByKind = deleteLinkByKind;\r\n_Item.prototype.unshareLink = unshareLink;\r\n","import { _Web, Web } from \"../webs/types\";\r\nimport { ISharingEmailData, ISharingResult, SharingRole } from \"./types\";\r\nimport { _SharePointQueryableInstance } from \"../sharepointqueryable\";\r\nimport { extractWebUrl } from \"../utils/extractweburl\";\r\nimport { RoleType } from \"./types\";\r\nimport { shareObject } from \"./funcs\";\r\nimport { combine } from \"@pnp/common\";\r\nimport { body } from \"@pnp/odata\";\r\nimport { spPost } from \"../operations\";\r\n\r\n/**\r\n * Extend _Web\r\n */\r\ndeclare module \"../webs/types\" {\r\n    interface _Web {\r\n        shareWith: (loginNames: string | string[], role?: SharingRole, emailData?: ISharingEmailData) => Promise<ISharingResult>;\r\n        shareObject: (url: string,\r\n            loginNames: string | string[],\r\n            role: SharingRole,\r\n            emailData?: ISharingEmailData,\r\n            group?: RoleType,\r\n            propagateAcl?: boolean,\r\n            includeAnonymousLinkInEmail?: boolean,\r\n            useSimplifiedRoles?: boolean) => Promise<ISharingResult>;\r\n        shareObjectRaw(options: any): Promise<ISharingResult>;\r\n        unshareObject(url: string): Promise<ISharingResult>;\r\n    }\r\n    interface IWeb {\r\n        shareWith: (loginNames: string | string[], role?: SharingRole, emailData?: ISharingEmailData) => Promise<ISharingResult>;\r\n        shareObject: (url: string,\r\n            loginNames: string | string[],\r\n            role: SharingRole,\r\n            emailData?: ISharingEmailData,\r\n            group?: RoleType,\r\n            propagateAcl?: boolean,\r\n            includeAnonymousLinkInEmail?: boolean,\r\n            useSimplifiedRoles?: boolean) => Promise<ISharingResult>;\r\n        shareObjectRaw(options: any): Promise<ISharingResult>;\r\n        unshareObject(url: string): Promise<ISharingResult>;\r\n    }\r\n}\r\n\r\n/**\r\n * Shares this web with the supplied users\r\n * @param loginNames The resolved login names to share\r\n * @param role The role to share this web\r\n * @param emailData Optional email data\r\n */\r\n_Web.prototype.shareWith = async function (\r\n    this: _Web,\r\n    loginNames: string | string[],\r\n    role: SharingRole = SharingRole.View,\r\n    emailData?: ISharingEmailData): Promise<ISharingResult> {\r\n\r\n    const dependency = this.addBatchDependency();\r\n    // remove need to reference Web here, which created a circular build issue\r\n    const web = new _SharePointQueryableInstance(extractWebUrl(this.toUrl()), \"/_api/web/url\");\r\n\r\n    const url = await web.get();\r\n    dependency();\r\n\r\n    return this.shareObject(combine(url, \"/_layouts/15/aclinv.aspx?forSharing=1&mbypass=1\"), loginNames, role, emailData);\r\n};\r\n\r\n/**\r\n * Provides direct access to the static web.ShareObject method\r\n *\r\n * @param url The url to share\r\n * @param loginNames Resolved loginnames string[] of a single login name string\r\n * @param roleValue Role value\r\n * @param emailData Optional email data\r\n * @param groupId Optional group id\r\n * @param propagateAcl\r\n * @param includeAnonymousLinkInEmail\r\n * @param useSimplifiedRoles\r\n */\r\n_Web.prototype.shareObject = function (\r\n    this: _Web,\r\n    url: string,\r\n    loginNames: string | string[],\r\n    role: SharingRole,\r\n    emailData?: ISharingEmailData,\r\n    group?: RoleType,\r\n    propagateAcl = false,\r\n    includeAnonymousLinkInEmail = false,\r\n    useSimplifiedRoles = true): Promise<ISharingResult> {\r\n\r\n    return shareObject(this, {\r\n        emailData: emailData,\r\n        group: group,\r\n        includeAnonymousLinkInEmail: includeAnonymousLinkInEmail,\r\n        loginNames: loginNames,\r\n        propagateAcl: propagateAcl,\r\n        role: role,\r\n        url: url,\r\n        useSimplifiedRoles: useSimplifiedRoles,\r\n    });\r\n};\r\n\r\n/**\r\n * Supplies a method to pass any set of arguments to ShareObject\r\n *\r\n * @param options The set of options to send to ShareObject\r\n */\r\n_Web.prototype.shareObjectRaw = function (this: _Web, options: any): Promise<ISharingResult> {\r\n    return shareObject(this, options, true);\r\n};\r\n\r\n/**\r\n * Supplies a method to pass any set of arguments to ShareObject\r\n *\r\n * @param options The set of options to send to ShareObject\r\n */\r\n_Web.prototype.unshareObject = function (this: _Web, url: string): Promise<ISharingResult> {\r\n    return spPost(Web(this, \"unshareObject\"), body({ url }));\r\n};\r\n","import { _SharePointQueryable, ISharePointQueryable } from \"../sharepointqueryable\";\r\nimport { extractWebUrl } from \"../utils/extractweburl\";\r\nimport { headers, body } from \"@pnp/odata\";\r\nimport { spPost } from \"../operations\";\r\nimport { hOP } from \"@pnp/common\";\r\nimport { tag } from \"../telemetry\";\r\n\r\nexport class _SiteDesigns extends _SharePointQueryable {\r\n\r\n    constructor(baseUrl: string | ISharePointQueryable, methodName = \"\") {\r\n        const url = typeof baseUrl === \"string\" ? baseUrl : baseUrl.toUrl();\r\n        super(extractWebUrl(url), `_api/Microsoft.Sharepoint.Utilities.WebTemplateExtensions.SiteScriptUtility.${methodName}`);\r\n    }\r\n\r\n    public execute<T>(props: any): Promise<T> {\r\n        return spPost<T>(this, body(props, headers({ \"Content-Type\": \"application/json;charset=utf-8\" })));\r\n    }\r\n\r\n    /**\r\n     * Creates a new site design available to users when they create a new site from the SharePoint home page.\r\n     * \r\n     * @param creationInfo A sitedesign creation information object\r\n     */\r\n    @tag(\"sd.createSiteDesign\")\r\n    public createSiteDesign(creationInfo: ISiteDesignCreationInfo): Promise<ISiteDesignInfo> {\r\n        return this.clone(SiteDesignsCloneFactory, `CreateSiteDesign`).execute<ISiteDesignInfo>({ info: creationInfo });\r\n    }\r\n\r\n    /**\r\n     * Applies a site design to an existing site collection.\r\n     *\r\n     * @param siteDesignId The ID of the site design to apply.\r\n     * @param webUrl The URL of the site collection where you want to apply the site design.\r\n     */\r\n    @tag(\"sd.applySiteDesign\")\r\n    public applySiteDesign(siteDesignId: string, webUrl: string): Promise<void> {\r\n        return this.clone(SiteDesignsCloneFactory, `ApplySiteDesign`).execute<void>({ siteDesignId: siteDesignId, \"webUrl\": webUrl });\r\n    }\r\n\r\n    /**\r\n     * Gets the list of available site designs\r\n     */\r\n    @tag(\"sd.getSiteDesigns\")\r\n    public getSiteDesigns(): Promise<ISiteDesignInfo[]> {\r\n        return this.clone(SiteDesignsCloneFactory, `GetSiteDesigns`).execute<ISiteDesignInfo[]>({});\r\n    }\r\n\r\n    /**\r\n     * Gets information about a specific site design.\r\n     * @param id The ID of the site design to get information about.\r\n     */\r\n    @tag(\"sd.getSiteDesignMetadata\")\r\n    public getSiteDesignMetadata(id: string): Promise<ISiteDesignInfo> {\r\n        return this.clone(SiteDesignsCloneFactory, `GetSiteDesignMetadata`).execute<ISiteDesignInfo>({ id: id });\r\n    }\r\n\r\n    /**\r\n     * Updates a site design with new values. In the REST call, all parameters are optional except the site script Id.\r\n     * If you had previously set the IsDefault parameter to TRUE and wish it to remain true, you must pass in this parameter again (otherwise it will be reset to FALSE). \r\n     * @param updateInfo A sitedesign update information object\r\n     */\r\n    @tag(\"sd.updateSiteDesign\")\r\n    public updateSiteDesign(updateInfo: ISiteDesignUpdateInfo): Promise<ISiteDesignInfo> {\r\n        return this.clone(SiteDesignsCloneFactory, `UpdateSiteDesign`).execute<ISiteDesignInfo>({ updateInfo: updateInfo });\r\n    }\r\n\r\n    /**\r\n     * Deletes a site design.\r\n     * @param id The ID of the site design to delete.\r\n     */\r\n    @tag(\"sd.deleteSiteDesign\")\r\n    public deleteSiteDesign(id: string): Promise<void> {\r\n        return this.clone(SiteDesignsCloneFactory, `DeleteSiteDesign`).execute<void>({ id: id });\r\n    }\r\n\r\n    /**\r\n     * Gets a list of principals that have access to a site design.\r\n     * @param id The ID of the site design to get rights information from.\r\n     */\r\n    @tag(\"sd.getSiteDesignRights\")\r\n    public getSiteDesignRights(id: string): Promise<ISiteDesignPrincipals[]> {\r\n        return this.clone(SiteDesignsCloneFactory, `GetSiteDesignRights`).execute<ISiteDesignPrincipals[]>({ id: id });\r\n    }\r\n\r\n    /**\r\n     * Grants access to a site design for one or more principals.\r\n     * @param id The ID of the site design to grant rights on.\r\n     * @param principalNames An array of one or more principals to grant view rights. \r\n     *                       Principals can be users or mail-enabled security groups in the form of \"alias\" or \"alias@<domain name>.com\"\r\n     * @param grantedRights Always set to 1. This represents the View right.\r\n     */\r\n    @tag(\"sd.grantSiteDesignRights\")\r\n    public grantSiteDesignRights(id: string, principalNames: string[], grantedRights = 1): Promise<void> {\r\n        return this.clone(SiteDesignsCloneFactory, `GrantSiteDesignRights`)\r\n            .execute<void>({\r\n                \"grantedRights\": grantedRights.toString(),\r\n                \"id\": id,\r\n                \"principalNames\": principalNames,\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Revokes access from a site design for one or more principals.\r\n     * @param id The ID of the site design to revoke rights from.\r\n     * @param principalNames An array of one or more principals to revoke view rights from. \r\n     *                       If all principals have rights revoked on the site design, the site design becomes viewable to everyone.\r\n     */\r\n    @tag(\"sd.revokeSiteDesignRights\")\r\n    public revokeSiteDesignRights(id: string, principalNames: string[]): Promise<void> {\r\n        return this.clone(SiteDesignsCloneFactory, `RevokeSiteDesignRights`)\r\n            .execute<void>({\r\n                \"id\": id,\r\n                \"principalNames\": principalNames,\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Adds a site design task on the specified web url to be invoked asynchronously.\r\n     * @param webUrl The absolute url of the web on where to create the task\r\n     * @param siteDesignId The ID of the site design to create a task for\r\n     */\r\n    @tag(\"sd.addSiteDesignTask\")\r\n    public addSiteDesignTask(webUrl: string, siteDesignId: string): Promise<ISiteDesignTask> {\r\n        return this.clone(SiteDesignsCloneFactory, `AddSiteDesignTask`)\r\n            .execute<ISiteDesignTask>({ \"webUrl\": webUrl, \"siteDesignId\": siteDesignId });\r\n    }\r\n\r\n    /**\r\n     * Adds a site design task on the current web to be invoked asynchronously.\r\n     * @param siteDesignId The ID of the site design to create a task for\r\n     */\r\n    @tag(\"sd.addSiteDesignTaskToCurrentWeb\")\r\n    public addSiteDesignTaskToCurrentWeb(siteDesignId: string): Promise<ISiteDesignTask> {\r\n        return this.clone(SiteDesignsCloneFactory, `AddSiteDesignTaskToCurrentWeb`)\r\n            .execute<ISiteDesignTask>({ \"siteDesignId\": siteDesignId });\r\n    }\r\n\r\n    /**\r\n     * Retrieves the site design task, if the task has finished running null will be returned\r\n     * @param id The ID of the site design task\r\n     */\r\n    @tag(\"sd.getSiteDesignTask\")\r\n    public async getSiteDesignTask(id: string): Promise<ISiteDesignTask> {\r\n        const task = await this.clone(SiteDesignsCloneFactory, `GetSiteDesignTask`)\r\n            .execute<ISiteDesignTask>({ \"taskId\": id });\r\n\r\n        return hOP(task, \"ID\") ? task : null;\r\n    }\r\n\r\n    /**\r\n     * Retrieves a list of site design that have run on a specific web\r\n     * @param webUrl The url of the web where the site design was applied\r\n     * @param siteDesignId (Optional) the site design ID, if not provided will return all site design runs\r\n     */\r\n    @tag(\"sd.getSiteDesignRun\")\r\n    public getSiteDesignRun(webUrl: string, siteDesignId?: string): Promise<ISiteDesignRun[]> {\r\n        return this.clone(SiteDesignsCloneFactory, `GetSiteDesignRun`)\r\n            .execute<ISiteDesignRun[]>({ \"webUrl\": webUrl, siteDesignId: siteDesignId });\r\n    }\r\n\r\n    /**\r\n     * Retrieves the status of a site design that has been run or is still running\r\n     * @param webUrl The url of the web where the site design was applied\r\n     * @param runId the run ID\r\n     */\r\n    @tag(\"sd.getSiteDesignRunStatus\")\r\n    public getSiteDesignRunStatus(webUrl: string, runId: string): Promise<ISiteScriptActionStatus[]> {\r\n        return this.clone(SiteDesignsCloneFactory, `GetSiteDesignRunStatus`)\r\n            .execute<ISiteScriptActionStatus[]>({ \"webUrl\": webUrl, runId: runId });\r\n    }\r\n}\r\nexport interface ISiteDesigns extends _SiteDesigns { }\r\nexport const SiteDesigns = (baseUrl: string | ISharePointQueryable, methodName?: string): ISiteDesigns => new _SiteDesigns(baseUrl, methodName);\r\n\r\ntype SiteDesignsCloneType = ISiteDesigns & ISharePointQueryable & { execute<T>(props: any): Promise<T> };\r\nconst SiteDesignsCloneFactory = (baseUrl: string | ISharePointQueryable, methodName = \"\"): SiteDesignsCloneType => <any>SiteDesigns(baseUrl, methodName);\r\n\r\n/**\r\n * Result from creating or retrieving a site design\r\n *\r\n */\r\nexport interface ISiteDesignInfo {\r\n    /**\r\n     * The ID of the site design to apply.\r\n     */\r\n    Id: string;\r\n    /**\r\n     * The display name of the site design.\r\n     */\r\n    Title: string;\r\n    /**\r\n     * Identifies which base template to add the design to. Use the value 64 for the Team site template, and the value 68 for the Communication site template.\r\n     */\r\n    WebTemplate: string;\r\n    /**\r\n     * An array of one or more site scripts. Each is identified by an ID. The scripts will run in the order listed.\r\n     */\r\n    SiteScriptIds: string[];\r\n    /**\r\n     * The display description of site design.\r\n     */\r\n    Description: string;\r\n    /**\r\n     * The URL of a preview image. If none is specified, SharePoint uses a generic image.\r\n     */\r\n    PreviewImageUrl: string;\r\n    /**\r\n     * The alt text description of the image for accessibility.\r\n     */\r\n    PreviewImageAltText: string;\r\n    /**\r\n     * True if the site design is applied as the default site design; otherwise, false. \r\n     * For more information see Customize a default site design https://docs.microsoft.com/en-us/sharepoint/dev/declarative-customization/customize-default-site-design.\r\n     */\r\n    IsDefault: boolean;\r\n    /**\r\n     * The version number of the site design\r\n     */\r\n    Version: string;\r\n}\r\n\r\n/**\r\n * Data for creating a site design\r\n *\r\n */\r\nexport interface ISiteDesignCreationInfo {\r\n    /**\r\n     * The display name of the site design.\r\n     */\r\n    Title: string;\r\n    /**\r\n     * Identifies which base template to add the design to. Use the value 64 for the Team site template, and the value 68 for the Communication site template.\r\n     */\r\n    WebTemplate: string;\r\n    /**\r\n     * An array of one or more site scripts. Each is identified by an ID. The scripts will run in the order listed.\r\n     */\r\n    SiteScriptIds?: string[];\r\n    /**\r\n     * (Optional) The display description of site design.\r\n     */\r\n    Description?: string;\r\n    /**\r\n     * (Optional) The URL of a preview image. If none is specified, SharePoint uses a generic image.\r\n     */\r\n    PreviewImageUrl?: string;\r\n    /**\r\n     * (Optional) The alt text description of the image for accessibility.\r\n     */\r\n    PreviewImageAltText?: string;\r\n    /**\r\n     * (Optional) True if the site design is applied as the default site design; otherwise, false. \r\n     * For more information see Customize a default site design https://docs.microsoft.com/en-us/sharepoint/dev/declarative-customization/customize-default-site-design.\r\n     */\r\n    IsDefault?: boolean;\r\n}\r\n\r\n/**\r\n * Data for updating a site design\r\n *\r\n */\r\nexport interface ISiteDesignUpdateInfo {\r\n    /**\r\n     * The ID of the site design to apply.\r\n     */\r\n    Id: string;\r\n    /**\r\n     * (Optional) The new display name of the updated site design.\r\n     */\r\n    Title?: string;\r\n    /**\r\n     * (Optional) The new template to add the site design to. Use the value 64 for the Team site template, and the value 68 for the Communication site template.\r\n     */\r\n    WebTemplate?: string;\r\n    /**\r\n     * (Optional) A new array of one or more site scripts. Each is identified by an ID. The scripts run in the order listed.\r\n     */\r\n    SiteScriptIds?: string[];\r\n    /**\r\n     * (Optional) The new display description of the updated site design.\r\n     */\r\n    Description?: string;\r\n    /**\r\n     * (Optional) The new URL of a preview image.\r\n     */\r\n    PreviewImageUrl?: string;\r\n    /**\r\n     * (Optional) The new alt text description of the image for accessibility.\r\n     */\r\n    PreviewImageAltText?: string;\r\n    /**\r\n     * (Optional) True if the site design is applied as the default site design; otherwise, false. \r\n     * For more information see Customize a default site design https://docs.microsoft.com/en-us/sharepoint/dev/declarative-customization/customize-default-site-design. \r\n     * If you had previously set the IsDefault parameter to TRUE and wish it to remain true, you must pass in this parameter again (otherwise it will be reset to FALSE).\r\n     */\r\n    IsDefault?: boolean;\r\n}\r\n\r\n/**\r\n * Result from retrieving the rights for a site design\r\n *\r\n */\r\nexport interface ISiteDesignPrincipals {\r\n    /**\r\n     * Display name\r\n     */\r\n    DisplayName: string;\r\n    /**\r\n     * The principal name\r\n     */\r\n    PrincipalName: string;\r\n    /**\r\n     * The principal name\r\n     */\r\n    Rights: number;\r\n}\r\n\r\nexport interface ISiteDesignTask {\r\n    /**\r\n     * The ID of the site design task\r\n     */\r\n    ID: string;\r\n    /**\r\n     * Logonname of the user who created the task\r\n     */\r\n    LogonName: string;\r\n    /**\r\n     * The ID of the site design the task is running on\r\n     */\r\n    SiteDesignID: string;\r\n    /**\r\n     * The ID of the site collection\r\n     */\r\n    SiteID: string;\r\n    /**\r\n     * The ID of the web\r\n     */\r\n    WebID: string;\r\n}\r\n\r\nexport interface ISiteScriptActionStatus {\r\n    /**\r\n     * Action index\r\n     */\r\n    ActionIndex: number;\r\n    /**\r\n     * Action key\r\n     */\r\n    ActionKey: string;\r\n    /**\r\n     * Action title\r\n     */\r\n    ActionTitle: string;\r\n    /**\r\n     * Last modified\r\n     */\r\n    LastModified: number;\r\n    /**\r\n     * Ordinal index\r\n     */\r\n    OrdinalIndex: string;\r\n    /**\r\n     * Outcome code\r\n     */\r\n    OutcomeCode: number;\r\n    /**\r\n    * Outcome text\r\n    */\r\n    OutcomeText: string;\r\n    /**\r\n     * Site script id\r\n     */\r\n    SiteScriptID: string;\r\n    /**\r\n     * Site script index\r\n     */\r\n    SiteScriptIndex: number;\r\n    /**\r\n     * Site script title\r\n     */\r\n    SiteScriptTitle: string;\r\n}\r\n\r\nexport interface ISiteDesignRun {\r\n    /**\r\n     * The ID of the site design run\r\n     */\r\n    ID: string;\r\n    /**\r\n     * The ID of the site design that was applied\r\n     */\r\n    SiteDesignID: string;\r\n    /**\r\n     * The title of the site design that was applied\r\n     */\r\n    SiteDesignTitle: string;\r\n    /**\r\n     * The version of the site design that was applied\r\n     */\r\n    SiteDesignVersion: number;\r\n    /**\r\n     * The site id where the site design was applied\r\n     */\r\n    SiteID: string;\r\n    /**\r\n     * The start time when the site design was applied\r\n     */\r\n    StartTime: number;\r\n    /**\r\n     * The web id where the site design was applied\r\n     */\r\n    WebID: string;\r\n}\r\n","import { _Web } from \"../webs/types\";\r\nimport { ISiteDesignRun, SiteDesigns, ISiteDesignTask, ISiteScriptActionStatus } from \"./types\";\r\n\r\ndeclare module \"../webs/types\" {\r\n\r\n    interface _Web {\r\n        getSiteDesignRuns(siteDesignId?: string): Promise<ISiteDesignRun[]>;\r\n        addSiteDesignTask(siteDesignId: string): Promise<ISiteDesignTask>;\r\n        getSiteDesignRunStatus(runId: string): Promise<ISiteScriptActionStatus[]>;\r\n    }\r\n\r\n    interface IWeb {\r\n        /**\r\n         * Retrieves a list of site design that have run on the current web\r\n         * @param siteDesignId (Optional) the site design ID, if not provided will return all site design runs\r\n         */\r\n        getSiteDesignRuns(siteDesignId?: string): Promise<ISiteDesignRun[]>;\r\n        /**\r\n         * Adds a site design task on the current web to be invoked asynchronously.\r\n         * @param siteDesignId The ID of the site design to create a task for\r\n         */\r\n        addSiteDesignTask(siteDesignId: string): Promise<ISiteDesignTask>;\r\n        /**\r\n         * Retrieves the status of a site design that has been run or is still running\r\n         * @param runId the run ID\r\n         */\r\n        getSiteDesignRunStatus(runId: string): Promise<ISiteScriptActionStatus[]>;\r\n    }\r\n}\r\n\r\n_Web.prototype.getSiteDesignRuns = function (this: _Web, siteDesignId?: string): Promise<ISiteDesignRun[]> {\r\n    return SiteDesigns(this, \"\").getSiteDesignRun(undefined, siteDesignId);\r\n};\r\n\r\n_Web.prototype.addSiteDesignTask = function (this: _Web, siteDesignId: string): Promise<ISiteDesignTask> {\r\n    return SiteDesigns(this, \"\").addSiteDesignTaskToCurrentWeb(siteDesignId);\r\n};\r\n\r\n_Web.prototype.getSiteDesignRunStatus = function (this: _Web, runId: string): Promise<ISiteScriptActionStatus[]> {\r\n    return SiteDesigns(this, \"\").getSiteDesignRunStatus(undefined, runId);\r\n};\r\n","import \"./web\";\r\nimport { SPRest } from \"../rest\";\r\nimport { ISiteDesigns, SiteDesigns } from \"./types\";\r\n\r\nexport {\r\n    ISiteDesignCreationInfo,\r\n    ISiteDesignInfo,\r\n    ISiteDesignPrincipals,\r\n    ISiteDesignUpdateInfo,\r\n    ISiteDesigns,\r\n    SiteDesigns,\r\n    ISiteDesignRun,\r\n    ISiteDesignTask,\r\n    ISiteScriptActionStatus,\r\n} from \"./types\";\r\n\r\ndeclare module \"../rest\" {\r\n    interface SPRest {\r\n        readonly siteDesigns: ISiteDesigns;\r\n    }\r\n}\r\n\r\nReflect.defineProperty(SPRest.prototype, \"siteDesigns\", {\r\n    configurable: true,\r\n    enumerable: true,\r\n    get: function (this: SPRest) {\r\n        return SiteDesigns(this._baseUrl);\r\n    },\r\n});\r\n","import { addProp } from \"@pnp/odata\";\r\nimport { _Web, Web } from \"../webs/types\";\r\nimport { ISiteGroups, SiteGroups, ISiteGroup } from \"./types\";\r\nimport { spPost } from \"../operations\";\r\nimport { escapeQueryStrValue } from \"../utils/escapeQueryStrValue\";\r\nimport \"../security/web\";\r\n\r\ndeclare module \"../webs/types\" {\r\n\r\n    interface _Web {\r\n        readonly siteGroups: ISiteGroups;\r\n        readonly associatedOwnerGroup: ISiteGroup;\r\n        readonly associatedMemberGroup: ISiteGroup;\r\n        readonly associatedVisitorGroup: ISiteGroup;\r\n        createDefaultAssociatedGroups(groupNameSeed: string, siteOwner: string, copyRoleAssignments?: boolean, clearSubscopes?: boolean, siteOwner2?: string): Promise<void>;\r\n    }\r\n    interface IWeb {\r\n\r\n        /**\r\n         * Returns the site groups of this web\r\n         */\r\n        readonly siteGroups: ISiteGroups;\r\n\r\n        /**\r\n         * The web's owner group\r\n         */\r\n        readonly associatedOwnerGroup: ISiteGroup;\r\n\r\n        /**\r\n         * The web's member group\r\n         */\r\n        readonly associatedMemberGroup: ISiteGroup;\r\n\r\n        /**\r\n         * The web's visitor group\r\n         */\r\n        readonly associatedVisitorGroup: ISiteGroup;\r\n\r\n        /**\r\n         * Creates the default associated groups (Members, Owners, Visitors) and gives them the default permissions on the site.\r\n         * The target site must have unique permissions and no associated members / owners / visitors groups\r\n         *\r\n         * @param groupNameSeed The base group name. E.g. 'TestSite' would produce 'TestSite Members' etc.\r\n         * @param siteOwner The user login name to be added to the site Owners group. Default is the current user\r\n         * @param copyRoleAssignments Optional. If true the permissions are copied from the current parent scope\r\n         * @param clearSubscopes Optional. true to make all child securable objects inherit role assignments from the current object\r\n         * @param siteOwner2 Optional. The second user login name to be added to the site Owners group. Default is empty\r\n         */\r\n        createDefaultAssociatedGroups(groupNameSeed: string, siteOwner: string, copyRoleAssignments?: boolean, clearSubscopes?: boolean, siteOwner2?: string): Promise<void>;\r\n    }\r\n}\r\n\r\naddProp(_Web, \"siteGroups\", SiteGroups);\r\naddProp(_Web, \"associatedOwnerGroup\", SiteGroups, \"associatedownergroup\");\r\naddProp(_Web, \"associatedMemberGroup\", SiteGroups, \"associatedmembergroup\");\r\naddProp(_Web, \"associatedVisitorGroup\", SiteGroups, \"associatedvisitorgroup\");\r\n\r\n_Web.prototype.createDefaultAssociatedGroups = async function (\r\n    this: _Web,\r\n    groupNameSeed: string,\r\n    siteOwner: string,\r\n    copyRoleAssignments = false,\r\n    clearSubscopes = true,\r\n    siteOwner2?: string): Promise<void> {\r\n\r\n    await this.breakRoleInheritance(copyRoleAssignments, clearSubscopes);\r\n\r\n    const q = this.clone(Web, \"createDefaultAssociatedGroups(userLogin=@u,userLogin2=@v,groupNameSeed=@s)\");\r\n    q.query.set(\"@u\", `'${escapeQueryStrValue(siteOwner || \"\")}'`);\r\n    q.query.set(\"@v\", `'${escapeQueryStrValue(siteOwner2 || \"\")}'`);\r\n    q.query.set(\"@s\", `'${escapeQueryStrValue(groupNameSeed || \"\")}'`);\r\n    return spPost(q);\r\n};\r\n\r\n","import { body } from \"@pnp/odata\";\r\nimport { spPost } from \"../operations\";\r\nimport { ISharePointQueryable, _SharePointQueryable } from \"../sharepointqueryable\";\r\nimport { extractWebUrl } from \"../utils/extractweburl\";\r\nimport { tag } from \"../telemetry\";\r\nimport { escapeQueryStrValue } from \"../utils/escapeQueryStrValue\";\r\n\r\nexport class _SiteScripts extends _SharePointQueryable {\r\n\r\n    constructor(baseUrl: string | ISharePointQueryable, methodName = \"\") {\r\n        const url = typeof baseUrl === \"string\" ? baseUrl : baseUrl.toUrl();\r\n        super(extractWebUrl(url), `_api/Microsoft.Sharepoint.Utilities.WebTemplateExtensions.SiteScriptUtility.${methodName}`);\r\n    }\r\n\r\n    public execute<T>(props: any): Promise<T> {\r\n        return spPost<T>(this, body(props));\r\n    }\r\n\r\n    /**\r\n     * Gets a list of information on all existing site scripts.\r\n     */\r\n    @tag(\"ss.getSiteScripts\")\r\n    public getSiteScripts(): Promise<ISiteScriptInfo[]> {\r\n        return this.clone(SiteScriptsCloneFactory, \"GetSiteScripts\", true).execute<ISiteScriptInfo[]>({});\r\n    }\r\n\r\n    /**\r\n     * Creates a new site script.\r\n     * \r\n     * @param title The display name of the site script.\r\n     * @param content JSON value that describes the script. For more information, see JSON reference.\r\n     */\r\n    @tag(\"ss.createSiteScript\")\r\n    public createSiteScript(title: string, description: string, content: any): Promise<ISiteScriptInfo> {\r\n        return this.clone(SiteScriptsCloneFactory,\r\n            `CreateSiteScript(Title=@title,Description=@desc)?@title='${escapeQueryStrValue(title)}'&@desc='${escapeQueryStrValue(description)}'`)\r\n            .execute<ISiteScriptInfo>(content);\r\n    }\r\n\r\n    /**\r\n     * Gets information about a specific site script. It also returns the JSON of the script.\r\n     * \r\n     * @param id The ID of the site script to get information about.\r\n     */\r\n    @tag(\"ss.getSiteScriptMetadata\")\r\n    public getSiteScriptMetadata(id: string): Promise<ISiteScriptInfo> {\r\n        return this.clone(SiteScriptsCloneFactory, \"GetSiteScriptMetadata\").execute<ISiteScriptInfo>({ id });\r\n    }\r\n\r\n    /**\r\n     * Deletes a site script.\r\n     * \r\n     * @param id The ID of the site script to delete.\r\n     */\r\n    @tag(\"ss.deleteSiteScript\")\r\n    public deleteSiteScript(id: string): Promise<void> {\r\n        return this.clone(SiteScriptsCloneFactory, \"DeleteSiteScript\").execute<void>({ id });\r\n    }\r\n\r\n    /**\r\n     * Updates a site script with new values. In the REST call, all parameters are optional except the site script Id.\r\n     * \r\n     * @param siteScriptUpdateInfo Object that contains the information to update a site script. \r\n     *                             Make sure you stringify the content object or pass it in the second 'content' parameter\r\n     * @param content (Optional) A new JSON script defining the script actions. For more information, see Site design JSON schema.\r\n     */\r\n    @tag(\"ss.updateSiteScript\")\r\n    public updateSiteScript(updateInfo: ISiteScriptUpdateInfo, content?: any): Promise<ISiteScriptInfo> {\r\n\r\n        if (content) {\r\n            updateInfo.Content = JSON.stringify(content);\r\n        }\r\n\r\n        return this.clone(SiteScriptsCloneFactory, \"UpdateSiteScript\").execute<ISiteScriptInfo>({ updateInfo });\r\n    }\r\n\r\n    /**\r\n     * Gets the site script syntax (JSON) for a specific list\r\n     * @param listUrl The absolute url of the list to retrieve site script\r\n     */\r\n    @tag(\"ss.getSiteScriptFromList\")\r\n    public getSiteScriptFromList(listUrl: string): Promise<string> {\r\n        return this.clone(SiteScriptsCloneFactory, `GetSiteScriptFromList`).execute<string>({ listUrl });\r\n    }\r\n\r\n    /**\r\n     * Gets the site script syntax (JSON) for a specific web\r\n     * @param webUrl The absolute url of the web to retrieve site script\r\n     * @param extractInfo configuration object to specify what to extract\r\n     */\r\n    @tag(\"ss.getSiteScriptFromWeb\")\r\n    public getSiteScriptFromWeb(webUrl: string, info: ISiteScriptSerializationInfo): Promise<ISiteScriptSerializationResult> {\r\n        return this.clone(SiteScriptsCloneFactory, `getSiteScriptFromWeb`).execute<ISiteScriptSerializationResult>({ webUrl, info });\r\n    }\r\n\r\n    /**\r\n     * Executes the indicated site design action on the indicated web.\r\n     * \r\n     * @param webUrl The absolute url of the web to retrieve site script\r\n     * @param extractInfo configuration object to specify what to extract\r\n     */\r\n    @tag(\"ss.executeSiteScriptAction\")\r\n    public executeSiteScriptAction(actionDefinition: string): Promise<ISiteScriptActionResult> {\r\n        return this.clone(SiteScriptsCloneFactory, `executeSiteScriptAction`).execute<ISiteScriptActionResult>({ actionDefinition });\r\n    }\r\n}\r\nexport interface ISiteScripts extends _SiteScripts { }\r\nexport const SiteScripts = (baseUrl: string | ISharePointQueryable, methodName?: string): ISiteScripts => new _SiteScripts(baseUrl, methodName);\r\n\r\ntype SiteScriptsCloneType = ISiteScripts & ISharePointQueryable & { execute<T>(props: any): Promise<T> };\r\nconst SiteScriptsCloneFactory = (baseUrl: string | ISharePointQueryable, methodName = \"\"): SiteScriptsCloneType => <any>SiteScripts(baseUrl, methodName);\r\n\r\n/**\r\n * Result from creating or retrieving a site script\r\n *\r\n */\r\nexport interface ISiteScriptInfo {\r\n    /**\r\n     * The ID of the site script to apply\r\n     */\r\n    Id: string;\r\n    /**\r\n     * The display name of the site script\r\n     */\r\n    Title: string;\r\n    /**\r\n     * The description for the site script\r\n     */\r\n    Description: string;\r\n    /**\r\n     * The JSON data/definition for the site script\r\n     */\r\n    Content: string;\r\n    /**\r\n     * The version number of the site script\r\n     */\r\n    Version: string;\r\n}\r\n\r\n/**\r\n * Data for updating a site script\r\n *\r\n */\r\nexport interface ISiteScriptUpdateInfo {\r\n    /**\r\n     * The ID of the site script to update\r\n     */\r\n    Id: string;\r\n    /**\r\n     * (Optional) The new display name for the updated site script\r\n     */\r\n    Title?: string;\r\n    /**\r\n     * (Optional) The new description for the updated site script\r\n     */\r\n    Description?: string;\r\n    /**\r\n     * (Optional) The new JSON data/definition for the updated site script\r\n     */\r\n    Content?: string;\r\n    /**\r\n     * (Optional) The new version for the updated site script\r\n     */\r\n    Version?: string;\r\n}\r\n\r\nexport interface ISiteScriptSerializationInfo {\r\n    /**\r\n     * (Optional) Include branding\r\n     */\r\n    IncludeBranding?: boolean;\r\n    /**\r\n     * (Optional) Lists to include e.g. [\"Lists/MyList\"]\r\n     */\r\n    IncludedLists?: string[];\r\n    /**\r\n     * (Optional) Include links to exported items\r\n     */\r\n    IncludeLinksToExportedItems?: boolean;\r\n    /**\r\n     * (Optional) Include regional settings\r\n     */\r\n    IncludeRegionalSettings?: boolean;\r\n    /**\r\n     * (Optional) Include site external sharing capability\r\n     */\r\n    IncludeSiteExternalSharingCapability?: boolean;\r\n    /**\r\n     * (Optional) Include theme\r\n     */\r\n    IncludeTheme?: boolean;\r\n}\r\n\r\nexport interface ISiteScriptSerializationResult {\r\n    /**\r\n     * The site script in JSON format\r\n     */\r\n    JSON: string;\r\n    /**\r\n    * A collection of warnings\r\n    */\r\n    Warnings: string[];\r\n}\r\n\r\nexport interface ISiteScriptActionResult {\r\n\r\n    /**\r\n     * The title of the action.\r\n     */\r\n    Title: string;\r\n\r\n    /**\r\n     * Text associated with the outcome of the action. If this is present, it is usually an error message.\r\n     */\r\n    OutcomeText: string;\r\n\r\n    /**\r\n     * Indicates the outcome of the action.\r\n     */\r\n    Outcome: SiteScriptActionOutcome;\r\n\r\n    /**\r\n     * Indicates the target of the action.\r\n     */\r\n    Target: string;\r\n}\r\n\r\nexport enum SiteScriptActionOutcome {\r\n\r\n    /**\r\n     * The stage was deemed to have completed successfully.\r\n     */\r\n    Success = 0,\r\n\r\n    /**\r\n     * The stage was deemed to have failed to complete successfully (non-blocking, rest of recipe\r\n     * execution should still be able to proceed).\r\n     */\r\n    Failure = 1,\r\n\r\n    /**\r\n     * No action was taken for this stage / this stage was skipped.\r\n     */\r\n    NoOp = 2,\r\n\r\n    /**\r\n     * There was an exception but the operation succeeded. This is analagous to the operation completing\r\n     * in a \"yellow\" state.\r\n     */\r\n    SucceededWithException = 3,\r\n}\r\n","import { _Web } from \"../webs/types\";\r\nimport { SiteScripts } from \"./types\";\r\nimport { ISiteScriptSerializationInfo, ISiteScriptSerializationResult } from \"./types\";\r\n\r\ndeclare module \"../webs/types\" {\r\n    interface _Web {\r\n        getSiteScript(extractInfo?: ISiteScriptSerializationInfo): Promise<ISiteScriptSerializationResult>;\r\n    }\r\n\r\n    interface IWeb {\r\n        /**\r\n         * Gets the site script syntax (JSON) for the current web\r\n         * @param extractInfo configuration object to specify what to extract\r\n         */\r\n        getSiteScript(extractInfo?: ISiteScriptSerializationInfo): Promise<ISiteScriptSerializationResult>;\r\n    }\r\n}\r\n\r\n_Web.prototype.getSiteScript = function (this: _Web, extractInfo?: ISiteScriptSerializationInfo): Promise<ISiteScriptSerializationResult> {\r\n    return SiteScripts(this.toUrl(), \"\").getSiteScriptFromWeb(undefined, extractInfo);\r\n};\r\n","import { combine } from \"@pnp/common\";\r\nimport { _List, List } from \"../lists/types\";\r\nimport { SiteScripts } from \"./types\";\r\nimport \"../folders/list\";\r\nimport { _Web, Web } from \"../webs/types\";\r\nimport { extractWebUrl } from \"../utils/extractweburl\";\r\n\r\ndeclare module \"../lists/types\" {\r\n    interface _List {\r\n        getSiteScript(): Promise<string>;\r\n    }\r\n\r\n    interface IList {\r\n        /**\r\n         * Gets the site script syntax (JSON) from the current list\r\n         */\r\n        getSiteScript(): Promise<string>;\r\n    }\r\n}\r\n\r\n_List.prototype.getSiteScript = async function (this: _List): Promise<string> {\r\n\r\n    const rootFolder = await this.clone(List).rootFolder.get<{ Name: string }>();\r\n    const web = await Web(extractWebUrl(this.toUrl())).select(\"Url\").get();\r\n    const absoluteListUrl = combine(web.Url, \"Lists\", rootFolder.Name);\r\n    return SiteScripts(this, \"\").getSiteScriptFromList(absoluteListUrl);\r\n};\r\n","import \"./web\";\r\nimport \"./list\";\r\nimport { SPRest } from \"../rest\";\r\nimport { ISiteScripts, SiteScripts } from \"./types\";\r\n\r\nexport {\r\n    SiteScripts,\r\n    ISiteScripts,\r\n    ISiteScriptInfo,\r\n    ISiteScriptUpdateInfo,\r\n    ISiteScriptSerializationInfo,\r\n    ISiteScriptSerializationResult,\r\n} from \"./types\";\r\n\r\ndeclare module \"../rest\" {\r\n    interface SPRest {\r\n        readonly siteScripts: ISiteScripts;\r\n    }\r\n}\r\n\r\nReflect.defineProperty(SPRest.prototype, \"siteScripts\", {\r\n    configurable: true,\r\n    enumerable: true,\r\n    get: function (this: SPRest) {\r\n        return SiteScripts(this._baseUrl);\r\n    },\r\n});\r\n","import { addProp, body } from \"@pnp/odata\";\r\nimport { _Web, Web } from \"../webs/types\";\r\nimport { ISiteUsers, SiteUsers, ISiteUser, SiteUser, IWebEnsureUserResult } from \"./types\";\r\nimport { odataUrlFrom } from \"../odata\";\r\nimport { spPost } from \"../operations\";\r\n\r\ndeclare module \"../webs/types\" {\r\n    interface _Web {\r\n        readonly siteUsers: ISiteUsers;\r\n        readonly currentUser: ISiteUser;\r\n        ensureUser(loginName: string): Promise<IWebEnsureUserResult>;\r\n        getUserById(id: number): ISiteUser;\r\n    }\r\n    interface IWeb {\r\n\r\n        /**\r\n         * The site users\r\n         */\r\n        readonly siteUsers: ISiteUsers;\r\n\r\n        /**\r\n         * Information on the current user\r\n         */\r\n        readonly currentUser: ISiteUser;\r\n\r\n        /**\r\n        * Checks whether the specified login name belongs to a valid user in the web. If the user doesn't exist, adds the user to the web.\r\n        *\r\n        * @param loginName The login name of the user (ex: i:0#.f|membership|user@domain.onmicrosoft.com)\r\n        */\r\n        ensureUser(loginName: string): Promise<IWebEnsureUserResult>;\r\n\r\n        /**\r\n         * Returns the user corresponding to the specified member identifier for the current site\r\n         *\r\n         * @param id The id of the user\r\n         */\r\n        getUserById(id: number): ISiteUser;\r\n    }\r\n}\r\n\r\naddProp(_Web, \"siteUsers\", SiteUsers);\r\naddProp(_Web, \"currentUser\", SiteUser, \"currentuser\");\r\n\r\n_Web.prototype.ensureUser = async function (this: _Web, logonName: string): Promise<IWebEnsureUserResult> {\r\n\r\n    const data = await spPost(this.clone(Web, \"ensureuser\"), body({ logonName }));\r\n    return {\r\n        data,\r\n        user: SiteUser(odataUrlFrom(data)),\r\n    };\r\n};\r\n\r\n_Web.prototype.getUserById = function (id: number): ISiteUser {\r\n    return SiteUser(this, `getUserById(${id})`);\r\n};\r\n","import {\r\n  _SharePointQueryableInstance,\r\n  ISharePointQueryable,\r\n  spInvokableFactory,\r\n  _SharePointQueryable,\r\n} from \"../sharepointqueryable\";\r\nimport { defaultPath } from \"../decorators\";\r\nimport { hOP, IFetchOptions } from \"@pnp/common\";\r\nimport { metadata } from \"../utils/metadata\";\r\nimport { body } from \"@pnp/odata\";\r\nimport { spPost } from \"../operations\";\r\nimport { tag } from \"../telemetry\";\r\n\r\n@defaultPath(\"_api/social.following\")\r\nexport class _Social extends _SharePointQueryableInstance implements ISocial {\r\n\r\n  public get my(): IMySocial {\r\n    return MySocial(this);\r\n  }\r\n\r\n  @tag(\"soc.getFollowedSitesUri\")\r\n  public async getFollowedSitesUri(): Promise<string> {\r\n    const r = await this.clone(SocialCloneFactory, \"FollowedSitesUri\").get();\r\n    return r.FollowedSitesUri || r;\r\n  }\r\n\r\n  @tag(\"soc.getFollowedDocumentsUri\")\r\n    public async getFollowedDocumentsUri(): Promise<string> {\r\n    const r = await this.clone(SocialCloneFactory, \"FollowedDocumentsUri\").get();\r\n    return r.FollowedDocumentsUri || r;\r\n  }\r\n\r\n  @tag(\"soc.follow\")\r\n  public async follow(actorInfo: ISocialActorInfo): Promise<SocialFollowResult> {\r\n    return await spPost(this.clone(SocialCloneFactory, \"follow\"), this.createSocialActorInfoRequestBody(actorInfo));\r\n  }\r\n\r\n  @tag(\"soc.isFollowed\")\r\n  public async isFollowed(actorInfo: ISocialActorInfo): Promise<boolean> {\r\n    return await spPost(this.clone(SocialCloneFactory, \"isfollowed\"), this.createSocialActorInfoRequestBody(actorInfo));\r\n  }\r\n\r\n  @tag(\"soc.stopFollowing\")\r\n  public async stopFollowing(actorInfo: ISocialActorInfo): Promise<void> {\r\n    return await spPost(this.clone(SocialCloneFactory, \"stopfollowing\"), this.createSocialActorInfoRequestBody(actorInfo));\r\n  }\r\n\r\n  private createSocialActorInfoRequestBody(actorInfo: ISocialActorInfo): IFetchOptions {\r\n    return body({\r\n      \"actor\":\r\n        Object.assign(metadata(\"SP.Social.SocialActorInfo\"), {\r\n          Id: null,\r\n        }, actorInfo),\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Describes the public methods for the Social interface\r\n */\r\nexport interface ISocial {\r\n  /**\r\n   * Access to the curren't user's social data\r\n   */\r\n  readonly my: IMySocial;\r\n  /**\r\n   * Get a list of followed sites for the current user.\r\n   */\r\n  getFollowedSitesUri(): Promise<string>;\r\n  /**\r\n   * Get a list of followed documents for the current user.\r\n   */\r\n  getFollowedDocumentsUri(): Promise<string>;\r\n  /**\r\n   * Follow an actor for the current user.\r\n   *\r\n   * @param actorInfo Provide the actor to follow.\r\n   */\r\n  follow(actorInfo: ISocialActorInfo): Promise<SocialFollowResult>;\r\n  /**\r\n   * Check if the current user is following the actor.\r\n   *\r\n   * @param actorInfo Provide the actor to check.\r\n   */\r\n  isFollowed(actorInfo: ISocialActorInfo): Promise<boolean>;\r\n  /**\r\n   * Stop following an actor for the current user.\r\n   *\r\n   * @param actorInfo Provide the actor to stop following.\r\n   */\r\n  stopFollowing(actorInfo: ISocialActorInfo): Promise<void>;\r\n}\r\n\r\n/**\r\n * Get a new Social instance for the particular Url\r\n */\r\nexport const Social = (baseUrl: string | ISharePointQueryable): ISocial => new _Social(baseUrl);\r\nconst SocialCloneFactory = (baseUrl: string | ISharePointQueryable, paths?: string): ISocial & ISharePointQueryable => new _Social(baseUrl, paths);\r\n\r\n/**\r\n * Current user's Social instance\r\n */\r\n@defaultPath(\"my\")\r\nexport class _MySocial extends _SharePointQueryableInstance implements IMySocial {\r\n\r\n  @tag(\"msoc.followed\")\r\n  public async followed(types: SocialActorTypes): Promise<ISocialActor[]> {\r\n    const r = await this.clone(MySocialCloneFactory, `followed(types=${types})`)();\r\n    return hOP(r, \"Followed\") ? r.Followed.results : r;\r\n  }\r\n\r\n  @tag(\"msoc.followedCount\")\r\n  public async followedCount(types: SocialActorTypes): Promise<number> {\r\n    const r = await this.clone(MySocialCloneFactory, `followedcount(types=${types})`)();\r\n    return r.FollowedCount || r;\r\n  }\r\n\r\n  @tag(\"msoc.followers\")\r\n  public async followers(): Promise<ISocialActor[]> {\r\n    const r = await this.clone(MySocialCloneFactory, \"followers\")();\r\n    return hOP(r, \"Followers\") ? r.Followers.results : r;\r\n  }\r\n\r\n  @tag(\"msoc.suggestions\")\r\n  public async suggestions(): Promise<ISocialActor[]> {\r\n    const r = await this.clone(MySocialCloneFactory, \"suggestions\")();\r\n    return hOP(r, \"Suggestions\") ? r.Suggestions.results : r;\r\n  }\r\n}\r\n\r\n/**\r\n * Defines the public methods exposed by the my endpoint\r\n */\r\nexport interface IMySocial {\r\n\r\n  /**\r\n   * Allow access to the v2 invokable\r\n   */\r\n  (this: IMySocial): Promise<IMySocialData>;\r\n\r\n  /**\r\n   * Gets this user's data\r\n   */\r\n  get(): Promise<IMySocialData>;\r\n  /**\r\n   * Gets users, documents, sites, and tags that the current user is following.\r\n   * \r\n   * @param types Bitwise set of SocialActorTypes to retrieve\r\n   */\r\n  followed(types: SocialActorTypes): Promise<ISocialActor[]>;\r\n  /**\r\n   * Gets the count of users, documents, sites, and tags that the current user is following.\r\n   * \r\n   * @param types Bitwise set of SocialActorTypes to retrieve\r\n   */\r\n  followedCount(types: SocialActorTypes): Promise<number>;\r\n  /**\r\n   * Gets the users who are following the current user.\r\n   */\r\n  followers(): Promise<ISocialActor[]>;\r\n  /**\r\n   * Gets users who the current user might want to follow.\r\n   */\r\n  suggestions(): Promise<ISocialActor[]>;\r\n}\r\n\r\n/**\r\n * Invokable factory for IMySocial instances\r\n */\r\nexport const MySocial = spInvokableFactory<IMySocial>(_MySocial);\r\nconst MySocialCloneFactory = (baseUrl: string | ISharePointQueryable, path?: string): IMySocial & ISharePointQueryable => <any>MySocial(baseUrl, path);\r\n\r\n/**\r\n * Social actor info\r\n *\r\n */\r\nexport interface ISocialActorInfo {\r\n  AccountName?: string;\r\n  ActorType: SocialActorType;\r\n  ContentUri?: string;\r\n  Id?: string;\r\n  TagGuid?: string;\r\n}\r\n\r\n/**\r\n * Social actor type\r\n *\r\n */\r\nexport const enum SocialActorType {\r\n  User,\r\n  Document,\r\n  Site,\r\n  Tag,\r\n}\r\n\r\n/**\r\n * Social actor type\r\n *\r\n */\r\n/* tslint:disable:no-bitwise */\r\nexport const enum SocialActorTypes {\r\n  None = 0,\r\n  User = 1 << SocialActorType.User,\r\n  Document = 1 << SocialActorType.Document,\r\n  Site = 1 << SocialActorType.Site,\r\n  Tag = 1 << SocialActorType.Tag,\r\n  /**\r\n   * The set excludes documents and sites that do not have feeds.\r\n   */\r\n  ExcludeContentWithoutFeeds = 268435456,\r\n  /**\r\n   * The set includes group sites\r\n   */\r\n  IncludeGroupsSites = 536870912,\r\n  /**\r\n   * The set includes only items created within the last 24 hours\r\n   */\r\n  WithinLast24Hours = 1073741824,\r\n}\r\n/* tslint:enable */\r\n\r\n/**\r\n * Result from following\r\n *\r\n */\r\nexport const enum SocialFollowResult {\r\n  Ok = 0,\r\n  AlreadyFollowing = 1,\r\n  LimitReached = 2,\r\n  InternalError = 3,\r\n}\r\n\r\n/**\r\n * Specifies an exception or status code.\r\n */\r\nexport const enum SocialStatusCode {\r\n  /**\r\n   * The operation completed successfully\r\n   */\r\n  OK,\r\n  /**\r\n   * The request is invalid.\r\n   */\r\n  InvalidRequest,\r\n  /**\r\n   *  The current user is not authorized to perform the operation.\r\n   */\r\n  AccessDenied,\r\n  /**\r\n   * The target of the operation was not found.\r\n   */\r\n  ItemNotFound,\r\n  /**\r\n   * The operation is invalid for the target's current state. \r\n   */\r\n  InvalidOperation,\r\n  /**\r\n   * The operation completed without modifying the target.\r\n   */\r\n  ItemNotModified,\r\n  /**\r\n   * The operation failed because an internal error occurred.\r\n   */\r\n  InternalError,\r\n  /**\r\n   * The operation failed because the server could not access the distributed cache.\r\n   */\r\n  CacheReadError,\r\n  /**\r\n   * The operation succeeded but the server could not update the distributed cache.\r\n   */\r\n  CacheUpdateError,\r\n  /**\r\n   * No personal site exists for the current user, and no further information is available.\r\n   */\r\n  PersonalSiteNotFound,\r\n  /**\r\n   * No personal site exists for the current user, and a previous attempt to create one failed.\r\n   */\r\n  FailedToCreatePersonalSite,\r\n  /**\r\n   * No personal site exists for the current user, and a previous attempt to create one was not authorized.\r\n   */\r\n  NotAuthorizedToCreatePersonalSite,\r\n  /**\r\n   * No personal site exists for the current user, and no attempt should be made to create one.\r\n   */\r\n  CannotCreatePersonalSite,\r\n  /**\r\n   * The operation was rejected because an internal limit had been reached.\r\n   */\r\n  LimitReached,\r\n  /**\r\n   * The operation failed because an error occurred during the processing of the specified attachment.\r\n   */\r\n  AttachmentError,\r\n  /**\r\n   * The operation succeeded with recoverable errors; the returned data is incomplete.\r\n   */\r\n  PartialData,\r\n  /**\r\n   * A required SharePoint feature is not enabled.\r\n   */\r\n  FeatureDisabled,\r\n  /**\r\n   * The site's storage quota has been exceeded.\r\n   */\r\n  StorageQuotaExceeded,\r\n  /**\r\n   * The operation failed because the server could not access the database.\r\n   */\r\n  DatabaseError,\r\n}\r\n\r\nexport interface ISocialActor {\r\n  /**\r\n   * Gets the actor type.\r\n   */\r\n  ActorType: SocialActorType;\r\n  /**\r\n   * Gets the actor's unique identifier.\r\n   */\r\n  Id: string;\r\n  /**\r\n   * Gets the actor's canonical URI.\r\n   */\r\n  Uri: string;\r\n  /**\r\n   * Gets the actor's display name.\r\n   */\r\n  Name: string;\r\n  /**\r\n   * Returns true if the current user is following the actor, false otherwise.\r\n   */\r\n  IsFollowed: boolean;\r\n  /**\r\n   * Gets a code that indicates recoverable errors that occurred during actor retrieval\r\n   */\r\n  Status: SocialStatusCode;\r\n  /**\r\n   * Returns true if the Actor can potentially be followed, false otherwise.\r\n   */\r\n  CanFollow: boolean;\r\n  /**\r\n   * Gets the actor's image URI. Only valid when ActorType is User, Document, or Site\r\n   */\r\n  ImageUri: string;\r\n  /**\r\n   * Gets the actor's account name. Only valid when ActorType is User\r\n   */\r\n  AccountName: string;\r\n  /**\r\n   * Gets the actor's email address. Only valid when ActorType is User\r\n   */\r\n  EmailAddress: string;\r\n  /**\r\n   * Gets the actor's title. Only valid when ActorType is User\r\n   */\r\n  Title: string;\r\n  /**\r\n   * Gets the text of the actor's most recent post. Only valid when ActorType is User\r\n   */\r\n  StatusText: string;\r\n  /**\r\n   * Gets the URI of the actor's personal site. Only valid when ActorType is User\r\n   */\r\n  PersonalSiteUri: string;\r\n  /**\r\n   * Gets the URI of the actor's followed content folder. Only valid when this represents the current user\r\n   */\r\n  FollowedContentUri: string;\r\n  /**\r\n   * Gets the actor's content URI. Only valid when ActorType is Document, or Site\r\n   */\r\n  ContentUri: string;\r\n  /**\r\n   * Gets the actor's library URI. Only valid when ActorType is Document\r\n   */\r\n  LibraryUri: string;\r\n  /**\r\n   * Gets the actor's tag GUID. Only valid when ActorType is Tag\r\n   */\r\n  TagGuid: string;\r\n}\r\n\r\n/**\r\n * Defines the properties returned from the my endpoint\r\n */\r\nexport interface IMySocialData {\r\n  SocialActor: ISocialActor;\r\n  MyFollowedDocumentsUri: string;\r\n  MyFollowedSitesUri: string;\r\n}\r\n","import { ISocial, Social } from \"./types\";\r\nimport { SPRest } from \"../rest\";\r\n\r\nexport {\r\n  IMySocial,\r\n  ISocial,\r\n  IMySocialData,\r\n  ISocialActor,\r\n  ISocialActorInfo,\r\n  MySocial,\r\n  Social,\r\n  SocialActorType,\r\n  SocialActorTypes,\r\n  SocialFollowResult,\r\n  SocialStatusCode,\r\n} from \"./types\";\r\n\r\ndeclare module \"../rest\" {\r\n  interface SPRest {\r\n    /**\r\n     * Access to the social instance which allows you to track followed sites, people and docs.\r\n     */\r\n    readonly social: ISocial;\r\n  }\r\n}\r\n\r\nReflect.defineProperty(SPRest.prototype, \"social\", {\r\n  configurable: true,\r\n  enumerable: true,\r\n  get: function (this: SPRest) {\r\n    return Social(this._baseUrl);\r\n  },\r\n});\r\n","import { _SharePointQueryable, ISharePointQueryable, spInvokableFactory } from \"../sharepointqueryable\";\r\nimport { assign, ITypedHash } from \"@pnp/common\";\r\nimport { SPBatch } from \"../batch\";\r\nimport { ICachingOptions, body } from \"@pnp/odata\";\r\nimport { odataUrlFrom } from \"../odata\";\r\nimport { IPrincipalInfo, PrincipalType, PrincipalSource } from \"../types\";\r\nimport { metadata } from \"../utils/metadata\";\r\nimport { File, IFile } from \"../files/types\";\r\nimport { extractWebUrl } from \"../utils/extractweburl\";\r\nimport { spPost } from \"../operations\";\r\nimport { tag } from \"../telemetry\";\r\nimport { objectToSPKeyValueCollection } from \"../utils/objectToSPKeyValueCollection\";\r\n\r\nexport class _Utilities extends _SharePointQueryable implements IUtilities {\r\n    constructor(baseUrl: string | ISharePointQueryable, methodName: string) {\r\n        const url = typeof baseUrl === \"string\" ? baseUrl : baseUrl.toUrl();\r\n        super(extractWebUrl(url), `_api/SP.Utilities.Utility.${methodName}`);\r\n    }\r\n\r\n    public excute<T>(props: any): Promise<T> {\r\n        return spPost(this, body(props));\r\n    }\r\n\r\n    public sendEmail(props: IEmailProperties): Promise<void> {\r\n        const params = {\r\n            properties: assign(metadata(\"SP.Utilities.EmailProperties\"), {\r\n                Body: props.Body,\r\n                From: props.From,\r\n                Subject: props.Subject,\r\n            }),\r\n        };\r\n\r\n        if (props.To && props.To.length > 0) {\r\n\r\n            params.properties = assign(params.properties, {\r\n                To: { results: props.To },\r\n            });\r\n        }\r\n\r\n        if (props.CC && props.CC.length > 0) {\r\n\r\n            params.properties = assign(params.properties, {\r\n                CC: { results: props.CC },\r\n            });\r\n        }\r\n\r\n        if (props.BCC && props.BCC.length > 0) {\r\n\r\n            params.properties = assign(params.properties, {\r\n                BCC: { results: props.BCC },\r\n            });\r\n        }\r\n\r\n        if (props.AdditionalHeaders) {\r\n\r\n            params.properties = assign(params.properties, {\r\n                AdditionalHeaders: objectToSPKeyValueCollection(props.AdditionalHeaders),\r\n            });\r\n        }\r\n\r\n        return tag.configure(this.clone(UtilitiesCloneFactory, \"SendEmail\", true), \"u.sendEmail\").excute<void>(params);\r\n    }\r\n\r\n    public getCurrentUserEmailAddresses(): Promise<string> {\r\n        return tag.configure(this.clone(UtilitiesCloneFactory, \"GetCurrentUserEmailAddresses\", true), \"u.getCurrentUserEmailAddresses\").excute<string>({});\r\n    }\r\n\r\n    public resolvePrincipal(input: string,\r\n        scopes: PrincipalType,\r\n        sources: PrincipalSource,\r\n        inputIsEmailOnly: boolean,\r\n        addToUserInfoList: boolean,\r\n        matchUserInfoList = false): Promise<IPrincipalInfo> {\r\n        const params = {\r\n            addToUserInfoList,\r\n            input,\r\n            inputIsEmailOnly,\r\n            matchUserInfoList,\r\n            scopes,\r\n            sources,\r\n        };\r\n\r\n        const clone = this.clone(UtilitiesCloneFactory, \"ResolvePrincipalInCurrentContext\", true);\r\n        return tag.configure(clone, \"u.ResolvePrincipalInCurrentContext\").excute<IPrincipalInfo>(params);\r\n    }\r\n\r\n    public searchPrincipals(input: string, scopes: PrincipalType, sources: PrincipalSource, groupName: string, maxCount: number): Promise<IPrincipalInfo[]> {\r\n        const params = {\r\n            groupName: groupName,\r\n            input: input,\r\n            maxCount: maxCount,\r\n            scopes: scopes,\r\n            sources: sources,\r\n        };\r\n\r\n        const clone = this.clone(UtilitiesCloneFactory, \"SearchPrincipalsUsingContextWeb\", true);\r\n        return tag.configure(clone, \"u.SearchPrincipalsUsingContextWeb\").excute<IPrincipalInfo[]>(params);\r\n    }\r\n\r\n    public createEmailBodyForInvitation(pageAddress: string): Promise<string> {\r\n        const params = {\r\n            pageAddress: pageAddress,\r\n        };\r\n\r\n        const clone = this.clone(UtilitiesCloneFactory, \"CreateEmailBodyForInvitation\", true);\r\n        return tag.configure(clone, \"u.CreateEmailBodyForInvitation\").excute<string>(params);\r\n    }\r\n\r\n    public expandGroupsToPrincipals(inputs: string[], maxCount = 30): Promise<IPrincipalInfo[]> {\r\n        const params = {\r\n            inputs: inputs,\r\n            maxCount: maxCount,\r\n        };\r\n\r\n        const clone = this.clone(UtilitiesCloneFactory, \"ExpandGroupsToPrincipals\", true);\r\n        return tag.configure(clone, \"u.ExpandGroupsToPrincipals\").excute<IPrincipalInfo[]>(params);\r\n    }\r\n\r\n    public async createWikiPage(info: IWikiPageCreationInfo): Promise<ICreateWikiPageResult> {\r\n\r\n        const clone = this.clone(UtilitiesCloneFactory, \"CreateWikiPageInContextWeb\", true);\r\n        const newPage = await tag.configure(clone, \"u.CreateWikiPageInContextWeb\").excute<ICreateWikiPageResult>({ parameters: info });\r\n\r\n        return {\r\n            data: newPage,\r\n            file: File(odataUrlFrom(newPage)),\r\n        } as ICreateWikiPageResult;\r\n    }\r\n}\r\n\r\n/**\r\n * Describes the SharePoint utility methods\r\n */\r\nexport interface IUtilities {\r\n    /**\r\n     * Gives you the ability to cache returned data in an easy way.\r\n     * @param options instance of ICachingOptions\r\n     */\r\n    usingCaching(options?: ICachingOptions): this;\r\n\r\n    /**\r\n     * Gives you the ability to batch multiple requests into a single request to SharePoint.\r\n     * @param batch instance of SPBatch\r\n     */\r\n    inBatch(batch: SPBatch): this;\r\n\r\n    /**\r\n     * This methods will send an e-mail based on the incoming properties of the IEmailProperties parameter.\r\n     * @param props IEmailProperties object\r\n     */\r\n    sendEmail(props: IEmailProperties): Promise<void>;\r\n\r\n    /**\r\n     * This method returns the current user's email addresses known to SharePoint.\r\n     */\r\n    getCurrentUserEmailAddresses(): Promise<string>;\r\n\r\n    /**\r\n     * Gets information about a principal that matches the specified Search criteria.\r\n     * @param email E-mail address\r\n     * @param scopes Specifies the type to be used when searching for a principal\r\n     * @param sources Specifies the source to be used when searching for a principal.\r\n     * @param inputIsEmailOnly Specifies whether only the e-mail address will be used when searching for a principal.\r\n     * @param addToUserInfoList Specifies whether the user should be added to the hidden user info list.\r\n     * @param matchUserInfoList [Optional] By default false\r\n     */\r\n    resolvePrincipal(email: string,\r\n        scopes: PrincipalType,\r\n        sources: PrincipalSource,\r\n        inputIsEmailOnly: boolean,\r\n        addToUserInfoList: boolean,\r\n        matchUserInfoList?: boolean): Promise<IPrincipalInfo>;\r\n\r\n    /**\r\n    * Gets information about the principals that match the specified search criteria.\r\n    * @param input Specifies the value to be used when searching for a principal.\r\n    * @param scopes Specifies the type to be used when searching for a principal.\r\n    * @param sources Specifies the source to be used when searching for a principal.\r\n    * @param groupName Specifies the collection of users to be used when searching for a principal.\r\n    * @param maxCount Specifies the maximum number of principals to be returned in the list.\r\n    */\r\n    searchPrincipals(input: string, scopes: PrincipalType, sources: PrincipalSource, groupName: string, maxCount: number): Promise<IPrincipalInfo[]>;\r\n\r\n    /**\r\n     * Gets the external (outside the firewall) URL to a document or resource in a site.\r\n     * @param pageAddress Specifies the URI for the document or resource. It must be a URL.\r\n     */\r\n    createEmailBodyForInvitation(pageAddress: string): Promise<string>;\r\n\r\n    /**\r\n     * Resolves the principals contained within the supplied groups.\r\n     * @param inputs A collection of groups to be expanded.\r\n     * @param maxCount Specifies the maximum number of principals to be returned.\r\n     */\r\n    expandGroupsToPrincipals(inputs: string[], maxCount?: number): Promise<IPrincipalInfo[]>;\r\n\r\n    /**\r\n     * Creates a new Wiki page.\r\n     * @param info Instance of IWikiPageCreationInfo.\r\n     */\r\n    createWikiPage(info: IWikiPageCreationInfo): Promise<ICreateWikiPageResult>;\r\n}\r\n\r\nexport const Utilities = spInvokableFactory<IUtilities>(_Utilities);\r\ntype UtilitiesCloneType = IUtilities & ISharePointQueryable & { excute<T>(props: any): Promise<T> };\r\nconst UtilitiesCloneFactory = (baseUrl: string | ISharePointQueryable, path?: string): UtilitiesCloneType => <any>Utilities(baseUrl, path);\r\n\r\nexport interface ICreateWikiPageResult {\r\n    /**\r\n     * The returned Wiki page represented by raw data.\r\n     */\r\n    data: any;\r\n\r\n    /**\r\n     * The returned Wiki page represented as a file which can be further updated.\r\n     */\r\n    file: IFile;\r\n}\r\n\r\nexport interface IEmailProperties {\r\n    /**\r\n     * The list of receivers represented by a string array.\r\n     */\r\n    To: string[];\r\n\r\n    /**\r\n     * The list of receivers as CC (carbon copy) represented by a string array.\r\n     * This is optional.\r\n     */\r\n    CC?: string[];\r\n\r\n    /**\r\n     * The list of receivers as BCC (blind carbon copy) represented by a string array.\r\n     * This is optional.\r\n     */\r\n    BCC?: string[];\r\n\r\n    /**\r\n     * The subject of the email.\r\n     */\r\n    Subject: string;\r\n\r\n    /**\r\n     * The body of the email.\r\n     */\r\n    Body: string;\r\n\r\n    /**\r\n     * The additional headers appened to the request in key/value pairs.\r\n     */\r\n    AdditionalHeaders?: ITypedHash<string>;\r\n\r\n    /**\r\n     * The from address of the email.\r\n     * This is optional.\r\n     */\r\n    From?: string;\r\n}\r\n\r\nexport interface IWikiPageCreationInfo {\r\n    /**\r\n     * The server-relative-url of the wiki page to be created.\r\n     */\r\n    ServerRelativeUrl: string;\r\n\r\n    /**\r\n     * The wiki content to be set in the wiki page.\r\n     */\r\n    WikiHtmlContent: string;\r\n}\r\n","import { SPRest } from \"../rest\";\r\nimport { IUtilities, Utilities } from \"./types\";\r\n\r\nexport {\r\n    ICreateWikiPageResult,\r\n    IEmailProperties,\r\n    IUtilities,\r\n    IWikiPageCreationInfo,\r\n    Utilities,\r\n} from \"./types\";\r\n\r\ndeclare module \"../rest\" {\r\n    interface SPRest {\r\n        readonly utility: IUtilities;\r\n    }\r\n}\r\n\r\nReflect.defineProperty(SPRest.prototype, \"utility\", {\r\n    configurable: true,\r\n    enumerable: true,\r\n    get: function (this: SPRest) {\r\n        return Utilities(this._baseUrl, \"\");\r\n    },\r\n});\r\n","import {\r\n    _SharePointQueryableInstance,\r\n    _SharePointQueryableCollection,\r\n    spInvokableFactory,\r\n} from \"../sharepointqueryable\";\r\nimport { body, headers } from \"@pnp/odata\";\r\nimport { defaultPath } from \"../decorators\";\r\nimport { spPost, spDelete, spPatch } from \"../operations\";\r\nimport { tag } from \"../telemetry\";\r\n\r\n@defaultPath(\"subscriptions\")\r\nexport class _Subscriptions extends _SharePointQueryableCollection {\r\n\r\n    /**\r\n    * Returns all the webhook subscriptions or the specified webhook subscription\r\n    *\r\n    * @param subscriptionId The id of a specific webhook subscription to retrieve, omit to retrieve all the webhook subscriptions\r\n    */\r\n    public getById(subscriptionId: string): ISubscription {\r\n\r\n        return tag.configure(Subscription(this).concat(`('${subscriptionId}')`), \"subs.getById\");\r\n    }\r\n\r\n    /**\r\n     * Creates a new webhook subscription\r\n     *\r\n     * @param notificationUrl The url to receive the notifications\r\n     * @param expirationDate The date and time to expire the subscription in the form YYYY-MM-ddTHH:mm:ss+00:00 (maximum of 6 months)\r\n     * @param clientState A client specific string (optional)\r\n     */\r\n    @tag(\"subs.add\")\r\n    public async add(notificationUrl: string, expirationDate: string, clientState?: string): Promise<ISubscriptionAddResult> {\r\n\r\n        const postBody: any = {\r\n            \"expirationDateTime\": expirationDate,\r\n            \"notificationUrl\": notificationUrl,\r\n            \"resource\": this.toUrl(),\r\n        };\r\n\r\n        if (clientState) {\r\n            postBody.clientState = clientState;\r\n        }\r\n\r\n        const data = await spPost(this, body(postBody, headers({ \"Content-Type\": \"application/json\" })));\r\n\r\n        return { data, subscription: this.getById(data.id) };\r\n    }\r\n}\r\nexport interface ISubscriptions extends _Subscriptions { }\r\nexport const Subscriptions = spInvokableFactory<ISubscriptions>(_Subscriptions);\r\n\r\nexport class _Subscription extends _SharePointQueryableInstance {\r\n\r\n    /**\r\n     * Renews this webhook subscription\r\n     *\r\n     * @param expirationDate The date and time to expire the subscription in the form YYYY-MM-ddTHH:mm:ss+00:00 (maximum of 6 months, optional)\r\n     * @param notificationUrl The url to receive the notifications (optional)\r\n     * @param clientState A client specific string (optional)\r\n     */\r\n    @tag(\"sub.update\")\r\n    public async update(expirationDate?: string, notificationUrl?: string, clientState?: string): Promise<ISubscriptionUpdateResult> {\r\n\r\n        const postBody: any = {};\r\n\r\n        if (expirationDate) {\r\n            postBody.expirationDateTime = expirationDate;\r\n        }\r\n\r\n        if (notificationUrl) {\r\n            postBody.notificationUrl = notificationUrl;\r\n        }\r\n\r\n        if (clientState) {\r\n            postBody.clientState = clientState;\r\n        }\r\n\r\n        const data = await spPatch(this, body(postBody, headers({ \"Content-Type\": \"application/json\" })));\r\n\r\n        return { data, subscription: this };\r\n    }\r\n\r\n    /**\r\n     * Removes this webhook subscription\r\n     *\r\n     */\r\n    @tag(\"sub.delete\")\r\n    public delete(): Promise<void> {\r\n        return spDelete(this);\r\n    }\r\n}\r\nexport interface ISubscription extends _Subscription { }\r\nexport const Subscription = spInvokableFactory<ISubscription>(_Subscription);\r\n\r\n/**\r\n * Result from adding a new subscription\r\n *\r\n */\r\nexport interface ISubscriptionAddResult {\r\n    subscription: ISubscription;\r\n    data: any;\r\n}\r\n\r\n/**\r\n * Result from updating a subscription\r\n *\r\n */\r\nexport interface ISubscriptionUpdateResult {\r\n    subscription: ISubscription;\r\n    data: any;\r\n}\r\n","import { addProp } from \"@pnp/odata\";\r\nimport { _List } from \"../lists/types\";\r\nimport { Subscriptions, ISubscriptions } from \"./types\";\r\n\r\ndeclare module \"../lists/types\" {\r\n    interface _List {\r\n        readonly subscriptions: ISubscriptions;\r\n    }\r\n    interface IList {\r\n        /**\r\n         * Gets the collection of webhooks created for this list\r\n         *\r\n         */\r\n        readonly subscriptions: ISubscriptions;\r\n    }\r\n}\r\n\r\naddProp(_List, \"subscriptions\", Subscriptions);\r\n","import { defaultPath } from \"../decorators\";\r\nimport { _SharePointQueryableCollection, spInvokableFactory, _SharePointQueryableInstance } from \"../sharepointqueryable\";\r\n\r\n\r\n// TODO::\r\n// import { tag } from \"../telemetry\";\r\n\r\n/**\r\n * Describes a collection of Form objects\r\n *\r\n */\r\n@defaultPath(\"_api/v2.1/termstore\")\r\nexport class _TermStore extends _SharePointQueryableInstance<ITermStoreInfo> {\r\n\r\n    /**\r\n     * Gets the term groups associated with this tenant\r\n     */\r\n    public get termGroups(): ITermGroups {\r\n        return TermGroups(this);\r\n    }\r\n\r\n    /**\r\n     * Gets the term groups associated with this tenant\r\n     */\r\n    public get groups(): ITermGroups {\r\n        return TermGroups(this, \"groups\");\r\n    }\r\n}\r\nexport interface ITermStore extends _TermStore { }\r\nexport const TermStore = spInvokableFactory<ITermStore>(_TermStore);\r\n\r\n\r\n@defaultPath(\"termgroups\")\r\nexport class _TermGroups extends _SharePointQueryableCollection<ITermGroupInfo[]> {\r\n\r\n    /**\r\n     * Gets a term group by id\r\n     * \r\n     * @param id Id of the term group to access\r\n     */\r\n    public getById(id: string): ITermGroup {\r\n        return TermGroup(this, id);\r\n    }\r\n}\r\nexport interface ITermGroups extends _TermGroups { }\r\nexport const TermGroups = spInvokableFactory<ITermGroups>(_TermGroups);\r\n\r\nexport class _TermGroup extends _SharePointQueryableInstance<ITermGroupInfo> {\r\n\r\n    /**\r\n     * Gets the term sets associated with this tenant\r\n     */\r\n    public get termSets(): ITermSets {\r\n        return TermSets(this);\r\n    }\r\n\r\n    /**\r\n     * Gets the term groups associated with this tenant\r\n     */\r\n    public get sets(): ITermSets {\r\n        return TermSets(this, \"sets\");\r\n    }\r\n}\r\nexport interface ITermGroup extends _TermGroup { }\r\nexport const TermGroup = spInvokableFactory<ITermGroup>(_TermGroup);\r\n\r\n\r\n@defaultPath(\"termsets\")\r\nexport class _TermSets extends _SharePointQueryableCollection<ITermSetInfo[]> {\r\n\r\n    /**\r\n     * Gets a term group by id\r\n     * \r\n     * @param id Id of the term group to access\r\n     */\r\n    public getById(id: string): ITermSet {\r\n        return TermSet(this, id);\r\n    }\r\n}\r\nexport interface ITermSets extends _TermSets { }\r\nexport const TermSets = spInvokableFactory<ITermSets>(_TermSets);\r\n\r\nexport class _TermSet extends _SharePointQueryableInstance<ITermSetInfo> {\r\n\r\n    public get terms(): ITerms {\r\n        return Terms(this);\r\n    }\r\n\r\n    public get parentGroup(): ITermGroup {\r\n        return TermGroup(this, \"parentGroup\");\r\n    }\r\n\r\n    public get children(): ITerms {\r\n        return Terms(this, \"children\");\r\n    }\r\n\r\n    public get relations(): IRelations {\r\n        return Relations(this);\r\n    }\r\n}\r\nexport interface ITermSet extends _TermSet { }\r\nexport const TermSet = spInvokableFactory<ITermSet>(_TermSet);\r\n\r\n\r\n@defaultPath(\"terms\")\r\nexport class _Terms extends _SharePointQueryableCollection<ITermInfo[]> {\r\n\r\n    /**\r\n     * Gets a term group by id\r\n     * \r\n     * @param id Id of the term group to access\r\n     */\r\n    public getById(id: string): ITerm {\r\n        return Term(this, id);\r\n    }\r\n }\r\nexport interface ITerms extends _Terms {}\r\nexport const Terms = spInvokableFactory<ITerms>(_Terms);\r\n\r\nexport class _Term extends _SharePointQueryableInstance<ITermInfo> {\r\n\r\n    public get parent(): ITerm {\r\n        return Term(this, \"parent\");\r\n    }\r\n\r\n    public get children(): ITerms {\r\n        return Terms(this, \"children\");\r\n    }\r\n\r\n    public get relations(): IRelations {\r\n        return Relations(this);\r\n    }\r\n\r\n    public get set(): ITermSet {\r\n        return TermSet(this, \"set\");\r\n    }\r\n}\r\nexport interface ITerm extends _Term { }\r\nexport const Term = spInvokableFactory<ITerm>(_Term);\r\n\r\n\r\n@defaultPath(\"relations\")\r\nexport class _Relations extends _SharePointQueryableCollection<IRelationInfo[]> {\r\n    /**\r\n     * Gets a term group by id\r\n     * \r\n     * @param id Id of the term group to access\r\n     */\r\n    public getById(id: string): IRelation {\r\n        return Relation(this, id);\r\n    }\r\n}\r\nexport interface IRelations extends _Relations { }\r\nexport const Relations = spInvokableFactory<IRelations>(_Relations);\r\n\r\nexport class _Relation extends _SharePointQueryableInstance<IRelationInfo> {\r\n\r\n    public get fromTerm(): ITerm {\r\n        return Term(this, \"fromTerm\");\r\n    }\r\n\r\n    public get toTerm(): ITerm {\r\n        return Term(this, \"toTerm\");\r\n    }\r\n\r\n    public get set(): ITermSet {\r\n        return TermSet(this, \"set\");\r\n    }\r\n}\r\nexport interface IRelation extends _Relation { }\r\nexport const Relation = spInvokableFactory<IRelation>(_Relation);\r\n\r\n\r\n// save these for when we are creating update types\r\n// Partial<Pick<ITermGroupInfo, \"name\" | \"description\">>\r\n// Omit<ITermGroupInfo, \"managers\" | \"contributors\" | \"createdDateTime\" | \"lastModifiedDateTime\">\r\n\r\n\r\nexport interface ITermStoreInfo {\r\n    id: string;\r\n    name: string;\r\n    defaultLanguageTag: string;\r\n    languageTags: string[];\r\n    administrators?: ITaxonomyUserInfo;\r\n}\r\n\r\nexport interface ITermGroupInfo {\r\n    id: string;\r\n    description: string;\r\n    name: string;\r\n    createdDateTime: string;\r\n    lastModifiedDateTime: string;\r\n    type: string;\r\n    managers?: ITaxonomyUserInfo[];\r\n    contributors?: ITaxonomyUserInfo[];\r\n}\r\n\r\nexport interface ITermSetInfo {\r\n    id: string;\r\n    localizedNames: { name: string, languageTag: string }[];\r\n    description: string;\r\n    childrenCount: number;\r\n    createdDateTime: string;\r\n    isOpen: boolean;\r\n    groupId: string;\r\n    properties: ITaxonomyProperty[];\r\n    customSortOrder: string;\r\n    isAvailableForTagging: boolean;\r\n    contact: string;\r\n    owner: ITaxonomyUserInfo;\r\n    stakeHolders: ITaxonomyUserInfo[];\r\n}\r\n\r\nexport interface ITermInfo {\r\n    id: string;\r\n    labels: { name: string, isDefault: boolean, languageTag: string }[];\r\n    isDeprecated: boolean;\r\n    childrenCount: number;\r\n    createdDateTime: string;\r\n    lastModifiedDateTime: string;\r\n    descriptions: { description: string, languageTag: string }[];\r\n    customSortOrder: { setId: string, order: string[] }[];\r\n    properties: ITaxonomyProperty[];\r\n    localProperties: { setId: string, properties: ITaxonomyProperty[] }[];\r\n    isAvailableForTagging: { setId: string, isAvailable: boolean }[];\r\n}\r\n\r\nexport interface IRelationInfo {\r\n    id: string;\r\n    relationType: string;\r\n}\r\n\r\nexport interface ITaxonomyUserInfo {\r\n    user: {\r\n        displayName: string;\r\n        email: string;\r\n        id: string;\r\n    };\r\n}\r\n\r\nexport interface ITaxonomyProperty {\r\n    key: string;\r\n    value: string;\r\n}\r\n","import { SPRest } from \"../rest\";\r\nimport { ITermStore, TermStore } from \"./types\";\r\n\r\nexport {\r\n    ITermStore,\r\n    TermStore,\r\n    ITaxonomyUserInfo,\r\n    ITermGroup,\r\n    ITermGroupInfo,\r\n    ITermGroups,\r\n    ITermSetInfo,\r\n    ITermSets,\r\n    ITermStoreInfo,\r\n    TermGroup,\r\n    TermGroups,\r\n    TermSets,\r\n    ITaxonomyProperty,\r\n    ITermInfo,\r\n    ITermSet,\r\n    ITerms,\r\n    TermSet,\r\n    Terms,\r\n    IRelation,\r\n    IRelationInfo,\r\n    IRelations,\r\n    ITerm,\r\n    Relation,\r\n    Relations,\r\n    Term,\r\n} from \"./types\";\r\n\r\ndeclare module \"../rest\" {\r\n    interface SPRest {\r\n        readonly termStore: ITermStore;\r\n    }\r\n}\r\n\r\nReflect.defineProperty(SPRest.prototype, \"termStore\", {\r\n    configurable: true,\r\n    enumerable: true,\r\n    get: function (this: SPRest) {\r\n        return TermStore(this._baseUrl).configure(this._options);\r\n    },\r\n});\r\n","import { addProp } from \"@pnp/odata\";\r\nimport { _List } from \"../lists/types\";\r\nimport { UserCustomActions, IUserCustomActions } from \"./types\";\r\n\r\ndeclare module \"../lists/types\" {\r\n    interface _List {\r\n        readonly userCustomActions: IUserCustomActions;\r\n    }\r\n\r\n    interface IList {\r\n        /**\r\n         * Get all custom actions on a list\r\n         */\r\n        readonly userCustomActions: IUserCustomActions;\r\n    }\r\n}\r\n\r\naddProp(_List, \"userCustomActions\", UserCustomActions);\r\n","import { addProp } from \"@pnp/odata\";\r\nimport { _Web } from \"../webs/types\";\r\nimport { UserCustomActions, IUserCustomActions } from \"./types\";\r\n\r\ndeclare module \"../webs/types\" {\r\n    interface _Web {\r\n        /**\r\n         * Gets a newly refreshed collection of the SPWeb's SPUserCustomActionCollection\r\n         */\r\n        readonly userCustomActions: IUserCustomActions;\r\n    }\r\n\r\n    interface IWeb {\r\n        /**\r\n         * Gets a newly refreshed collection of the SPWeb's SPUserCustomActionCollection\r\n         */\r\n        readonly userCustomActions: IUserCustomActions;\r\n    }\r\n}\r\n\r\naddProp(_Web, \"userCustomActions\", UserCustomActions);\r\n","import { addProp } from \"@pnp/odata\";\r\nimport { _Site } from \"../sites/types\";\r\nimport { UserCustomActions, IUserCustomActions } from \"./types\";\r\n\r\ndeclare module \"../sites/types\" {\r\n    interface _Site {\r\n        readonly userCustomActions: IUserCustomActions;\r\n    }\r\n\r\n    interface ISite {\r\n        /**\r\n         * Get all custom actions on a site collection\r\n         */\r\n        readonly userCustomActions: IUserCustomActions;\r\n    }\r\n}\r\n\r\naddProp(_Site, \"userCustomActions\", UserCustomActions);\r\n","import { ITypedHash } from \"@pnp/common\";\r\nimport { body } from \"@pnp/odata\";\r\nimport {\r\n    _SharePointQueryableInstance,\r\n    _SharePointQueryableCollection,\r\n    spInvokableFactory,\r\n    IDeleteable,\r\n    deleteable,\r\n} from \"../sharepointqueryable\";\r\nimport { metadata } from \"../utils/metadata\";\r\nimport { defaultPath } from \"../decorators\";\r\nimport { spPost } from \"../operations\";\r\nimport { tag } from \"../telemetry\";\r\n\r\n@defaultPath(\"views\")\r\nexport class _Views extends _SharePointQueryableCollection<IViewInfo[]> {\r\n\r\n    /**\t  \r\n     * Gets a view by guid id\t    \r\n     *\t   \r\n     * @param id The GUID id of the view\t    \r\n     */\r\n    public getById(id: string): IView {\r\n        return View(this).concat(`('${id}')`);\r\n    }\r\n\r\n    /**\r\n     * Gets a view by title (case-sensitive)\r\n     *\r\n     * @param title The case-sensitive title of the view\r\n     */\r\n    public getByTitle(title: string): IView {\r\n        return View(this, `getByTitle('${title}')`);\r\n    }\r\n\r\n    /**\r\n     * Adds a new view to the collection\r\n     *\r\n     * @param title The new views's title\r\n     * @param personalView True if this is a personal view, otherwise false, default = false\r\n     * @param additionalSettings Will be passed as part of the view creation body\r\n     */\r\n    @tag(\"vs.add\")\r\n    public async add(title: string, personalView = false, additionalSettings: ITypedHash<any> = {}): Promise<IViewAddResult> {\r\n\r\n        const postBody = body(Object.assign(metadata(\"SP.View\"), {\r\n            \"PersonalView\": personalView,\r\n            \"Title\": title,\r\n        }, additionalSettings));\r\n\r\n        const data = await spPost(this.clone(Views, null), postBody);\r\n\r\n        return {\r\n            data,\r\n            view: this.getById(data.Id),\r\n        };\r\n    }\r\n}\r\nexport interface IViews extends _Views { }\r\nexport const Views = spInvokableFactory<IViews>(_Views);\r\n\r\nexport class _View extends _SharePointQueryableInstance<IViewInfo> {\r\n\r\n    public delete = deleteable(\"vw\");\r\n\r\n    public get fields(): IViewFields {\r\n        return ViewFields(this);\r\n    }\r\n\r\n    /**\r\n     * Updates this view intance with the supplied properties\r\n     *\r\n     * @param properties A plain object hash of values to update for the view\r\n     */\r\n    public update: any = this._update<IViewUpdateResult, ITypedHash<any>>(\"SP.View\", data => ({ data, view: <any>this }));\r\n\r\n    /**\r\n     * Returns the list view as HTML.\r\n     *\r\n     */\r\n    @tag(\"v.renderAsHtml\")\r\n    public renderAsHtml(): Promise<string> {\r\n        return this.clone(View, \"renderashtml\")();\r\n    }\r\n\r\n    /**\r\n     * Sets the view schema\r\n     * \r\n     * @param viewXml The view XML to set\r\n     */\r\n    @tag(\"v.setViewXml\")\r\n    public setViewXml(viewXml: string): Promise<void> {\r\n        return spPost(this.clone(View, \"SetViewXml\"), body({ viewXml }));\r\n    }\r\n}\r\nexport interface IView extends _View, IDeleteable { }\r\nexport const View = spInvokableFactory<IView>(_View);\r\n\r\n@defaultPath(\"viewfields\")\r\nexport class _ViewFields extends _SharePointQueryableCollection<{ SchemaXml: string; }> {\r\n\r\n    /**\r\n     * Gets a value that specifies the XML schema that represents the collection.\r\n     */\r\n    @tag(\"vfs.getSchemaXml\")\r\n    public getSchemaXml(): Promise<string> {\r\n        return this.clone(ViewFields, \"schemaxml\")();\r\n    }\r\n\r\n    /**\r\n     * Adds the field with the specified field internal name or display name to the collection.\r\n     *\r\n     * @param fieldTitleOrInternalName The case-sensitive internal name or display name of the field to add.\r\n     */\r\n    @tag(\"vfs.add\")\r\n    public add(fieldTitleOrInternalName: string): Promise<void> {\r\n        return spPost(this.clone(ViewFields, `addviewfield('${fieldTitleOrInternalName}')`));\r\n    }\r\n\r\n    /**\r\n     * Moves the field with the specified field internal name to the specified position in the collection.\r\n     *\r\n     * @param field The case-sensitive internal name of the field to move.\r\n     * @param index The zero-based index of the new position for the field.\r\n     */\r\n    @tag(\"vfs.move\")\r\n    public move(field: string, index: number): Promise<void> {\r\n        return spPost(this.clone(ViewFields, \"moveviewfieldto\"), body({ field, index }));\r\n    }\r\n\r\n    /**\r\n     * Removes all the fields from the collection.\r\n     */\r\n    @tag(\"vfs.removeAll\")\r\n    public removeAll(): Promise<void> {\r\n        return spPost(this.clone(ViewFields, \"removeallviewfields\"));\r\n    }\r\n\r\n    /**\r\n     * Removes the field with the specified field internal name from the collection.\r\n     *\r\n     * @param fieldInternalName The case-sensitive internal name of the field to remove from the view.\r\n     */\r\n    @tag(\"vfs.remove\")\r\n    public remove(fieldInternalName: string): Promise<void> {\r\n        return spPost(this.clone(ViewFields, `removeviewfield('${fieldInternalName}')`));\r\n    }\r\n}\r\nexport interface IViewFields extends _ViewFields { }\r\nexport const ViewFields = spInvokableFactory<IViewFields>(_ViewFields);\r\n\r\nexport interface IViewAddResult {\r\n    view: IView;\r\n    data: IViewInfo;\r\n}\r\n\r\nexport interface IViewUpdateResult {\r\n    view: IView;\r\n    data: IViewInfo;\r\n}\r\n\r\nexport enum ViewScope {\r\n    DefaultValue,\r\n    Recursive,\r\n    RecursiveAll,\r\n    FilesOnly,\r\n}\r\n\r\nexport interface IViewInfo {\r\n    EditorModified: boolean;\r\n    Formats: string | null;\r\n    Hidden: boolean;\r\n    HtmlSchemaXml: string;\r\n    Id: string;\r\n    ImageUrl: string;\r\n    IncludeRootFolder: boolean;\r\n    JSLink: string;\r\n    ListViewXml: string;\r\n    Method: string | null;\r\n    MobileDefaultView: boolean;\r\n    MobileView: boolean;\r\n    ModerationType: string | null;\r\n    NewDocumentTemplates: string;\r\n    OrderedView: boolean;\r\n    Paged: boolean;\r\n    PersonalView: boolean;\r\n    ReadOnlyView: boolean;\r\n    RequiresClientIntegration: boolean;\r\n    RowLimit: number;\r\n    Scope: ViewScope;\r\n    ServerRelativePath: { DecodedUrl: string; };\r\n    ServerRelativeUrl: string;\r\n    StyleId: string | null;\r\n    TabularView: boolean;\r\n    Threaded: boolean;\r\n    Title: string;\r\n    Toolbar: string;\r\n    ToolbarTemplateName: string | null;\r\n    ViewData: string | null;\r\n    ViewJoins: string | null;\r\n    ViewProjectedFields: { SchemaXml: string } | null;\r\n    ViewQuery: string;\r\n    ViewType: string;\r\n    VisualizationInfo: any | null;\r\n}\r\n","import { addProp } from \"@pnp/odata\";\r\nimport { _List } from \"../lists/types\";\r\nimport { Views, IViews, IView, View } from \"./types\";\r\n\r\ndeclare module \"../lists/types\" {\r\n    interface _List {\r\n        readonly views: IViews;\r\n        readonly defaultView: IView;\r\n        getView(id: string): IView;\r\n    }\r\n    interface IList {\r\n        /**\r\n         * Gets the views on this list\r\n         */\r\n        readonly views: IViews;\r\n        /**\r\n         * Gets the default view for this list\r\n         */\r\n        readonly defaultView: IView;\r\n        /**\r\n         * Gets a view by view guid id\r\n         *\r\n         */\r\n        getView(id: string): IView;\r\n    }\r\n}\r\n\r\naddProp(_List, \"views\", Views);\r\naddProp(_List, \"defaultView\", View, \"DefaultView\");\r\n\r\n_List.prototype.getView = function (this: _List, viewId: string): IView {\r\n    return View(this, `getView('${viewId}')`);\r\n};\r\n","import {\r\n    _SharePointQueryableInstance,\r\n    _SharePointQueryableCollection,\r\n    ISharePointQueryableInstance,\r\n    _SharePointQueryable,\r\n    ISharePointQueryable,\r\n    spInvokableFactory,\r\n    SharePointQueryable,\r\n    SharePointQueryableInstance,\r\n} from \"../sharepointqueryable\";\r\nimport { body } from \"@pnp/odata\";\r\nimport { spPost } from \"../operations\";\r\nimport { tag } from \"../telemetry\";\r\n\r\nexport class _LimitedWebPartManager extends _SharePointQueryable implements ILimitedWebPartManager {\r\n\r\n    public get scope(): ISharePointQueryable {\r\n        return tag.configure(SharePointQueryable(this, \"Scope\"), \"f.scope\");\r\n    }\r\n\r\n    public get webparts(): IWebPartDefinitions {\r\n        return WebPartDefinitions(this, \"webparts\");\r\n    }\r\n\r\n    public export(id: string): Promise<string> {\r\n        return spPost(this.clone(LimitedWebPartManagerCloneFactory, \"ExportWebPart\"), body({ webPartId: id }));\r\n    }\r\n\r\n    public import(xml: string): Promise<any> {\r\n        return spPost(this.clone(LimitedWebPartManagerCloneFactory, \"ImportWebPart\"), body({ webPartXml: xml }));\r\n    }\r\n}\r\n\r\nexport interface ILimitedWebPartManager {\r\n\r\n    /**\r\n     * Gets the scope of this web part manager (User = 0 or Shared = 1)\r\n     */\r\n    readonly scope: ISharePointQueryable;\r\n\r\n    /**\r\n     * Gets the set of web part definitions contained by this web part manager\r\n     */\r\n    readonly webparts: IWebPartDefinitions;\r\n\r\n    /**\r\n     * Exports a webpart definition\r\n     *\r\n     * @param id the GUID id of the definition to export\r\n     */\r\n    export(id: string): Promise<string>;\r\n\r\n    /**\r\n     * Imports a webpart\r\n     *\r\n     * @param xml webpart definition which must be valid XML in the .dwp or .webpart format\r\n     */\r\n    import(xml: string): Promise<any>;\r\n}\r\n\r\nexport const LimitedWebPartManager = (baseUrl: string | ISharePointQueryable, path?: string): ILimitedWebPartManager => new _LimitedWebPartManager(baseUrl, path);\r\n\r\ntype LimitedWebPartManagerCloneType = ILimitedWebPartManager & ISharePointQueryable;\r\nconst LimitedWebPartManagerCloneFactory = (baseUrl: string | ISharePointQueryable, path?: string): LimitedWebPartManagerCloneType => <any>LimitedWebPartManager(baseUrl, path);\r\n\r\nexport class _WebPartDefinitions extends _SharePointQueryableCollection {\r\n\r\n    /**\r\n     * Gets a web part definition from the collection by id\r\n     *\r\n     * @param id The storage ID of the SPWebPartDefinition to retrieve\r\n     */\r\n    public getById(id: string): IWebPartDefinition {\r\n        return WebPartDefinition(this, `getbyid('${id}')`);\r\n    }\r\n\r\n    /**\r\n     * Gets a web part definition from the collection by storage id\r\n     *\r\n     * @param id The WebPart.ID of the SPWebPartDefinition to retrieve\r\n     */\r\n    public getByControlId(id: string): IWebPartDefinition {\r\n        return WebPartDefinition(this, `getByControlId('${id}')`);\r\n    }\r\n}\r\nexport interface IWebPartDefinitions extends _WebPartDefinitions { }\r\nexport const WebPartDefinitions = spInvokableFactory<IWebPartDefinitions>(_WebPartDefinitions);\r\n\r\nexport class _WebPartDefinition extends _SharePointQueryableInstance {\r\n\r\n    /**\r\n    * Gets the webpart information associated with this definition\r\n    */\r\n    public get webpart(): ISharePointQueryableInstance {\r\n        return SharePointQueryableInstance(this, \"webpart\");\r\n    }\r\n\r\n    /**\r\n     * Saves changes to the Web Part made using other properties and methods on the SPWebPartDefinition object\r\n     */\r\n    public saveChanges(): Promise<any> {\r\n        return spPost(this.clone(WebPartDefinition, \"SaveWebPartChanges\"));\r\n    }\r\n\r\n    /**\r\n     * Moves the Web Part to a different location on a Web Part Page\r\n     *\r\n     * @param zoneId The ID of the Web Part Zone to which to move the Web Part\r\n     * @param zoneIndex A Web Part zone index that specifies the position at which the Web Part is to be moved within the destination Web Part zone\r\n     */\r\n    public moveTo(zoneId: string, zoneIndex: number): Promise<void> {\r\n        return spPost(this.clone(WebPartDefinition, `MoveWebPartTo(zoneID='${zoneId}', zoneIndex=${zoneIndex})`));\r\n    }\r\n\r\n    /**\r\n     * Closes the Web Part. If the Web Part is already closed, this method does nothing\r\n     */\r\n    public close(): Promise<void> {\r\n        return spPost(this.clone(WebPartDefinition, \"CloseWebPart\"));\r\n    }\r\n\r\n    /**\r\n     * Opens the Web Part. If the Web Part is already closed, this method does nothing\r\n     */\r\n    public open(): Promise<void> {\r\n        return spPost(this.clone(WebPartDefinition, \"OpenWebPart\"));\r\n    }\r\n\r\n    /**\r\n     * Removes a webpart from a page, all settings will be lost\r\n     */\r\n    public delete(): Promise<void> {\r\n        return spPost(this.clone(WebPartDefinition, \"DeleteWebPart\"));\r\n    }\r\n}\r\nexport interface IWebPartDefinition extends _WebPartDefinition { }\r\nexport const WebPartDefinition = spInvokableFactory<IWebPartDefinition>(_WebPartDefinition);\r\n\r\nexport enum WebPartsPersonalizationScope {\r\n    User = 0,\r\n    Shared = 1,\r\n}\r\n","import { _File } from \"../files/types\";\r\nimport { WebPartsPersonalizationScope, ILimitedWebPartManager, LimitedWebPartManager } from \"./types\";\r\n\r\ndeclare module \"../files/types\" {\r\n    interface _File {\r\n        getLimitedWebPartManager(scope?: WebPartsPersonalizationScope): ILimitedWebPartManager;\r\n    }\r\n    interface IFile {\r\n        /**\r\n         * Specifies the control set used to access, modify, or add Web Parts associated with this Web Part Page and view.\r\n         * An exception is thrown if the file is not an ASPX page.\r\n         *\r\n         * @param scope The WebPartsPersonalizationScope view on the Web Parts page.\r\n         */\r\n        getLimitedWebPartManager(scope?: WebPartsPersonalizationScope): ILimitedWebPartManager;\r\n    }\r\n}\r\n\r\n_File.prototype.getLimitedWebPartManager = function (this: _File, scope = WebPartsPersonalizationScope.Shared): ILimitedWebPartManager {\r\n    return LimitedWebPartManager(this, `getLimitedWebPartManager(scope=${scope})`);\r\n};\r\n","import { SPRest } from \"../rest\";\r\n\r\nimport \"../appcatalog\";\r\nimport \"../attachments\";\r\nimport \"../clientside-pages\";\r\nimport \"../column-defaults\";\r\nimport \"../comments\";\r\nimport \"../content-types\";\r\nimport \"../features\";\r\nimport \"../fields\";\r\nimport \"../files\";\r\nimport \"../folders\";\r\nimport \"../forms\";\r\nimport \"../hubsites\";\r\nimport \"../items\";\r\nimport \"../lists\";\r\nimport \"../navigation\";\r\nimport \"../profiles\";\r\nimport \"../regional-settings\";\r\nimport \"../related-items\";\r\nimport \"../search\";\r\nimport \"../security\";\r\nimport \"../sharing\";\r\nimport \"../site-designs\";\r\nimport \"../site-groups\";\r\nimport \"../site-scripts\";\r\nimport \"../site-users\";\r\nimport \"../sites\";\r\nimport \"../social\";\r\nimport \"../sputilities\";\r\nimport \"../subscriptions\";\r\nimport \"../taxonomy\";\r\nimport \"../user-custom-actions\";\r\nimport \"../views\";\r\nimport \"../webparts\";\r\nimport \"../webs\";\r\n\r\nexport * from \"../appcatalog\";\r\nexport * from \"../attachments\";\r\nexport * from \"../clientside-pages\";\r\nexport * from \"../column-defaults\";\r\nexport * from \"../comments\";\r\nexport * from \"../content-types\";\r\nexport * from \"../features\";\r\nexport * from \"../fields\";\r\nexport * from \"../files\";\r\nexport * from \"../folders\";\r\nexport * from \"../forms\";\r\nexport * from \"../hubsites\";\r\nexport * from \"../items\";\r\nexport * from \"../lists\";\r\nexport * from \"../navigation\";\r\nexport { spODataEntity, spODataEntityArray } from \"../odata\";\r\nexport * from \"../profiles\";\r\nexport * from \"../regional-settings\";\r\nexport * from \"../related-items\";\r\nexport * from \"../search\";\r\nexport * from \"../security\";\r\nexport * from \"../sharing\";\r\nexport * from \"../site-designs\";\r\nexport * from \"../site-groups\";\r\nexport * from \"../site-scripts\";\r\nexport * from \"../site-users\";\r\nexport * from \"../sites\";\r\nexport * from \"../social\";\r\nexport * from \"../sputilities\";\r\nexport * from \"../subscriptions\";\r\nexport * from \"../taxonomy\";\r\nexport * from \"../user-custom-actions\";\r\nexport * from \"../views\";\r\nexport * from \"../webparts\";\r\nexport * from \"../webs\";\r\nexport * from \"../index\";\r\n\r\nexport const sp = new SPRest();\r\n","import { IGraphQueryable } from \"./graphqueryable\";\r\nimport { graphDelete, graphPatch, graphPost } from \"./operations\";\r\nimport { body, headers } from \"@pnp/odata\";\r\n\r\n/**\r\n * Decorator used to specify the default path for Queryable objects\r\n * \r\n * @param path \r\n */\r\nexport function defaultPath(path: string) {\r\n\r\n    return function <T extends { new(...args: any[]): {} }>(target: T) {\r\n\r\n        return class extends target {\r\n            constructor(...args: any[]) {\r\n                super(args[0], args.length > 1 && args[1] !== undefined ? args[1] : path);\r\n            }\r\n        };\r\n    };\r\n}\r\n\r\n/**\r\n * Adds the delete method to the tagged class\r\n */\r\nexport function deleteable() {\r\n    return function <T extends { new(...args: any[]): {} }>(target: T) {\r\n\r\n        return class extends target {\r\n            public delete(this: IGraphQueryable): Promise<void> {\r\n                return graphDelete(this);\r\n            }\r\n        };\r\n    };\r\n}\r\n\r\nexport interface IDeleteable {\r\n    /**\r\n     * Delete this instance\r\n     */\r\n    delete(): Promise<void>;\r\n}\r\n\r\n/**\r\n * Adds the delete method to the tagged class\r\n */\r\nexport function deleteableWithETag() {\r\n    return function <T extends { new(...args: any[]): {} }>(target: T) {\r\n\r\n        return class extends target {\r\n            public delete(this: IGraphQueryable, eTag = \"*\"): Promise<void> {\r\n                return graphDelete(this, headers({\r\n                        \"If-Match\": eTag,\r\n                }));\r\n            }\r\n        };\r\n    };\r\n}\r\n\r\nexport interface IDeleteableWithETag {\r\n    /**\r\n     * Delete this instance\r\n     */\r\n    delete(eTag?: string): Promise<void>;\r\n}\r\n\r\n/**\r\n * Adds the update method to the tagged class\r\n */\r\nexport function updateable() {\r\n    return function <T extends { new(...args: any[]): {} }>(target: T) {\r\n\r\n        return class extends target {\r\n            public update(this: IGraphQueryable, props: any): Promise<void> {\r\n                return graphPatch(this, body(props));\r\n            }\r\n        };\r\n    };\r\n}\r\n\r\nexport interface IUpdateable<T = any> {\r\n    /**\r\n     * Update the properties of an event object\r\n     * \r\n     * @param props Set of properties to update\r\n     */\r\n    update(props: T): Promise<void>;\r\n}\r\n\r\n/**\r\n * Adds the update method to the tagged class\r\n */\r\nexport function updateableWithETag() {\r\n    return function <T extends { new(...args: any[]): {} }>(target: T) {\r\n\r\n        return class extends target {\r\n            public update(this: IGraphQueryable, props: any, eTag = \"*\"): Promise<void> {\r\n                return graphPatch(this, body(props, headers({\r\n                    \"If-Match\": eTag,\r\n                })));\r\n            }\r\n        };\r\n    };\r\n}\r\n\r\nexport interface IUpdateableWithETag<T = any> {\r\n    /**\r\n     * Update the properties of an event object\r\n     * \r\n     * @param props Set of properties to update\r\n     */\r\n    update(props: T, eTag?: string): Promise<void>;\r\n}\r\n\r\n/**\r\n * Adds the add method to the tagged class\r\n */\r\nexport function addable() {\r\n    return function <T extends { new(...args: any[]): {} }>(target: T) {\r\n\r\n        return class extends target {\r\n            public add(this: IGraphQueryable, props: any): Promise<void> {\r\n                return graphPost(this, body(props));\r\n            }\r\n        };\r\n    };\r\n}\r\n\r\nexport interface IAddable<T = any, R = { id: string }> {\r\n    /**\r\n     * Adds a new item to this collection\r\n     * \r\n     * @param props properties used to create the new thread\r\n     */\r\n    add(props: T): Promise<R>;\r\n}\r\n\r\n/**\r\n * Adds the getById method to a collection\r\n */\r\nexport function getById<R>(factory: (...args: any[]) => R) {\r\n    return function <T extends { new(...args: any[]): {} }>(target: T) {\r\n\r\n        return class extends target {\r\n            public getById(this: IGraphQueryable, id: string): R {\r\n                return factory(this, id);\r\n            }\r\n        };\r\n    };\r\n}\r\nexport interface IGetById<R = any, T = string> {\r\n    /**\r\n     * Adds a new item to this collection\r\n     * \r\n     * @param props properties used to create the new thread\r\n     */\r\n    getById(id: T): R;\r\n}\r\n","import { body } from \"@pnp/odata\";\r\nimport {\r\n    ConversationThread as IConversationThreadType,\r\n    Post as IPostType,\r\n    Recipient as IRecipientType,\r\n    Conversation as IConversationType,\r\n    User as IUserType,\r\n} from \"@microsoft/microsoft-graph-types\";\r\nimport {\r\n    _GraphQueryableCollection,\r\n    _GraphQueryableInstance,\r\n    graphInvokableFactory,\r\n} from \"../graphqueryable\";\r\nimport { defaultPath, updateable, IUpdateable, deleteable, IDeleteable, addable, IAddable, getById, IGetById } from \"../decorators\";\r\nimport { graphPost, graphDelete } from \"../operations\";\r\n\r\n/**\r\n * Conversation\r\n */\r\n@updateable()\r\n@deleteable()\r\nexport class _Conversation extends _GraphQueryableInstance<IConversationType> {\r\n\r\n    /**\r\n     * Get all the threads in a group conversation.\r\n     */\r\n    public get threads(): IThreads {\r\n        return Threads(this);\r\n    }\r\n}\r\nexport interface IConversation extends _Conversation, IUpdateable<IConversationType>, IDeleteable { }\r\nexport const Conversation = graphInvokableFactory<IConversation>(_Conversation);\r\n\r\n/**\r\n * Conversations\r\n */\r\n@defaultPath(\"conversations\")\r\n@addable()\r\n@getById(Conversation)\r\nexport class _Conversations extends _GraphQueryableCollection<IConversationType[]> { }\r\nexport interface IConversations extends _Conversations, IGetById<IConversation>, IAddable<IConversationType> { }\r\nexport const Conversations = graphInvokableFactory<IConversations>(_Conversations);\r\n\r\n/**\r\n * Thread\r\n */\r\n@deleteable()\r\nexport class _Thread extends _GraphQueryableInstance {\r\n\r\n    /**\r\n     * Get all the threads in a group conversation.\r\n     */\r\n    public get posts(): IPosts {\r\n        return Posts(this);\r\n    }\r\n\r\n    /**\r\n     * Reply to a thread in a group conversation and add a new post to it\r\n     * \r\n     * @param post Contents of the post \r\n     */\r\n    public reply(post: IPostType): Promise<void> {\r\n        return graphPost(this.clone(Thread, \"reply\"), body(post));\r\n    }\r\n}\r\nexport interface IThread extends _Thread, IDeleteable { }\r\nexport const Thread = graphInvokableFactory<IThread>(_Thread);\r\n\r\n/**\r\n * Threads\r\n */\r\n@defaultPath(\"threads\")\r\n@addable()\r\n@getById(Thread)\r\nexport class _Threads extends _GraphQueryableCollection<IConversationThreadType[]> { }\r\nexport interface IThreads extends _Threads, IGetById<IThread>, IAddable<IConversationThreadType, { id: string }> { }\r\nexport const Threads = graphInvokableFactory<IThreads>(_Threads);\r\n\r\n\r\n/**\r\n * Post\r\n */\r\n@deleteable()\r\nexport class _Post extends _GraphQueryableInstance<IPostType> {\r\n    /**\r\n     * Forward a post to a recipient\r\n     */\r\n    public forward(info: IPostForwardInfo): Promise<void> {\r\n        return graphPost(this.clone(Post, \"forward\"), body(info));\r\n    }\r\n\r\n    /**\r\n     * Reply to a thread in a group conversation and add a new post to it\r\n     * \r\n     * @param post Contents of the post \r\n     */\r\n    public reply(post: IPostType): Promise<void> {\r\n        return graphPost(this.clone(Post, \"reply\"), body(post));\r\n    }\r\n}\r\nexport interface IPost extends _Post, IDeleteable { }\r\nexport const Post = graphInvokableFactory<IPost>(_Post);\r\n\r\n/**\r\n * Posts\r\n */\r\n@defaultPath(\"posts\")\r\n@addable()\r\n@getById(Post)\r\nexport class _Posts extends _GraphQueryableCollection<IPostType[]> { }\r\nexport interface IPosts extends _Posts, IGetById<IPost>, IAddable<IPostType> { }\r\nexport const Posts = graphInvokableFactory<IPosts>(_Posts);\r\n\r\n/**\r\n * Senders\r\n */\r\nexport class _Senders extends _GraphQueryableCollection<IUserType[]> {\r\n\r\n    /**\r\n     * Add a new user or group to this senders collection\r\n     * @param id The full @odata.id value to add (ex: https://graph.microsoft.com/v1.0/users/user@contoso.com)\r\n     */\r\n    public add(id: string): Promise<any> {\r\n        return graphPost(this.clone(Senders, \"$ref\"), body({ \"@odata.id\": id }));\r\n    }\r\n\r\n    /**\r\n     * Removes the entity from the collection\r\n     * \r\n     * @param id The full @odata.id value to remove (ex: https://graph.microsoft.com/v1.0/users/user@contoso.com)\r\n     */\r\n    public remove(id: string): Promise<void> {\r\n        const remover = this.clone(Senders, \"$ref\");\r\n        remover.query.set(\"$id\", id);\r\n        return graphDelete(remover);\r\n    }\r\n}\r\nexport interface ISenders extends _Senders { }\r\nexport const Senders = graphInvokableFactory<ISenders>(_Senders);\r\n\r\n/**\r\n * Information used to forward a post\r\n */\r\nexport interface IPostForwardInfo {\r\n    comment?: string;\r\n    toRecipients: IRecipientType[];\r\n}\r\n","import { Attachment as IAttachmentType } from \"@microsoft/microsoft-graph-types\";\r\nimport { body } from \"@pnp/odata\";\r\nimport { _GraphQueryableCollection, _GraphQueryableInstance, graphInvokableFactory } from \"../graphqueryable\";\r\nimport { graphPost } from \"../operations\";\r\nimport { defaultPath, getById, IGetById } from \"../decorators\";\r\nimport { type } from \"../utils/type\";\r\n\r\n/**\r\n * Attachment\r\n */\r\nexport class _Attachment extends _GraphQueryableInstance<IAttachmentType> { }\r\nexport interface IAttachment extends _Attachment { }\r\nexport const Attachment = graphInvokableFactory<IAttachment>(_Attachment);\r\n\r\n/**\r\n * Attachments\r\n */\r\n@defaultPath(\"attachments\")\r\n@getById(Attachment)\r\nexport class _Attachments extends _GraphQueryableCollection<IAttachmentType[]> {\r\n\r\n    /**\r\n     * Add attachment to this collection\r\n     * \r\n     * @param name Name given to the attachment file\r\n     * @param bytes File content\r\n     */\r\n    public addFile(name: string, bytes: string | Blob): Promise<IAttachmentType> {\r\n\r\n        return graphPost(this, body(type(\"#microsoft.graph.fileAttachment\", {\r\n            contentBytes: bytes,\r\n            name,\r\n        })));\r\n    }\r\n}\r\nexport interface IAttachments extends _Attachments, IGetById<IAttachment> {}\r\nexport const Attachments = graphInvokableFactory<IAttachments>(_Attachments);\r\n","export function type<T = unknown>(n: string, a: T): T & { \"@odata.type\": string} {\r\n    return Object.assign({ \"@odata.type\": n }, a);\r\n}\r\n","import { _Post } from \"../conversations/types\";\r\nimport { addProp } from \"@pnp/odata\";\r\nimport { Attachments, IAttachments } from \"./types\";\r\n\r\ndeclare module \"../conversations/types\" {\r\n    interface _Post {\r\n        readonly attachments: IAttachments;\r\n    }\r\n    interface IPost {\r\n        readonly attachments: IAttachments;\r\n    }\r\n}\r\n\r\naddProp(_Post, \"attachments\", Attachments);\r\n","import { _GraphQueryableCollection, _GraphQueryableInstance, graphInvokableFactory } from \"../graphqueryable\";\r\nimport { DirectoryObject as IDirectoryObjectType } from \"@microsoft/microsoft-graph-types\";\r\nimport { defaultPath, getById, IGetById, deleteable, IDeleteable } from \"../decorators\";\r\nimport { body } from \"@pnp/odata\";\r\nimport { graphPost } from \"../operations\";\r\n\r\n/**\r\n * Represents a Directory Object entity\r\n */\r\n@deleteable()\r\nexport class _DirectoryObject<GetType = IDirectoryObjectType> extends _GraphQueryableInstance<GetType> {\r\n\r\n  /**\r\n   * Returns all the groups and directory roles that the specified Directory Object is a member of. The check is transitive\r\n   * \r\n   * @param securityEnabledOnly \r\n   */\r\n  public getMemberObjects(securityEnabledOnly = false): Promise<string[]> {\r\n    return graphPost(this.clone(DirectoryObject, \"getMemberObjects\"), body({ securityEnabledOnly }));\r\n  }\r\n\r\n  /**\r\n   * Returns all the groups that the specified Directory Object is a member of. The check is transitive\r\n   * \r\n   * @param securityEnabledOnly \r\n   */\r\n  public getMemberGroups(securityEnabledOnly = false): Promise<string[]> {\r\n    return graphPost(this.clone(DirectoryObject, \"getMemberGroups\"), body({ securityEnabledOnly }));\r\n  }\r\n\r\n  /**\r\n   * Check for membership in a specified list of groups, and returns from that list those groups of which the specified user, group, or directory object is a member. \r\n   * This function is transitive.\r\n   * @param groupIds A collection that contains the object IDs of the groups in which to check membership. Up to 20 groups may be specified.\r\n   */\r\n  public checkMemberGroups(groupIds: String[]): Promise<string[]> {\r\n    return graphPost(this.clone(DirectoryObject, \"checkMemberGroups\"), body({ groupIds }));\r\n  }\r\n}\r\n\r\nexport interface IDirectoryObject<GetType = IDirectoryObjectType> extends _DirectoryObject, IDeleteable { }\r\nexport const DirectoryObject = graphInvokableFactory<IDirectoryObject>(_DirectoryObject);\r\n\r\n/**\r\n * Describes a collection of Directory Objects\r\n *\r\n */\r\n@defaultPath(\"directoryObjects\")\r\n@getById(DirectoryObject)\r\nexport class _DirectoryObjects<GetType = IDirectoryObjectType[]> extends _GraphQueryableCollection<GetType> {\r\n  /**\r\n  * Returns the directory objects specified in a list of ids. NOTE: The directory objects returned are the full objects containing all their properties. \r\n  * The $select query option is not available for this operation.\r\n  * \r\n  * @param ids A collection of ids for which to return objects. You can specify up to 1000 ids.\r\n  * @param type A collection of resource types that specifies the set of resource collections to search. Default is directoryObject.\r\n  */\r\n  public getByIds(ids: string[], type: DirectoryObjectTypes = DirectoryObjectTypes.directoryObject): Promise<IDirectoryObjectType[]> {\r\n    return graphPost(this.clone(DirectoryObjects, \"getByIds\"), body({ ids, type }));\r\n  }\r\n}\r\nexport interface IDirectoryObjects extends _DirectoryObjects, IGetById<IDirectoryObjectType> { }\r\nexport const DirectoryObjects = graphInvokableFactory<IDirectoryObjects>(_DirectoryObjects);\r\n\r\n/**\r\n * DirectoryObjectTypes\r\n */\r\nexport enum DirectoryObjectTypes {\r\n  /**\r\n   * Directory Objects\r\n   */\r\n  directoryObject,\r\n  /**\r\n   * User\r\n   */\r\n  user,\r\n  /**\r\n   * Group\r\n   */\r\n  group,\r\n  /**\r\n   * Device\r\n   */\r\n  device,\r\n}\r\n","import { assign, ITypedHash } from \"@pnp/common\";\r\nimport { Event as IEventType, Group as IGroupType } from \"@microsoft/microsoft-graph-types\";\r\nimport { body } from \"@pnp/odata\";\r\nimport { _GraphQueryableInstance, _GraphQueryableCollection, graphInvokableFactory } from \"../graphqueryable\";\r\nimport { defaultPath, deleteable, IDeleteable, updateable, IUpdateable, getById, IGetById } from \"../decorators\";\r\nimport { graphPost } from \"../operations\";\r\nimport { _DirectoryObject, _DirectoryObjects } from \"../directory-objects/types\";\r\n\r\nexport enum GroupType {\r\n    /**\r\n     * Office 365 (aka unified group)\r\n     */\r\n    Office365,\r\n    /**\r\n     * Dynamic membership\r\n     */\r\n    Dynamic,\r\n    /**\r\n     * Security\r\n     */\r\n    Security,\r\n}\r\n\r\n/**\r\n * Represents a group entity\r\n */\r\n@deleteable()\r\n@updateable()\r\nexport class _Group extends _DirectoryObject<IGroupType> {\r\n    /**\r\n     * Add the group to the list of the current user's favorite groups. Supported for only Office 365 groups\r\n     */\r\n    public addFavorite(): Promise<void> {\r\n        return graphPost(this.clone(Group, \"addFavorite\"));\r\n    }\r\n    /**\r\n     * Remove the group from the list of the current user's favorite groups. Supported for only Office 365 groups\r\n     */\r\n    public removeFavorite(): Promise<void> {\r\n        return graphPost(this.clone(Group, \"removeFavorite\"));\r\n    }\r\n    /**\r\n     * Reset the unseenCount of all the posts that the current user has not seen since their last visit\r\n     */\r\n    public resetUnseenCount(): Promise<void> {\r\n        return graphPost(this.clone(Group, \"resetUnseenCount\"));\r\n    }\r\n    /**\r\n     * Calling this method will enable the current user to receive email notifications for this group,\r\n     * about new posts, events, and files in that group. Supported for only Office 365 groups\r\n     */\r\n    public subscribeByMail(): Promise<void> {\r\n        return graphPost(this.clone(Group, \"subscribeByMail\"));\r\n    }\r\n    /**\r\n     * Calling this method will prevent the current user from receiving email notifications for this group\r\n     * about new posts, events, and files in that group. Supported for only Office 365 groups\r\n     */\r\n    public unsubscribeByMail(): Promise<void> {\r\n        return graphPost(this.clone(Group, \"unsubscribeByMail\"));\r\n    }\r\n    /**\r\n     * Get the occurrences, exceptions, and single instances of events in a calendar view defined by a time range, from the default calendar of a group\r\n     * \r\n     * @param start Start date and time of the time range\r\n     * @param end End date and time of the time range\r\n     */\r\n    public getCalendarView(start: Date, end: Date): Promise<IEventType[]> {\r\n\r\n        const view = this.clone(Group, \"calendarView\");\r\n        view.query.set(\"startDateTime\", start.toISOString());\r\n        view.query.set(\"endDateTime\", end.toISOString());\r\n        return view();\r\n    }\r\n}\r\nexport interface IGroup extends _Group, IDeleteable, IUpdateable { }\r\nexport const Group = graphInvokableFactory<IGroup>(_Group);\r\n\r\n/**\r\n * Describes a collection of Field objects\r\n *\r\n */\r\n@defaultPath(\"groups\")\r\n@getById(Group)\r\nexport class _Groups extends _GraphQueryableCollection<IGroupType[]> {\r\n\r\n    /**\r\n     * Create a new group as specified in the request body.\r\n     * \r\n     * @param name Name to display in the address book for the group\r\n     * @param mailNickname Mail alias for the group\r\n     * @param groupType Type of group being created\r\n     * @param additionalProperties A plain object collection of additional properties you want to set on the new group\r\n     */\r\n    public async add(name: string, mailNickname: string, groupType: GroupType, additionalProperties: ITypedHash<any> = {}): Promise<IGroupAddResult> {\r\n\r\n        let postBody = assign({\r\n            displayName: name,\r\n            mailEnabled: groupType === GroupType.Office365,\r\n            mailNickname: mailNickname,\r\n            securityEnabled: groupType !== GroupType.Office365,\r\n        }, additionalProperties);\r\n\r\n        // include a group type if required\r\n        if (groupType !== GroupType.Security) {\r\n\r\n            postBody = assign(postBody, {\r\n                groupTypes: groupType === GroupType.Office365 ? [\"Unified\"] : [\"DynamicMembership\"],\r\n            });\r\n        }\r\n\r\n        const data = await graphPost(this, body(postBody));\r\n\r\n        return {\r\n            data,\r\n            group: (<any>this).getById(data.id),\r\n        };\r\n    }\r\n}\r\nexport interface IGroups extends _Groups, IGetById<IGroup> { }\r\nexport const Groups = graphInvokableFactory<IGroups>(_Groups);\r\n\r\n/**\r\n * IGroupAddResult\r\n */\r\nexport interface IGroupAddResult {\r\n    group: IGroup;\r\n    data: any;\r\n}\r\n","import { body } from \"@pnp/odata\";\r\nimport { Event as IEventType, Calendar as ICalendarType } from \"@microsoft/microsoft-graph-types\";\r\nimport { _GraphQueryableCollection, _GraphQueryableInstance, graphInvokableFactory } from \"../graphqueryable\";\r\nimport { defaultPath, IDeleteable, deleteable, IUpdateable, updateable, getById, IGetById } from \"../decorators\";\r\nimport { graphPost } from \"../operations\";\r\n\r\n/**\r\n * Calendars\r\n */\r\n@defaultPath(\"calendars\")\r\nexport class _Calendars extends _GraphQueryableCollection<ICalendarType[]> { }\r\nexport interface ICalendars<GetType = any> extends _Calendars { }\r\nexport const Calendars = graphInvokableFactory<ICalendars>(_Calendars);\r\n\r\n/**\r\n * Calendar\r\n */\r\nexport class _Calendar extends _GraphQueryableInstance<ICalendarType> {\r\n\r\n    public get events(): IEvents {\r\n        return Events(this);\r\n    }\r\n}\r\nexport interface ICalendar extends _Calendar { }\r\nexport const Calendar = graphInvokableFactory<ICalendar>(_Calendar);\r\n\r\n/**\r\n * Event\r\n */\r\n@deleteable()\r\n@updateable()\r\nexport class _Event extends _GraphQueryableInstance<IEventType> { }\r\nexport interface IEvent extends _Event, IDeleteable, IUpdateable { }\r\nexport const Event = graphInvokableFactory<IEvent>(_Event);\r\n\r\n/**\r\n * Events\r\n */\r\n@defaultPath(\"events\")\r\n@getById(Event)\r\nexport class _Events extends _GraphQueryableCollection<IEventType[]> {\r\n\r\n    /**\r\n     * Adds a new event to the collection\r\n     * \r\n     * @param properties The set of properties used to create the event\r\n     */\r\n    public async add(properties: IEventType): Promise<IEventAddResult> {\r\n\r\n        const data = await graphPost(this, body(properties));\r\n\r\n        return {\r\n            data,\r\n            event: (<any>this).getById(data.id),\r\n        };\r\n    }\r\n}\r\nexport interface IEvents extends _Events, IGetById<IEvent> { }\r\nexport const Events = graphInvokableFactory<IEvents>(_Events);\r\n\r\n/**\r\n * EventAddResult\r\n */\r\nexport interface IEventAddResult {\r\n    data: IEventType;\r\n    event: IEvent;\r\n}\r\n","import { addProp } from \"@pnp/odata\";\r\nimport { _Group } from \"../groups/types\";\r\nimport { Calendar, ICalendar, IEvents, Events } from \"./types\";\r\n\r\ndeclare module \"../groups/types\" {\r\n    interface _Group {\r\n        readonly attachmentFiles: ICalendar;\r\n        readonly events: IEvents;\r\n    }\r\n    interface IGroup {\r\n        readonly attachmentFiles: ICalendar;\r\n        readonly events: IEvents;\r\n    }\r\n}\r\n\r\naddProp(_Group, \"calendar\", Calendar, \"calendar\");\r\naddProp(_Group, \"events\", Events);\r\n","import { _GraphQueryableCollection, graphInvokableFactory, _GraphQueryableInstance } from \"../graphqueryable\";\r\nimport { User as IUserType, Person as IPersonType } from \"@microsoft/microsoft-graph-types\";\r\nimport { _DirectoryObject, DirectoryObjects, IDirectoryObjects } from \"../directory-objects/types\";\r\nimport { defaultPath, updateable, deleteable, IUpdateable, IDeleteable, getById, IGetById } from \"../decorators\";\r\n\r\n@updateable()\r\n@deleteable()\r\nexport class _User extends _DirectoryObject<IUserType> {\r\n    /**\r\n    * The groups and directory roles associated with the user\r\n    */\r\n    public get memberOf(): IDirectoryObjects {\r\n        return DirectoryObjects(this, \"memberOf\");\r\n    }\r\n\r\n    /**\r\n     * Retrieve a collection of person objects ordered by their relevance to the user\r\n     */\r\n    public get people(): IPeople {\r\n        return People(this);\r\n    }\r\n}\r\nexport interface IUser extends _User, IUpdateable<IUserType>, IDeleteable { }\r\nexport const User = graphInvokableFactory<IUser>(_User);\r\n\r\n@defaultPath(\"users\")\r\n@getById(User)\r\nexport class _Users extends _GraphQueryableCollection<IUserType[]> { }\r\nexport interface IUsers extends _Users, IGetById<IUser> { }\r\nexport const Users = graphInvokableFactory<IUsers>(_Users);\r\n\r\n@defaultPath(\"people\")\r\nexport class _People extends _GraphQueryableCollection<IPersonType[]> {}\r\nexport interface IPeople extends _People { }\r\nexport const People = graphInvokableFactory<IPeople>(_People);\r\n","import { _GraphQueryableCollection, _GraphQueryableInstance, graphInvokableFactory } from \"../graphqueryable\";\r\nimport { ITypedHash, assign } from \"@pnp/common\";\r\nimport { Contact as IContactType, ContactFolder as IContactFolderType, EmailAddress as IEmailAddressType } from \"@microsoft/microsoft-graph-types\";\r\nimport { defaultPath, updateable, deleteable, IUpdateable, IDeleteable, getById, IGetById } from \"../decorators\";\r\nimport { graphPost } from \"../operations\";\r\nimport { body } from \"@pnp/odata\";\r\n\r\n/**\r\n * Contact\r\n */\r\n@updateable()\r\n@deleteable()\r\nexport class _Contact extends _GraphQueryableInstance<IContactType> { }\r\nexport interface IContact extends _Contact, IUpdateable<IContactType>, IDeleteable { }\r\nexport const Contact = graphInvokableFactory<IContact>(_Contact);\r\n\r\n/**\r\n * Contacts\r\n */\r\n@defaultPath(\"contacts\")\r\n@getById(Contact)\r\nexport class _Contacts extends _GraphQueryableCollection<IContactType[]> {\r\n\r\n    /**\r\n    * Create a new Contact for the user.\r\n    * \r\n    * @param givenName The contact's given name.\r\n    * @param surName The contact's surname.\r\n    * @param emailAddresses The contact's email addresses.\r\n    * @param businessPhones The contact's business phone numbers.\r\n    * @param additionalProperties A plain object collection of additional properties you want to set on the new contact\r\n    */\r\n    public async add(\r\n        givenName: string,\r\n        surName: string,\r\n        emailAddresses: IEmailAddressType[],\r\n        businessPhones: string[],\r\n        additionalProperties: ITypedHash<any> = {}): Promise<IContactAddResult> {\r\n\r\n        const postBody = assign({ businessPhones, emailAddresses, givenName, surName }, additionalProperties);\r\n\r\n        const data = await graphPost(this, body(postBody));\r\n\r\n        return {\r\n            contact: (<any>this).getById(data.id),\r\n            data,\r\n        };\r\n    }\r\n}\r\nexport interface IContacts extends _Contacts, IGetById<IContact> { }\r\nexport const Contacts = graphInvokableFactory<IContacts>(_Contacts);\r\n\r\n/**\r\n * Contact Folder\r\n */\r\n@deleteable()\r\n@updateable()\r\nexport class _ContactFolder extends _GraphQueryableInstance<IContactFolderType> {\r\n    /**\r\n     * Gets the contacts in this contact folder\r\n     */\r\n    public get contacts(): IContacts {\r\n        return Contacts(this);\r\n    }\r\n\r\n    /**\r\n    * Gets the contacts in this contact folder\r\n    */\r\n    public get childFolders(): IContactFolders {\r\n        return ContactFolders(this, \"childFolders\");\r\n    }\r\n}\r\nexport interface IContactFolder extends _ContactFolder, IUpdateable, IDeleteable { }\r\nexport const ContactFolder = graphInvokableFactory<IContactFolder>(_ContactFolder);\r\n\r\n/**\r\n * Contact Folders\r\n */\r\n@defaultPath(\"contactFolders\")\r\n@getById(ContactFolder)\r\nexport class _ContactFolders extends _GraphQueryableCollection<IContactFolderType[]> {\r\n\r\n    /**\r\n     * Create a new Contact Folder for the user.\r\n     * \r\n     * @param displayName The folder's display name.\r\n     * @param parentFolderId The ID of the folder's parent folder.\r\n     */\r\n    public async add(displayName: string, parentFolderId?: string): Promise<IContactFolderAddResult> {\r\n\r\n        const postBody = {\r\n            displayName: displayName,\r\n            parentFolderId: parentFolderId,\r\n        };\r\n\r\n        const data = await graphPost(this, body(postBody));\r\n\r\n        return {\r\n            contactFolder: (<any>this).getById(data.id),\r\n            data,\r\n        };\r\n    }\r\n}\r\nexport interface IContactFolders extends _ContactFolders, IGetById<IContactFolder> { }\r\nexport const ContactFolders = graphInvokableFactory<IContactFolders>(_ContactFolders);\r\n\r\n/**\r\n * IContactFolderAddResult\r\n */\r\nexport interface IContactFolderAddResult {\r\n    data: IContactFolderType;\r\n    contactFolder: IContactFolder;\r\n}\r\n\r\n/**\r\n * IContactAddResult\r\n */\r\nexport interface IContactAddResult {\r\n    data: IContactType;\r\n    contact: IContact;\r\n}\r\n","import { addProp } from \"@pnp/odata\";\r\nimport { _User } from \"../users/types\";\r\nimport { IContacts, Contacts, ContactFolders, IContactFolders } from \"./types\";\r\n\r\ndeclare module \"../users/types\" {\r\n    interface _User {\r\n        readonly contacts: IContacts;\r\n        readonly contactFolders: IContactFolders;\r\n    }\r\n    interface IUser {\r\n        readonly contacts: IContacts;\r\n        readonly contactFolders: IContactFolders;\r\n    }\r\n}\r\n\r\naddProp(_User, \"contacts\", Contacts);\r\naddProp(_User, \"contactFolders\", ContactFolders);\r\n","import { addProp } from \"@pnp/odata\";\r\nimport { _Group } from \"../groups/types\";\r\nimport { Conversations, IConversations, ISenders, Senders } from \"./types\";\r\n\r\ndeclare module \"../groups/types\" {\r\n    interface _Group {\r\n        readonly conversations: IConversations;\r\n        readonly acceptedSenders: ISenders;\r\n        readonly rejectedSenders: ISenders;\r\n    }\r\n    interface IGroup {\r\n        readonly conversations: IConversations;\r\n        readonly acceptedSenders: ISenders;\r\n        readonly rejectedSenders: ISenders;\r\n    }\r\n}\r\n\r\naddProp(_Group, \"conversations\", Conversations);\r\naddProp(_Group, \"acceptedSenders\", Senders, \"acceptedsenders\");\r\naddProp(_Group, \"rejectedSenders\", Senders, \"rejectedsenders\");\r\n","import { GraphRest } from \"../rest\";\r\nimport { IDirectoryObjects, DirectoryObjects } from \"./types\";\r\n\r\nexport {\r\n    IDirectoryObject,\r\n    DirectoryObjectTypes,\r\n    DirectoryObject,\r\n    DirectoryObjects,\r\n    IDirectoryObjects,\r\n} from \"./types\";\r\n\r\ndeclare module \"../rest\" {\r\n    interface GraphRest {\r\n        readonly directoryObjects: IDirectoryObjects;\r\n    }\r\n}\r\n\r\nReflect.defineProperty(GraphRest.prototype, \"directoryObjects\", {\r\n    configurable: true,\r\n    enumerable: true,\r\n    get: function (this: GraphRest) {\r\n        return DirectoryObjects(this);\r\n    },\r\n});\r\n","import { GraphRest } from \"../rest\";\r\nimport { IGroups, Groups } from \"./types\";\r\n\r\nexport {\r\n    Group,\r\n    GroupType,\r\n    Groups,\r\n    IGroup,\r\n    IGroupAddResult,\r\n    IGroups,\r\n} from \"./types\";\r\n\r\ndeclare module \"../rest\" {\r\n    interface GraphRest {\r\n        readonly groups: IGroups;\r\n    }\r\n}\r\n\r\nReflect.defineProperty(GraphRest.prototype, \"groups\", {\r\n    configurable: true,\r\n    enumerable: true,\r\n    get: function (this: GraphRest) {\r\n        return Groups(this);\r\n    },\r\n});\r\n","import {\r\n    OfficeGraphInsights as IOfficeGraphInsightsType,\r\n    Trending as ITrendingInsightType,\r\n    UsedInsight as IUsedInsightType,\r\n    SharedInsight as ISharedInsightType,\r\n    Entity as IEntityType,\r\n} from \"@microsoft/microsoft-graph-types\";\r\nimport {\r\n    _GraphQueryableInstance,\r\n    _GraphQueryableCollection,\r\n    graphInvokableFactory,\r\n} from \"../graphqueryable\";\r\nimport { defaultPath, getById, IGetById } from \"../decorators\";\r\n\r\n/**\r\n * Represents a insights entity\r\n */\r\n@defaultPath(\"insights\")\r\nexport class _Insights extends _GraphQueryableInstance<IOfficeGraphInsightsType> {\r\n\r\n    public get trending(): ITrendingInsights {\r\n        return TrendingInsights(this);\r\n    }\r\n\r\n    public get used(): IUsedInsights {\r\n        return UsedInsights(this);\r\n    }\r\n\r\n    public get shared(): ISharedInsights {\r\n        return SharedInsights(this);\r\n    }\r\n}\r\nexport interface IInsights extends _Insights {}\r\nexport const Insights = graphInvokableFactory<IInsights>(_Insights);\r\n\r\n/**\r\n * Describes a Trending Insight instance\r\n */\r\nexport class _TrendingInsight extends _GraphQueryableInstance<ITrendingInsightType> {\r\n    public get resource(): IResource {\r\n        return Resource(this);\r\n    }\r\n}\r\nexport interface ITrendingInsight extends _TrendingInsight { }\r\nexport const TrendingInsight = graphInvokableFactory<ITrendingInsight>(_TrendingInsight);\r\n\r\n/**\r\n * Describes a collection of Trending Insight objects\r\n *\r\n */\r\n@defaultPath(\"trending\")\r\n@getById(TrendingInsight)\r\nexport class _TrendingInsights extends _GraphQueryableCollection<ITrendingInsightType[]> {}\r\nexport interface ITrendingInsights extends _TrendingInsights, IGetById<ITrendingInsight> {}\r\nexport const TrendingInsights = graphInvokableFactory<ITrendingInsights>(_TrendingInsights);\r\n\r\n/**\r\n * Describes a Used Insight instance\r\n */\r\nexport class _UsedInsight extends _GraphQueryableInstance<IUsedInsightType> {\r\n    public get resource(): IResource {\r\n        return Resource(this);\r\n    }\r\n}\r\nexport interface IUsedInsight extends _UsedInsight { }\r\nexport const UsedInsight = graphInvokableFactory<IUsedInsight>(_UsedInsight);\r\n\r\n/**\r\n * Describes a collection of Used Insight objects\r\n *\r\n */\r\n@defaultPath(\"used\")\r\n@getById(UsedInsight)\r\nexport class _UsedInsights extends _GraphQueryableCollection<IUsedInsightType[]> {}\r\nexport interface IUsedInsights extends _UsedInsights, IGetById<IUsedInsight> {}\r\nexport const UsedInsights = graphInvokableFactory<IUsedInsights>(_UsedInsights);\r\n\r\n/**\r\n * Describes a Shared Insight instance\r\n */\r\nexport class _SharedInsight extends _GraphQueryableInstance<ISharedInsightType> {\r\n    public get resource(): IResource {\r\n        return Resource(this);\r\n    }\r\n}\r\nexport interface ISharedInsight extends _SharedInsight { }\r\nexport const SharedInsight = graphInvokableFactory<ISharedInsight>(_SharedInsight);\r\n\r\n/**\r\n * Describes a collection of Shared Insight objects\r\n *\r\n */\r\n@defaultPath(\"shared\")\r\n@getById(SharedInsight)\r\nexport class _SharedInsights extends _GraphQueryableCollection<ISharedInsightType[]> {}\r\nexport interface ISharedInsights extends _SharedInsights, IGetById<ISharedInsight> {}\r\nexport const SharedInsights = graphInvokableFactory<ISharedInsights>(_SharedInsights);\r\n\r\n/**\r\n * Describes a Resource Entity instance\r\n */\r\n@defaultPath(\"resource\")\r\nexport class _Resource extends _GraphQueryableInstance<IEntityType> {}\r\nexport interface IResource extends _Resource { }\r\nexport const Resource = graphInvokableFactory<IResource>(_Resource);\r\n","import { addProp } from \"@pnp/odata\";\r\nimport { _User } from \"../users/types\";\r\nimport { IInsights, Insights } from \"./types\";\r\n\r\ndeclare module \"../users/types\" {\r\n    interface _User {\r\n        readonly insights: IInsights;\r\n    }\r\n    interface IUser {\r\n        readonly insights: IInsights;\r\n    }\r\n}\r\n\r\naddProp(_User, \"insights\", Insights);\r\n","import { ITypedHash, assign } from \"@pnp/common\";\r\nimport { body } from \"@pnp/odata\";\r\nimport { Invitation as IInvitationType } from \"@microsoft/microsoft-graph-types\";\r\nimport { _GraphQueryableCollection, graphInvokableFactory } from \"../graphqueryable\";\r\nimport { defaultPath } from \"../decorators\";\r\nimport { graphPost } from \"../operations\";\r\n\r\n/**\r\n * Invitations\r\n */\r\n@defaultPath(\"invitations\")\r\nexport class _Invitations extends _GraphQueryableCollection<IInvitationType[]> {\r\n\r\n    /**\r\n     * Create a new Invitation via invitation manager.\r\n     * \r\n     * @param invitedUserEmailAddress The email address of the user being invited.\r\n     * @param inviteRedirectUrl The URL user should be redirected to once the invitation is redeemed.\r\n     * @param additionalProperties A plain object collection of additional properties you want to set in the invitation\r\n     */\r\n    public async create(invitedUserEmailAddress: string, inviteRedirectUrl: string, additionalProperties: ITypedHash<any> = {}): Promise<IInvitationAddResult> {\r\n\r\n        const postBody = assign({ inviteRedirectUrl, invitedUserEmailAddress }, additionalProperties);\r\n\r\n        const data = await graphPost<IInvitationType>(this, body(postBody));\r\n\r\n        return { data };\r\n    }\r\n}\r\nexport interface IInvitations extends _Invitations {}\r\nexport const Invitations = graphInvokableFactory<IInvitations>(_Invitations);\r\n\r\n/**\r\n * IInvitationAddResult\r\n */\r\nexport interface IInvitationAddResult {\r\n    data: IInvitationType;\r\n}\r\n","import { GraphRest } from \"../rest\";\r\nimport { IInvitations, Invitations } from \"./types\";\r\n\r\nexport {\r\n    IInvitationAddResult,\r\n    IInvitations,\r\n    Invitations,\r\n} from \"./types\";\r\n\r\ndeclare module \"../rest\" {\r\n    interface GraphRest {\r\n        readonly invitations: IInvitations;\r\n    }\r\n}\r\n\r\nReflect.defineProperty(GraphRest.prototype, \"invitations\", {\r\n    configurable: true,\r\n    enumerable: true,\r\n    get: function (this: GraphRest) {\r\n        return Invitations(this);\r\n    },\r\n});\r\n","import { body } from \"@pnp/odata\";\r\nimport { User as IMemberType } from \"@microsoft/microsoft-graph-types\";\r\nimport { _GraphQueryableCollection, _GraphQueryableInstance, graphInvokableFactory } from \"../graphqueryable\";\r\nimport { defaultPath, getById, IGetById } from \"../decorators\";\r\nimport { graphDelete, graphPost } from \"../operations\";\r\n\r\n/**\r\n * Member\r\n */\r\nexport class _Member extends _GraphQueryableInstance<IMemberType> {\r\n    /**\r\n     * Removes this Member\r\n     */\r\n    public remove(): Promise<void> {\r\n        return graphDelete(this.clone(Member, \"$ref\"));\r\n    }\r\n}\r\nexport interface IMember extends _Member { }\r\nexport const Member = graphInvokableFactory<IMember>(_Member);\r\n\r\n/**\r\n * Members\r\n */\r\n@defaultPath(\"members\")\r\n@getById(Member)\r\nexport class _Members extends _GraphQueryableCollection<IMemberType[]> {\r\n\r\n    /**\r\n     * Use this API to add a member to an Office 365 group, a security group or a mail-enabled security group through\r\n     * the members navigation property. You can add users or other groups.\r\n     * Important: You can add only users to Office 365 groups.\r\n     * \r\n     * @param id Full @odata.id of the directoryObject, user, or group object you want to add (ex: `https://graph.microsoft.com/v1.0/directoryObjects/${id}`)\r\n     */\r\n    public add(id: string): Promise<any> {\r\n        return graphPost(this.clone(Members, \"$ref\"), body({ \"@odata.id\": id }));\r\n    }\r\n}\r\nexport interface IMembers extends _Members, IGetById<IMember> { }\r\nexport const Members = graphInvokableFactory<IMembers>(_Members);\r\n","import { addProp } from \"@pnp/odata\";\r\nimport { _Group } from \"../groups/types\";\r\nimport { IMembers, Members } from \"./types\";\r\n\r\ndeclare module \"../groups/types\" {\r\n    interface _Group {\r\n        readonly owners: IMembers;\r\n        readonly members: IMembers;\r\n    }\r\n    interface IGroup {\r\n        readonly owners: IMembers;\r\n        readonly members: IMembers;\r\n    }\r\n}\r\n\r\naddProp(_Group, \"owners\", Members, \"owners\");\r\naddProp(_Group, \"members\", Members);\r\n","import { Message as IMessageType, MailFolder as IMailFolderType, MailboxSettings as IMailboxSettingsType } from \"@microsoft/microsoft-graph-types\";\r\nimport { _GraphQueryableCollection, _GraphQueryableInstance, graphInvokableFactory } from \"../graphqueryable\";\r\nimport { defaultPath, getById, addable, IGetById, IAddable, updateable, IUpdateable } from \"../decorators\";\r\n\r\n/**\r\n * Message\r\n */\r\nexport class _Message extends _GraphQueryableInstance<IMessageType> { }\r\nexport interface IMessage extends _Message { }\r\nexport const Message = graphInvokableFactory<IMessage>(_Message);\r\n\r\n/**\r\n * Messages\r\n */\r\n@defaultPath(\"messages\")\r\n@getById(Message)\r\n@addable()\r\nexport class _Messages extends _GraphQueryableCollection<IMessageType[]> { }\r\nexport interface IMessages extends _Messages, IGetById<IMessage>, IAddable<IMessageType> { }\r\nexport const Messages = graphInvokableFactory<IMessages>(_Messages);\r\n\r\n/**\r\n * MailFolder\r\n */\r\nexport class _MailFolder extends _GraphQueryableInstance<IMailFolderType> { }\r\nexport interface IMailFolder extends _MailFolder { }\r\nexport const MailFolder = graphInvokableFactory<IMailFolder>(_MailFolder);\r\n\r\n/**\r\n * MailFolders\r\n */\r\n@defaultPath(\"mailFolders\")\r\n@getById(MailFolder)\r\n@addable()\r\nexport class _MailFolders extends _GraphQueryableCollection<IMailFolderType[]> { }\r\nexport interface IMailFolders extends _MailFolders, IGetById<IMailFolder>, IAddable<IMailFolderType> { }\r\nexport const MailFolders = graphInvokableFactory<IMailFolders>(_MailFolders);\r\n\r\n/**\r\n * MailboxSettings\r\n */\r\n@defaultPath(\"mailboxSettings\")\r\n@updateable()\r\nexport class _MailboxSettings extends _GraphQueryableInstance<IMailboxSettingsType> { }\r\nexport interface IMailboxSettings extends _MailboxSettings, IUpdateable<IMailboxSettingsType> { }\r\nexport const MailboxSettings = graphInvokableFactory<IMailboxSettings>(_MailboxSettings);\r\n","import { addProp, body } from \"@pnp/odata\";\r\nimport { _User, User } from \"../users/types\";\r\nimport { IMessages, Messages, IMailboxSettings, MailboxSettings, IMailFolders, MailFolders, IMessage } from \"./types\";\r\nimport { graphPost } from \"../operations\";\r\n\r\ndeclare module \"../users/types\" {\r\n    interface _User {\r\n        readonly messages: IMessages;\r\n        readonly mailboxSettings: IMailboxSettings;\r\n        readonly mailFolders: IMailFolders;\r\n        sendMail(message: IMessage): Promise<void>;\r\n    }\r\n    interface IUser {\r\n        readonly messages: IMessages;\r\n        readonly mailboxSettings: IMailboxSettings;\r\n        readonly mailFolders: IMailFolders;\r\n        sendMail(message: IMessage): Promise<void>;\r\n    }\r\n}\r\n\r\naddProp(_User, \"messages\", Messages);\r\naddProp(_User, \"mailboxSettings\", MailboxSettings);\r\naddProp(_User, \"mailFolders\", MailFolders);\r\n\r\n_User.prototype.sendMail = function (this: _User, message: IMessage): Promise<void> {\r\n    return graphPost(this.clone(User, \"sendMail\"), body(message));\r\n};\r\n","import {\r\n    GraphQueryableInstance,\r\n    GraphQueryableCollection,\r\n    _GraphQueryableInstance,\r\n    IGraphQueryableInstance,\r\n    IGraphQueryableCollection,\r\n    _GraphQueryableCollection,\r\n    graphInvokableFactory,\r\n} from \"../graphqueryable\";\r\nimport { Drive as IDriveType } from \"@microsoft/microsoft-graph-types\";\r\nimport { assign, combine } from \"@pnp/common\";\r\nimport { defaultPath, getById, IGetById, deleteable, IDeleteable, updateable, IUpdateable } from \"../decorators\";\r\nimport { body } from \"@pnp/odata\";\r\nimport { graphPatch, graphGet, graphPut } from \"../operations\";\r\n\r\n/**\r\n * Describes a Drive instance\r\n *\r\n */\r\n@defaultPath(\"drive\")\r\nexport class _Drive extends _GraphQueryableInstance<IDriveType> {\r\n\r\n    public get root(): IRoot {\r\n        return Root(this);\r\n    }\r\n\r\n    public get list(): IGraphQueryableInstance {\r\n        return GraphQueryableInstance(this, \"list\");\r\n    }\r\n\r\n    public get recent(): IDriveItems {\r\n        return DriveItems(this, \"recent\");\r\n    }\r\n\r\n    public get sharedWithMe(): IDriveItems {\r\n        return DriveItems(this, \"sharedWithMe\");\r\n    }\r\n\r\n    public getItemById(id: string): IDriveItem {\r\n        return DriveItem(this, combine(\"items\", id));\r\n    }\r\n}\r\nexport interface IDrive extends _Drive {}\r\nexport const Drive = graphInvokableFactory<IDrive>(_Drive);\r\n\r\n/**\r\n * Describes a collection of Drive objects\r\n *\r\n */\r\n@defaultPath(\"drives\")\r\n@getById(Drive)\r\nexport class _Drives extends _GraphQueryableCollection<IDriveType[]> { }\r\nexport interface IDrives extends _Drives, IGetById<IDrive> { }\r\nexport const Drives = graphInvokableFactory<IDrives>(_Drives);\r\n\r\n/**\r\n * Describes a Root instance\r\n *\r\n */\r\n@defaultPath(\"root\")\r\nexport class _Root extends _GraphQueryableInstance<IDrive> {\r\n\r\n    public get children(): IDriveItems {\r\n        return DriveItems(this, \"children\");\r\n    }\r\n\r\n    public search(query: string): Promise<any> {\r\n        const searcher = this.clone(Root);\r\n        searcher.query.set(\"search\", `'${query}'`);\r\n        return searcher();\r\n    }\r\n\r\n    public get thumbnails(): IGraphQueryableCollection {\r\n        return GraphQueryableCollection(this, \"thumbnails\");\r\n    }\r\n}\r\nexport interface IRoot extends _Root {}\r\nexport const Root = graphInvokableFactory<IRoot>(_Root);\r\n\r\n/**\r\n * Describes a Drive Item instance\r\n *\r\n */\r\n@deleteable()\r\n@updateable()\r\nexport class _DriveItem extends _GraphQueryableInstance<any> {\r\n\r\n    public get children(): IDriveItems {\r\n        return DriveItems(this, \"children\");\r\n    }\r\n\r\n    public get thumbnails(): IGraphQueryableCollection {\r\n        return GraphQueryableCollection(this, \"thumbnails\");\r\n    }\r\n\r\n    public get versions(): IGraphQueryableCollection<IDriveItemVersionInfo> {\r\n        return <any>GraphQueryableCollection(this, \"versions\");\r\n    }\r\n\r\n    public move(parentReference: { id: \"string\" }, name: string): Promise<void> {\r\n        return graphPatch(this, body(assign(parentReference, { name })));\r\n    }\r\n\r\n    public getContent(): Promise<any> {\r\n        return graphGet(this.clone(DriveItem, \"content\"));\r\n    }\r\n\r\n    public setContent(content: any): Promise<{ id: string, name: string, size: number }> {\r\n        return graphPut(this.clone(DriveItem, \"content\"), {\r\n            body: content,\r\n        });\r\n    }\r\n}\r\nexport interface IDriveItem extends _DriveItem, IDeleteable, IUpdateable {}\r\nexport const DriveItem = graphInvokableFactory<IDriveItem>(_DriveItem);\r\n\r\n/**\r\n * Describes a collection of Drive Item objects\r\n *\r\n */\r\n@getById(DriveItem)\r\nexport class _DriveItems extends _GraphQueryableCollection { }\r\nexport interface IDriveItems extends _DriveItems, IGetById<IDriveItem> { }\r\nexport const DriveItems = graphInvokableFactory<IDriveItems>(_DriveItems);\r\n\r\n/**\r\n * IDriveItemAddResult\r\n */\r\nexport interface IDriveItemAddResult {\r\n    data: any;\r\n    driveItem: IDriveItem;\r\n}\r\n\r\nexport interface IDriveItemVersionInfo {\r\n    id: string;\r\n    lastModifiedBy: {\r\n        user: {\r\n            id: string;\r\n            displayName: string;\r\n        },\r\n    };\r\n    lastModifiedDateTime: string;\r\n    size: number;\r\n}\r\n","import { addProp } from \"@pnp/odata\";\r\nimport { _User } from \"../users/types\";\r\nimport { IDrive, Drive, IDrives, Drives } from \"./types\";\r\n\r\ndeclare module \"../users/types\" {\r\n    interface _User {\r\n        readonly drive: IDrive;\r\n        readonly drives: IDrives;\r\n    }\r\n    interface IUser {\r\n        readonly drive: IDrive;\r\n        readonly drives: IDrives;\r\n    }\r\n}\r\n\r\naddProp(_User, \"drive\", Drive);\r\naddProp(_User, \"drives\", Drives);\r\n","import { body } from \"@pnp/odata\";\r\nimport { Notebook as INotebookType, Onenote as IOnenoteType, OnenoteSection as ISectionType, OnenotePage as IOnenotePageType } from \"@microsoft/microsoft-graph-types\";\r\nimport {\r\n    GraphQueryableCollection,\r\n    _GraphQueryableInstance,\r\n    _GraphQueryableCollection,\r\n    IGraphQueryableCollection,\r\n    graphInvokableFactory,\r\n} from \"../graphqueryable\";\r\nimport { defaultPath, getById, IGetById } from \"../decorators\";\r\nimport { graphPost } from \"../operations\";\r\n\r\n/**\r\n * Represents a onenote entity\r\n */\r\n@defaultPath(\"onenote\")\r\nexport class _OneNote extends _GraphQueryableInstance<IOnenoteType> {\r\n\r\n    public get notebooks(): INotebooks {\r\n        return Notebooks(this);\r\n    }\r\n\r\n    public get sections(): ISections {\r\n        return Sections(this);\r\n    }\r\n\r\n    public get pages(): IGraphQueryableCollection<IOnenotePageType[]> {\r\n        return <any>GraphQueryableCollection(this, \"pages\");\r\n    }\r\n}\r\nexport interface IOneNote extends _OneNote {}\r\nexport const OneNote = graphInvokableFactory<IOneNote>(_OneNote);\r\n\r\n\r\n/**\r\n * Describes a notebook instance\r\n *\r\n */\r\nexport class _Notebook extends _GraphQueryableInstance<INotebookType> {\r\n    public get sections(): ISections {\r\n        return Sections(this);\r\n    }\r\n}\r\nexport interface INotebook extends _Notebook {}\r\nexport const Notebook = graphInvokableFactory<INotebook>(_Notebook);\r\n\r\n/**\r\n * Describes a collection of Notebook objects\r\n *\r\n */\r\n@defaultPath(\"notebooks\")\r\n@getById(Notebook)\r\nexport class _Notebooks extends _GraphQueryableCollection<INotebookType[]> {\r\n    /**\r\n     * Create a new notebook as specified in the request body.\r\n     * \r\n     * @param displayName Notebook display name\r\n     */\r\n    public async add(displayName: string): Promise<INotebookAddResult> {\r\n\r\n        const data = await graphPost(this, body({ displayName }));\r\n\r\n        return {\r\n            data,\r\n            notebook: (<any>this).getById(data.id),\r\n        };\r\n    }\r\n}\r\nexport interface INotebooks extends _Notebooks, IGetById<INotebook> {}\r\nexport const Notebooks = graphInvokableFactory<INotebooks>(_Notebooks);\r\n\r\n\r\n/**\r\n * Describes a sections instance\r\n */\r\nexport class _Section extends _GraphQueryableInstance<ISectionType> { }\r\nexport interface ISection extends _Section { }\r\nexport const Section = graphInvokableFactory<ISection>(_Section);\r\n\r\n/**\r\n * Describes a collection of Sections objects\r\n *\r\n */\r\n@defaultPath(\"sections\")\r\n@getById(Section)\r\nexport class _Sections extends _GraphQueryableCollection<ISectionType[]> {\r\n    /**\r\n     * Adds a new section\r\n     * \r\n     * @param displayName New section display name\r\n     */\r\n    public async add(displayName: string): Promise<ISectionAddResult> {\r\n\r\n        const data = await graphPost(this, body({ displayName }));\r\n\r\n        return {\r\n            data,\r\n            section: (<any>this).getById(data.id),\r\n        };\r\n    }\r\n}\r\nexport interface ISections extends _Sections, IGetById<ISection> {}\r\nexport const Sections = graphInvokableFactory<ISections>(_Sections);\r\n\r\n/**\r\n * INotebookAddResult\r\n */\r\nexport interface INotebookAddResult {\r\n    data: any;\r\n    notebook: INotebook;\r\n}\r\n\r\n/**\r\n * ISectionAddResult\r\n */\r\nexport interface ISectionAddResult {\r\n    data: any;\r\n    section: ISection;\r\n}\r\n","import { addProp } from \"@pnp/odata\";\r\nimport { _User } from \"../users/types\";\r\nimport { IOneNote, OneNote } from \"./types\";\r\n\r\ndeclare module \"../users/types\" {\r\n    interface _User {\r\n        readonly onenote: IOneNote;\r\n    }\r\n    interface IUser {\r\n        readonly onenote: IOneNote;\r\n    }\r\n}\r\n\r\naddProp(_User, \"onenote\", OneNote);\r\n","import { _GraphQueryableInstance, graphInvokableFactory } from \"../graphqueryable\";\r\nimport { BlobParser, BufferParser } from \"@pnp/odata\";\r\nimport { Photo as IPhotoType } from \"@microsoft/microsoft-graph-types\";\r\nimport { defaultPath } from \"../decorators\";\r\nimport { graphPatch } from \"../operations\";\r\n\r\n@defaultPath(\"photo\")\r\nexport class _Photo extends _GraphQueryableInstance<IPhotoType> {\r\n    /**\r\n     * Gets the image bytes as a blob (browser)\r\n     */\r\n    public getBlob(): Promise<Blob> {\r\n        return this.clone(Photo, \"$value\", false).usingParser(new BlobParser())<Blob>();\r\n    }\r\n\r\n    /**\r\n     * Gets the image file byets as a Buffer (node.js)\r\n     */\r\n    public getBuffer(): Promise<ArrayBuffer> {\r\n        return this.clone(Photo, \"$value\", false).usingParser(new BufferParser())<ArrayBuffer>();\r\n    }\r\n\r\n    /**\r\n     * Sets the file bytes\r\n     * \r\n     * @param content Image file contents, max 4 MB\r\n     */\r\n    public setContent(content: ArrayBuffer | Blob): Promise<void> {\r\n        return graphPatch(this.clone(Photo, \"$value\", false), { body: content });\r\n    }\r\n}\r\nexport interface IPhoto extends _Photo { }\r\nexport const Photo = graphInvokableFactory<IPhoto>(_Photo);\r\n","import { addProp } from \"@pnp/odata\";\r\nimport { _Group } from \"../groups/types\";\r\nimport { Photo, IPhoto } from \"./types\";\r\n\r\ndeclare module \"../groups/types\" {\r\n    interface _Group {\r\n        readonly photo: IPhoto;\r\n    }\r\n    interface IGroup {\r\n        readonly photo: IPhoto;\r\n    }\r\n}\r\n\r\naddProp(_Group, \"photo\", Photo);\r\n","import { ITypedHash, assign } from \"@pnp/common\";\r\nimport {\r\n    PlannerPlan as IPlannerPlanType,\r\n    PlannerTask as IPlannerTaskType,\r\n    PlannerBucket as IPlannerBucketType,\r\n    Planner as IPlannerType,\r\n} from \"@microsoft/microsoft-graph-types\";\r\nimport { body } from \"@pnp/odata\";\r\nimport { _GraphQueryableInstance, _GraphQueryableCollection, graphInvokableFactory } from \"../graphqueryable\";\r\nimport { getById, IGetById, deleteableWithETag, IDeleteableWithETag, updateableWithETag, IUpdateableWithETag } from \"../decorators\";\r\nimport { graphPost } from \"../operations\";\r\nimport { defaultPath } from \"../decorators\";\r\n\r\n/**\r\n * Planner\r\n */\r\n@defaultPath(\"planner\")\r\nexport class _Planner extends _GraphQueryableInstance<IPlannerType> {\r\n\r\n    // Should Only be able to get by id, or else error occur\r\n    public get plans(): IPlans {\r\n        return Plans(this);\r\n    }\r\n\r\n    // Should Only be able to get by id, or else error occur\r\n    public get tasks(): ITasks {\r\n        return Tasks(this);\r\n    }\r\n\r\n    // Should Only be able to get by id, or else error occur\r\n    public get buckets(): IBuckets {\r\n        return Buckets(this);\r\n    }\r\n}\r\nexport interface IPlanner extends _Planner { }\r\nexport const Planner = graphInvokableFactory<IPlanner>(_Planner);\r\n\r\n/**\r\n * Plan\r\n */\r\n@updateableWithETag()\r\n@deleteableWithETag()\r\nexport class _Plan extends _GraphQueryableInstance<IPlannerPlanType> {\r\n\r\n    public get tasks(): ITasks {\r\n        return Tasks(this);\r\n    }\r\n\r\n    public get buckets(): IBuckets {\r\n        return Buckets(this);\r\n    }\r\n}\r\nexport interface IPlan extends _Plan, IUpdateableWithETag<IPlannerPlanType>, IDeleteableWithETag { }\r\nexport const Plan = graphInvokableFactory<IPlan>(_Plan);\r\n\r\n@defaultPath(\"plans\")\r\n@getById(Plan)\r\nexport class _Plans extends _GraphQueryableCollection<IPlannerPlanType[]> {\r\n    /**\r\n     * Create a new Planner Plan.\r\n     * \r\n     * @param owner Id of Group object.\r\n     * @param title The Title of the Plan.\r\n     */\r\n    public async add(owner: string, title: string): Promise<IPlanAddResult> {\r\n\r\n        const data = await graphPost(this, body({ owner, title }));\r\n\r\n        return {\r\n            data,\r\n            plan: (<any>this).getById(data.id),\r\n        };\r\n    }\r\n}\r\nexport interface IPlans extends _Plans, IGetById<IPlan> { }\r\nexport const Plans = graphInvokableFactory<IPlans>(_Plans);\r\n\r\n/**\r\n * Task\r\n */\r\n@updateableWithETag()\r\n@deleteableWithETag()\r\nexport class _Task extends _GraphQueryableInstance<IPlannerTaskType> { }\r\nexport interface ITask extends _Task, IUpdateableWithETag<IPlannerTaskType>, IDeleteableWithETag { }\r\nexport const Task = graphInvokableFactory<ITask>(_Task);\r\n\r\n/**\r\n * Tasks\r\n */\r\n@defaultPath(\"tasks\")\r\n@getById(Task)\r\nexport class _Tasks extends _GraphQueryableCollection<IPlannerTaskType[]> {\r\n    /**\r\n     * Create a new Planner Task.\r\n     * \r\n     * @param planId Id of Plan.\r\n     * @param title The Title of the Task.\r\n     * @param assignments Assign the task\r\n     * @param bucketId Id of Bucket\r\n     */\r\n    public async add(planId: string, title: string, assignments?: ITypedHash<any>, bucketId?: string): Promise<ITaskAddResult> {\r\n\r\n        let postBody = assign({\r\n            planId,\r\n            title,\r\n        }, assignments);\r\n\r\n        if (bucketId) {\r\n            postBody = assign(postBody, {\r\n                bucketId: bucketId,\r\n            });\r\n        }\r\n\r\n        const data = await graphPost(this, body(postBody));\r\n\r\n        return {\r\n            data,\r\n            task: (<any>this).getById(data.id),\r\n        };\r\n    }\r\n}\r\nexport interface ITasks extends _Tasks, IGetById<ITask> { }\r\nexport const Tasks = graphInvokableFactory<ITasks>(_Tasks);\r\n\r\n\r\n/**\r\n * Bucket\r\n */\r\n@updateableWithETag()\r\n@deleteableWithETag()\r\nexport class _Bucket extends _GraphQueryableInstance<IPlannerBucketType> {\r\n    public get tasks(): ITasks {\r\n        return Tasks(this);\r\n    }\r\n}\r\nexport interface IBucket extends _Bucket, IUpdateableWithETag<IPlannerBucketType>, IDeleteableWithETag { }\r\nexport const Bucket = graphInvokableFactory<IBucket>(_Bucket);\r\n\r\n\r\n/**\r\n * Buckets\r\n */\r\n@defaultPath(\"buckets\")\r\n@getById(Bucket)\r\nexport class _Buckets extends _GraphQueryableCollection<IPlannerBucketType[]> {\r\n    /**\r\n     * Create a new Bucket.\r\n     * \r\n     * @param name Name of Bucket object.\r\n     * @param planId The Id of the Plan.\r\n     * @param oderHint Hint used to order items of this type in a list view.\r\n     */\r\n    public async add(name: string, planId: string, orderHint?: string): Promise<IBucketAddResult> {\r\n\r\n        const postBody = {\r\n            name: name,\r\n            orderHint: orderHint ? orderHint : \"\",\r\n            planId: planId,\r\n        };\r\n\r\n        const data = await graphPost(this, body(postBody));\r\n\r\n        return {\r\n            bucket: (<any>this).getById(data.id),\r\n            data,\r\n        };\r\n    }\r\n}\r\nexport interface IBuckets extends _Buckets, IGetById<IBucket> { }\r\nexport const Buckets = graphInvokableFactory<IBuckets>(_Buckets);\r\n\r\nexport interface IBucketAddResult {\r\n    data: IPlannerBucketType;\r\n    bucket: IBucket;\r\n}\r\n\r\nexport interface IPlanAddResult {\r\n    data: IPlannerPlanType;\r\n    plan: IPlan;\r\n}\r\n\r\nexport interface ITaskAddResult {\r\n    data: IPlannerTaskType;\r\n    task: ITask;\r\n}\r\n","import { addProp } from \"@pnp/odata\";\r\nimport { _Group } from \"../groups/types\";\r\nimport { IPlans, Plans } from \"./types\";\r\n\r\ndeclare module \"../groups/types\" {\r\n    interface _Group {\r\n        readonly plans: IPlans;\r\n    }\r\n    interface IGroup {\r\n        readonly plans: IPlans;\r\n    }\r\n}\r\n\r\naddProp(_Group, \"plans\", Plans, \"planner/plans\");\r\n","import { addProp } from \"@pnp/odata\";\r\nimport { _User } from \"../users/types\";\r\nimport { ITasks, Tasks } from \"./types\";\r\n\r\ndeclare module \"../users/types\" {\r\n    interface _User {\r\n        readonly tasks: ITasks;\r\n    }\r\n    interface IUser {\r\n        readonly tasks: ITasks;\r\n    }\r\n}\r\n\r\naddProp(_User, \"tasks\", Tasks, \"planner/tasks\");\r\n","import { GraphRest } from \"../rest\";\r\nimport { IPlanner, Planner } from \"./types\";\r\n\r\nimport \"./groups\";\r\nimport \"./users\";\r\n\r\nexport {\r\n    Bucket,\r\n    Buckets,\r\n    IBucket,\r\n    IBucketAddResult,\r\n    IBuckets,\r\n    IPlan,\r\n    IPlanAddResult,\r\n    IPlanner,\r\n    IPlans,\r\n    ITask,\r\n    ITaskAddResult,\r\n    ITasks,\r\n    Plan,\r\n    Planner,\r\n    Plans,\r\n    Task,\r\n    Tasks,\r\n} from \"./types\";\r\n\r\ndeclare module \"../rest\" {\r\n    interface GraphRest {\r\n        readonly planner: IPlanner;\r\n    }\r\n}\r\n\r\nReflect.defineProperty(GraphRest.prototype, \"planner\", {\r\n    configurable: true,\r\n    enumerable: true,\r\n    get: function (this: GraphRest) {\r\n        return Planner(this);\r\n    },\r\n});\r\n","import { _GraphQueryableInstance, _GraphQueryableCollection, graphInvokableFactory } from \"../graphqueryable\";\r\nimport { assign } from \"@pnp/common\";\r\nimport { body } from \"@pnp/odata\";\r\nimport { Subscription as ISubscriptionType } from \"@microsoft/microsoft-graph-types\";\r\nimport { defaultPath, deleteable, IDeleteable, IUpdateable, updateable, getById, IGetById } from \"../decorators\";\r\nimport { graphPost } from \"../operations\";\r\n\r\n/**\r\n * Subscription\r\n */\r\n@deleteable()\r\n@updateable()\r\nexport class _Subscription extends _GraphQueryableInstance<ISubscriptionType> { }\r\nexport interface ISubscription extends _Subscription, IDeleteable, IUpdateable<ISubscriptionType> { }\r\nexport const Subscription = graphInvokableFactory<ISubscription>(_Subscription);\r\n\r\n/**\r\n * Subscriptions\r\n */\r\n@defaultPath(\"subscriptions\")\r\n@getById(Subscription)\r\nexport class _Subscriptions extends _GraphQueryableCollection<ISubscriptionType[]> {\r\n    /**\r\n     * Create a new Subscription.\r\n     * \r\n     * @param changeType Indicates the type of change in the subscribed resource that will raise a notification. The supported values are: created, updated, deleted.\r\n     * @param notificationUrl The URL of the endpoint that will receive the notifications. This URL must make use of the HTTPS protocol.\r\n     * @param resource Specifies the resource that will be monitored for changes. Do not include the base URL (https://graph.microsoft.com/v1.0/).\r\n     * @param expirationDateTime Specifies the date and time when the webhook subscription expires. The time is in UTC.\r\n     * @param props A plain object collection of additional properties you want to set on the new subscription\r\n     * \r\n     */\r\n    public async add(changeType: string, notificationUrl: string, resource: string, expirationDateTime: string, props: ISubscriptionType = {}): Promise<ISubAddResult> {\r\n\r\n        const postBody = assign({\r\n            changeType,\r\n            expirationDateTime,\r\n            notificationUrl,\r\n            resource,\r\n        }, props);\r\n\r\n        const data = await graphPost(this, body(postBody));\r\n\r\n        return {\r\n            data,\r\n            subscription: (<any>this).getById(data.id),\r\n        };\r\n    }\r\n}\r\nexport interface ISubscriptions extends _Subscriptions, IGetById<ISubscription> {}\r\nexport const Subscriptions = graphInvokableFactory<ISubscriptions>(_Subscriptions);\r\n\r\n/**\r\n * ISubAddResult\r\n */\r\nexport interface ISubAddResult {\r\n    data: ISubscriptionType;\r\n    subscription: ISubscription;\r\n}\r\n","import { GraphRest } from \"../rest\";\r\nimport { Subscriptions, ISubscriptions } from \"./types\";\r\n\r\nexport {\r\n    ISubscription,\r\n    ISubAddResult,\r\n    ISubscriptions,\r\n    Subscription,\r\n    Subscriptions,\r\n} from \"./types\";\r\n\r\ndeclare module \"../rest\" {\r\n    interface GraphRest {\r\n        readonly subscriptions: ISubscriptions;\r\n    }\r\n}\r\n\r\nReflect.defineProperty(GraphRest.prototype, \"subscriptions\", {\r\n    configurable: true,\r\n    enumerable: true,\r\n    get: function (this: GraphRest) {\r\n        return Subscriptions(this);\r\n    },\r\n});\r\n","import { _GraphQueryableInstance, _GraphQueryableCollection, graphInvokableFactory } from \"../graphqueryable\";\r\nimport { body } from \"@pnp/odata\";\r\nimport { assign } from \"@pnp/common\";\r\nimport { updateable, IUpdateable, getById, IGetById, deleteable, IDeleteable } from \"../decorators\";\r\nimport { graphPost } from \"../operations\";\r\nimport { defaultPath } from \"../decorators\";\r\n\r\n/**\r\n * Represents a Microsoft Team\r\n */\r\n@defaultPath(\"team\")\r\n@updateable()\r\nexport class _Team extends _GraphQueryableInstance<ITeamProperties> {\r\n\r\n    public get channels(): IChannels {\r\n        return Channels(this);\r\n    }\r\n\r\n    /**\r\n     * Archives this Team\r\n     * \r\n     * @param shouldSetSpoSiteReadOnlyForMembers Should members have Read-only in associated Team Site\r\n     */\r\n    public archive(shouldSetSpoSiteReadOnlyForMembers = false): Promise<void> {\r\n        return graphPost(this.clone(Team, \"archive\"), body({ shouldSetSpoSiteReadOnlyForMembers }));\r\n    }\r\n\r\n    /**\r\n    * Unarchives this Team\r\n    */\r\n    public unarchive(): Promise<void> {\r\n        return graphPost(this.clone(Team, \"unarchive\"));\r\n    }\r\n\r\n    /**\r\n     * Clones this Team\r\n     * @param name The name of the new Group\r\n     * @param description Optional description of the group\r\n     * @param partsToClone Parts to clone ex: apps,tabs,settings,channels,members\r\n     * @param visibility Set visibility to public or private \r\n     */\r\n    public cloneTeam(name: string, description = \"\", partsToClone = \"apps,tabs,settings,channels,members\", visibility: \"public\" | \"private\" = \"private\"): Promise<void> {\r\n\r\n        const postBody = {\r\n            description: description ? description : \"\",\r\n            displayName: name,\r\n            mailNickname: name,\r\n            partsToClone,\r\n            visibility,\r\n        };\r\n\r\n        // TODO:: we need to get the Location header from the response and return an operation\r\n        // instance that folks can query to see if/when this is complete\r\n        // it could just have a single method getResult (or whatever) that returns a promise that\r\n        // resolves when the operation is successful or rejects when it is not\r\n        return graphPost(this.clone(Team, \"clone\"), body(postBody));\r\n    }\r\n}\r\nexport interface ITeam extends _Team, IUpdateable<ITeamProperties> { }\r\nexport const Team = graphInvokableFactory<ITeam>(_Team);\r\n\r\n/**\r\n * Teams\r\n */\r\n@defaultPath(\"teams\")\r\n@getById(Team)\r\nexport class _Teams extends _GraphQueryableCollection<ITeamProperties[]> { }\r\nexport interface ITeams extends _Teams, IGetById<ITeam> { }\r\nexport const Teams = graphInvokableFactory<ITeams>(_Teams);\r\n\r\n/**\r\n * Channel\r\n */\r\nexport class _Channel extends _GraphQueryableInstance {\r\n    public get tabs(): ITabs {\r\n        return Tabs(this);\r\n    }\r\n}\r\nexport interface IChannel extends _Channel {}\r\nexport const Channel = graphInvokableFactory<IChannel>(_Channel);\r\n\r\n/**\r\n * Channels\r\n */\r\n@defaultPath(\"channels\")\r\n@getById(Channel)\r\nexport class _Channels extends _GraphQueryableCollection {\r\n\r\n    /**\r\n     * Creates a new Channel in the Team\r\n     * @param displayName The display name of the new channel\r\n     * @param description Optional description of the channel\r\n     * \r\n     */\r\n    public async add(displayName: string, description = \"\"): Promise<IChannelCreateResult> {\r\n\r\n        const postBody = {\r\n            description,\r\n            displayName,\r\n        };\r\n\r\n        const data = await graphPost(this, body(postBody));\r\n\r\n        return {\r\n            channel: (<any>this).getById(data.id),\r\n            data,\r\n        };\r\n    }\r\n}\r\nexport interface IChannels extends _Channels, IGetById<IChannel> { }\r\nexport const Channels = graphInvokableFactory<IChannels>(_Channels);\r\n\r\n/**\r\n * Tab\r\n */\r\n@defaultPath(\"tab\")\r\n@updateable()\r\n@deleteable()\r\nexport class _Tab extends _GraphQueryableInstance { }\r\nexport interface ITab extends _Tab, IUpdateable, IDeleteable { }\r\nexport const Tab = graphInvokableFactory<ITab>(_Tab);\r\n\r\n/**\r\n * Tabs\r\n */\r\n@defaultPath(\"tabs\")\r\n@getById(Tab)\r\nexport class _Tabs extends _GraphQueryableCollection {\r\n\r\n    /**\r\n     * Adds a tab to the cahnnel\r\n     * @param name The name of the new Tab\r\n     * @param appUrl The url to an app ex: https://graph.microsoft.com/beta/appCatalogs/teamsApps/12345678-9abc-def0-123456789a\r\n     * @param tabsConfiguration visit https://developer.microsoft.com/en-us/graph/docs/api-reference/v1.0/api/teamstab_add for reference\r\n     */\r\n    public async add(name: string, appUrl: string, properties: ITabsConfiguration): Promise<ITabCreateResult> {\r\n\r\n        const postBody = assign({\r\n            displayName: name,\r\n            \"teamsApp@odata.bind\": appUrl,\r\n        }, properties);\r\n\r\n        const data = await graphPost(this, body(postBody));\r\n\r\n        return {\r\n            data,\r\n            tab: (<any>this).getById(data.id),\r\n        };\r\n    }\r\n}\r\nexport interface ITabs extends _Tabs, IGetById<ITab> { }\r\nexport const Tabs = graphInvokableFactory<ITabs>(_Tabs);\r\n\r\nexport interface ITeamUpdateResult {\r\n    data: any;\r\n    team: ITeam;\r\n}\r\n\r\nexport interface IChannelCreateResult {\r\n    data: any;\r\n    channel: IChannel;\r\n}\r\n\r\nexport interface ITabCreateResult {\r\n    data: any;\r\n    tab: ITab;\r\n}\r\n\r\nexport interface ITabUpdateResult {\r\n    data: any;\r\n    tab: ITab;\r\n}\r\n\r\n/**\r\n * Defines the properties for a Team\r\n * \r\n * TODO:: remove this once typings are present in graph types package\r\n */\r\nexport interface ITeamProperties {\r\n\r\n    memberSettings?: {\r\n        \"allowCreateUpdateChannels\"?: boolean;\r\n        \"allowDeleteChannels\"?: boolean;\r\n        \"allowAddRemoveApps\"?: boolean;\r\n        \"allowCreateUpdateRemoveTabs\"?: boolean;\r\n        \"allowCreateUpdateRemoveConnectors\"?: boolean;\r\n    };\r\n\r\n    guestSettings?: {\r\n        \"allowCreateUpdateChannels\"?: boolean;\r\n        \"allowDeleteChannels\"?: boolean;\r\n    };\r\n\r\n    messagingSettings?: {\r\n        \"allowUserEditMessages\"?: boolean;\r\n        \"allowUserDeleteMessages\"?: boolean;\r\n        \"allowOwnerDeleteMessages\"?: boolean;\r\n        \"allowTeamMentions\"?: boolean;\r\n        \"allowChannelMentions\"?: boolean;\r\n    };\r\n\r\n    funSettings?: {\r\n        \"allowGiphy\"?: boolean;\r\n        \"giphyContentRating\"?: \"strict\" | string,\r\n        \"allowStickersAndMemes\"?: boolean;\r\n        \"allowCustomMemes\"?: boolean;\r\n    };\r\n}\r\n\r\nexport interface ITabsConfiguration {\r\n    configuration: {\r\n        \"entityId\": string;\r\n        \"contentUrl\": string;\r\n        \"websiteUrl\": string;\r\n        \"removeUrl\": string;\r\n    };\r\n}\r\n\r\nexport interface ITeamCreateResult {\r\n    data: any;\r\n    team: ITeam;\r\n}\r\n","import { addProp } from \"@pnp/odata\";\r\nimport { _User } from \"../users/types\";\r\nimport { ITeams, Teams } from \"./types\";\r\n\r\ndeclare module \"../users/types\" {\r\n    interface _User {\r\n        readonly joinedTeams: ITeams;\r\n    }\r\n    interface IUser {\r\n        readonly joinedTeams: ITeams;\r\n    }\r\n}\r\n\r\naddProp(_User, \"joinedTeams\", Teams, \"joinedTeams\");\r\n","import { addProp, body } from \"@pnp/odata\";\r\nimport { GraphRest } from \"../rest\";\r\nimport { _Group, Group } from \"../groups/types\";\r\nimport { ITeamCreateResult, ITeamProperties, ITeam, Team, ITeams, Teams } from \"./types\";\r\nimport { graphPut } from \"../operations\";\r\n\r\nimport \"./users\";\r\n\r\nexport {\r\n    Channel,\r\n    Channels,\r\n    IChannel,\r\n    IChannelCreateResult,\r\n    IChannels,\r\n    ITab,\r\n    ITabCreateResult,\r\n    ITabUpdateResult,\r\n    ITabs,\r\n    ITabsConfiguration,\r\n    ITeam,\r\n    ITeamCreateResult,\r\n    ITeamProperties,\r\n    ITeamUpdateResult,\r\n    ITeams,\r\n    Tab,\r\n    Tabs,\r\n    Team,\r\n    Teams,\r\n} from \"./types\";\r\n\r\ndeclare module \"../groups/types\" {\r\n    interface _Group {\r\n        readonly team: ITeam;\r\n        createTeam(properties: ITeamProperties): Promise<ITeamCreateResult>;\r\n    }\r\n    interface IGroup {\r\n        readonly team: ITeam;\r\n        createTeam(properties: ITeamProperties): Promise<ITeamCreateResult>;\r\n    }\r\n}\r\n\r\naddProp(_Group, \"team\", Team);\r\n\r\n_Group.prototype.createTeam = async function (this: _Group, props: ITeamProperties): Promise<ITeamCreateResult> {\r\n\r\n    const data = await graphPut(this.clone(Group, \"team\"), body(props));\r\n\r\n    return {\r\n        data,\r\n        team: this.team,\r\n    };\r\n};\r\n\r\ndeclare module \"../rest\" {\r\n    interface GraphRest {\r\n        readonly teams: ITeams;\r\n    }\r\n}\r\n\r\nReflect.defineProperty(GraphRest.prototype, \"teams\", {\r\n    configurable: true,\r\n    enumerable: true,\r\n    get: function (this: GraphRest) {\r\n        return Teams(this);\r\n    },\r\n});\r\n","import { GraphRest } from \"../rest\";\r\nimport { IUser, User, IUsers, Users } from \"./types\";\r\n\r\nexport {\r\n    IUser,\r\n    IUsers,\r\n    User,\r\n    Users,\r\n    IPeople,\r\n    People,\r\n} from \"./types\";\r\n\r\ndeclare module \"../rest\" {\r\n    interface GraphRest {\r\n        readonly me: IUser;\r\n        readonly users: IUsers;\r\n    }\r\n}\r\n\r\nReflect.defineProperty(GraphRest.prototype, \"me\", {\r\n    configurable: true,\r\n    enumerable: true,\r\n    get: function (this: GraphRest) {\r\n        return User(this, \"me\");\r\n    },\r\n});\r\n\r\nReflect.defineProperty(GraphRest.prototype, \"users\", {\r\n    configurable: true,\r\n    enumerable: true,\r\n    get: function (this: GraphRest) {\r\n        return Users(this);\r\n    },\r\n});\r\n","import { assign, objectDefinedNotNull } from \"./util\";\r\nimport { ISPFXContext } from \"./spfxcontextinterface\";\r\nimport { safeGlobal } from \"./safe-global\";\r\n\r\nexport interface IConfigOptions {\r\n    headers?: string[][] | { [key: string]: string } | Headers;\r\n    mode?: \"navigate\" | \"same-origin\" | \"no-cors\" | \"cors\";\r\n    credentials?: \"omit\" | \"same-origin\" | \"include\";\r\n    cache?: \"default\" | \"no-store\" | \"reload\" | \"no-cache\" | \"force-cache\" | \"only-if-cached\";\r\n}\r\n\r\nexport interface IFetchOptions extends IConfigOptions {\r\n    method?: string;\r\n    body?: any;\r\n}\r\n\r\nexport interface IHttpClientImpl {\r\n    fetch(url: string, options: IFetchOptions): Promise<Response>;\r\n}\r\n\r\nexport interface IRequestClient {\r\n    fetch(url: string, options?: IFetchOptions): Promise<Response>;\r\n    fetchRaw(url: string, options?: IFetchOptions): Promise<Response>;\r\n    get(url: string, options?: IFetchOptions): Promise<Response>;\r\n    post(url: string, options?: IFetchOptions): Promise<Response>;\r\n    patch(url: string, options?: IFetchOptions): Promise<Response>;\r\n    delete(url: string, options?: IFetchOptions): Promise<Response>;\r\n}\r\n\r\nexport function mergeHeaders(target: Headers, source: HeadersInit): void {\r\n\r\n    if (objectDefinedNotNull(source)) {\r\n        const temp = new Request(\"\", { headers: source });\r\n        temp.headers.forEach((value: string, name: string) => {\r\n            target.append(name, value);\r\n        });\r\n    }\r\n}\r\n\r\nexport function mergeOptions(target: IConfigOptions, source: IConfigOptions): void {\r\n\r\n    if (objectDefinedNotNull(source)) {\r\n        const headers = assign(target.headers || {}, source.headers!);\r\n        target = assign(target, source);\r\n        target.headers = headers;\r\n    }\r\n}\r\n\r\n/**\r\n * Parses out the root of the request url to use as the resource when getting the token\r\n * \r\n  * @param url The url to parse\r\n */\r\nexport function getADALResource(url: string): string {\r\n    const u = new URL(url);\r\n    return `${u.protocol}//${u.hostname}`;\r\n}\r\n\r\n/**\r\n * Makes requests using the global/window fetch API\r\n */\r\nexport class FetchClient implements IHttpClientImpl {\r\n\r\n    public fetch(url: string, options: IFetchOptions): Promise<Response> {\r\n\r\n        return safeGlobal.fetch(url, options);\r\n    }\r\n}\r\n\r\n/**\r\n * Makes requests using the fetch API adding the supplied token to the Authorization header\r\n */\r\nexport class BearerTokenFetchClient extends FetchClient {\r\n\r\n    constructor(private _token: string | null) {\r\n        super();\r\n    }\r\n\r\n    public get token() {\r\n        return this._token || \"\";\r\n    }\r\n\r\n    public set token(token: string) {\r\n        this._token = token;\r\n    }\r\n\r\n    public fetch(url: string, options: IFetchOptions = {}): Promise<Response> {\r\n\r\n        const headers = new Headers();\r\n\r\n        mergeHeaders(headers, options.headers);\r\n\r\n        headers.set(\"Authorization\", `Bearer ${this._token}`);\r\n\r\n        options.headers = headers;\r\n\r\n        return super.fetch(url, options);\r\n    }\r\n}\r\n\r\n/**\r\n * Client wrapping the aadTokenProvider available from SPFx >= 1.6\r\n */\r\nexport class SPFxAdalClient extends BearerTokenFetchClient {\r\n\r\n    /**\r\n     * \r\n     * @param context provide the appropriate SPFx Context object\r\n     */\r\n    constructor(private context: ISPFXContext) {\r\n        super(null);\r\n    }\r\n\r\n    /**\r\n     * Executes a fetch request using the supplied url and options\r\n     * \r\n     * @param url Absolute url of the request\r\n     * @param options Any options\r\n     */\r\n    public async fetch(url: string, options: IFetchOptions): Promise<Response> {\r\n\r\n        const token = await this.getToken(getADALResource(url));\r\n        this.token = token;\r\n        return super.fetch(url, options);\r\n    }\r\n\r\n    /**\r\n     * Gets an AAD token for the provided resource using the SPFx AADTokenProvider\r\n     * \r\n     * @param resource Resource for which a token is to be requested (ex: https://graph.microsoft.com)\r\n     */\r\n    public async getToken(resource: string): Promise<string> {\r\n\r\n        const provider = await this.context.aadTokenProviderFactory.getTokenProvider();\r\n        return provider.getToken(resource);\r\n    }\r\n}\r\n","import { dateAdd, getCtxCallback, jsS, objectDefinedNotNull } from \"./util\";\r\nimport { RuntimeConfig } from \"./libconfig\";\r\n\r\n/**\r\n * A wrapper class to provide a consistent interface to browser based storage\r\n *\r\n */\r\nexport class PnPClientStorageWrapper implements IPnPClientStore {\r\n\r\n    /**\r\n     * True if the wrapped storage is available; otherwise, false\r\n     */\r\n    public enabled: boolean;\r\n\r\n    /**\r\n     * Creates a new instance of the PnPClientStorageWrapper class\r\n     *\r\n     * @constructor\r\n     */\r\n    constructor(private store: Storage, public defaultTimeoutMinutes = -1) {\r\n\r\n        this.enabled = this.test();\r\n\r\n        // if the cache timeout is enabled call the handler\r\n        // this will clear any expired items and set the timeout function\r\n        if (RuntimeConfig.enableCacheExpiration) {\r\n            this.cacheExpirationHandler();\r\n        }\r\n    }\r\n\r\n    public static bind(store: Storage): IPnPClientStore {\r\n        return new PnPClientStorageWrapper(typeof (store) === \"undefined\" ? new MemoryStorage() : store);\r\n    }\r\n\r\n    /**\r\n     * Get a value from storage, or null if that value does not exist\r\n     *\r\n     * @param key The key whose value we want to retrieve\r\n     */\r\n    public get<T>(key: string): T | null {\r\n\r\n        if (!this.enabled) {\r\n            return null;\r\n        }\r\n\r\n        const o = this.store.getItem(key);\r\n\r\n        if (!objectDefinedNotNull(o)) {\r\n            return null;\r\n        }\r\n\r\n        const persistable = JSON.parse(o);\r\n\r\n        if (new Date(persistable.expiration) <= new Date()) {\r\n            this.delete(key);\r\n            return null;\r\n\r\n        } else {\r\n\r\n            return persistable.value as T;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a value to the underlying storage\r\n     *\r\n     * @param key The key to use when storing the provided value\r\n     * @param o The value to store\r\n     * @param expire Optional, if provided the expiration of the item, otherwise the default is used\r\n     */\r\n    public put(key: string, o: any, expire?: Date): void {\r\n        if (this.enabled) {\r\n            this.store.setItem(key, this.createPersistable(o, expire));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes a value from the underlying storage\r\n     *\r\n     * @param key The key of the pair we want to remove from storage\r\n     */\r\n    public delete(key: string): void {\r\n        if (this.enabled) {\r\n            this.store.removeItem(key);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets an item from the underlying storage, or adds it if it does not exist using the supplied getter function\r\n     *\r\n     * @param key The key to use when storing the provided value\r\n     * @param getter A function which will upon execution provide the desired value\r\n     * @param expire Optional, if provided the expiration of the item, otherwise the default is used\r\n     */\r\n    public async getOrPut<T>(key: string, getter: () => Promise<T>, expire?: Date): Promise<T> {\r\n\r\n        if (!this.enabled) {\r\n            return getter();\r\n        }\r\n\r\n        let o = this.get<T>(key);\r\n\r\n        if (o === null) {\r\n            o = await getter();\r\n            this.put(key, o, expire);\r\n        }\r\n\r\n        return o;\r\n    }\r\n\r\n    /**\r\n     * Deletes any expired items placed in the store by the pnp library, leaves other items untouched\r\n     */\r\n    public async deleteExpired(): Promise<void> {\r\n\r\n        if (!this.enabled) {\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i < this.store.length; i++) {\r\n            const key = this.store.key(i);\r\n            if (key !== null) {\r\n                // test the stored item to see if we stored it\r\n                if (/[\"|']?pnp[\"|']? ?: ?1/i.test(<string>this.store.getItem(key))) {\r\n                    // get those items as get will delete from cache if they are expired\r\n                    await this.get(key);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Used to determine if the wrapped storage is available currently\r\n     */\r\n    private test(): boolean {\r\n        const str = \"t\";\r\n        try {\r\n            this.store.setItem(str, str);\r\n            this.store.removeItem(str);\r\n            return true;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates the persistable to store\r\n     */\r\n    private createPersistable(o: any, expire?: Date): string {\r\n        if (expire === undefined) {\r\n\r\n            // ensure we are by default inline with the global library setting\r\n            let defaultTimeout = RuntimeConfig.defaultCachingTimeoutSeconds;\r\n            if (this.defaultTimeoutMinutes > 0) {\r\n                defaultTimeout = this.defaultTimeoutMinutes * 60;\r\n            }\r\n            expire = dateAdd(new Date(), \"second\", defaultTimeout);\r\n        }\r\n\r\n        return jsS({ pnp: 1, expiration: expire, value: o });\r\n    }\r\n\r\n    /**\r\n     * Deletes expired items added by this library in this.store and sets a timeout to call itself\r\n     */\r\n    private cacheExpirationHandler(): void {\r\n\r\n        if (!this.enabled) {\r\n            return;\r\n        }\r\n\r\n        this.deleteExpired().then(_ => {\r\n\r\n            // call ourself in the future\r\n            setTimeout(getCtxCallback(this, this.cacheExpirationHandler), RuntimeConfig.cacheExpirationIntervalMilliseconds);\r\n        }).catch(console.error);\r\n    }\r\n}\r\n\r\n/**\r\n * Interface which defines the operations provided by a client storage object\r\n */\r\nexport interface IPnPClientStore {\r\n    /**\r\n     * True if the wrapped storage is available; otherwise, false\r\n     */\r\n    enabled: boolean;\r\n\r\n    /**\r\n     * Get a value from storage, or null if that value does not exist\r\n     *\r\n     * @param key The key whose value we want to retrieve\r\n     */\r\n    get(key: string): any;\r\n\r\n    /**\r\n     * Adds a value to the underlying storage\r\n     *\r\n     * @param key The key to use when storing the provided value\r\n     * @param o The value to store\r\n     * @param expire Optional, if provided the expiration of the item, otherwise the default is used\r\n     */\r\n    put(key: string, o: any, expire?: Date): void;\r\n\r\n    /**\r\n     * Deletes a value from the underlying storage\r\n     *\r\n     * @param key The key of the pair we want to remove from storage\r\n     */\r\n    delete(key: string): void;\r\n\r\n    /**\r\n     * Gets an item from the underlying storage, or adds it if it does not exist using the supplied getter function\r\n     *\r\n     * @param key The key to use when storing the provided value\r\n     * @param getter A function which will upon execution provide the desired value\r\n     * @param expire Optional, if provided the expiration of the item, otherwise the default is used\r\n     */\r\n    getOrPut<T>(key: string, getter: () => Promise<T>, expire?: Date): Promise<T>;\r\n\r\n    /**\r\n     * Removes any expired items placed in the store by the pnp library, leaves other items untouched\r\n     */\r\n    deleteExpired(): Promise<void>;\r\n}\r\n\r\n/**\r\n * A thin implementation of in-memory storage for use in nodejs\r\n */\r\nclass MemoryStorage {\r\n\r\n    constructor(private _store = new Map<string, any>()) { }\r\n\r\n    public get length(): number {\r\n        return this._store.size;\r\n    }\r\n\r\n    public clear(): void {\r\n        this._store.clear();\r\n    }\r\n\r\n    public getItem(key: string): any {\r\n        return this._store.get(key);\r\n    }\r\n\r\n    public key(index: number): string {\r\n        return Array.from(this._store)[index][0];\r\n    }\r\n\r\n    public removeItem(key: string): void {\r\n        this._store.delete(key);\r\n    }\r\n\r\n    public setItem(key: string, data: string): void {\r\n        this._store.set(key, data);\r\n    }\r\n\r\n    [key: string]: any;\r\n    [index: number]: string;\r\n}\r\n\r\n/**\r\n * A class that will establish wrappers for both local and session storage\r\n */\r\nexport class PnPClientStorage {\r\n\r\n    /**\r\n     * Creates a new instance of the PnPClientStorage class\r\n     *\r\n     * @constructor\r\n     */\r\n    constructor(private _local: IPnPClientStore | null = null, private _session: IPnPClientStore | null = null) { }\r\n\r\n    /**\r\n     * Provides access to the local storage of the browser\r\n     */\r\n    public get local(): IPnPClientStore {\r\n\r\n        if (this._local === null) {\r\n            this._local = new PnPClientStorageWrapper(typeof (localStorage) === \"undefined\" ? new MemoryStorage() : localStorage);\r\n        }\r\n\r\n        return this._local;\r\n    }\r\n\r\n    /**\r\n     * Provides access to the session storage of the browser\r\n     */\r\n    public get session(): IPnPClientStore {\r\n\r\n        if (this._session === null) {\r\n            this._session = new PnPClientStorageWrapper(typeof (sessionStorage) === \"undefined\" ? new MemoryStorage() : sessionStorage);\r\n        }\r\n\r\n        return this._session;\r\n    }\r\n}\r\n","import { addProp } from \"@pnp/odata\";\r\nimport { _List } from \"../lists/types\";\r\nimport { Items, IItems } from \"./types\";\r\n\r\ndeclare module \"../lists/types\" {\r\n    interface _List {\r\n        readonly items: IItems;\r\n    }\r\n    interface IList {\r\n        readonly items: IItems;\r\n    }\r\n}\r\n\r\naddProp(_List, \"items\", Items);\r\n","import * as SPNS from \"@pnp/sp/presets/all\";\r\n\r\nexport {\r\n    SPNS,\r\n};\r\n","import * as GraphNS from \"@pnp/graph/presets/all\";\r\n\r\nexport {\r\n    GraphNS,\r\n};\r\n","import { ILibraryConfiguration, RuntimeConfig } from \"@pnp/common\";\r\nimport { SPConfigurationPart } from \"@pnp/sp\";\r\n\r\nexport interface PnPConfiguration extends ILibraryConfiguration, SPConfigurationPart { }\r\n\r\nexport function setup(config: PnPConfiguration): void {\r\n    RuntimeConfig.assign(config);\r\n}\r\n","export { graph, GraphRest } from \"./rest\";\r\n\r\nexport {\r\n    GraphBatch,\r\n} from \"./batch\";\r\n\r\nexport {\r\n    IGraphQueryableCollection,\r\n    IGraphQueryableInstance,\r\n    IGraphQueryableSearchableCollection,\r\n    GraphQueryable,\r\n    IGraphQueryable,\r\n    GraphQueryableCollection,\r\n    GraphQueryableInstance,\r\n    IGraphQueryableConstructor,\r\n    GraphQueryableSearchableCollection,\r\n} from \"./graphqueryable\";\r\n\r\nexport {\r\n    GraphConfiguration,\r\n    GraphConfigurationPart,\r\n} from \"./graphlibconfig\";\r\n\r\nexport * from \"./graphhttpclient\";\r\n\r\nexport * from \"./types\";\r\n\r\n","/*! adal-angular v1.0.17 2018-02-27 */\r\nvar AuthenticationContext=function(){\"use strict\";return AuthenticationContext=function(a){if(this.REQUEST_TYPE={LOGIN:\"LOGIN\",RENEW_TOKEN:\"RENEW_TOKEN\",UNKNOWN:\"UNKNOWN\"},this.RESPONSE_TYPE={ID_TOKEN_TOKEN:\"id_token token\",TOKEN:\"token\"},this.CONSTANTS={ACCESS_TOKEN:\"access_token\",EXPIRES_IN:\"expires_in\",ID_TOKEN:\"id_token\",ERROR_DESCRIPTION:\"error_description\",SESSION_STATE:\"session_state\",ERROR:\"error\",STORAGE:{TOKEN_KEYS:\"adal.token.keys\",ACCESS_TOKEN_KEY:\"adal.access.token.key\",EXPIRATION_KEY:\"adal.expiration.key\",STATE_LOGIN:\"adal.state.login\",STATE_RENEW:\"adal.state.renew\",NONCE_IDTOKEN:\"adal.nonce.idtoken\",SESSION_STATE:\"adal.session.state\",USERNAME:\"adal.username\",IDTOKEN:\"adal.idtoken\",ERROR:\"adal.error\",ERROR_DESCRIPTION:\"adal.error.description\",LOGIN_REQUEST:\"adal.login.request\",LOGIN_ERROR:\"adal.login.error\",RENEW_STATUS:\"adal.token.renew.status\",ANGULAR_LOGIN_REQUEST:\"adal.angular.login.request\"},RESOURCE_DELIMETER:\"|\",CACHE_DELIMETER:\"||\",LOADFRAME_TIMEOUT:6e3,TOKEN_RENEW_STATUS_CANCELED:\"Canceled\",TOKEN_RENEW_STATUS_COMPLETED:\"Completed\",TOKEN_RENEW_STATUS_IN_PROGRESS:\"In Progress\",LOGGING_LEVEL:{ERROR:0,WARN:1,INFO:2,VERBOSE:3},LEVEL_STRING_MAP:{0:\"ERROR:\",1:\"WARNING:\",2:\"INFO:\",3:\"VERBOSE:\"},POPUP_WIDTH:483,POPUP_HEIGHT:600},AuthenticationContext.prototype._singletonInstance)return AuthenticationContext.prototype._singletonInstance;if(AuthenticationContext.prototype._singletonInstance=this,this.instance=\"https://login.microsoftonline.com/\",this.config={},this.callback=null,this.popUp=!1,this.isAngular=!1,this._user=null,this._activeRenewals={},this._loginInProgress=!1,this._acquireTokenInProgress=!1,this._renewStates=[],this._callBackMappedToRenewStates={},this._callBacksMappedToRenewStates={},this._openedWindows=[],this._requestType=this.REQUEST_TYPE.LOGIN,window._adalInstance=this,a.displayCall&&\"function\"!=typeof a.displayCall)throw new Error(\"displayCall is not a function\");if(!a.clientId)throw new Error(\"clientId is required\");this.config=this._cloneConfig(a),void 0===this.config.navigateToLoginRequestUrl&&(this.config.navigateToLoginRequestUrl=!0),this.config.popUp&&(this.popUp=!0),this.config.callback&&\"function\"==typeof this.config.callback&&(this.callback=this.config.callback),this.config.instance&&(this.instance=this.config.instance),this.config.loginResource||(this.config.loginResource=this.config.clientId),this.config.redirectUri||(this.config.redirectUri=window.location.href.split(\"?\")[0].split(\"#\")[0]),this.config.postLogoutRedirectUri||(this.config.postLogoutRedirectUri=window.location.href.split(\"?\")[0].split(\"#\")[0]),this.config.anonymousEndpoints||(this.config.anonymousEndpoints=[]),this.config.isAngular&&(this.isAngular=this.config.isAngular),this.config.loadFrameTimeout&&(this.CONSTANTS.LOADFRAME_TIMEOUT=this.config.loadFrameTimeout)},\"undefined\"!=typeof window&&(window.Logging={piiLoggingEnabled:!1,level:0,log:function(a){}}),AuthenticationContext.prototype.login=function(){if(this._loginInProgress)return void this.info(\"Login in progress\");this._loginInProgress=!0;var a=this._guid();this.config.state=a,this._idTokenNonce=this._guid();var b=this._getItem(this.CONSTANTS.STORAGE.ANGULAR_LOGIN_REQUEST);b&&\"\"!==b?this._saveItem(this.CONSTANTS.STORAGE.ANGULAR_LOGIN_REQUEST,\"\"):b=window.location.href,this.verbose(\"Expected state: \"+a+\" startPage:\"+b),this._saveItem(this.CONSTANTS.STORAGE.LOGIN_REQUEST,b),this._saveItem(this.CONSTANTS.STORAGE.LOGIN_ERROR,\"\"),this._saveItem(this.CONSTANTS.STORAGE.STATE_LOGIN,a,!0),this._saveItem(this.CONSTANTS.STORAGE.NONCE_IDTOKEN,this._idTokenNonce,!0),this._saveItem(this.CONSTANTS.STORAGE.ERROR,\"\"),this._saveItem(this.CONSTANTS.STORAGE.ERROR_DESCRIPTION,\"\");var c=this._getNavigateUrl(\"id_token\",null)+\"&nonce=\"+encodeURIComponent(this._idTokenNonce);this.config.displayCall?this.config.displayCall(c):this.popUp?(this._saveItem(this.CONSTANTS.STORAGE.STATE_LOGIN,\"\"),this._renewStates.push(a),this.registerCallback(a,this.config.clientId,this.callback),this._loginPopup(c)):this.promptUser(c)},AuthenticationContext.prototype._openPopup=function(a,b,c,d){try{var e=window.screenLeft?window.screenLeft:window.screenX,f=window.screenTop?window.screenTop:window.screenY,g=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,h=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight,i=g/2-c/2+e,j=h/2-d/2+f,k=window.open(a,b,\"width=\"+c+\", height=\"+d+\", top=\"+j+\", left=\"+i);return k.focus&&k.focus(),k}catch(a){return this.warn(\"Error opening popup, \"+a.message),this._loginInProgress=!1,this._acquireTokenInProgress=!1,null}},AuthenticationContext.prototype._handlePopupError=function(a,b,c,d,e){this.warn(d),this._saveItem(this.CONSTANTS.STORAGE.ERROR,c),this._saveItem(this.CONSTANTS.STORAGE.ERROR_DESCRIPTION,d),this._saveItem(this.CONSTANTS.STORAGE.LOGIN_ERROR,e),b&&this._activeRenewals[b]&&(this._activeRenewals[b]=null),this._loginInProgress=!1,this._acquireTokenInProgress=!1,a&&a(d,null,c)},AuthenticationContext.prototype._loginPopup=function(a,b,c){var d=this._openPopup(a,\"login\",this.CONSTANTS.POPUP_WIDTH,this.CONSTANTS.POPUP_HEIGHT),e=c||this.callback;if(null==d){var f=\"Popup Window is null. This can happen if you are using IE\";return void this._handlePopupError(e,b,\"Error opening popup\",f,f)}if(this._openedWindows.push(d),-1!=this.config.redirectUri.indexOf(\"#\"))var g=this.config.redirectUri.split(\"#\")[0];else var g=this.config.redirectUri;var h=this,i=window.setInterval(function(){if(!d||d.closed||void 0===d.closed){var a=\"Popup Window closed\",c=\"Popup Window closed by UI action/ Popup Window handle destroyed due to cross zone navigation in IE/Edge\";return h.isAngular&&h._broadcast(\"adal:popUpClosed\",c+h.CONSTANTS.RESOURCE_DELIMETER+a),h._handlePopupError(e,b,a,c,c),void window.clearInterval(i)}try{var f=d.location;if(-1!=encodeURI(f.href).indexOf(encodeURI(g)))return h.isAngular?h._broadcast(\"adal:popUpHashChanged\",f.hash):h.handleWindowCallback(f.hash),window.clearInterval(i),h._loginInProgress=!1,h._acquireTokenInProgress=!1,h.info(\"Closing popup window\"),h._openedWindows=[],void d.close()}catch(a){}},1)},AuthenticationContext.prototype._broadcast=function(a,b){!function(){function a(a,b){b=b||{bubbles:!1,cancelable:!1,detail:void 0};var c=document.createEvent(\"CustomEvent\");return c.initCustomEvent(a,b.bubbles,b.cancelable,b.detail),c}if(\"function\"==typeof window.CustomEvent)return!1;a.prototype=window.Event.prototype,window.CustomEvent=a}();var c=new CustomEvent(a,{detail:b});window.dispatchEvent(c)},AuthenticationContext.prototype.loginInProgress=function(){return this._loginInProgress},AuthenticationContext.prototype._hasResource=function(a){var b=this._getItem(this.CONSTANTS.STORAGE.TOKEN_KEYS);return b&&!this._isEmpty(b)&&b.indexOf(a+this.CONSTANTS.RESOURCE_DELIMETER)>-1},AuthenticationContext.prototype.getCachedToken=function(a){if(!this._hasResource(a))return null;var b=this._getItem(this.CONSTANTS.STORAGE.ACCESS_TOKEN_KEY+a),c=this._getItem(this.CONSTANTS.STORAGE.EXPIRATION_KEY+a),d=this.config.expireOffsetSeconds||300;return c&&c>this._now()+d?b:(this._saveItem(this.CONSTANTS.STORAGE.ACCESS_TOKEN_KEY+a,\"\"),this._saveItem(this.CONSTANTS.STORAGE.EXPIRATION_KEY+a,0),null)},AuthenticationContext.prototype.getCachedUser=function(){if(this._user)return this._user;var a=this._getItem(this.CONSTANTS.STORAGE.IDTOKEN);return this._user=this._createUser(a),this._user},AuthenticationContext.prototype.registerCallback=function(a,b,c){this._activeRenewals[b]=a,this._callBacksMappedToRenewStates[a]||(this._callBacksMappedToRenewStates[a]=[]);var d=this;this._callBacksMappedToRenewStates[a].push(c),this._callBackMappedToRenewStates[a]||(this._callBackMappedToRenewStates[a]=function(c,e,f,g){d._activeRenewals[b]=null;for(var h=0;h<d._callBacksMappedToRenewStates[a].length;++h)try{d._callBacksMappedToRenewStates[a][h](c,e,f,g)}catch(f){d.warn(f)}d._callBacksMappedToRenewStates[a]=null,d._callBackMappedToRenewStates[a]=null})},AuthenticationContext.prototype._renewToken=function(a,b,c){this.info(\"renewToken is called for resource:\"+a);var d=this._addAdalFrame(\"adalRenewFrame\"+a),e=this._guid()+\"|\"+a;this.config.state=e,this._renewStates.push(e),this.verbose(\"Renew token Expected state: \"+e),c=c||\"token\";var f=this._urlRemoveQueryStringParameter(this._getNavigateUrl(c,a),\"prompt\");c===this.RESPONSE_TYPE.ID_TOKEN_TOKEN&&(this._idTokenNonce=this._guid(),this._saveItem(this.CONSTANTS.STORAGE.NONCE_IDTOKEN,this._idTokenNonce,!0),f+=\"&nonce=\"+encodeURIComponent(this._idTokenNonce)),f+=\"&prompt=none\",f=this._addHintParameters(f),this.registerCallback(e,a,b),this.verbosePii(\"Navigate to:\"+f),d.src=\"about:blank\",this._loadFrameTimeout(f,\"adalRenewFrame\"+a,a)},AuthenticationContext.prototype._renewIdToken=function(a,b){this.info(\"renewIdToken is called\");var c=this._addAdalFrame(\"adalIdTokenFrame\"),d=this._guid()+\"|\"+this.config.clientId;this._idTokenNonce=this._guid(),this._saveItem(this.CONSTANTS.STORAGE.NONCE_IDTOKEN,this._idTokenNonce,!0),this.config.state=d,this._renewStates.push(d),this.verbose(\"Renew Idtoken Expected state: \"+d);var e=null===b||void 0===b?null:this.config.clientId,b=b||\"id_token\",f=this._urlRemoveQueryStringParameter(this._getNavigateUrl(b,e),\"prompt\");f+=\"&prompt=none\",f=this._addHintParameters(f),f+=\"&nonce=\"+encodeURIComponent(this._idTokenNonce),this.registerCallback(d,this.config.clientId,a),this.verbosePii(\"Navigate to:\"+f),c.src=\"about:blank\",this._loadFrameTimeout(f,\"adalIdTokenFrame\",this.config.clientId)},AuthenticationContext.prototype._urlContainsQueryStringParameter=function(a,b){return new RegExp(\"[\\\\?&]\"+a+\"=\").test(b)},AuthenticationContext.prototype._urlRemoveQueryStringParameter=function(a,b){var c=new RegExp(\"(\\\\&\"+b+\"=)[^&]+\");return a=a.replace(c,\"\"),c=new RegExp(\"(\"+b+\"=)[^&]+&\"),a=a.replace(c,\"\"),c=new RegExp(\"(\"+b+\"=)[^&]+\"),a=a.replace(c,\"\")},AuthenticationContext.prototype._loadFrameTimeout=function(a,b,c){this.verbose(\"Set loading state to pending for: \"+c),this._saveItem(this.CONSTANTS.STORAGE.RENEW_STATUS+c,this.CONSTANTS.TOKEN_RENEW_STATUS_IN_PROGRESS),this._loadFrame(a,b);var d=this;setTimeout(function(){if(d._getItem(d.CONSTANTS.STORAGE.RENEW_STATUS+c)===d.CONSTANTS.TOKEN_RENEW_STATUS_IN_PROGRESS){d.verbose(\"Loading frame has timed out after: \"+d.CONSTANTS.LOADFRAME_TIMEOUT/1e3+\" seconds for resource \"+c);var a=d._activeRenewals[c];a&&d._callBackMappedToRenewStates[a]&&d._callBackMappedToRenewStates[a](\"Token renewal operation failed due to timeout\",null,\"Token Renewal Failed\"),d._saveItem(d.CONSTANTS.STORAGE.RENEW_STATUS+c,d.CONSTANTS.TOKEN_RENEW_STATUS_CANCELED)}},d.CONSTANTS.LOADFRAME_TIMEOUT)},AuthenticationContext.prototype._loadFrame=function(a,b){var c=this;c.info(\"LoadFrame: \"+b);var d=b;setTimeout(function(){var b=c._addAdalFrame(d);\"\"!==b.src&&\"about:blank\"!==b.src||(b.src=a,c._loadFrame(a,d))},500)},AuthenticationContext.prototype.acquireToken=function(a,b){if(this._isEmpty(a))return this.warn(\"resource is required\"),void b(\"resource is required\",null,\"resource is required\");var c=this.getCachedToken(a);return c?(this.info(\"Token is already in cache for resource:\"+a),void b(null,c,null)):this._user||this.config.extraQueryParameter&&-1!==this.config.extraQueryParameter.indexOf(\"login_hint\")?void(this._activeRenewals[a]?this.registerCallback(this._activeRenewals[a],a,b):(this._requestType=this.REQUEST_TYPE.RENEW_TOKEN,a===this.config.clientId?this._user?(this.verbose(\"renewing idtoken\"),this._renewIdToken(b)):(this.verbose(\"renewing idtoken and access_token\"),this._renewIdToken(b,this.RESPONSE_TYPE.ID_TOKEN_TOKEN)):this._user?(this.verbose(\"renewing access_token\"),this._renewToken(a,b)):(this.verbose(\"renewing idtoken and access_token\"),this._renewToken(a,b,this.RESPONSE_TYPE.ID_TOKEN_TOKEN)))):(this.warn(\"User login is required\"),void b(\"User login is required\",null,\"login required\"))},AuthenticationContext.prototype.acquireTokenPopup=function(a,b,c,d){if(this._isEmpty(a))return this.warn(\"resource is required\"),void d(\"resource is required\",null,\"resource is required\");if(!this._user)return this.warn(\"User login is required\"),void d(\"User login is required\",null,\"login required\");if(this._acquireTokenInProgress)return this.warn(\"Acquire token interactive is already in progress\"),void d(\"Acquire token interactive is already in progress\",null,\"Acquire token interactive is already in progress\");var e=this._guid()+\"|\"+a;this.config.state=e,this._renewStates.push(e),this._requestType=this.REQUEST_TYPE.RENEW_TOKEN,this.verbose(\"Renew token Expected state: \"+e);var f=this._urlRemoveQueryStringParameter(this._getNavigateUrl(\"token\",a),\"prompt\");if(f+=\"&prompt=select_account\",b&&(f+=b),c&&-1===f.indexOf(\"&claims\"))f+=\"&claims=\"+encodeURIComponent(c);else if(c&&-1!==f.indexOf(\"&claims\"))throw new Error(\"Claims cannot be passed as an extraQueryParameter\");f=this._addHintParameters(f),this._acquireTokenInProgress=!0,this.info(\"acquireToken interactive is called for the resource \"+a),this.registerCallback(e,a,d),this._loginPopup(f,a,d)},AuthenticationContext.prototype.acquireTokenRedirect=function(a,b,c){if(this._isEmpty(a))return this.warn(\"resource is required\"),void d(\"resource is required\",null,\"resource is required\");var d=this.callback;if(!this._user)return this.warn(\"User login is required\"),void d(\"User login is required\",null,\"login required\");if(this._acquireTokenInProgress)return this.warn(\"Acquire token interactive is already in progress\"),void d(\"Acquire token interactive is already in progress\",null,\"Acquire token interactive is already in progress\");var e=this._guid()+\"|\"+a;this.config.state=e,this.verbose(\"Renew token Expected state: \"+e);var f=this._urlRemoveQueryStringParameter(this._getNavigateUrl(\"token\",a),\"prompt\");if(f+=\"&prompt=select_account\",b&&(f+=b),c&&-1===f.indexOf(\"&claims\"))f+=\"&claims=\"+encodeURIComponent(c);else if(c&&-1!==f.indexOf(\"&claims\"))throw new Error(\"Claims cannot be passed as an extraQueryParameter\");f=this._addHintParameters(f),this._acquireTokenInProgress=!0,this.info(\"acquireToken interactive is called for the resource \"+a),this._saveItem(this.CONSTANTS.STORAGE.LOGIN_REQUEST,window.location.href),this._saveItem(this.CONSTANTS.STORAGE.STATE_RENEW,e,!0),this.promptUser(f)},AuthenticationContext.prototype.promptUser=function(a){a?(this.infoPii(\"Navigate to:\"+a),window.location.replace(a)):this.info(\"Navigate url is empty\")},AuthenticationContext.prototype.clearCache=function(){this._saveItem(this.CONSTANTS.STORAGE.LOGIN_REQUEST,\"\"),this._saveItem(this.CONSTANTS.STORAGE.ANGULAR_LOGIN_REQUEST,\"\"),this._saveItem(this.CONSTANTS.STORAGE.SESSION_STATE,\"\"),this._saveItem(this.CONSTANTS.STORAGE.STATE_LOGIN,\"\"),this._saveItem(this.CONSTANTS.STORAGE.STATE_RENEW,\"\"),this._renewStates=[],this._saveItem(this.CONSTANTS.STORAGE.NONCE_IDTOKEN,\"\"),this._saveItem(this.CONSTANTS.STORAGE.IDTOKEN,\"\"),this._saveItem(this.CONSTANTS.STORAGE.ERROR,\"\"),this._saveItem(this.CONSTANTS.STORAGE.ERROR_DESCRIPTION,\"\"),this._saveItem(this.CONSTANTS.STORAGE.LOGIN_ERROR,\"\"),this._saveItem(this.CONSTANTS.STORAGE.LOGIN_ERROR,\"\");var a=this._getItem(this.CONSTANTS.STORAGE.TOKEN_KEYS);if(!this._isEmpty(a)){a=a.split(this.CONSTANTS.RESOURCE_DELIMETER);for(var b=0;b<a.length&&\"\"!==a[b];b++)this._saveItem(this.CONSTANTS.STORAGE.ACCESS_TOKEN_KEY+a[b],\"\"),this._saveItem(this.CONSTANTS.STORAGE.EXPIRATION_KEY+a[b],0)}this._saveItem(this.CONSTANTS.STORAGE.TOKEN_KEYS,\"\")},AuthenticationContext.prototype.clearCacheForResource=function(a){this._saveItem(this.CONSTANTS.STORAGE.STATE_RENEW,\"\"),this._saveItem(this.CONSTANTS.STORAGE.ERROR,\"\"),this._saveItem(this.CONSTANTS.STORAGE.ERROR_DESCRIPTION,\"\"),this._hasResource(a)&&(this._saveItem(this.CONSTANTS.STORAGE.ACCESS_TOKEN_KEY+a,\"\"),this._saveItem(this.CONSTANTS.STORAGE.EXPIRATION_KEY+a,0))},AuthenticationContext.prototype.logOut=function(){this.clearCache(),this._user=null;var a;if(this.config.logOutUri)a=this.config.logOutUri;else{var b=\"common\",c=\"\";this.config.tenant&&(b=this.config.tenant),this.config.postLogoutRedirectUri&&(c=\"post_logout_redirect_uri=\"+encodeURIComponent(this.config.postLogoutRedirectUri)),a=this.instance+b+\"/oauth2/logout?\"+c}this.infoPii(\"Logout navigate to: \"+a),this.promptUser(a)},AuthenticationContext.prototype._isEmpty=function(a){return void 0===a||!a||0===a.length},AuthenticationContext.prototype.getUser=function(a){if(\"function\"!=typeof a)throw new Error(\"callback is not a function\");if(this._user)return void a(null,this._user);var b=this._getItem(this.CONSTANTS.STORAGE.IDTOKEN);this._isEmpty(b)?(this.warn(\"User information is not available\"),a(\"User information is not available\",null)):(this.info(\"User exists in cache: \"),this._user=this._createUser(b),a(null,this._user))},AuthenticationContext.prototype._addHintParameters=function(a){if(this._user&&this._user.profile)if(this._user.profile.sid&&-1!==a.indexOf(\"&prompt=none\"))this._urlContainsQueryStringParameter(\"sid\",a)||(a+=\"&sid=\"+encodeURIComponent(this._user.profile.sid));else if(this._user.profile.upn&&(this._urlContainsQueryStringParameter(\"login_hint\",a)||(a+=\"&login_hint=\"+encodeURIComponent(this._user.profile.upn)),!this._urlContainsQueryStringParameter(\"domain_hint\",a)&&this._user.profile.upn.indexOf(\"@\")>-1)){var b=this._user.profile.upn.split(\"@\");a+=\"&domain_hint=\"+encodeURIComponent(b[b.length-1])}return a},AuthenticationContext.prototype._createUser=function(a){var b=null,c=this._extractIdToken(a);return c&&c.hasOwnProperty(\"aud\")&&(c.aud.toLowerCase()===this.config.clientId.toLowerCase()?(b={userName:\"\",profile:c},c.hasOwnProperty(\"upn\")?b.userName=c.upn:c.hasOwnProperty(\"email\")&&(b.userName=c.email)):this.warn(\"IdToken has invalid aud field\")),b},AuthenticationContext.prototype._getHash=function(a){return a.indexOf(\"#/\")>-1?a=a.substring(a.indexOf(\"#/\")+2):a.indexOf(\"#\")>-1&&(a=a.substring(1)),a},AuthenticationContext.prototype.isCallback=function(a){a=this._getHash(a);var b=this._deserialize(a);return b.hasOwnProperty(this.CONSTANTS.ERROR_DESCRIPTION)||b.hasOwnProperty(this.CONSTANTS.ACCESS_TOKEN)||b.hasOwnProperty(this.CONSTANTS.ID_TOKEN)},AuthenticationContext.prototype.getLoginError=function(){return this._getItem(this.CONSTANTS.STORAGE.LOGIN_ERROR)},AuthenticationContext.prototype.getRequestInfo=function(a){a=this._getHash(a);var b=this._deserialize(a),c={valid:!1,parameters:{},stateMatch:!1,stateResponse:\"\",requestType:this.REQUEST_TYPE.UNKNOWN};if(b&&(c.parameters=b,b.hasOwnProperty(this.CONSTANTS.ERROR_DESCRIPTION)||b.hasOwnProperty(this.CONSTANTS.ACCESS_TOKEN)||b.hasOwnProperty(this.CONSTANTS.ID_TOKEN))){c.valid=!0;var d=\"\";if(!b.hasOwnProperty(\"state\"))return this.warn(\"No state returned\"),c;if(this.verbose(\"State: \"+b.state),d=b.state,c.stateResponse=d,this._matchState(c))return c;if(!c.stateMatch&&window.parent){c.requestType=this._requestType;for(var e=this._renewStates,f=0;f<e.length;f++)if(e[f]===c.stateResponse){c.stateMatch=!0;break}}}return c},AuthenticationContext.prototype._matchNonce=function(a){var b=this._getItem(this.CONSTANTS.STORAGE.NONCE_IDTOKEN);if(b){b=b.split(this.CONSTANTS.CACHE_DELIMETER);for(var c=0;c<b.length;c++)if(b[c]===a.profile.nonce)return!0}return!1},AuthenticationContext.prototype._matchState=function(a){var b=this._getItem(this.CONSTANTS.STORAGE.STATE_LOGIN);if(b){b=b.split(this.CONSTANTS.CACHE_DELIMETER);for(var c=0;c<b.length;c++)if(b[c]===a.stateResponse)return a.requestType=this.REQUEST_TYPE.LOGIN,a.stateMatch=!0,!0}var d=this._getItem(this.CONSTANTS.STORAGE.STATE_RENEW);if(d){d=d.split(this.CONSTANTS.CACHE_DELIMETER);for(var c=0;c<d.length;c++)if(d[c]===a.stateResponse)return a.requestType=this.REQUEST_TYPE.RENEW_TOKEN,a.stateMatch=!0,!0}return!1},AuthenticationContext.prototype._getResourceFromState=function(a){if(a){var b=a.indexOf(\"|\");if(b>-1&&b+1<a.length)return a.substring(b+1)}return\"\"},AuthenticationContext.prototype.saveTokenFromHash=function(a){this.info(\"State status:\"+a.stateMatch+\"; Request type:\"+a.requestType),this._saveItem(this.CONSTANTS.STORAGE.ERROR,\"\"),this._saveItem(this.CONSTANTS.STORAGE.ERROR_DESCRIPTION,\"\");var b=this._getResourceFromState(a.stateResponse);if(a.parameters.hasOwnProperty(this.CONSTANTS.ERROR_DESCRIPTION))this.infoPii(\"Error :\"+a.parameters.error+\"; Error description:\"+a.parameters[this.CONSTANTS.ERROR_DESCRIPTION]),this._saveItem(this.CONSTANTS.STORAGE.ERROR,a.parameters.error),this._saveItem(this.CONSTANTS.STORAGE.ERROR_DESCRIPTION,a.parameters[this.CONSTANTS.ERROR_DESCRIPTION]),a.requestType===this.REQUEST_TYPE.LOGIN&&(this._loginInProgress=!1,this._saveItem(this.CONSTANTS.STORAGE.LOGIN_ERROR,a.parameters.error_description));else if(a.stateMatch){this.info(\"State is right\"),a.parameters.hasOwnProperty(this.CONSTANTS.SESSION_STATE)&&this._saveItem(this.CONSTANTS.STORAGE.SESSION_STATE,a.parameters[this.CONSTANTS.SESSION_STATE]);var c;a.parameters.hasOwnProperty(this.CONSTANTS.ACCESS_TOKEN)&&(this.info(\"Fragment has access token\"),this._hasResource(b)||(c=this._getItem(this.CONSTANTS.STORAGE.TOKEN_KEYS)||\"\",this._saveItem(this.CONSTANTS.STORAGE.TOKEN_KEYS,c+b+this.CONSTANTS.RESOURCE_DELIMETER)),this._saveItem(this.CONSTANTS.STORAGE.ACCESS_TOKEN_KEY+b,a.parameters[this.CONSTANTS.ACCESS_TOKEN]),this._saveItem(this.CONSTANTS.STORAGE.EXPIRATION_KEY+b,this._expiresIn(a.parameters[this.CONSTANTS.EXPIRES_IN]))),a.parameters.hasOwnProperty(this.CONSTANTS.ID_TOKEN)&&(this.info(\"Fragment has id token\"),this._loginInProgress=!1,this._user=this._createUser(a.parameters[this.CONSTANTS.ID_TOKEN]),this._user&&this._user.profile?this._matchNonce(this._user)?(this._saveItem(this.CONSTANTS.STORAGE.IDTOKEN,a.parameters[this.CONSTANTS.ID_TOKEN]),b=this.config.loginResource?this.config.loginResource:this.config.clientId,this._hasResource(b)||(c=this._getItem(this.CONSTANTS.STORAGE.TOKEN_KEYS)||\"\",this._saveItem(this.CONSTANTS.STORAGE.TOKEN_KEYS,c+b+this.CONSTANTS.RESOURCE_DELIMETER)),this._saveItem(this.CONSTANTS.STORAGE.ACCESS_TOKEN_KEY+b,a.parameters[this.CONSTANTS.ID_TOKEN]),this._saveItem(this.CONSTANTS.STORAGE.EXPIRATION_KEY+b,this._user.profile.exp)):(this._saveItem(this.CONSTANTS.STORAGE.LOGIN_ERROR,\"Nonce received: \"+this._user.profile.nonce+\" is not same as requested: \"+this._getItem(this.CONSTANTS.STORAGE.NONCE_IDTOKEN)),this._user=null):(a.parameters.error=\"invalid id_token\",a.parameters.error_description=\"Invalid id_token. id_token: \"+a.parameters[this.CONSTANTS.ID_TOKEN],this._saveItem(this.CONSTANTS.STORAGE.ERROR,\"invalid id_token\"),this._saveItem(this.CONSTANTS.STORAGE.ERROR_DESCRIPTION,\"Invalid id_token. id_token: \"+a.parameters[this.CONSTANTS.ID_TOKEN])))}else a.parameters.error=\"Invalid_state\",a.parameters.error_description=\"Invalid_state. state: \"+a.stateResponse,this._saveItem(this.CONSTANTS.STORAGE.ERROR,\"Invalid_state\"),this._saveItem(this.CONSTANTS.STORAGE.ERROR_DESCRIPTION,\"Invalid_state. state: \"+a.stateResponse);this._saveItem(this.CONSTANTS.STORAGE.RENEW_STATUS+b,this.CONSTANTS.TOKEN_RENEW_STATUS_COMPLETED)},AuthenticationContext.prototype.getResourceForEndpoint=function(a){if(this.config&&this.config.anonymousEndpoints)for(var b=0;b<this.config.anonymousEndpoints.length;b++)if(a.indexOf(this.config.anonymousEndpoints[b])>-1)return null;if(this.config&&this.config.endpoints)for(var c in this.config.endpoints)if(a.indexOf(c)>-1)return this.config.endpoints[c];return a.indexOf(\"http://\")>-1||a.indexOf(\"https://\")>-1?this._getHostFromUri(a)===this._getHostFromUri(this.config.redirectUri)?this.config.loginResource:null:this.config.loginResource},AuthenticationContext.prototype._getHostFromUri=function(a){var b=String(a).replace(/^(https?:)\\/\\//,\"\");return b=b.split(\"/\")[0]},AuthenticationContext.prototype.handleWindowCallback=function(a){if(null==a&&(a=window.location.hash),this.isCallback(a)){var b=null,c=!1;this._openedWindows.length>0&&this._openedWindows[this._openedWindows.length-1].opener&&this._openedWindows[this._openedWindows.length-1].opener._adalInstance?(b=this._openedWindows[this._openedWindows.length-1].opener._adalInstance,c=!0):window.parent&&window.parent._adalInstance&&(b=window.parent._adalInstance);var d,e,f=b.getRequestInfo(a),g=null;e=c||window.parent!==window?b._callBackMappedToRenewStates[f.stateResponse]:b.callback,b.info(\"Returned from redirect url\"),b.saveTokenFromHash(f),f.requestType===this.REQUEST_TYPE.RENEW_TOKEN&&window.parent?(window.parent!==window?b.verbose(\"Window is in iframe, acquiring token silently\"):b.verbose(\"acquiring token interactive in progress\"),d=f.parameters[b.CONSTANTS.ACCESS_TOKEN]||f.parameters[b.CONSTANTS.ID_TOKEN],g=b.CONSTANTS.ACCESS_TOKEN):f.requestType===this.REQUEST_TYPE.LOGIN&&(d=f.parameters[b.CONSTANTS.ID_TOKEN],g=b.CONSTANTS.ID_TOKEN);var h=f.parameters[b.CONSTANTS.ERROR_DESCRIPTION],i=f.parameters[b.CONSTANTS.ERROR];try{e&&e(h,d,i,g)}catch(a){b.error(\"Error occurred in user defined callback function: \"+a)}window.parent!==window||c||(b.config.navigateToLoginRequestUrl?window.location.href=b._getItem(b.CONSTANTS.STORAGE.LOGIN_REQUEST):window.location.hash=\"\")}},AuthenticationContext.prototype._getNavigateUrl=function(a,b){var c=\"common\";this.config.tenant&&(c=this.config.tenant);var d=this.instance+c+\"/oauth2/authorize\"+this._serialize(a,this.config,b)+this._addLibMetadata();return this.info(\"Navigate url:\"+d),d},AuthenticationContext.prototype._extractIdToken=function(a){var b=this._decodeJwt(a);if(!b)return null;try{var c=b.JWSPayload,d=this._base64DecodeStringUrlSafe(c);return d?JSON.parse(d):(this.info(\"The returned id_token could not be base64 url safe decoded.\"),null)}catch(a){this.error(\"The returned id_token could not be decoded\",a)}return null},AuthenticationContext.prototype._base64DecodeStringUrlSafe=function(a){return a=a.replace(/-/g,\"+\").replace(/_/g,\"/\"),window.atob?decodeURIComponent(escape(window.atob(a))):decodeURIComponent(escape(this._decode(a)))},AuthenticationContext.prototype._decode=function(a){var b=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";a=String(a).replace(/=+$/,\"\");var c=a.length;if(c%4==1)throw new Error(\"The token to be decoded is not correctly encoded.\");for(var d,e,f,g,h,i,j,k,l=\"\",m=0;m<c;m+=4){if(d=b.indexOf(a.charAt(m)),e=b.indexOf(a.charAt(m+1)),f=b.indexOf(a.charAt(m+2)),g=b.indexOf(a.charAt(m+3)),m+2===c-1){h=d<<18|e<<12|f<<6,i=h>>16&255,j=h>>8&255,l+=String.fromCharCode(i,j);break}if(m+1===c-1){h=d<<18|e<<12,i=h>>16&255,l+=String.fromCharCode(i);break}h=d<<18|e<<12|f<<6|g,i=h>>16&255,j=h>>8&255,k=255&h,l+=String.fromCharCode(i,j,k)}return l},AuthenticationContext.prototype._decodeJwt=function(a){if(this._isEmpty(a))return null;var b=/^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/,c=b.exec(a);return!c||c.length<4?(this.warn(\"The returned id_token is not parseable.\"),null):{header:c[1],JWSPayload:c[2],JWSSig:c[3]}},AuthenticationContext.prototype._convertUrlSafeToRegularBase64EncodedString=function(a){return a.replace(\"-\",\"+\").replace(\"_\",\"/\")},AuthenticationContext.prototype._serialize=function(a,b,c){var d=[];if(null!==b){d.push(\"?response_type=\"+a),d.push(\"client_id=\"+encodeURIComponent(b.clientId)),c&&d.push(\"resource=\"+encodeURIComponent(c)),d.push(\"redirect_uri=\"+encodeURIComponent(b.redirectUri)),d.push(\"state=\"+encodeURIComponent(b.state)),b.hasOwnProperty(\"slice\")&&d.push(\"slice=\"+encodeURIComponent(b.slice)),b.hasOwnProperty(\"extraQueryParameter\")&&d.push(b.extraQueryParameter);var e=b.correlationId?b.correlationId:this._guid();d.push(\"client-request-id=\"+encodeURIComponent(e))}return d.join(\"&\")},AuthenticationContext.prototype._deserialize=function(a){var b,c=/\\+/g,d=/([^&=]+)=([^&]*)/g,e=function(a){return decodeURIComponent(a.replace(c,\" \"))},f={};for(b=d.exec(a);b;)f[e(b[1])]=e(b[2]),b=d.exec(a);return f},AuthenticationContext.prototype._decimalToHex=function(a){for(var b=a.toString(16);b.length<2;)b=\"0\"+b;return b},AuthenticationContext.prototype._guid=function(){var a=window.crypto||window.msCrypto;if(a&&a.getRandomValues){var b=new Uint8Array(16);return a.getRandomValues(b),b[6]|=64,b[6]&=79,b[8]|=128,b[8]&=191,this._decimalToHex(b[0])+this._decimalToHex(b[1])+this._decimalToHex(b[2])+this._decimalToHex(b[3])+\"-\"+this._decimalToHex(b[4])+this._decimalToHex(b[5])+\"-\"+this._decimalToHex(b[6])+this._decimalToHex(b[7])+\"-\"+this._decimalToHex(b[8])+this._decimalToHex(b[9])+\"-\"+this._decimalToHex(b[10])+this._decimalToHex(b[11])+this._decimalToHex(b[12])+this._decimalToHex(b[13])+this._decimalToHex(b[14])+this._decimalToHex(b[15])}for(var c=\"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\",d=\"0123456789abcdef\",e=0,f=\"\",g=0;g<36;g++)\"-\"!==c[g]&&\"4\"!==c[g]&&(e=16*Math.random()|0),\"x\"===c[g]?f+=d[e]:\"y\"===c[g]?(e&=3,e|=8,f+=d[e]):f+=c[g];return f},AuthenticationContext.prototype._expiresIn=function(a){return a||(a=3599),this._now()+parseInt(a,10)},AuthenticationContext.prototype._now=function(){return Math.round((new Date).getTime()/1e3)},AuthenticationContext.prototype._addAdalFrame=function(a){if(void 0!==a){this.info(\"Add adal frame to document:\"+a);var b=document.getElementById(a);if(!b){if(document.createElement&&document.documentElement&&(window.opera||-1===window.navigator.userAgent.indexOf(\"MSIE 5.0\"))){var c=document.createElement(\"iframe\");c.setAttribute(\"id\",a),c.setAttribute(\"aria-hidden\",\"true\"),c.style.visibility=\"hidden\",c.style.position=\"absolute\",c.style.width=c.style.height=c.borderWidth=\"0px\",b=document.getElementsByTagName(\"body\")[0].appendChild(c)}else document.body&&document.body.insertAdjacentHTML&&document.body.insertAdjacentHTML(\"beforeEnd\",'<iframe name=\"'+a+'\" id=\"'+a+'\" style=\"display:none\"></iframe>');window.frames&&window.frames[a]&&(b=window.frames[a])}return b}},AuthenticationContext.prototype._saveItem=function(a,b,c){if(this.config&&this.config.cacheLocation&&\"localStorage\"===this.config.cacheLocation){if(!this._supportsLocalStorage())return this.info(\"Local storage is not supported\"),!1;if(c){var d=this._getItem(a)||\"\";localStorage.setItem(a,d+b+this.CONSTANTS.CACHE_DELIMETER)}else localStorage.setItem(a,b);return!0}return this._supportsSessionStorage()?(sessionStorage.setItem(a,b),!0):(this.info(\"Session storage is not supported\"),!1)},AuthenticationContext.prototype._getItem=function(a){return this.config&&this.config.cacheLocation&&\"localStorage\"===this.config.cacheLocation?this._supportsLocalStorage()?localStorage.getItem(a):(this.info(\"Local storage is not supported\"),null):this._supportsSessionStorage()?sessionStorage.getItem(a):(this.info(\"Session storage is not supported\"),null)},AuthenticationContext.prototype._supportsLocalStorage=function(){try{return!!window.localStorage&&(window.localStorage.setItem(\"storageTest\",\"A\"),\"A\"==window.localStorage.getItem(\"storageTest\")&&(window.localStorage.removeItem(\"storageTest\"),!window.localStorage.getItem(\"storageTest\")))}catch(a){return!1}},AuthenticationContext.prototype._supportsSessionStorage=function(){try{return!!window.sessionStorage&&(window.sessionStorage.setItem(\"storageTest\",\"A\"),\"A\"==window.sessionStorage.getItem(\"storageTest\")&&(window.sessionStorage.removeItem(\"storageTest\"),!window.sessionStorage.getItem(\"storageTest\")))}catch(a){return!1}},AuthenticationContext.prototype._cloneConfig=function(a){if(null===a||\"object\"!=typeof a)return a;var b={};for(var c in a)a.hasOwnProperty(c)&&(b[c]=a[c]);return b},AuthenticationContext.prototype._addLibMetadata=function(){return\"&x-client-SKU=Js&x-client-Ver=\"+this._libVersion()},AuthenticationContext.prototype.log=function(a,b,c,d){if(a<=Logging.level){if(!Logging.piiLoggingEnabled&&d)return;var e=(new Date).toUTCString(),f=\"\";f=this.config.correlationId?e+\":\"+this.config.correlationId+\"-\"+this._libVersion()+\"-\"+this.CONSTANTS.LEVEL_STRING_MAP[a]+\" \"+b:e+\":\"+this._libVersion()+\"-\"+this.CONSTANTS.LEVEL_STRING_MAP[a]+\" \"+b,c&&(f+=\"\\nstack:\\n\"+c.stack),Logging.log(f)}},AuthenticationContext.prototype.error=function(a,b){this.log(this.CONSTANTS.LOGGING_LEVEL.ERROR,a,b)},AuthenticationContext.prototype.warn=function(a){this.log(this.CONSTANTS.LOGGING_LEVEL.WARN,a,null)},AuthenticationContext.prototype.info=function(a){\r\nthis.log(this.CONSTANTS.LOGGING_LEVEL.INFO,a,null)},AuthenticationContext.prototype.verbose=function(a){this.log(this.CONSTANTS.LOGGING_LEVEL.VERBOSE,a,null)},AuthenticationContext.prototype.errorPii=function(a,b){this.log(this.CONSTANTS.LOGGING_LEVEL.ERROR,a,b,!0)},AuthenticationContext.prototype.warnPii=function(a){this.log(this.CONSTANTS.LOGGING_LEVEL.WARN,a,null,!0)},AuthenticationContext.prototype.infoPii=function(a){this.log(this.CONSTANTS.LOGGING_LEVEL.INFO,a,null,!0)},AuthenticationContext.prototype.verbosePii=function(a){this.log(this.CONSTANTS.LOGGING_LEVEL.VERBOSE,a,null,!0)},AuthenticationContext.prototype._libVersion=function(){return\"1.0.17\"},\"undefined\"!=typeof module&&module.exports&&(module.exports=AuthenticationContext,module.exports.inject=function(a){return new AuthenticationContext(a)}),AuthenticationContext}();","import { assign, IHttpClientImpl } from \"@pnp/common\";\r\n\r\n/**\r\n * Makes requests using the SP.RequestExecutor library.\r\n */\r\nexport class SPRequestExecutorClient implements IHttpClientImpl {\r\n    /**\r\n     * Fetches a URL using the SP.RequestExecutor library.\r\n     */\r\n    public fetch(url: string, options: any): Promise<Response> {\r\n        if (SP === undefined || SP.RequestExecutor === undefined) {\r\n            throw Error(\"SP.RequestExecutor is undefined. Load the SP.RequestExecutor.js library (/_layouts/15/SP.RequestExecutor.js) before loading the PnP JS Core library.\");\r\n        }\r\n\r\n        const addinWebUrl = url.substring(0, url.indexOf(\"/_api\")),\r\n            executor = new SP.RequestExecutor(addinWebUrl);\r\n\r\n        let headers: { [key: string]: string; } = {},\r\n            iterator: IterableIterator<[string, string]>,\r\n            temp: IteratorResult<[string, string]>;\r\n\r\n        if (options.headers && options.headers instanceof Headers) {\r\n            iterator = <IterableIterator<[string, string]>>options.headers.entries();\r\n            temp = iterator.next();\r\n            while (!temp.done) {\r\n                headers[temp.value[0]] = temp.value[1];\r\n                temp = iterator.next();\r\n            }\r\n        } else {\r\n            headers = <any>options.headers;\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let requestOptions = {\r\n                error: (error: SP.ResponseInfo) => {\r\n                    reject(this.convertToResponse(error));\r\n                },\r\n                headers: headers,\r\n                method: options.method,\r\n                success: (response: SP.ResponseInfo) => {\r\n                    resolve(this.convertToResponse(response));\r\n                },\r\n                url: url,\r\n            };\r\n\r\n            if (options.body) {\r\n                requestOptions = assign(requestOptions, { body: options.body });\r\n            } else {\r\n                requestOptions = assign(requestOptions, { binaryStringRequestBody: true });\r\n            }\r\n            executor.executeAsync(requestOptions);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Converts a SharePoint REST API response to a fetch API response.\r\n     */\r\n    private convertToResponse = (spResponse: SP.ResponseInfo): Response => {\r\n        const responseHeaders = new Headers();\r\n\r\n        if (spResponse.headers !== undefined) {\r\n            for (const h in spResponse.headers) {\r\n                if (spResponse.headers[h]) {\r\n                    responseHeaders.append(h, spResponse.headers[h]);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Cannot have an empty string body when creating a Response with status 204\r\n        const body = spResponse.statusCode === 204 ? null : spResponse.body;\r\n\r\n        return new Response(body, {\r\n            headers: responseHeaders,\r\n            status: spResponse.statusCode,\r\n            statusText: spResponse.statusText,\r\n        });\r\n    }\r\n}\r\n","import {\r\n    SPRest,\r\n} from \"@pnp/sp\";\r\n\r\nimport { Web, IWeb } from \"@pnp/sp/webs\";\r\nimport { Site, ISite } from \"@pnp/sp/sites\";\r\n\r\nimport {\r\n    isUrlAbsolute,\r\n    combine,\r\n} from \"@pnp/common\";\r\n\r\nimport { ISharePointQueryable } from \"@pnp/sp\";\r\n\r\nexport class SPRestAddIn extends SPRest {\r\n\r\n    /**\r\n     * Begins a cross-domain, host site scoped REST request, for use in add-in webs\r\n     *\r\n     * @param addInWebUrl The absolute url of the add-in web\r\n     * @param hostWebUrl The absolute url of the host web\r\n     */\r\n    public crossDomainSite(addInWebUrl: string, hostWebUrl: string): ISite {\r\n        return this._cdImpl(Site, addInWebUrl, hostWebUrl, \"site\");\r\n    }\r\n\r\n    /**\r\n     * Begins a cross-domain, host web scoped REST request, for use in add-in webs\r\n     *\r\n     * @param addInWebUrl The absolute url of the add-in web\r\n     * @param hostWebUrl The absolute url of the host web\r\n     */\r\n    public crossDomainWeb(addInWebUrl: string, hostWebUrl: string): IWeb {\r\n        return this._cdImpl(Web, addInWebUrl, hostWebUrl, \"web\");\r\n    }\r\n\r\n    /**\r\n     * Implements the creation of cross domain REST urls\r\n     *\r\n     * @param factory The constructor of the object to create Site | Web\r\n     * @param addInWebUrl The absolute url of the add-in web\r\n     * @param hostWebUrl The absolute url of the host web\r\n     * @param urlPart String part to append to the url \"site\" | \"web\"\r\n     */\r\n    private _cdImpl<T extends ISharePointQueryable>(\r\n        factory: (...args: any[]) => T,\r\n        addInWebUrl: string,\r\n        hostWebUrl: string,\r\n        urlPart: string): T {\r\n\r\n        if (!isUrlAbsolute(addInWebUrl)) {\r\n            throw Error(\"The addInWebUrl parameter must be an absolute url.\");\r\n        }\r\n\r\n        if (!isUrlAbsolute(hostWebUrl)) {\r\n            throw Error(\"The hostWebUrl parameter must be an absolute url.\");\r\n        }\r\n\r\n        const url = combine(addInWebUrl, \"_api/SP.AppContextSite(@target)\");\r\n\r\n        const instance = factory(url, urlPart);\r\n        instance.query.set(\"@target\", \"'\" + encodeURIComponent(hostWebUrl) + \"'\");\r\n        return instance.configure(this._options);\r\n    }\r\n}\r\n\r\nexport const sp = new SPRestAddIn();\r\n","import { Logger } from \"@pnp/logging\";\r\nimport {\r\n    PnPClientStorage,\r\n    dateAdd,\r\n    combine,\r\n    getCtxCallback,\r\n    getRandomString,\r\n    getGUID,\r\n    isFunc,\r\n    objectDefinedNotNull,\r\n    isArray,\r\n    assign,\r\n    isUrlAbsolute,\r\n    stringIsNullOrEmpty,\r\n    sanitizeGuid,\r\n} from \"@pnp/common\";\r\nimport { Settings } from \"@pnp/config-store\";\r\nimport { sp as _sp, SPRestAddIn } from \"@pnp/sp-addinhelpers\";\r\nimport { setup as _setup, PnPConfiguration } from \"./pnplibconfig\";\r\nimport { graph as _graph } from \"@pnp/graph\";\r\n\r\n// trigger attachment of all functionality to mimic the previous pnpjs impl\r\nimport \"@pnp/sp/presets/all\";\r\nimport \"@pnp/graph/presets/all\";\r\n\r\n/**\r\n * Re-export everything from the dependencies to match the previous pattern\r\n */\r\nexport * from \"@pnp/common\";\r\nexport * from \"@pnp/logging\";\r\nexport * from \"@pnp/config-store\";\r\nexport * from \"@pnp/odata\";\r\nexport * from \"./sp-ns\";\r\nexport * from \"./graph-ns\";\r\n\r\n/**\r\n * Utility methods\r\n */\r\nexport const util = {\r\n    assign,\r\n    combine,\r\n    dateAdd,\r\n    getCtxCallback,\r\n    getGUID,\r\n    getRandomString,\r\n    isArray,\r\n    isFunc,\r\n    isUrlAbsolute,\r\n    objectDefinedNotNull,\r\n    sanitizeGuid,\r\n    stringIsNullOrEmpty,\r\n};\r\n\r\n/**\r\n * Provides access to the SharePoint REST interface\r\n */\r\nexport const sp = <SPRestAddIn>_sp;\r\n\r\n/**\r\n * Provides access to the SharePoint REST interface\r\n */\r\nexport const graph = _graph;\r\n\r\n/**\r\n * Provides access to local and session storage\r\n */\r\nexport const storage: PnPClientStorage = new PnPClientStorage();\r\n\r\n/**\r\n * Global configuration instance to which providers can be added\r\n */\r\nexport const config = new Settings();\r\n\r\n/**\r\n * Global logging instance to which subscribers can be registered and messages written\r\n */\r\nexport const log = Logger;\r\n\r\n/**\r\n * Allows for the configuration of the library\r\n */\r\nexport const setup: (config: PnPConfiguration) => void = _setup;\r\n\r\n// creating this class instead of directly assigning to default fixes a previous issue\r\nconst Def = {\r\n    /**\r\n     * Global configuration instance to which providers can be added\r\n     */\r\n    config,\r\n    /**\r\n     * Provides access to the Graph REST interface\r\n     */\r\n    graph,\r\n    /**\r\n     * Global logging instance to which subscribers can be registered and messages written\r\n     */\r\n    log,\r\n    /**\r\n     * Provides access global setup method\r\n     */\r\n    setup,\r\n    /**\r\n     * Provides access to the SharePoint REST interface\r\n     */\r\n    sp,\r\n    /**\r\n     * Provides access to local and session storage\r\n     */\r\n    storage,\r\n    /**\r\n     * Utility methods\r\n     */\r\n    util,\r\n};\r\n\r\n/**\r\n * Enables use of the import pnp from syntax\r\n */\r\nexport default Def;\r\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n"],"sourceRoot":""}