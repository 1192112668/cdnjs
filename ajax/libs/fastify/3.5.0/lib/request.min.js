"use strict";const proxyAddr=require("proxy-addr"),warning=require("./warnings");function Request(t,e,r,i,o,n){this.id=t,this.context=n,this.params=e,this.raw=r,this.query=i,this.log=o,this.body=null}function getTrustProxyFn(t){if("function"==typeof t)return t;if(!0===t)return function(){return!0};if("number"==typeof t)return function(e,r){return r<t};if("string"==typeof t){const e=t.split(",").map(t=>t.trim());return proxyAddr.compile(e)}return proxyAddr.compile(t)}function buildRequest(t,e){return e?buildRequestWithTrustProxy(t,e):buildRegularRequest(t)}function buildRegularRequest(t){function e(t,e,r,i,o,n){this.id=t,this.context=n,this.params=e,this.raw=r,this.query=i,this.log=o,this.body=null}return e.prototype=new t,e}function buildRequestWithTrustProxy(t,e){const r=buildRegularRequest(t),i=getTrustProxyFn(e);return Object.defineProperties(r.prototype,{ip:{get(){return proxyAddr(this.raw,i)}},ips:{get(){return proxyAddr.all(this.raw,i)}},hostname:{get(){return void 0!==this.ip&&this.headers["x-forwarded-host"]?this.headers["x-forwarded-host"]:this.headers.host||this.headers[":authority"]}},protocol:{get(){if(this.headers["x-forwarded-proto"]){const t=this.headers["x-forwarded-proto"],e=t.lastIndexOf(",");return-1===e?t.trim():t.slice(e+1).trim()}return this.connection.encrypted?"https":"http"}}}),r}Object.defineProperties(Request.prototype,{req:{get(){return warning.emit("FSTDEP001"),this.raw}},url:{get(){return this.raw.url}},method:{get(){return this.raw.method}},routerPath:{get(){return this.context.config.url}},routerMethod:{get(){return this.context.config.method}},is404:{get(){return void 0===this.context.config.url}},connection:{get(){return this.raw.connection}},ip:{get(){return this.connection.remoteAddress}},hostname:{get(){return this.raw.headers.host||this.raw.headers[":authority"]}},protocol:{get(){return this.connection.encrypted?"https":"http"}},headers:{get(){return this.raw.headers}}}),module.exports=Request,module.exports.buildRequest=buildRequest;