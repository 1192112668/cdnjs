import{d as _inherits,_ as _createClass,b as _defineProperty,a as _classCallCheck,f as _possibleConstructorReturn,h as _getPrototypeOf,y as _objectWithoutProperties,k as _objectSpread2}from"./reducer-0ea50db8.js";import"redux";import"immer";import"./Debug-a41a191f.js";import"flatted";import"./ai-779bcbbf.js";import"./initialize-20f559ab.js";import{C as Client$1}from"./client-051af88e.js";import React from"react";import PropTypes from"prop-types";function Client(e){var t,r,i=e.game,s=e.numPlayers,a=e.board,n=e.multiplayer,o=e.enhancer;return r=t=function(e){function t(e){var r;return _classCallCheck(this,t),(r=_possibleConstructorReturn(this,_getPrototypeOf(t).call(this,e))).client=Client$1({game:i,numPlayers:s,multiplayer:n,gameID:e.gameID,playerID:e.playerID,credentials:e.credentials,debug:!1,enhancer:o}),r}return _inherits(t,e),_createClass(t,[{key:"componentDidMount",value:function(){var e=this;this.unsubscribe=this.client.subscribe(function(){return e.forceUpdate()}),this.client.start()}},{key:"componentWillUnmount",value:function(){this.client.stop(),this.unsubscribe()}},{key:"componentDidUpdate",value:function(e){e.gameID!=this.props.gameID&&this.client.updateGameID(this.props.gameID),e.playerID!=this.props.playerID&&this.client.updatePlayerID(this.props.playerID),e.credentials!=this.props.credentials&&this.client.updateCredentials(this.props.credentials)}},{key:"render",value:function(){var e=null,t=this.client.getState(),r=this.props,i=r.gameID,s=r.playerID,o=_objectWithoutProperties(r,["gameID","playerID"]);return a&&(e=React.createElement(a,_objectSpread2({},t,{},o,{gameID:i,playerID:s,isMultiplayer:!!n,moves:this.client.moves,events:this.client.events,step:this.client.step,reset:this.client.reset,undo:this.client.undo,redo:this.client.redo,gameMetadata:this.client.gameMetadata}))),e}}]),t}(React.Component),_defineProperty(t,"propTypes",{gameID:PropTypes.string,playerID:PropTypes.string,credentials:PropTypes.string}),_defineProperty(t,"defaultProps",{gameID:"default",playerID:null,credentials:null}),r}export{Client};