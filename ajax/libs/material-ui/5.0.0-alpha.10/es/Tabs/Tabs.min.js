import _extends from"@babel/runtime/helpers/esm/extends";import _objectWithoutPropertiesLoose from"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";import*as React from"react";import{isFragment}from"react-is";import PropTypes from"prop-types";import clsx from"clsx";import{refType}from"@material-ui/utils";import debounce from"../utils/debounce";import ownerWindow from"../utils/ownerWindow";import{getNormalizedScrollLeft,detectScrollType}from"../utils/scrollLeft";import animate from"../internal/animate";import ScrollbarSize from"./ScrollbarSize";import withStyles from"../styles/withStyles";import TabIndicator from"./TabIndicator";import TabScrollButton from"../TabScrollButton";import useEventCallback from"../utils/useEventCallback";import useTheme from"../styles/useTheme";export const styles=e=>({root:{overflow:"hidden",minHeight:48,WebkitOverflowScrolling:"touch",display:"flex"},vertical:{flexDirection:"column"},flexContainer:{display:"flex"},flexContainerVertical:{flexDirection:"column"},centered:{justifyContent:"center"},scroller:{position:"relative",display:"inline-block",flex:"1 1 auto",whiteSpace:"nowrap"},fixed:{overflowX:"hidden",width:"100%"},scrollableX:{overflowX:"auto",overflowY:"hidden"},scrollableY:{overflowY:"auto",overflowX:"hidden"},hideScrollbar:{scrollbarWidth:"none","&::-webkit-scrollbar":{display:"none"}},scrollButtons:{},scrollButtonsDesktop:{[e.breakpoints.down("xs")]:{display:"none"}},indicator:{}});const Tabs=React.forwardRef(function(e,t){const{"aria-label":o,"aria-labelledby":r,action:l,centered:n=!1,children:a,classes:s,className:i,component:c="div",indicatorColor:d="secondary",onChange:p,orientation:u="horizontal",ScrollButtonComponent:f=TabScrollButton,scrollButtons:b="auto",selectionFollowsFocus:m,TabIndicatorProps:h={},TabScrollButtonProps:v,textColor:y="inherit",value:T,variant:w="standard",visibleScrollbar:S=!1}=e,g=_objectWithoutPropertiesLoose(e,["aria-label","aria-labelledby","action","centered","children","classes","className","component","indicatorColor","onChange","orientation","ScrollButtonComponent","scrollButtons","selectionFollowsFocus","TabIndicatorProps","TabScrollButtonProps","textColor","value","variant","visibleScrollbar"]),x=useTheme(),C="scrollable"===w,E="rtl"===x.direction,R="vertical"===u,P=R?"scrollTop":"scrollLeft",N=R?"top":"left",B=R?"bottom":"right",k=R?"clientHeight":"clientWidth",W=R?"height":"width";"production"!==process.env.NODE_ENV&&n&&C&&console.error('Material-UI: You can not use the `centered={true}` and `variant="scrollable"` properties at the same time on a `Tabs` component.');const[L,z]=React.useState(!1),[M,I]=React.useState({}),[_,D]=React.useState({start:!1,end:!1}),[F,j]=React.useState({overflow:"hidden",scrollbarWidth:0}),O=new Map,A=React.useRef(null),V=React.useRef(null),H=()=>{const e=A.current;let t,o;if(e){const o=e.getBoundingClientRect();t={clientWidth:e.clientWidth,scrollLeft:e.scrollLeft,scrollTop:e.scrollTop,scrollLeftNormalized:getNormalizedScrollLeft(e,x.direction),scrollWidth:e.scrollWidth,top:o.top,bottom:o.bottom,left:o.left,right:o.right}}if(e&&!1!==T){const e=V.current.children;if(e.length>0){const t=e[O.get(T)];"production"!==process.env.NODE_ENV&&(t||console.error(["Material-UI: The value provided to the Tabs component is invalid.",`None of the Tabs' children match with \`${T}\`.`,O.keys?`You can provide one of the following values: ${Array.from(O.keys()).join(", ")}.`:null].join("\n"))),o=t?t.getBoundingClientRect():null}}return{tabsMeta:t,tabMeta:o}},X=useEventCallback(()=>{const{tabsMeta:e,tabMeta:t}=H();let o=0;if(t&&e)if(R)o=t.top-e.top+e.scrollTop;else{const r=E?e.scrollLeftNormalized+e.clientWidth-e.scrollWidth:e.scrollLeft;o=t.left-e.left+r}const r={[N]:o,[W]:t?t[W]:0};if(isNaN(M[N])||isNaN(M[W]))I(r);else{const e=Math.abs(M[N]-r[N]),t=Math.abs(M[W]-r[W]);(e>=1||t>=1)&&I(r)}}),Y=e=>{animate(P,A.current,e)},U=e=>{let t=A.current[P];R?t+=e:(t+=e*(E?-1:1),t*=E&&"reverse"===detectScrollType()?-1:1),Y(t)},$=()=>{U(-A.current[k])},K=()=>{U(A.current[k])},q=React.useCallback(e=>{j({overflow:null,scrollbarWidth:e})},[]),G=useEventCallback(()=>{const{tabsMeta:e,tabMeta:t}=H();if(t&&e)if(t[N]<e[N]){const o=e[P]+(t[N]-e[N]);Y(o)}else if(t[B]>e[B]){const o=e[P]+(t[B]-e[B]);Y(o)}}),J=useEventCallback(()=>{if(C&&"off"!==b){const{scrollTop:e,scrollHeight:t,clientHeight:o,scrollWidth:r,clientWidth:l}=A.current;let n,a;if(R)n=e>1,a=e<t-o-1;else{const e=getNormalizedScrollLeft(A.current,x.direction);n=E?e<r-l-1:e>1,a=E?e>1:e<r-l-1}n===_.start&&a===_.end||D({start:n,end:a})}});React.useEffect(()=>{const e=debounce(()=>{X(),J()}),t=ownerWindow(A.current);return t.addEventListener("resize",e),()=>{e.clear(),t.removeEventListener("resize",e)}},[X,J]);const Q=React.useMemo(()=>debounce(()=>{J()}),[J]);React.useEffect(()=>()=>{Q.clear()},[Q]),React.useEffect(()=>{z(!0)},[]),React.useEffect(()=>{X(),J()}),React.useEffect(()=>{G()},[G,M]),React.useImperativeHandle(l,()=>({updateIndicator:X,updateScrollButtons:J}),[X,J]);const Z=React.createElement(TabIndicator,_extends({className:s.indicator,orientation:u,color:d},h,{style:_extends({},M,h.style)}));let ee=0;const te=React.Children.map(a,e=>{if(!React.isValidElement(e))return null;"production"!==process.env.NODE_ENV&&isFragment(e)&&console.error(["Material-UI: The Tabs component doesn't accept a Fragment as a child.","Consider providing an array instead."].join("\n"));const t=void 0===e.props.value?ee:e.props.value;O.set(t,ee);const o=t===T;return ee+=1,React.cloneElement(e,_extends({fullWidth:"fullWidth"===w,indicator:o&&!L&&Z,selected:o,selectionFollowsFocus:m,onChange:p,textColor:y,value:t},1!==ee||!1!==T||e.props.tabIndex?{}:{tabIndex:0}))}),oe=(()=>{const e={};e.scrollbarSizeListener=C?React.createElement(ScrollbarSize,{onChange:q,className:clsx(s.scrollableX,s.hideScrollbar)}):null;const t=_.start||_.end,o=C&&("auto"===b&&t||"desktop"===b||"on"===b);return e.scrollButtonStart=o?React.createElement(f,_extends({orientation:u,direction:E?"right":"left",onClick:$,disabled:!_.start,className:clsx(s.scrollButtons,"on"!==b&&s.scrollButtonsDesktop)},v)):null,e.scrollButtonEnd=o?React.createElement(f,_extends({orientation:u,direction:E?"left":"right",onClick:K,disabled:!_.end,className:clsx(s.scrollButtons,"on"!==b&&s.scrollButtonsDesktop)},v)):null,e})();return React.createElement(c,_extends({className:clsx(s.root,i,R&&s.vertical),ref:t},g),oe.scrollButtonStart,oe.scrollbarSizeListener,React.createElement("div",{className:clsx(s.scroller,C?[R?s.scrollableY:s.scrollableX,!S&&s.hideScrollbar]:s.fixed),style:{overflow:F.overflow,[R?`margin${E?"Left":"Right"}`:"marginBottom"]:S?void 0:-F.scrollbarWidth},ref:A,onScroll:Q},React.createElement("div",{"aria-label":o,"aria-labelledby":r,"aria-orientation":"vertical"===u?"vertical":null,className:clsx(s.flexContainer,R&&s.flexContainerVertical,n&&!C&&s.centered),onKeyDown:e=>{const{target:t}=e;if("tab"!==t.getAttribute("role"))return;let o=null,r="vertical"!==u?"ArrowLeft":"ArrowUp",l="vertical"!==u?"ArrowRight":"ArrowDown";switch("vertical"!==u&&"rtl"===x.direction&&(r="ArrowRight",l="ArrowLeft"),e.key){case r:o=t.previousElementSibling||V.current.lastChild;break;case l:o=t.nextElementSibling||V.current.firstChild;break;case"Home":o=V.current.firstChild;break;case"End":o=V.current.lastChild}null!==o&&(o.focus(),e.preventDefault())},ref:V,role:"tablist"},te),L&&Z),oe.scrollButtonEnd)});"production"!==process.env.NODE_ENV&&(Tabs.propTypes={action:refType,"aria-label":PropTypes.string,"aria-labelledby":PropTypes.string,centered:PropTypes.bool,children:PropTypes.node,classes:PropTypes.object,className:PropTypes.string,component:PropTypes.elementType,indicatorColor:PropTypes.oneOf(["primary","secondary"]),onChange:PropTypes.func,orientation:PropTypes.oneOf(["horizontal","vertical"]),ScrollButtonComponent:PropTypes.elementType,scrollButtons:PropTypes.oneOf(["auto","desktop","off","on"]),selectionFollowsFocus:PropTypes.bool,TabIndicatorProps:PropTypes.object,TabScrollButtonProps:PropTypes.object,textColor:PropTypes.oneOf(["inherit","primary","secondary"]),value:PropTypes.any,variant:PropTypes.oneOf(["fullWidth","scrollable","standard"]),visibleScrollbar:PropTypes.bool});export default withStyles(styles,{name:"MuiTabs"})(Tabs);