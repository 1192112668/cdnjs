import{EventEmitter}from"../EventEmitter";const hasOwn=Object.prototype.hasOwnProperty;let ObservableMap=(()=>{class e extends EventEmitter{constructor(t,s){if(super(),this._entries=new Map,s&&s.valueEquals&&(this._valueEquals=s.valueEquals),t){let s=this._entries;if(t instanceof Map||t instanceof e)for(let[e,r]of t instanceof Map?t:t._entries)s.set(e,r);else if(Array.isArray(t))for(let e=0,r=t.length;e<r;e++)s.set(t[e][0],t[e][1]);else for(let e in t)hasOwn.call(t,e)&&s.set(e,t[e])}}get size(){return this._entries.size}get valueEquals(){return this._valueEquals}onChange(t,s){return this.on(e.EVENT_CHANGE,t,s)}offChange(t,s){return this.off(e.EVENT_CHANGE,t,s)}has(e){return this._entries.has(e)}get(e){return this._entries.get(e)}set(t,s){let r,i=this._entries,a=i.has(t);return a&&(r=i.get(t),Object.is(s,r))?this:(i.set(t,s),this.emit(e.EVENT_CHANGE,{subtype:a?"update":"add",key:t,prevValue:r,value:s}),this)}delete(t){let s=this._entries;if(s.has(t)){let r=s.get(t);return s.delete(t),this.emit(e.EVENT_CHANGE,{subtype:"delete",key:t,value:r}),!0}return!1}clear(){return this._entries.size&&(this._entries.clear(),this.emit(e.EVENT_CHANGE,{subtype:"clear"})),this}equals(t){if(!(t instanceof e))return!1;if(this.size!=t.size)return!1;for(let[e,s]of this){if(!t.has(e))return!1;let r=t.get(e);if(this._valueEquals?!this._valueEquals(s,r):s!==r&&!(s&&r&&"object"==typeof s&&"object"==typeof r&&s.equals&&s.equals===r.equals&&s.equals(r)))return!1}return!0}forEach(e,t){for(let[s,r]of this._entries)e.call(t,r,s,this)}keys(){return this._entries.keys()}values(){return this._entries.values()}entries(){return this._entries.entries()}clone(e=!1){let t;if(e){t=[];for(let[e,s]of this._entries)t.push([e,s&&"object"==typeof s&&s.clone?s.clone.length?s.clone(!0):s.clone():s])}return new this.constructor(t||this)}absorbFrom(t){if(!(t instanceof e))throw TypeError('"that" must be instance of ObservableMap');let s=this._entries,r=!1;for(let[e,i]of s)if(t.has(e)){let a=t.get(e);(this._valueEquals?this._valueEquals(i,a):i===a||i&&a&&"object"==typeof i&&"object"==typeof a&&i.equals&&i.equals===a.equals&&i.equals(a))||(i&&a&&"object"==typeof i&&"object"==typeof a&&i.absorbFrom&&i.absorbFrom===a.absorbFrom?i.absorbFrom(a)&&(r=!0):(s.set(e,a),r=!0))}else s.delete(e),r=!0;for(let[e,i]of t)s.has(e)||(s.set(e,i),r=!0);return r&&this.emit(e.EVENT_CHANGE,{subtype:"absorbFrom"}),r}toData(){let e={};for(let[t,s]of this._entries)e[t]=s&&"object"==typeof s&&s.toData?s.toData():s;return e}}return e.EVENT_CHANGE="change",e})();export{ObservableMap};ObservableMap.prototype[Symbol.iterator]=ObservableMap.prototype.entries;