import{EventEmitter}from"../EventEmitter";const push=Array.prototype.push,splice=Array.prototype.splice,defaultItemComparator=(t,e)=>t<e?-1:t>e?1:0;let ObservableList=(()=>{class t extends EventEmitter{constructor(e,i){if(super(),this._items=[],i&&(i.itemEquals&&(this._itemEquals=i.itemEquals),i.itemComparator&&!1!==i.sorted||i.sorted?(this._itemComparator=i.itemComparator||defaultItemComparator,this._sorted=!0):(this._itemComparator=null,this._sorted=!1)),e)if(this._sorted){e instanceof t&&(e=e._items);for(let t=0,i=e.length;t<i;t++)this._insertSortedValue(e[t])}else push.apply(this._items,e instanceof t?e._items:e)}get length(){return this._items.length}set length(e){if(this._items.length!=e){if(e>this._items.length)throw RangeError("Length out of valid range");this.emit(t.EVENT_CHANGE),this._items.length=e}}get itemEquals(){return this._itemEquals}get itemComparator(){return this._itemComparator}get sorted(){return this._sorted}onChange(e,i){return this.on(t.EVENT_CHANGE,e,i)}offChange(e,i){return this.off(t.EVENT_CHANGE,e,i)}_validateIndex(t,e=!1){if(void 0===t)return t;if(t<0){if((t+=this._items.length)<0)throw RangeError("Index out of valid range")}else if(t>this._items.length-(e?0:1))throw RangeError("Index out of valid range");return t}contains(t){return-1!=this._items.indexOf(t)}indexOf(t,e){return this._items.indexOf(t,this._validateIndex(e,!0))}lastIndexOf(t,e){return this._items.lastIndexOf(t,void 0===e?-1:this._validateIndex(e,!0))}get(t){return this._items[this._validateIndex(t,!0)]}getRange(t,e){if(t=this._validateIndex(t,!0),void 0===e)return this._items.slice(t);if(t+e>this._items.length)throw RangeError('Sum of "index" and "count" out of valid range');return this._items.slice(t,t+e)}set(e,i){if(this._sorted)throw TypeError("Cannot set to sorted list");return e=this._validateIndex(e,!0),Object.is(i,this._items[e])||(this._items[e]=i,this.emit(t.EVENT_CHANGE)),this}setRange(e,i){if(this._sorted)throw TypeError("Cannot set to sorted list");e=this._validateIndex(e,!0),i instanceof t&&(i=i._items);let s=i.length;if(!s)return this;let r=this._items;if(e+s>r.length)throw RangeError('Sum of "index" and "items.length" out of valid range');let n=!1;for(let t=e+s;t>e;){let s=i[--t-e];Object.is(s,r[t])||(r[t]=s,n=!0)}return n&&this.emit(t.EVENT_CHANGE),this}add(e,i=!1){return i&&-1!=this._items.indexOf(e)?this:(this._sorted?this._insertSortedValue(e):this._items.push(e),this.emit(t.EVENT_CHANGE),this)}addRange(e,i=!1){if(e instanceof t&&(e=e._items),e.length)if(i){let i=this._items,s=this._sorted,r=!1;for(let t of e)-1==i.indexOf(t)&&(s?this._insertSortedValue(t):i.push(t),r=!0);r&&this.emit(t.EVENT_CHANGE)}else{if(this._sorted)for(let t=0,i=e.length;t<i;t++)this._insertSortedValue(e[t]);else push.apply(this._items,e);this.emit(t.EVENT_CHANGE)}return this}insert(e,i){if(this._sorted)throw TypeError("Cannot insert to sorted list");return this._items.splice(this._validateIndex(e,!0),0,i),this.emit(t.EVENT_CHANGE),this}insertRange(e,i){if(this._sorted)throw TypeError("Cannot insert to sorted list");return e=this._validateIndex(e,!0),i instanceof t&&(i=i._items),i.length&&(splice.apply(this._items,[e,0].concat(i)),this.emit(t.EVENT_CHANGE)),this}remove(e,i){let s=this._items.indexOf(e,this._validateIndex(i,!0));return-1!=s&&(this._items.splice(s,1),this.emit(t.EVENT_CHANGE),!0)}removeAll(e,i){let s=this._validateIndex(i,!0),r=this._items,n=!1;for(;-1!=(s=r.indexOf(e,s));)r.splice(s,1),n=!0;return n&&this.emit(t.EVENT_CHANGE),n}removeEach(e,i){i=this._validateIndex(i,!0),e instanceof t&&(e=e._items.slice());let s=this._items,r=!1;for(let t=0,n=e.length;t<n;t++){let n=s.indexOf(e[t],i);-1!=n&&(s.splice(n,1),r=!0)}return r&&this.emit(t.EVENT_CHANGE),r}removeAt(e){let i=this._items.splice(this._validateIndex(e),1)[0];return this.emit(t.EVENT_CHANGE),i}removeRange(e,i){if(e=this._validateIndex(e,!0),void 0===i){if(!(i=this._items.length-e))return[]}else{if(!i)return[];if(e+i>this._items.length)throw RangeError('Sum of "index" and "count" out of valid range')}let s=this._items.splice(e,i);return this.emit(t.EVENT_CHANGE),s}replace(e,i){if(this._sorted)throw TypeError("Cannot replace in sorted list");let s=this._items.indexOf(e);return-1!=s&&(this._items[s]=i,this.emit(t.EVENT_CHANGE),!0)}clear(){return this._items.length&&(this._items.length=0,this.emit(t.EVENT_CHANGE)),this}equals(e){if(!(e instanceof t))return!1;let i=this._items,s=e._items;if(i.length!=s.length)return!1;for(let t=i.length;t;){let e=i[--t],r=s[t];if(this._itemEquals?!this._itemEquals(e,r):e!==r&&!(e&&r&&"object"==typeof e&&"object"==typeof r&&e.equals&&e.equals===r.equals&&e.equals(r)))return!1}return!0}join(t){return this._items.join(t)}find(t,e){let i=this._items;for(let s=0,r=i.length;s<r;s++){let r=i[s];if(t.call(e,r,s,this))return r}}findIndex(t,e){let i=this._items;for(let s=0,r=i.length;s<r;s++)if(t.call(e,i[s],s,this))return s;return-1}clone(t=!1){return new this.constructor(t?this._items.map(t=>t&&"object"==typeof t&&t.clone?t.clone.length?t.clone(!0):t.clone():t):this,{itemComparator:this._itemComparator||void 0,sorted:this._sorted})}absorbFrom(e){if(!(e instanceof t))throw TypeError('"that" must be instance of ObservableList');let i=this._items,s=e._items,r=!1;i.length!=e.length&&(i.length=e.length,r=!0);for(let t=i.length;t;){let e=i[--t],n=s[t];(this._itemEquals?this._itemEquals(e,n):e===n||e&&n&&"object"==typeof e&&"object"==typeof n&&e.equals&&e.equals===n.equals&&e.equals(n))||(e&&n&&"object"==typeof e&&"object"==typeof n&&e.absorbFrom&&e.absorbFrom===n.absorbFrom?e.absorbFrom(n)&&(r=!0):(i[t]=n,r=!0))}return r&&this.emit(t.EVENT_CHANGE),r}toArray(){return this._items.slice()}toString(){return this._items.join()}toData(){return this._items.map(t=>t&&"object"==typeof t&&t.toData?t.toData():t)}_insertSortedValue(t){let e=this._items,i=this._itemComparator,s=0,r=e.length;for(;s!=r;){let n=s+r>>1;i(t,e[n])<0?r=n:s=n+1}e.splice(s,0,t)}}return t.EVENT_CHANGE="change",t})();export{ObservableList};["forEach","map","filter","every","some"].forEach(t=>{ObservableList.prototype[t]=function(e,i){return this._items[t]((t,s)=>e.call(i,t,s,this))}}),["reduce","reduceRight"].forEach(t=>{ObservableList.prototype[t]=function(e,i){let s=(t,i,s)=>e(t,i,s,this);return arguments.length>=2?this._items[t](s,i):this._items[t](s)}}),[["keys",t=>t],["values",(t,e)=>e],["entries",(t,e)=>[t,e]]].forEach(t=>{let e=t[1];ObservableList.prototype[t[0]]=function(){let t=this._items,i=0,s=!1;return{next(){if(!s){if(i<t.length)return{value:e(i,t[i++]),done:!1};s=!0}return{value:void 0,done:!0}}}}}),ObservableList.prototype[Symbol.iterator]=ObservableList.prototype.values;