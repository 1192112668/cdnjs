import{EventEmitter}from"../EventEmitter";const hasOwn=Object.prototype.hasOwnProperty;let ObservableMap=(()=>{class e extends EventEmitter{constructor(t){if(super(),this._entries=new Map,t){let r=this._entries;if(t instanceof Map||t instanceof e)for(let[e,s]of t instanceof Map?t:t._entries)r.set(e,s);else if(Array.isArray(t))for(let e=0,s=t.length;e<s;e++)r.set(t[e][0],t[e][1]);else for(let e in t)hasOwn.call(t,e)&&r.set(e,t[e])}}get size(){return this._entries.size}onChange(t,r){return this.on(e.EVENT_CHANGE,t,r)}offChange(t,r){return this.off(e.EVENT_CHANGE,t,r)}has(e){return this._entries.has(e)}get(e){return this._entries.get(e)}set(t,r){let s,i=this._entries,n=i.has(t);return n&&(s=i.get(t),Object.is(r,s))?this:(i.set(t,r),this.emit(e.EVENT_CHANGE,{subtype:n?"update":"add",key:t,prevValue:s,value:r}),this)}delete(t){let r=this._entries;if(r.has(t)){let s=r.get(t);return r.delete(t),this.emit(e.EVENT_CHANGE,{subtype:"delete",key:t,value:s}),!0}return!1}clear(){return this._entries.size&&(this._entries.clear(),this.emit(e.EVENT_CHANGE,{subtype:"clear"})),this}equals(t){if(!(t instanceof e))return!1;if(this.size!=t.size)return!1;for(let e of this)if(e[1]!==t.get(e[0]))return!1;return!0}forEach(e,t){for(let[r,s]of this._entries)e.call(t,s,r,this)}keys(){return this._entries.keys()}values(){return this._entries.values()}entries(){return this._entries.entries()}clone(e=!1){let t;if(e){t=[];for(let[e,r]of this._entries)t.push([e,r&&"object"==typeof r&&r.clone?r.clone.length?r.clone(!0):r.clone():r])}return new this.constructor(t||this)}absorbFrom(t){if(!(t instanceof e))throw TypeError('"that" must be instance of ObservableMap');let r=this._entries,s=!1;for(let[e,i]of r)if(t.has(e)){let n=t.get(e);i!==n&&(i&&n&&"object"==typeof i&&"object"==typeof n&&i.absorbFrom&&i.absorbFrom===n.absorbFrom?i.absorbFrom(n)&&(s=!0):(r.set(e,n),s=!0))}else r.delete(e),s=!0;for(let[e,i]of t)r.has(e)||(r.set(e,i),s=!0);return s&&this.emit(e.EVENT_CHANGE,{subtype:"absorbFrom"}),s}toData(){let e={};for(let[t,r]of this._entries)e[t]=r&&"object"==typeof r&&r.toData?r.toData():r;return e}}return e.EVENT_CHANGE="change",e})();export{ObservableMap};ObservableMap.prototype[Symbol.iterator]=ObservableMap.prototype.entries;