{"version":3,"file":"rax.min.js","sources":["../src/vdom/host.js","../src/vdom/element.js","../src/types.js","../src/vdom/flattenChildren.js","../src/vdom/scheduler.js","../src/error.js","../src/createElement.js","../src/invokeFunctionsWithContext.js","../src/vdom/shallowEqual.js","../src/constant.js","../src/hooks.js","../src/toArray.js","../src/vdom/getNearestParent.js","../src/createContext.js","../src/vdom/base.js","../src/vdom/empty.js","../src/vdom/ref.js","../src/vdom/instantiateComponent.js","../src/vdom/shouldUpdateComponent.js","../src/vdom/getElementKeyName.js","../src/vdom/getPrevSiblingNativeNode.js","../src/vdom/component.js","../src/vdom/root.js","../src/vdom/instance.js","../src/assign.js","../src/vdom/native.js","../src/vdom/text.js","../src/vdom/reactive.js","../src/vdom/updater.js","../src/vdom/performInSandbox.js","../src/vdom/composite.js","../src/vdom/fragment.js","../src/createRef.js","../src/forwardRef.js","../src/memo.js","../src/fragment.js","../src/render.js","../src/vdom/inject.js","../src/version.js","../src/index.js","../src/index.js"],"sourcesContent":["/*\n * Stateful things in runtime\n */\nexport default {\n  __mountID: 1,\n  __isUpdating: false,\n  // Inject\n  driver: null,\n  // Roots\n  rootComponents: {},\n  rootInstances: {},\n  // Current owner component\n  owner: null,\n};\n","import checkPropTypes from 'prop-types/checkPropTypes';\n\nexport default function Element(type, key, ref, props, owner) {\n  let element = {\n    // Built-in properties that belong on the element\n    type,\n    key,\n    ref,\n    props,\n    // Record the component responsible for creating this element.\n    _owner: owner,\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    const propTypes = type.propTypes;\n\n    // Validate its props provided by the propTypes definition\n    if (propTypes) {\n      const displayName = type.displayName || type.name;\n      checkPropTypes(\n        propTypes,\n        props,\n        'prop',\n        displayName,\n      );\n    }\n\n    // We make validation flag non-enumerable, so the test framework could ignore it\n    Object.defineProperty(element, '__validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    });\n\n    // Props is immutable\n    if (Object.freeze) {\n      Object.freeze(props);\n    }\n  }\n\n  return element;\n};\n","export function isNull(obj) {\n  return obj === null;\n}\n\nexport function isFunction(obj) {\n  return typeof obj === 'function';\n}\n\nexport function isObject(obj) {\n  return typeof obj === 'object';\n}\n\nexport function isPlainObject(obj) {\n  return EMPTY_OBJECT.toString.call(obj) === '[object Object]';\n}\n\nexport function isArray(array) {\n  return Array.isArray(array);\n}\n\nexport function isString(string) {\n  return typeof string === 'string';\n}\n\nexport function isNumber(string) {\n  return typeof string === 'number';\n}\n\nexport const NOOP = () => {};\nexport const EMPTY_OBJECT = {};\n","import { isArray } from '../types';\n\nfunction traverseChildren(children, result) {\n  if (isArray(children)) {\n    for (let i = 0, l = children.length; i < l; i++) {\n      traverseChildren(children[i], result);\n    }\n  } else {\n    result.push(children);\n  }\n}\n\nexport default function flattenChildren(children) {\n  if (children == null) {\n    return children;\n  }\n  const result = [];\n  traverseChildren(children, result);\n\n  // If length equal 1, return the only one.\n  return result.length - 1 ? result : result[0];\n}\n","let updateCallbacks = [];\nlet effectCallbacks = [];\nlet layoutCallbacks = [];\nexport let scheduler = setTimeout;\n\nif (process.env.NODE_ENV !== 'production') {\n  // Wrapper timer for hijack timers in jest\n  scheduler = (callback) => {\n    setTimeout(callback);\n  };\n}\n\nfunction invokeFunctionsWithClear(callbacks) {\n  let callback;\n  while (callback = callbacks.shift()) {\n    callback();\n  }\n}\n\n// Schedule before next render\nexport function schedule(callback) {\n  if (updateCallbacks.length === 0) {\n    scheduler(flush);\n  }\n  updateCallbacks.push(callback);\n}\n\n// Flush before next render\nexport function flush() {\n  invokeFunctionsWithClear(updateCallbacks);\n}\n\nexport function scheduleEffect(callback) {\n  if (effectCallbacks.length === 0) {\n    scheduler(flushEffect);\n  }\n  effectCallbacks.push(callback);\n}\n\nexport function flushEffect() {\n  invokeFunctionsWithClear(effectCallbacks);\n}\n\nexport function scheduleLayout(callback) {\n  layoutCallbacks.push(callback);\n}\n\nexport function flushLayout() {\n  invokeFunctionsWithClear(layoutCallbacks);\n}\n","import Host from './vdom/host';\nimport { scheduler } from './vdom/scheduler';\nimport { NOOP, isPlainObject } from './types';\n\nfunction createMinifiedError(type, code, obj) {\n  var typeInfo = obj === undefined ? '' : ' got: ' + getTypeInfo(obj);\n  return new Error(`${type}: #${code}, ${getRenderErrorInfo()}.` + typeInfo);\n}\n\nexport function getTypeInfo(obj) {\n  return isPlainObject(obj) ? Object.keys(obj) : obj;\n}\n\nexport function getRenderErrorInfo() {\n  const ownerComponent = Host.owner;\n  return ownerComponent ? `check <${ownerComponent.__getName()}>` : 'no owner';\n}\n\n/**\n * Minified code:\n *  1: Hooks called outside a component, or multiple version of Rax are used.\n *  6: Invalid component type, expected a class or function component.\n *  4: Too many re-renders, the number of renders is limited to prevent an infinite loop.\n *  5: Rax driver not found.\n * @param code {Number}\n * @param obj {Object}\n */\nexport function throwMinifiedError(code, obj) {\n  throw createMinifiedError('Error', code, obj);\n}\n\n/**\n * Minified Code:\n * 0: Invalid element type, expected a string or a class/function component but got \"null\" or \"undefined\".\n * 2. Invalid child type, expected types: Element instance, string, boolean, array, null, undefined.\n * 3. Ref can not attach because multiple copies of Rax are used.\n * @param {number} code\n * @param {string} info\n */\nexport function throwMinifiedWarn(code, obj) {\n  let err = createMinifiedError('Warn', code, obj);\n  scheduler(() => {\n    throw err;\n  }, 0);\n}\n\nexport function throwError(message, obj) {\n  let typeInfo = obj === undefined ? '' :\n    '(found: ' + (isPlainObject(obj) ? `object with keys {${Object.keys(obj)}}` : obj) + ')';\n\n  throw Error(`${message} ${typeInfo}`);\n}\n\nexport let warning = NOOP;\n\nif (process.env.NODE_ENV !== 'production') {\n  warning = (template, ...args) => {\n    if (typeof console !== 'undefined') {\n      let argsWithFormat = args.map(item => '' + item);\n      argsWithFormat.unshift('Warning: ' + template);\n      // Don't use spread (or .apply) directly because it breaks IE9\n      Function.prototype.apply.call(console.error, console, argsWithFormat);\n    }\n\n    // For works in DevTools when enable `Pause on caught exceptions`\n    // that can find the component where caused this warning\n    try {\n      let argIndex = 0;\n      const message = 'Warning: ' + template.replace(/%s/g, () => args[argIndex++]);\n      throw new Error(message);\n    } catch (e) {}\n  };\n}\n\n","import Host from './vdom/host';\nimport Element from './vdom/element';\nimport flattenChildren from './vdom/flattenChildren';\nimport { warning, throwError, throwMinifiedWarn } from './error';\nimport { isString, isArray, NOOP } from './types';\nimport validateChildKeys from './validateChildKeys';\n\nconst RESERVED_PROPS = {\n  key: true,\n  ref: true,\n};\n\nexport default function createElement(type, config, children) {\n  // Reserved names are extracted\n  let props = {};\n  let propName;\n  let key = null;\n  let ref = null;\n\n  if (config != null) {\n    ref = config.ref === undefined ? null : config.ref;\n    key = config.key === undefined ? null : '' + config.key;\n\n    // Remaining properties are added to a new props object\n    for (propName in config) {\n      if (!RESERVED_PROPS[propName]) {\n        props[propName] = config[propName];\n      }\n    }\n  }\n\n  // Children arguments can be more than one\n  const childrenLength = arguments.length - 2;\n  if (childrenLength > 0) {\n    if (childrenLength === 1 && !isArray(children)) {\n      props.children = children;\n    } else {\n      let childArray = children;\n      if (childrenLength > 1) {\n        childArray = new Array(childrenLength);\n        for (var i = 0; i < childrenLength; i++) {\n          childArray[i] = arguments[i + 2];\n        }\n      }\n      props.children = flattenChildren(childArray);\n    }\n  }\n\n  // Resolve default props\n  if (type && type.defaultProps) {\n    let defaultProps = type.defaultProps;\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n\n  if (type == null) {\n    if (process.env.NODE_ENV !== 'production') {\n      throwError(`Invalid element type, expected a string or a class/function component but got \"${type}\".`);\n    } else {\n      // A empty component replaced avoid break render in production\n      type = NOOP;\n      throwMinifiedWarn(0);\n    }\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (isString(ref) && !Host.owner) {\n      warning(\n        `Adding a string ref \"${ref}\" that was not created inside render method, or multiple copies of Rax are used.`\n      );\n    }\n\n    for (let i = 2; i < arguments.length; i ++) {\n      validateChildKeys(arguments[i], type);\n    }\n  }\n\n  return new Element(\n    type,\n    key,\n    ref,\n    props,\n    Host.owner\n  );\n}\n\n","export default function invokeFunctionsWithContext(fns, context, value) {\n  for (let i = 0, l = fns && fns.length; i < l; i++) {\n    fns[i].call(context, value);\n  }\n}\n","import { isNull, isObject, EMPTY_OBJECT } from '../types';\n\nconst hasOwnProperty = EMPTY_OBJECT.hasOwnProperty;\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nexport function is(x, y) {\n  // SameValue algorithm\n  if (x === y) {\n    // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    return x !== 0 || 1 / x === 1 / y;\n  } else {\n    // Step 6.a: NaN == NaN\n    return x !== x && y !== y; // eslint-disable-line no-self-compare\n  }\n}\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * Returns true when the values of all keys are strictly equal.\n */\nexport default function shallowEqual(objA, objB) {\n  if (is(objA, objB)) {\n    return true;\n  }\n\n  if (!isObject(objA) || isNull(objA) || !isObject(objB) || isNull(objB)) {\n    return false;\n  }\n\n  let keysA = Object.keys(objA);\n  let keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A's keys different from B.\n  for (let i = 0; i < keysA.length; i++) {\n    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","/* Common constant variables for rax */\n\nexport const INTERNAL = '_internal';\nexport const INSTANCE = '_instance';\nexport const NATIVE_NODE = '_nativeNode';\nexport const RENDERED_COMPONENT = '_renderedComponent';\n","import Host from './vdom/host';\nimport { scheduleEffect, flushEffect } from './vdom/scheduler';\nimport { is } from './vdom/shallowEqual';\nimport { isArray, isFunction, isNull } from './types';\nimport { warning, throwError, throwMinifiedError } from './error';\nimport { INSTANCE } from './constant';\n\nfunction getCurrentInstance() {\n  return Host.owner && Host.owner[INSTANCE];\n}\n\nfunction getCurrentRenderingInstance() {\n  const currentInstance = getCurrentInstance();\n  if (currentInstance) {\n    return currentInstance;\n  } else {\n    if (process.env.NODE_ENV !== 'production') {\n      throwError('Hooks called outside a component, or multiple version of Rax are used.');\n    } else {\n      throwMinifiedError(1);\n    }\n  }\n}\n\nfunction areInputsEqual(inputs, prevInputs) {\n  if (isNull(prevInputs) || inputs.length !== prevInputs.length) {\n    return false;\n  }\n\n  for (let i = 0; i < inputs.length; i++) {\n    if (is(inputs[i], prevInputs[i])) {\n      continue;\n    }\n    return false;\n  }\n  return true;\n}\n\nexport function useState(initialState) {\n  const currentInstance = getCurrentRenderingInstance();\n  const hookID = currentInstance.getHookID();\n  const hooks = currentInstance.getHooks();\n\n  if (!hooks[hookID]) {\n    // If the initial state is the result of an expensive computation,\n    // you may provide a function instead for lazy initial state.\n    if (isFunction(initialState)) {\n      initialState = initialState();\n    }\n\n    const setState = newState => {\n      // Flush all effects first before update state\n      if (!Host.__isUpdating) {\n        flushEffect();\n      }\n\n      const hook = hooks[hookID];\n      const eagerState = hook[2];\n      // function updater\n      if (isFunction(newState)) {\n        newState = newState(eagerState);\n      }\n\n      if (!is(newState, eagerState)) {\n        // Current instance is in render update phase.\n        // After this one render finish, will containue run.\n        hook[2] = newState;\n        if (getCurrentInstance() === currentInstance) {\n          // Marked as is scheduled that could finish hooks.\n          currentInstance.__isScheduled = true;\n        } else {\n          currentInstance.__update();\n        }\n      }\n    };\n\n    hooks[hookID] = [\n      initialState,\n      setState,\n      initialState\n    ];\n  }\n\n  const hook = hooks[hookID];\n  if (!is(hook[0], hook[2])) {\n    hook[0] = hook[2];\n    currentInstance.__shouldUpdate = true;\n  }\n\n  return hook;\n}\n\nexport function useContext(context) {\n  const currentInstance = getCurrentRenderingInstance();\n  return currentInstance.useContext(context);\n}\n\nexport function useEffect(effect, inputs) {\n  useEffectImpl(effect, inputs, true);\n}\n\nexport function useLayoutEffect(effect, inputs) {\n  useEffectImpl(effect, inputs);\n}\n\nfunction useEffectImpl(effect, inputs, defered) {\n  const currentInstance = getCurrentRenderingInstance();\n  const hookID = currentInstance.getHookID();\n  const hooks = currentInstance.getHooks();\n  inputs = inputs === undefined ? null : inputs;\n\n  if (!hooks[hookID]) {\n    const __create = (immediately) => {\n      if (!immediately && defered) return scheduleEffect(() => __create(true));\n      const { current } = __create;\n      if (current) {\n        __destory.current = current();\n        __create.current = null;\n\n        if (process.env.NODE_ENV !== 'production') {\n          const currentDestory = __destory.current;\n          if (currentDestory !== undefined && typeof currentDestory !== 'function') {\n            let msg;\n            if (currentDestory === null) {\n              msg =\n                ' You returned null. If your effect does not require clean ' +\n                'up, return undefined (or nothing).';\n            } else if (typeof currentDestory.then === 'function') {\n              msg =\n                '\\n\\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' +\n                'Instead, write the async function inside your effect ' +\n                'and call it immediately:\\n\\n' +\n                'useEffect(() => {\\n' +\n                '  async function fetchData() {\\n' +\n                '    // You can await here\\n' +\n                '    const response = await MyAPI.getData(someId);\\n' +\n                '    // ...\\n' +\n                '  }\\n' +\n                '  fetchData();\\n' +\n                '}, [someId]); // Or [] if effect doesn\\'t need props or state.';\n            } else {\n              msg = ' You returned: ' + currentDestory;\n            }\n\n            warning(\n              'An effect function must not return anything besides a function, ' +\n              'which is used for clean-up.' + msg,\n            );\n          }\n        }\n      }\n    };\n\n    const __destory = (immediately) => {\n      if (!immediately && defered) return scheduleEffect(() => __destory(true));\n      const { current } = __destory;\n      if (current) {\n        current();\n        __destory.current = null;\n      }\n    };\n\n    __create.current = effect;\n\n    hooks[hookID] = {\n      __create,\n      __destory,\n      __prevInputs: inputs,\n      __inputs: inputs\n    };\n\n    currentInstance.didMount.push(__create);\n    currentInstance.willUnmount.push(__destory);\n    currentInstance.didUpdate.push(() => {\n      const { __prevInputs, __inputs, __create } = hooks[hookID];\n      if (__inputs == null || !areInputsEqual(__inputs, __prevInputs)) {\n        __destory();\n        __create();\n      }\n    });\n  } else {\n    const hook = hooks[hookID];\n    const { __create, __inputs: prevInputs } = hook;\n    hook.__inputs = inputs;\n    hook.__prevInputs = prevInputs;\n    __create.current = effect;\n  }\n}\n\nexport function useImperativeHandle(ref, create, inputs) {\n  const nextInputs = isArray(inputs) ? inputs.concat([ref]) : null;\n\n  useLayoutEffect(() => {\n    if (isFunction(ref)) {\n      ref(create());\n      return () => ref(null);\n    } else if (ref != null) {\n      ref.current = create();\n      return () => {\n        ref.current = null;\n      };\n    }\n  }, nextInputs);\n}\n\nexport function useRef(initialValue) {\n  const currentInstance = getCurrentRenderingInstance();\n  const hookID = currentInstance.getHookID();\n  const hooks = currentInstance.getHooks();\n\n  if (!hooks[hookID]) {\n    hooks[hookID] = {\n      current: initialValue\n    };\n  }\n\n  return hooks[hookID];\n}\n\nexport function useCallback(callback, inputs) {\n  return useMemo(() => callback, inputs);\n}\n\nexport function useMemo(create, inputs) {\n  const currentInstance = getCurrentRenderingInstance();\n  const hookID = currentInstance.getHookID();\n  const hooks = currentInstance.getHooks();\n  inputs = inputs === undefined ? null : inputs;\n\n  if (!hooks[hookID]) {\n    hooks[hookID] = [create(), inputs];\n  } else {\n    const prevInputs = hooks[hookID][1];\n    if (isNull(inputs) || !areInputsEqual(inputs, prevInputs)) {\n      hooks[hookID] = [create(), inputs];\n    }\n  }\n\n  return hooks[hookID][0];\n}\n\nexport function useReducer(reducer, initialArg, init) {\n  const currentInstance = getCurrentRenderingInstance();\n  const hookID = currentInstance.getHookID();\n  const hooks = currentInstance.getHooks();\n  const hook = hooks[hookID];\n\n  if (!hook) {\n    const initialState = isFunction(init) ? init(initialArg) : initialArg;\n\n    const dispatch = action => {\n      // Flush all effects first before update state\n      if (!Host.__isUpdating) {\n        flushEffect();\n      }\n\n      const hook = hooks[hookID];\n      // Reducer will update in the next render, before that we add all\n      // actions to the queue\n      const queue = hook[2];\n\n      if (getCurrentInstance() === currentInstance) {\n        queue.__actions.push(action);\n        currentInstance.__isScheduled = true;\n      } else {\n        const currentState = queue.__eagerState;\n        const eagerReducer = queue.__eagerReducer;\n        const eagerState = eagerReducer(currentState, action);\n        if (is(eagerState, currentState)) {\n          return;\n        }\n        queue.__eagerState = eagerState;\n        queue.__actions.push(action);\n        currentInstance.__update();\n      }\n    };\n\n    return hooks[hookID] = [\n      initialState,\n      dispatch,\n      {\n        __actions: [],\n        __eagerReducer: reducer,\n        __eagerState: initialState\n      }\n    ];\n  }\n\n  const queue = hook[2];\n  let next = hook[0];\n\n  if (currentInstance.__reRenders > 0) {\n    for (let i = 0; i < queue.__actions.length; i++) {\n      next = reducer(next, queue.__actions[i]);\n    }\n  } else {\n    next = queue.__eagerState;\n  }\n\n  if (!is(next, hook[0])) {\n    hook[0] = next;\n    currentInstance.__shouldUpdate = true;\n  }\n\n  queue.__eagerReducer = reducer;\n  queue.__eagerState = next;\n  queue.__actions.length = 0;\n\n  return hooks[hookID];\n}\n","import { isArray } from './types';\n\nexport default function toArray(obj) {\n  return isArray(obj) ? obj : [obj];\n}\n","import { INTERNAL } from '../constant';\n\nexport default function getNearestParent(instance, matcher) {\n  let parent;\n  while (instance && instance[INTERNAL]) {\n    if (matcher(instance)) {\n      parent = instance;\n      break;\n    }\n    instance = instance[INTERNAL].__parentInstance;\n  }\n  return parent;\n}","import invokeFunctionsWithContext from './invokeFunctionsWithContext';\nimport { useState, useLayoutEffect } from './hooks';\nimport { isFunction } from './types';\nimport toArray from './toArray';\nimport getNearestParent from './vdom/getNearestParent';\n\nlet id = 0;\n\nexport default function createContext(defaultValue) {\n  const contextID = '_c' + id++;\n\n  // Provider Component\n  class Provider {\n    constructor() {\n      this.__contextID = contextID;\n      this.__handlers = [];\n    }\n    __on(handler) {\n      this.__handlers.push(handler);\n    }\n    __off(handler) {\n      this.__handlers = this.__handlers.filter(h => h !== handler);\n    }\n    // Like getChildContext but called in SSR\n    _getChildContext() {\n      return {\n        [contextID]: this\n      };\n    }\n    // `getValue()` called in rax-server-renderer\n    getValue() {\n      return this.props.value !== undefined ? this.props.value : defaultValue;\n    }\n    componentDidUpdate(prevProps) {\n      if (this.props.value !== prevProps.value) {\n        invokeFunctionsWithContext(this.__handlers, null, this.getValue());\n      }\n    }\n    render() {\n      return this.props.children;\n    }\n  }\n\n  function getNearestParentProvider(instance) {\n    return getNearestParent(instance, parent => parent.__contextID === contextID);\n  }\n\n  // Consumer Component\n  function Consumer(props, context) {\n    // Current `context[contextID]` only works in SSR\n    const [provider] = useState(() => context[contextID] || getNearestParentProvider(this));\n    let value = provider ? provider.getValue() : defaultValue;\n    const [prevValue, setValue] = useState(value);\n\n    if (value !== prevValue) {\n      setValue(value);\n      return; // Interrupt execution of consumer.\n    }\n\n    useLayoutEffect(() => {\n      if (provider) {\n        provider.__on(setValue);\n        return () => {\n          provider.__off(setValue);\n        };\n      }\n    }, []);\n\n    // Consumer requires a function as a child.\n    // The function receives the current context value.\n    const consumer = toArray(props.children)[0];\n    if (isFunction(consumer)) {\n      return consumer(value);\n    }\n  }\n\n  return {\n    Provider,\n    Consumer,\n    // `_contextID` and `_defaultValue` accessed in rax-server-renderer\n    _contextID: contextID,\n    _defaultValue: defaultValue,\n    __getNearestParentProvider: getNearestParentProvider,\n  };\n}\n","import Host from './host';\nimport { INSTANCE, INTERNAL, NATIVE_NODE } from '../constant';\n\n/**\n * Base Component\n */\nexport default class BaseComponent {\n  constructor(element) {\n    this.__currentElement = element;\n  }\n\n  __initComponent(parent, parentInstance, context) {\n    this._parent = parent;\n    this.__parentInstance = parentInstance;\n    this._context = context;\n    this._mountID = Host.__mountID++;\n  }\n\n  __destoryComponent() {\n    if (process.env.NODE_ENV !== 'production') {\n      Host.reconciler.unmountComponent(this);\n    }\n\n    this.__currentElement\n      = this[NATIVE_NODE]\n      = this._parent\n      = this.__parentInstance\n      = this._context\n      = null;\n\n    if (this[INSTANCE]) {\n      this[INSTANCE] = this[INSTANCE][INTERNAL] = null;\n    }\n  }\n\n  __mountComponent(parent, parentInstance, context, nativeNodeMounter) {\n    this.__initComponent(parent, parentInstance, context);\n    this.__mountNativeNode(nativeNodeMounter);\n\n    if (process.env.NODE_ENV !== 'production') {\n      Host.reconciler.mountComponent(this);\n    }\n\n    const instance = {};\n    instance[INTERNAL] = this;\n\n    return instance;\n  }\n\n  unmountComponent(shouldNotRemoveChild) {\n    if (this[NATIVE_NODE] && !shouldNotRemoveChild) {\n      Host.driver.removeChild(this[NATIVE_NODE], this._parent);\n    }\n\n    this.__destoryComponent();\n  }\n\n  __getName() {\n    let currentElement = this.__currentElement;\n    let type = currentElement && currentElement.type;\n\n    return (\n      type && type.displayName ||\n      type && type.name ||\n      type || // Native component's name is type\n      currentElement\n    );\n  }\n\n  __mountNativeNode(nativeNodeMounter) {\n    let nativeNode = this.__getNativeNode();\n    let parent = this._parent;\n\n    if (nativeNodeMounter) {\n      nativeNodeMounter(nativeNode, parent);\n    } else {\n      Host.driver.appendChild(nativeNode, parent);\n    }\n  }\n\n  __getNativeNode() {\n    return this[NATIVE_NODE] == null\n      ? this[NATIVE_NODE] = this.__createNativeNode()\n      : this[NATIVE_NODE];\n  }\n\n  __getPublicInstance() {\n    return this.__getNativeNode();\n  }\n}\n","import Host from './host';\nimport BaseComponent from './base';\n\n/**\n * Empty Component\n */\nclass EmptyComponent extends BaseComponent {\n  __createNativeNode() {\n    return Host.driver.createEmpty(this);\n  }\n}\n\nexport default EmptyComponent;\n","/*\n * Ref manager\n */\nimport { isFunction, isObject } from '../types';\nimport { INSTANCE } from '../constant';\nimport { warning, throwMinifiedWarn } from '../error';\n\nexport function updateRef(prevElement, nextElement, component) {\n  let prevRef = prevElement ? prevElement.ref : null;\n  let nextRef = nextElement ? nextElement.ref : null;\n\n  // Update refs in owner component\n  if (prevRef !== nextRef) {\n    // Detach prev RenderedElement's ref\n    prevRef && detachRef(prevElement._owner, prevRef, component);\n    // Attach next RenderedElement's ref\n    nextRef && attachRef(nextElement._owner, nextRef, component);\n  }\n}\n\nexport function attachRef(ownerComponent, ref, component) {\n  if (!ownerComponent) {\n    if (process.env.NODE_ENV !== 'production') {\n      warning('Ref can not attach because multiple copies of Rax are used.');\n    } else {\n      throwMinifiedWarn(3);\n    }\n    return;\n  }\n\n  let instance = component.__getPublicInstance();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (instance == null) {\n      warning('Do not attach ref to function component because they don’t have instances.');\n    }\n  }\n\n  if (isFunction(ref)) {\n    ref(instance);\n  } else if (isObject(ref)) {\n    ref.current = instance;\n  } else {\n    ownerComponent[INSTANCE].refs[ref] = instance;\n  }\n}\n\nexport function detachRef(ownerComponent, ref, component) {\n  if (isFunction(ref)) {\n    // When the referenced component is unmounted and whenever the ref changes, the old ref will be called with null as an argument.\n    ref(null);\n  } else {\n    // Must match component and ref could detach the ref on owner when A's before ref is B's current ref\n    let instance = component.__getPublicInstance();\n\n    if (isObject(ref) && ref.current === instance) {\n      ref.current = null;\n    } else if (ownerComponent[INSTANCE].refs[ref] === instance) {\n      delete ownerComponent[INSTANCE].refs[ref];\n    }\n  }\n}\n","import Host from './host';\nimport {isString, isNumber, isArray, isNull, isPlainObject} from '../types';\nimport { throwMinifiedWarn, throwError } from '../error';\n\nexport default function instantiateComponent(element) {\n  let instance;\n\n  if (isPlainObject(element) && element !== null && element.type) {\n    // Special case string values\n    if (isString(element.type)) {\n      instance = new Host.__Native(element);\n    } else {\n      instance = new Host.__Composite(element);\n    }\n  } else if (isString(element) || isNumber(element)) {\n    instance = new Host.__Text(String(element));\n  } else if (isArray(element)) {\n    instance = new Host.__Fragment(element);\n  } else {\n    if (!(element === undefined || isNull(element) || element === false || element === true)) {\n      if (process.env.NODE_ENV !== 'production') {\n        throwError('Invalid child type, expected types: Element instance, string, boolean, array, null, undefined.', element);\n      } else {\n        throwMinifiedWarn(2, element);\n      }\n    }\n\n    instance = new Host.__Empty();\n  }\n\n  return instance;\n}\n","import {isArray, isString, isNumber, isObject, isNull} from '../types';\n\nfunction shouldUpdateComponent(prevElement, nextElement) {\n  let prevEmpty = isNull(prevElement);\n  let nextEmpty = isNull(nextElement);\n  if (prevEmpty || nextEmpty) {\n    return prevEmpty === nextEmpty;\n  }\n\n  if (isArray(prevElement) && isArray(nextElement)) {\n    return true;\n  }\n\n  const isPrevStringOrNumber = isString(prevElement) || isNumber(prevElement);\n  if (isPrevStringOrNumber) {\n    return isString(nextElement) || isNumber(nextElement);\n  } else {\n    // prevElement and nextElement could be array, typeof [] is \"object\"\n    return (\n      isObject(prevElement) &&\n      isObject(nextElement) &&\n      prevElement.type === nextElement.type &&\n      prevElement.key === nextElement.key\n    );\n  }\n}\n\nexport default shouldUpdateComponent;\n","import { isString } from '../types';\nimport { warning } from '../error';\n\nexport default function getElementKeyName(children, element, index) {\n  const elementKey = element && element.key;\n  const defaultName = '.' + index.toString(36); // Inner child name default format fallback\n\n  // Key should must be string type\n  if (isString(elementKey)) {\n    let keyName = '$' + elementKey;\n    // Child keys must be unique.\n    let keyUnique = children[keyName] === undefined;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!keyUnique) {\n        // Only the first child will be used when encountered two children with the same key\n        warning(`Encountered two children with the same key \"${elementKey}\".`);\n      }\n    }\n\n    return keyUnique ? keyName : defaultName;\n  } else {\n    return defaultName;\n  }\n}\n","import Host from './host';\nimport { isArray } from '../types';\nimport { INTERNAL } from '../constant';\n\n/**\n * This function is usually been used to find the closet previous sibling native node of FragmentComponent.\n * FragmentComponent does not have a native node in the DOM tree, so when it is replaced, the new node has no corresponding location to insert.\n * So we need to look forward from the current mount position of the FragmentComponent to the nearest component which have the native node.\n * @param component\n * @return nativeNode\n */\nexport default function getPrevSiblingNativeNode(component) {\n  let parent = component;\n  while (parent = component.__parentInstance &&\n    component.__parentInstance[INTERNAL]) {\n    if (parent instanceof Host.__Composite) {\n      component = parent;\n      continue;\n    }\n\n    const keys = Object.keys(parent.__renderedChildren);\n    // Find previous sibling native node from current mount index\n    for (let i = component.__mountIndex - 1; i >= 0; i--) {\n      const nativeNode = parent.__renderedChildren[keys[i]].__getNativeNode();\n      // Fragment component always return array\n      if (isArray(nativeNode)) {\n        if (nativeNode.length > 0) {\n          // Get the last one\n          return nativeNode[nativeNode.length - 1];\n        }\n      } else {\n        // Others maybe native node or empty node\n        return nativeNode;\n      }\n    }\n\n    // Find parent over parent\n    if (parent instanceof Host.__Fragment) {\n      component = parent;\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * Base component class.\n */\nexport default class Component {\n  constructor(props, context) {\n    this.props = props;\n    this.context = context;\n    this.refs = {};\n  }\n\n  setState(partialState, callback) {\n    // The updater property is injected when composite component mounting\n    this.updater.setState(this, partialState, callback);\n  }\n\n  forceUpdate(callback) {\n    this.updater.forceUpdate(this, callback);\n  }\n}\n\n/**\n * Pure component.\n */\nexport class PureComponent extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.__isPureComponent = true;\n  }\n}\n","import Component from './component';\nimport {INTERNAL, RENDERED_COMPONENT} from '../constant';\n\nlet rootID = 1;\n\nclass Root extends Component {\n  constructor() {\n    super();\n    // Using fragment instead of null for avoid create a comment node when init mount\n    this.__element = [];\n    this.__rootID = rootID++;\n  }\n\n  __getPublicInstance() {\n    return this.__getRenderedComponent().__getPublicInstance();\n  }\n\n  __getRenderedComponent() {\n    return this[INTERNAL][RENDERED_COMPONENT];\n  }\n\n  __update(element) {\n    this.__element = element;\n    this.forceUpdate();\n  }\n\n  render() {\n    return this.__element;\n  }\n}\n\nexport default Root;\n","import Host from './host';\nimport createElement from '../createElement';\nimport instantiateComponent from './instantiateComponent';\nimport Root from './root';\nimport {INTERNAL, RENDERED_COMPONENT} from '../constant';\n\n/**\n * Instance manager\n * @NOTE Key should not be compressed, for that will be added to native node and cause DOM Exception.\n */\nconst KEY = '_r';\n\nexport default {\n  set(node, instance) {\n    if (!node[KEY]) {\n      node[KEY] = instance;\n      // Record root instance to roots map\n      if (instance.__rootID) {\n        Host.rootInstances[instance.__rootID] = instance;\n        Host.rootComponents[instance.__rootID] = instance[INTERNAL];\n      }\n    }\n  },\n  get(node) {\n    return node[KEY];\n  },\n  remove(node) {\n    let instance = this.get(node);\n    if (instance) {\n      node[KEY] = null;\n      if (instance.__rootID) {\n        delete Host.rootComponents[instance.__rootID];\n        delete Host.rootInstances[instance.__rootID];\n      }\n    }\n  },\n  mount(element, container, { parent, hydrate }) {\n    if (process.env.NODE_ENV !== 'production') {\n      Host.measurer && Host.measurer.beforeRender();\n    }\n\n    const driver = Host.driver;\n\n    // Real native root node is body\n    if (container == null) {\n      container = driver.createBody();\n    }\n\n    const renderOptions = {\n      element,\n      container,\n      hydrate\n    };\n\n    // Before render callback\n    driver.beforeRender && driver.beforeRender(renderOptions);\n\n    // Get the context from the conceptual parent component.\n    let parentContext;\n    if (parent) {\n      let parentInternal = parent[INTERNAL];\n      parentContext = parentInternal.__processChildContext(parentInternal._context);\n    }\n\n    // Update root component\n    let prevRootInstance = this.get(container);\n    if (prevRootInstance && prevRootInstance.__rootID) {\n      if (parentContext) {\n        // Using __penddingContext to pass new context\n        prevRootInstance[INTERNAL].__penddingContext = parentContext;\n      }\n      prevRootInstance.__update(element);\n      return prevRootInstance;\n    }\n\n    // Init root component with empty children\n    let renderedComponent = instantiateComponent(createElement(Root));\n    let defaultContext = parentContext || {};\n    let rootInstance = renderedComponent.__mountComponent(container, null, defaultContext);\n    this.set(container, rootInstance);\n    // Mount new element through update queue avoid when there is in rendering phase\n    rootInstance.__update(element);\n\n    // After render callback\n    driver.afterRender && driver.afterRender(renderOptions);\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Devtool render new root hook\n      Host.reconciler.renderNewRootComponent(rootInstance[INTERNAL][RENDERED_COMPONENT]);\n\n      Host.measurer && Host.measurer.afterRender();\n    }\n\n    return rootInstance;\n  }\n};\n","export default Object.assign;\n","import Host from './host';\nimport { detachRef, attachRef, updateRef } from './ref';\nimport instantiateComponent from './instantiateComponent';\nimport shouldUpdateComponent from './shouldUpdateComponent';\nimport getElementKeyName from './getElementKeyName';\nimport getPrevSiblingNativeNode from './getPrevSiblingNativeNode';\nimport Instance from './instance';\nimport BaseComponent from './base';\nimport toArray from '../toArray';\nimport { isFunction, isArray, isNull } from '../types';\nimport assign from '../assign';\nimport { INSTANCE, INTERNAL, NATIVE_NODE } from '../constant';\n\nconst STYLE = 'style';\nconst CHILDREN = 'children';\nconst TREE = 'tree';\nconst EVENT_PREFIX_REGEXP = /^on[A-Z]/;\n\n/**\n * Native Component\n */\nexport default class NativeComponent extends BaseComponent {\n  __mountComponent(parent, parentInstance, context, nativeNodeMounter) {\n    this.__initComponent(parent, parentInstance, context);\n\n    const currentElement = this.__currentElement;\n    const props = currentElement.props;\n    const type = currentElement.type;\n    const children = props[CHILDREN];\n    const appendType = props.append || TREE; // Default is tree\n\n    // Clone a copy for style diff\n    this.__prevStyleCopy = assign({}, props[STYLE]);\n\n    let instance = {\n      type,\n      props,\n    };\n    instance[INTERNAL] = this;\n\n    this[INSTANCE] = instance;\n\n    if (appendType === TREE) {\n      // Should after process children when mount by tree mode\n      this.__mountChildren(children, context);\n      this.__mountNativeNode(nativeNodeMounter);\n    } else {\n      // Should before process children when mount by node mode\n      this.__mountNativeNode(nativeNodeMounter);\n      this.__mountChildren(children, context);\n    }\n\n    // Ref acttach\n    if (currentElement && currentElement.ref) {\n      attachRef(currentElement._owner, currentElement.ref, this);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      Host.reconciler.mountComponent(this);\n    }\n\n    return instance;\n  }\n\n  __mountChildren(children, context) {\n    if (children == null) return children;\n\n    const nativeNode = this.__getNativeNode();\n    return this.__mountChildrenImpl(nativeNode, toArray(children), context);\n  }\n\n  __mountChildrenImpl(parent, children, context, nativeNodeMounter) {\n    let renderedChildren = this.__renderedChildren = {};\n\n    const renderedChildrenImage = [];\n    for (let i = 0, l = children.length; i < l; i++) {\n      const element = children[i];\n      const renderedChild = instantiateComponent(element);\n      const name = getElementKeyName(renderedChildren, element, i);\n      renderedChildren[name] = renderedChild;\n      renderedChild.__mountIndex = i;\n      // Mount children\n      const mountImage = renderedChild.__mountComponent(\n        parent,\n        this[INSTANCE],\n        context,\n        nativeNodeMounter\n      );\n      renderedChildrenImage.push(mountImage);\n    }\n\n    return renderedChildrenImage;\n  }\n\n  __unmountChildren(shouldNotRemoveChild) {\n    let renderedChildren = this.__renderedChildren;\n\n    if (renderedChildren) {\n      for (let name in renderedChildren) {\n        let renderedChild = renderedChildren[name];\n        renderedChild.unmountComponent(shouldNotRemoveChild);\n      }\n      this.__renderedChildren = null;\n    }\n  }\n\n  unmountComponent(shouldNotRemoveChild) {\n    if (this[NATIVE_NODE]) {\n      let ref = this.__currentElement.ref;\n      if (ref) {\n        detachRef(this.__currentElement._owner, ref, this);\n      }\n\n      Instance.remove(this[NATIVE_NODE]);\n\n      if (!shouldNotRemoveChild) {\n        Host.driver.removeChild(this[NATIVE_NODE], this._parent);\n      }\n    }\n\n    this.__unmountChildren(true);\n\n    this.__prevStyleCopy = null;\n    this.__destoryComponent();\n  }\n\n  __updateComponent(prevElement, nextElement, prevContext, nextContext) {\n    // Replace current element\n    this.__currentElement = nextElement;\n\n    updateRef(prevElement, nextElement, this);\n\n    let prevProps = prevElement.props;\n    let nextProps = nextElement.props;\n\n    this.__updateProperties(prevProps, nextProps);\n\n    // If the prevElement has no child, mount children directly\n    if (prevProps[CHILDREN] == null ||\n      isArray(prevProps[CHILDREN]) && prevProps[CHILDREN].length === 0) {\n      this.__mountChildren(nextProps[CHILDREN], nextContext);\n    } else {\n      this.__updateChildren(nextProps[CHILDREN], nextContext);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      Host.reconciler.receiveComponent(this);\n    }\n  }\n\n  __updateProperties(prevProps, nextProps) {\n    let propKey;\n    let styleName;\n    let styleUpdates;\n    const driver = Host.driver;\n    const nativeNode = this.__getNativeNode();\n\n    for (propKey in prevProps) {\n      // Continue children and null value prop or nextProps has some propKey that do noting\n      if (\n        propKey === CHILDREN ||\n        prevProps[propKey] == null ||\n        // Use hasOwnProperty here for avoid propKey name is some with method name in object proptotype\n        nextProps.hasOwnProperty(propKey)\n      ) {\n        continue;\n      }\n\n      if (propKey === STYLE) {\n        // Remove all style\n        let lastStyle = this.__prevStyleCopy;\n        for (styleName in lastStyle) {\n          styleUpdates = styleUpdates || {};\n          styleUpdates[styleName] = '';\n        }\n        this.__prevStyleCopy = null;\n      } else if (EVENT_PREFIX_REGEXP.test(propKey)) {\n        // Remove event\n        const eventListener = prevProps[propKey];\n\n        if (isFunction(eventListener)) {\n          driver.removeEventListener(\n            nativeNode,\n            propKey.slice(2).toLowerCase(),\n            eventListener\n          );\n        }\n      } else {\n        // Remove attribute\n        driver.removeAttribute(\n          nativeNode,\n          propKey,\n          prevProps[propKey]\n        );\n      }\n    }\n\n    for (propKey in nextProps) {\n      let nextProp = nextProps[propKey];\n      let prevProp = propKey === STYLE ? this.__prevStyleCopy :\n        prevProps != null ? prevProps[propKey] : undefined;\n\n      // Continue children or prevProp equal nextProp\n      if (\n        propKey === CHILDREN ||\n        prevProp === nextProp ||\n        nextProp == null && prevProp == null\n      ) {\n        continue;\n      }\n\n      // Update style\n      if (propKey === STYLE) {\n        if (nextProp) {\n          // Clone property\n          nextProp = this.__prevStyleCopy = assign({}, nextProp);\n        } else {\n          this.__prevStyleCopy = null;\n        }\n\n        if (prevProp != null) {\n          // Unset styles on `prevProp` but not on `nextProp`.\n          for (styleName in prevProp) {\n            if (!nextProp || !nextProp[styleName] && nextProp[styleName] !== 0) {\n              styleUpdates = styleUpdates || {};\n              styleUpdates[styleName] = '';\n            }\n          }\n          // Update styles that changed since `prevProp`.\n          for (styleName in nextProp) {\n            if (prevProp[styleName] !== nextProp[styleName]) {\n              styleUpdates = styleUpdates || {};\n              styleUpdates[styleName] = nextProp[styleName];\n            }\n          }\n        } else {\n          // Assign next prop when prev style is null\n          styleUpdates = nextProp;\n        }\n      } else if (EVENT_PREFIX_REGEXP.test(propKey)) {\n        // Update event binding\n        let eventName = propKey.slice(2).toLowerCase();\n\n        if (isFunction(prevProp)) {\n          driver.removeEventListener(nativeNode, eventName, prevProp, nextProps);\n        }\n\n        if (isFunction(nextProp)) {\n          driver.addEventListener(nativeNode, eventName, nextProp, nextProps);\n        }\n      } else {\n        // Update other property\n        if (nextProp != null) {\n          driver.setAttribute(\n            nativeNode,\n            propKey,\n            nextProp\n          );\n        } else {\n          driver.removeAttribute(\n            nativeNode,\n            propKey,\n            prevProps[propKey]\n          );\n        }\n\n        if (process.env.NODE_ENV !== 'production') {\n          Host.measurer && Host.measurer.recordOperation({\n            instanceID: this._mountID,\n            type: 'update attribute',\n            payload: {\n              [propKey]: nextProp\n            }\n          });\n        }\n      }\n    }\n\n    if (styleUpdates) {\n      if (process.env.NODE_ENV !== 'production') {\n        Host.measurer && Host.measurer.recordOperation({\n          instanceID: this._mountID,\n          type: 'update style',\n          payload: styleUpdates\n        });\n      }\n\n      driver.setStyle(nativeNode, styleUpdates);\n    }\n  }\n\n  __updateChildren(nextChildrenElements, context) {\n    // prev rendered children\n    let prevChildren = this.__renderedChildren;\n    let driver = Host.driver;\n\n    if (nextChildrenElements == null && prevChildren == null) {\n      return;\n    }\n\n    let nextChildren = {};\n\n    if (nextChildrenElements != null) {\n      nextChildrenElements = toArray(nextChildrenElements);\n\n      // Update next children elements\n      for (let index = 0, length = nextChildrenElements.length; index < length; index++) {\n        let nextElement = nextChildrenElements[index];\n        let name = getElementKeyName(nextChildren, nextElement, index);\n        let prevChild = prevChildren && prevChildren[name];\n        let prevElement = prevChild && prevChild.__currentElement;\n        let prevContext = prevChild && prevChild._context;\n\n        // Try to update between the two of some name that has some element type,\n        // and move child in next children loop if need\n        if (prevChild != null && shouldUpdateComponent(prevElement, nextElement)) {\n          if (prevElement !== nextElement || prevContext !== context) {\n            // Pass the same context when updating children\n            prevChild.__updateComponent(prevElement, nextElement, context,\n              context);\n          }\n\n          nextChildren[name] = prevChild;\n        } else {\n          // Unmount the prevChild when some name with nextChild but different element type,\n          // and move child node in next children loop\n          if (prevChild) {\n            prevChild.__unmount = true;\n          }\n          // The child must be instantiated before it's mounted.\n          nextChildren[name] = instantiateComponent(nextElement);\n        }\n      }\n    }\n\n    let parent = this.__getNativeNode();\n    let isFragmentParent = isArray(parent);\n    let prevFirstChild = null;\n    let prevFirstNativeNode = null;\n    let isPrevFirstEmptyFragment = false;\n    let shouldUnmountPrevFirstChild = false;\n    let lastPlacedNode = null;\n\n    // Directly remove all children from component, if nextChildren is empty (null, [], '').\n    // `driver.removeChildren` is optional driver protocol.\n    let shouldRemoveAllChildren = Boolean(\n      driver.removeChildren\n      // nextChildElements == null or nextChildElements is empty\n      && (isNull(nextChildrenElements) || nextChildrenElements && !nextChildrenElements.length)\n    );\n\n    // Unmount children that are no longer present.\n    if (prevChildren != null) {\n      for (let name in prevChildren) {\n        let prevChild = prevChildren[name];\n        let shouldUnmount = prevChild.__unmount || !nextChildren[name];\n\n        // Store old first child ref for append node ahead and maybe delay remove it\n        if (!prevFirstChild) {\n          shouldUnmountPrevFirstChild = shouldUnmount;\n          prevFirstChild = prevChild;\n          prevFirstNativeNode = prevFirstChild.__getNativeNode();\n\n          if (isArray(prevFirstNativeNode)) {\n            isPrevFirstEmptyFragment = prevFirstNativeNode.length === 0;\n            prevFirstNativeNode = prevFirstNativeNode[0];\n          }\n        } else if (shouldUnmount) {\n          prevChild.unmountComponent(shouldRemoveAllChildren);\n        }\n      }\n\n      // 1. When fragment embed fragment updated but prev fragment is empty\n      // that need to get the prev sibling native node.\n      // like: [ [] ] -> [ [1, 2] ]\n      // 2. When prev fragment is empty and update to other type\n      // like: [ [], 1 ] -> [ 1, 2 ]\n      if (isFragmentParent && parent.length === 0 || isPrevFirstEmptyFragment) {\n        lastPlacedNode = getPrevSiblingNativeNode(this);\n      }\n    }\n\n\n    if (nextChildren != null) {\n      // `nextIndex` will increment for each child in `nextChildren`\n      let nextIndex = 0;\n      let nextNativeNodes = [];\n\n      function insertNodes(nativeNodes, parentNode) {\n        // The nativeNodes maybe fragment, so convert to array type\n        nativeNodes = toArray(nativeNodes);\n\n        for (let i = 0, l = nativeNodes.length; i < l; i++) {\n          if (lastPlacedNode) {\n            // Should reverse order when insert new child after lastPlacedNode:\n            // [lastPlacedNode, *newChild1, *newChild2],\n            // And if prev is empty fragment, lastPlacedNode is the prevSiblingNativeNode found.\n            driver.insertAfter(nativeNodes[l - 1 - i], lastPlacedNode);\n          } else if (prevFirstNativeNode) {\n            // [*newChild1, *newChild2, prevFirstNativeNode]\n            driver.insertBefore(nativeNodes[i], prevFirstNativeNode);\n          } else if (parentNode) {\n            // [*newChild1, *newChild2]\n            driver.appendChild(nativeNodes[i], parentNode);\n          }\n        }\n      }\n\n      for (let name in nextChildren) {\n        let nextChild = nextChildren[name];\n        let prevChild = prevChildren && prevChildren[name];\n\n        // Try to move the some key prevChild but current not at the some position\n        if (prevChild === nextChild) {\n          let prevChildNativeNode = prevChild.__getNativeNode();\n\n          if (prevChild.__mountIndex !== nextIndex) {\n            insertNodes(prevChildNativeNode);\n          }\n        } else {\n          // Mount nextChild that in prevChildren there has no some name\n\n          // Fragment extended native component, so if parent is fragment should get this._parent\n          if (isFragmentParent) {\n            parent = this._parent;\n          }\n\n          nextChild.__mountComponent(\n            parent,\n            this[INSTANCE],\n            context,\n            insertNodes // Insert nodes mounter\n          );\n        }\n\n        // Update to the latest mount order\n        nextChild.__mountIndex = nextIndex++;\n\n        // Get the last child\n        lastPlacedNode = nextChild.__getNativeNode();\n\n        // Push to nextNativeNodes\n        if (isArray(lastPlacedNode)) {\n          nextNativeNodes = nextNativeNodes.concat(lastPlacedNode);\n          lastPlacedNode = lastPlacedNode[lastPlacedNode.length - 1];\n        } else {\n          nextNativeNodes.push(lastPlacedNode);\n        }\n      }\n\n      // Sync update native refs\n      if (isArray(this[NATIVE_NODE])) {\n        // Clear all and push the new array\n        this[NATIVE_NODE].length = 0;\n        assign(this[NATIVE_NODE], nextNativeNodes);\n      }\n    }\n\n    if (shouldUnmountPrevFirstChild) {\n      prevFirstChild.unmountComponent(shouldRemoveAllChildren);\n    }\n\n    if (shouldRemoveAllChildren) {\n      driver.removeChildren(this[NATIVE_NODE]);\n    }\n\n    this.__renderedChildren = nextChildren;\n  }\n\n  __createNativeNode() {\n    const instance = this[INSTANCE];\n    const nativeNode = Host.driver.createElement(instance.type, instance.props, this);\n    Instance.set(nativeNode, instance);\n    return nativeNode;\n  }\n}\n","import Host from './host';\nimport BaseComponent from './base';\n\n/**\n * Text Component\n */\nclass TextComponent extends BaseComponent {\n  __updateComponent(prevElement, nextElement, context) {\n    nextElement = '' + nextElement;\n    // If text is some value that do not update even there number 1 and string \"1\"\n    if (prevElement !== nextElement) {\n      // Replace current element\n      this.__currentElement = nextElement;\n      Host.driver.updateText(this.__getNativeNode(), nextElement);\n\n      if (process.env.NODE_ENV !== 'production') {\n        this._stringText = this.__currentElement;\n        Host.reconciler.receiveComponent(this);\n      }\n    }\n  }\n\n  __createNativeNode() {\n    if (process.env.NODE_ENV !== 'production') {\n      this._stringText = this.__currentElement;\n    }\n    return Host.driver.createText(this.__currentElement, this);\n  }\n}\n\nexport default TextComponent;\n","import Host from './host';\nimport Component from './component';\nimport invokeFunctionsWithContext from '../invokeFunctionsWithContext';\nimport { throwMinifiedError } from '../error';\nimport { INTERNAL } from '../constant';\nimport { EMPTY_OBJECT } from '../types';\n\nconst RE_RENDER_LIMIT = 24;\n/**\n * Functional Reactive Component Class Wrapper\n */\nexport default class ReactiveComponent extends Component {\n  constructor(pureRender, ref) {\n    super();\n    // Marked ReactiveComponent.\n    this.__isReactiveComponent = true;\n    // A pure function\n    this.__render = pureRender;\n    this.__hookID = 0;\n    // Number of rerenders\n    this.__reRenders = 0;\n    this.__hooks = {};\n    // Is render scheduled\n    this.__isScheduled = false;\n    this.__shouldUpdate = false;\n    this.__children = null;\n    this.__contexts = {};\n    // Handles store\n    this.didMount = [];\n    this.didUpdate = [];\n    this.willUnmount = [];\n\n    this.state = EMPTY_OBJECT;\n\n    if (pureRender._forwardRef) {\n      this.__prevForwardRef = this._forwardRef = ref;\n    }\n\n    const compares = pureRender.__compares;\n    if (compares) {\n      this.shouldComponentUpdate = (nextProps) => {\n        // Process composed compare\n        let arePropsEqual = true;\n\n        // Compare push in and pop out\n        for (let i = compares.length - 1; i > -1; i--) {\n          if (arePropsEqual = compares[i](this.props, nextProps)) {\n            break;\n          }\n        }\n\n        return !arePropsEqual || this.__prevForwardRef !== this._forwardRef;\n      };\n    }\n  }\n\n  getHooks() {\n    return this.__hooks;\n  }\n\n  getHookID() {\n    return ++this.__hookID;\n  }\n\n  useContext(context) {\n    const contextID = context._contextID;\n    let contextItem = this.__contexts[contextID];\n    if (!contextItem) {\n      const provider = context.__getNearestParentProvider(this);\n      contextItem = this.__contexts[contextID] = {\n        __provider: provider\n      };\n\n      if (provider) {\n        const handleContextChange = (value) => {\n          // Check the last value that maybe alread rerender\n          // avoid rerender twice when provider value changed\n          if (contextItem.__lastValue !== value) {\n            this.__shouldUpdate = true;\n            this.__update();\n          }\n        };\n        provider.__on(handleContextChange);\n        this.willUnmount.push(() => provider.__off(handleContextChange));\n      }\n    }\n\n    return contextItem.__lastValue = contextItem.__provider ?\n      contextItem.__provider.getValue() : context._defaultValue;\n  }\n\n  componentWillMount() {\n    this.__shouldUpdate = true;\n  }\n\n  componentDidMount() {\n    invokeFunctionsWithContext(this.didMount);\n  }\n\n  componentWillReceiveProps() {\n    this.__shouldUpdate = true;\n  }\n\n  componentDidUpdate() {\n    invokeFunctionsWithContext(this.didUpdate);\n  }\n\n  componentWillUnmount() {\n    invokeFunctionsWithContext(this.willUnmount);\n  }\n\n  __update() {\n    this[INTERNAL].__isPendingForceUpdate = true;\n    this.setState(EMPTY_OBJECT);\n  }\n\n  render() {\n    if (process.env.NODE_ENV !== 'production') {\n      Host.measurer && Host.measurer.beforeRender();\n    }\n\n    this.__hookID = 0;\n    this.__reRenders = 0;\n    this.__isScheduled = false;\n    let children = this.__render(this.props, this._forwardRef ? this._forwardRef : this.context);\n\n    while (this.__isScheduled) {\n      this.__reRenders++;\n      if (this.__reRenders > RE_RENDER_LIMIT) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error('Too many re-renders, the number of renders is limited to prevent an infinite loop.');\n        } else {\n          throwMinifiedError(4);\n        }\n      }\n\n      this.__hookID = 0;\n      this.__isScheduled = false;\n      children = this.__render(this.props, this._forwardRef ? this._forwardRef : this.context);\n    }\n\n    if (this.__shouldUpdate) {\n      this.__children = children;\n      this.__shouldUpdate = false;\n    }\n\n    return this.__children;\n  }\n}\n","import Host from './host';\nimport { flushEffect, schedule, flushLayout } from './scheduler';\nimport { INTERNAL, RENDERED_COMPONENT } from '../constant';\n\n// Dirty components store\nlet dirtyComponents = [];\n\nfunction getPendingCallbacks(internal) {\n  return internal.__pendingCallbacks;\n}\n\nfunction setPendingCallbacks(internal, callbacks) {\n  return internal.__pendingCallbacks = callbacks;\n}\n\nfunction getPendingStateQueue(internal) {\n  return internal.__pendingStateQueue;\n}\n\nfunction setPendingStateQueue(internal, partialState) {\n  return internal.__pendingStateQueue = partialState;\n}\n\nfunction enqueueCallback(internal, callback) {\n  let callbackQueue = getPendingCallbacks(internal) || setPendingCallbacks(internal, []);\n  callbackQueue.push(callback);\n}\n\nfunction enqueueState(internal, partialState) {\n  let stateQueue = getPendingStateQueue(internal) || setPendingStateQueue(internal, []);\n  stateQueue.push(partialState);\n}\n\nfunction runUpdate(component) {\n  let internal = component[INTERNAL];\n  if (!internal) {\n    return;\n  }\n\n  Host.__isUpdating = true;\n\n  let prevElement = internal.__currentElement;\n  let prevUnmaskedContext = internal._context;\n  let nextUnmaskedContext = internal.__penddingContext || prevUnmaskedContext;\n  internal.__penddingContext = undefined;\n\n  if (getPendingStateQueue(internal) || internal.__isPendingForceUpdate) {\n    internal.__updateComponent(\n      prevElement,\n      prevElement,\n      prevUnmaskedContext,\n      nextUnmaskedContext\n    );\n\n    flushLayout();\n  }\n\n  Host.__isUpdating = false;\n}\n\nfunction mountOrderComparator(c1, c2) {\n  return c2[INTERNAL]._mountID - c1[INTERNAL]._mountID;\n}\n\nfunction performUpdate() {\n  if (Host.__isUpdating) {\n    return schedule(performUpdate);\n  }\n\n  let component;\n  let dirties = dirtyComponents;\n  if (dirties.length > 0) {\n    // Before next render, we will flush all the effects\n    flushEffect();\n    dirtyComponents = [];\n    // Since reconciling a component higher in the owner hierarchy usually (not\n    // always -- see shouldComponentUpdate()) will reconcile children, reconcile\n    // them before their children by sorting the array.\n    if (dirties.length > 1) {\n      dirties = dirties.sort(mountOrderComparator);\n    }\n\n    while (component = dirties.pop()) {\n      runUpdate(component);\n    }\n  }\n}\n\nfunction scheduleUpdate(component, shouldAsyncUpdate) {\n  if (dirtyComponents.indexOf(component) < 0) {\n    dirtyComponents.push(component);\n  }\n\n  if (shouldAsyncUpdate) {\n    // If have been scheduled before, don't not need schedule again\n    if (dirtyComponents.length > 1) {\n      return;\n    }\n    schedule(performUpdate);\n  } else {\n    performUpdate();\n  }\n}\n\nfunction requestUpdate(component, partialState, callback) {\n  let internal = component[INTERNAL];\n\n  if (!internal) {\n    return;\n  }\n\n  if (callback) {\n    enqueueCallback(internal, callback);\n  }\n\n  const hasComponentRendered = internal[RENDERED_COMPONENT];\n\n  // setState\n  if (partialState) {\n    enqueueState(internal, partialState);\n    // State pending when request update in componentWillMount and componentWillReceiveProps,\n    // isPendingState default is false value (false or null) and set to true after componentWillReceiveProps,\n    // _renderedComponent is null when componentWillMount exec.\n    if (!internal.__isPendingState && hasComponentRendered) {\n      scheduleUpdate(component, true);\n    }\n  } else {\n    // forceUpdate\n    internal.__isPendingForceUpdate = true;\n\n    if (hasComponentRendered) {\n      scheduleUpdate(component);\n    }\n  }\n}\n\nconst Updater = {\n  setState(component, partialState, callback) {\n    // Flush all effects first before update state\n    if (!Host.__isUpdating) {\n      flushEffect();\n    }\n    requestUpdate(component, partialState, callback);\n  },\n  forceUpdate(component, callback) {\n    requestUpdate(component, null, callback);\n  }\n};\n\nexport default Updater;\n","import getNearestParent from './getNearestParent';\nimport { scheduler, scheduleLayout } from './scheduler';\nimport { INTERNAL } from '../constant';\n\nexport default function performInSandbox(fn, instance, callback) {\n  try {\n    return fn();\n  } catch (e) {\n    if (callback) {\n      callback(e);\n    } else {\n      handleError(instance, e);\n    }\n  }\n}\n\nexport function handleError(instance, error) {\n  let boundary = getNearestParent(instance, parent => parent.componentDidCatch);\n\n  if (boundary) {\n    scheduleLayout(() => {\n      const boundaryInternal = boundary[INTERNAL];\n      // Should not attempt to recover an unmounting error boundary\n      if (boundaryInternal) {\n        performInSandbox(() => {\n          boundary.componentDidCatch(error);\n        }, boundaryInternal.__parentInstance);\n      }\n    });\n  } else {\n    // Do not break when error happens\n    scheduler(() => {\n      throw error;\n    }, 0);\n  }\n}","import ReactiveComponent from './reactive';\nimport updater from './updater';\nimport Host from './host';\nimport { attachRef, updateRef, detachRef } from './ref';\nimport instantiateComponent from './instantiateComponent';\nimport shouldUpdateComponent from './shouldUpdateComponent';\nimport shallowEqual from './shallowEqual';\nimport BaseComponent from './base';\nimport getPrevSiblingNativeNode from './getPrevSiblingNativeNode';\nimport performInSandbox from './performInSandbox';\nimport toArray from '../toArray';\nimport { scheduleLayout } from './scheduler';\nimport { isFunction, isArray } from '../types';\nimport assign from '../assign';\nimport { INSTANCE, INTERNAL, RENDERED_COMPONENT } from '../constant';\nimport invokeFunctionsWithContext from '../invokeFunctionsWithContext';\nimport validateChildKeys from '../validateChildKeys';\nimport { throwError, throwMinifiedError } from '../error';\n\nlet measureLifeCycle;\nif (process.env.NODE_ENV !== 'production') {\n  measureLifeCycle = function(callback, instanceID, type) {\n    Host.measurer && Host.measurer.beforeLifeCycle(instanceID, type);\n    callback();\n    Host.measurer && Host.measurer.afterLifeCycle(instanceID, type);\n  };\n}\n\nfunction scheduleLayoutInSandbox(fn, instance) {\n  scheduleLayout(() => {\n    performInSandbox(fn, instance);\n  });\n}\n\nfunction scheduleLayoutCallbacksInSandbox(callbacks, instance) {\n  if (callbacks) {\n    scheduleLayoutInSandbox(() => {\n      invokeFunctionsWithContext(callbacks, instance);\n    }, instance);\n  }\n}\n\n/**\n * Composite Component\n */\nclass CompositeComponent extends BaseComponent {\n  __mountComponent(parent, parentInstance, context, nativeNodeMounter) {\n    this.__initComponent(parent, parentInstance, context);\n\n    if (process.env.NODE_ENV !== 'production') {\n      this._updateCount = 0;\n      Host.measurer && Host.measurer.beforeMountComponent(this._mountID, this);\n    }\n\n    let currentElement = this.__currentElement;\n    let Component = currentElement.type;\n    let ref = currentElement.ref;\n    let publicProps = currentElement.props;\n    let componentPrototype = Component.prototype;\n\n    // Context process\n    let publicContext = this.__processContext(context);\n\n    // Initialize the public class\n    let instance;\n    let renderedElement;\n\n    performInSandbox(() => {\n      if (componentPrototype && componentPrototype.render) {\n        // Class Component instance\n        instance = new Component(publicProps, publicContext);\n      } else if (isFunction(Component)) {\n        // Functional reactive component with hooks\n        instance = new ReactiveComponent(Component, ref);\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          throwError('Invalid component type, expected a class or function component.', Component);\n        } else {\n          throwMinifiedError(6, Component);\n        }\n      }\n    }, parentInstance);\n\n    if (!instance) {\n      return;\n    }\n\n    // These should be set up in the constructor, but as a convenience for\n    // simpler class abstractions, we set them up after the fact.\n    instance.props = publicProps;\n    instance.context = publicContext;\n    instance.refs = {};\n\n    // Inject the updater into instance\n    instance.updater = updater;\n    instance[INTERNAL] = this;\n    this[INSTANCE] = instance;\n\n    // Init state, must be set to an object or null\n    let initialState = instance.state;\n    if (initialState === undefined) {\n      // TODO clone the state?\n      instance.state = initialState = null;\n    }\n\n    if (instance.componentWillMount) {\n      performInSandbox(() => {\n        if (process.env.NODE_ENV !== 'production') {\n          measureLifeCycle(() => {\n            instance.componentWillMount();\n          }, this._mountID, 'componentWillMount');\n        } else {\n          instance.componentWillMount();\n        }\n      }, instance);\n    }\n\n    Host.owner = this;\n    // Process pending state when call setState in componentWillMount\n    instance.state = this.__processPendingState(publicProps, publicContext);\n    const callbacks = this.__pendingCallbacks;\n    this.__pendingCallbacks = null;\n\n    performInSandbox(() => {\n      if (process.env.NODE_ENV !== 'production') {\n        measureLifeCycle(() => {\n          renderedElement = instance.render();\n        }, this._mountID, 'render');\n      } else {\n        renderedElement = instance.render();\n      }\n    }, instance);\n\n    if (process.env.NODE_ENV !== 'production') {\n      validateChildKeys(renderedElement, this.__currentElement.type);\n    }\n\n    Host.owner = null;\n\n    this[RENDERED_COMPONENT] = instantiateComponent(renderedElement);\n    this[RENDERED_COMPONENT].__mountComponent(\n      this._parent,\n      instance,\n      this.__processChildContext(context),\n      nativeNodeMounter\n    );\n\n    if (!currentElement.type._forwardRef && ref) {\n      attachRef(currentElement._owner, ref, this);\n    }\n\n    if (instance.componentDidMount) {\n      scheduleLayoutInSandbox(() => {\n        if (process.env.NODE_ENV !== 'production') {\n          measureLifeCycle(() => {\n            instance.componentDidMount();\n          }, this._mountID, 'componentDidMount');\n        } else {\n          instance.componentDidMount();\n        }\n      }, instance);\n    }\n\n    // Trigger setState callback\n    scheduleLayoutCallbacksInSandbox(callbacks, instance);\n\n    if (process.env.NODE_ENV !== 'production') {\n      scheduleLayout(() => {\n        Host.reconciler.mountComponent(this);\n        Host.measurer && Host.measurer.afterMountComponent(this._mountID);\n      });\n    }\n\n    return instance;\n  }\n\n  unmountComponent(shouldNotRemoveChild) {\n    let instance = this[INSTANCE];\n\n    // Unmounting a composite component maybe not complete mounted\n    // when throw error in component constructor stage\n    if (instance && instance.componentWillUnmount) {\n      performInSandbox(() => {\n        instance.componentWillUnmount();\n      }, instance);\n    }\n\n    if (this[RENDERED_COMPONENT] != null) {\n      let currentElement = this.__currentElement;\n      let ref = currentElement.ref;\n\n      if (!currentElement.type._forwardRef && ref) {\n        detachRef(currentElement._owner, ref, this);\n      }\n\n      this[RENDERED_COMPONENT].unmountComponent(shouldNotRemoveChild);\n      this[RENDERED_COMPONENT] = null;\n    }\n\n    // Reset pending fields\n    // Even if this component is scheduled for another async update,\n    // it would still be ignored because these fields are reset.\n    this.__pendingStateQueue = null;\n    this.__isPendingForceUpdate = false;\n\n    this.__destoryComponent();\n  }\n\n  /**\n   * Filters the context object to only contain keys specified in\n   * `contextTypes`\n   */\n  __processContext(context) {\n    let maskedContext = {};\n    let Component = this.__currentElement.type;\n    let contextTypes = Component.contextTypes;\n\n    if (contextTypes) {\n      for (let contextName in contextTypes) {\n        maskedContext[contextName] = context[contextName];\n      }\n    }\n\n    return maskedContext;\n  }\n\n  __processChildContext(currentContext) {\n    let instance = this[INSTANCE];\n    // The getChildContext method context should be current instance\n    let childContext = instance.getChildContext && instance.getChildContext();\n    if (childContext) {\n      return assign({}, currentContext, childContext);\n    }\n\n    return currentContext;\n  }\n\n  __processPendingState(props, context) {\n    let instance = this[INSTANCE];\n    let queue = this.__pendingStateQueue;\n    if (!queue) {\n      return instance.state;\n    }\n    // Reset pending queue\n    this.__pendingStateQueue = null;\n    let nextState = assign({}, instance.state);\n    for (let i = 0; i < queue.length; i++) {\n      let partial = queue[i];\n      assign(\n        nextState,\n        isFunction(partial) ?\n          partial.call(instance, nextState, props, context) :\n          partial\n      );\n    }\n\n    return nextState;\n  }\n\n  __updateComponent(\n    prevElement,\n    nextElement,\n    prevUnmaskedContext,\n    nextUnmaskedContext\n  ) {\n    let instance = this[INSTANCE];\n\n    // Maybe update component that has already been unmounted or failed mount.\n    if (!instance) {\n      return;\n    }\n\n    performInSandbox(() => {\n      if (process.env.NODE_ENV !== 'production') {\n        Host.measurer && Host.measurer.beforeUpdateComponent(this._mountID, this);\n      }\n\n      let willReceive;\n      let nextContext;\n      let nextProps;\n\n      // Determine if the context has changed or not\n      if (this._context === nextUnmaskedContext) {\n        nextContext = instance.context;\n      } else {\n        nextContext = this.__processContext(nextUnmaskedContext);\n        willReceive = true;\n      }\n\n      // Distinguish between a props update versus a simple state update\n      // Skip checking prop types again -- we don't read component.props to avoid\n      // warning for DOM component props in this upgrade\n      nextProps = nextElement.props;\n\n      if (prevElement !== nextElement) {\n        willReceive = true;\n      }\n\n      if (willReceive && instance.componentWillReceiveProps) {\n        // Calling this.setState() within componentWillReceiveProps will not trigger an additional render.\n        this.__isPendingState = true;\n        instance.componentWillReceiveProps(nextProps, nextContext);\n        this.__isPendingState = false;\n      }\n\n      // Update refs\n      if (this.__currentElement.type._forwardRef) {\n        instance.__prevForwardRef = prevElement.ref;\n        instance._forwardRef = nextElement.ref;\n      } else {\n        updateRef(prevElement, nextElement, this);\n      }\n\n      // Shoud update default\n      let shouldUpdate = true;\n      let prevProps = instance.props;\n      let prevState = instance.state;\n      // TODO: could delay execution processPendingState\n      let nextState = this.__processPendingState(nextProps, nextContext);\n      const callbacks = this.__pendingCallbacks;\n      this.__pendingCallbacks = null;\n\n      // ShouldComponentUpdate is not called when forceUpdate is used\n      if (!this.__isPendingForceUpdate) {\n        if (instance.shouldComponentUpdate) {\n          shouldUpdate = instance.shouldComponentUpdate(nextProps, nextState, nextContext);\n        } else if (instance.__isPureComponent) {\n          // Pure Component\n          shouldUpdate = !shallowEqual(prevProps, nextProps) ||\n            !shallowEqual(prevState, nextState);\n        }\n      }\n\n      if (shouldUpdate) {\n        this.__isPendingForceUpdate = false;\n        // Will set `this.props`, `this.state` and `this.context`.\n        let prevContext = instance.context;\n\n        // Cannot use this.setState() in componentWillUpdate.\n        // If need to update state in response to a prop change, use componentWillReceiveProps instead.\n        if (instance.componentWillUpdate) {\n          instance.componentWillUpdate(nextProps, nextState, nextContext);\n        }\n\n        // Replace with next\n        this.__currentElement = nextElement;\n        this._context = nextUnmaskedContext;\n        instance.props = nextProps;\n        instance.state = nextState;\n        instance.context = nextContext;\n\n        this.__updateRenderedComponent(nextUnmaskedContext);\n\n        if (instance.componentDidUpdate) {\n          scheduleLayoutInSandbox(() => {\n            instance.componentDidUpdate(prevProps, prevState, prevContext);\n          }, instance);\n        }\n\n        if (process.env.NODE_ENV !== 'production') {\n          // Calc update count.\n          this._updateCount++;\n        }\n      } else {\n        // If it's determined that a component should not update, we still want\n        // to set props and state but we shortcut the rest of the update.\n        this.__currentElement = nextElement;\n        this._context = nextUnmaskedContext;\n        instance.props = nextProps;\n        instance.state = nextState;\n        instance.context = nextContext;\n      }\n\n      scheduleLayoutCallbacksInSandbox(callbacks, instance);\n\n      if (process.env.NODE_ENV !== 'production') {\n        scheduleLayout(() => {\n          Host.measurer && Host.measurer.afterUpdateComponent(this._mountID);\n          Host.reconciler.receiveComponent(this);\n        });\n      }\n    }, instance);\n  }\n\n  /**\n   * Call the component's `render` method and update the DOM accordingly.\n   */\n  __updateRenderedComponent(context) {\n    let prevRenderedComponent = this[RENDERED_COMPONENT];\n    let prevRenderedElement = prevRenderedComponent.__currentElement;\n\n    let instance = this[INSTANCE];\n    let nextRenderedElement;\n\n    Host.owner = this;\n\n    if (process.env.NODE_ENV !== 'production') {\n      measureLifeCycle(() => {\n        nextRenderedElement = instance.render();\n      }, this._mountID, 'render');\n    } else {\n      nextRenderedElement = instance.render();\n    }\n\n    Host.owner = null;\n\n    if (shouldUpdateComponent(prevRenderedElement, nextRenderedElement)) {\n      const prevRenderedUnmaskedContext = prevRenderedComponent._context;\n      const nextRenderedUnmaskedContext = this.__processChildContext(context);\n      // If getChildContext existed and invoked when component updated that will make\n      // prevRenderedUnmaskedContext not equal nextRenderedUnmaskedContext under the tree\n      if (prevRenderedElement !== nextRenderedElement || prevRenderedUnmaskedContext !== nextRenderedUnmaskedContext) {\n        // If element type is illegal catch the error\n        prevRenderedComponent.__updateComponent(\n          prevRenderedElement,\n          nextRenderedElement,\n          prevRenderedUnmaskedContext,\n          nextRenderedUnmaskedContext\n        );\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        Host.measurer && Host.measurer.recordOperation({\n          instanceID: this._mountID,\n          type: 'update component',\n          payload: {}\n        });\n      }\n    } else {\n      let lastNativeNode = null;\n      let prevNativeNode = prevRenderedComponent.__getNativeNode();\n      // Only prevNativeNode is empty fragment should find the prevSlibingNativeNode\n      // And current root component is fragment, but not need find the prevSlibingNativeNode when init mounting\n      if (isArray(prevNativeNode) && prevNativeNode.length === 0 && instance.__rootID == null) {\n        lastNativeNode = getPrevSiblingNativeNode(prevRenderedComponent);\n      }\n\n      prevRenderedComponent.unmountComponent(true);\n\n      this[RENDERED_COMPONENT] = instantiateComponent(nextRenderedElement);\n      this[RENDERED_COMPONENT].__mountComponent(\n        this._parent,\n        instance,\n        this.__processChildContext(context),\n        (newNativeNode, parent) => {\n          const driver = Host.driver;\n\n          prevNativeNode = toArray(prevNativeNode);\n          newNativeNode = toArray(newNativeNode);\n\n          // If the new length large then prev\n          for (let i = 0; i < newNativeNode.length; i++) {\n            let nativeNode = newNativeNode[i];\n            if (prevNativeNode[i]) {\n              driver.replaceChild(nativeNode, prevNativeNode[i]);\n            } else if (lastNativeNode) {\n              driver.insertAfter(nativeNode, lastNativeNode);\n            } else {\n              driver.appendChild(nativeNode, parent);\n            }\n            lastNativeNode = nativeNode;\n          }\n\n          // If the new length less then prev\n          for (let i = newNativeNode.length; i < prevNativeNode.length; i++) {\n            driver.removeChild(prevNativeNode[i]);\n          }\n        }\n      );\n    }\n  }\n\n  __getNativeNode() {\n    let renderedComponent = this[RENDERED_COMPONENT];\n    if (renderedComponent) {\n      return renderedComponent.__getNativeNode();\n    }\n  }\n\n  __getPublicInstance() {\n    let instance = this[INSTANCE];\n\n    // The functional components cannot be given refs\n    if (instance.__isReactiveComponent) return null;\n\n    return instance;\n  }\n}\n\nexport default CompositeComponent;\n","import Host from './host';\nimport NativeComponent from './native';\nimport Instance from './instance';\nimport toArray from '../toArray';\nimport { INSTANCE, INTERNAL, NATIVE_NODE } from '../constant';\n\n/**\n * Fragment Component\n */\nclass FragmentComponent extends NativeComponent {\n  __mountComponent(parent, parentInstance, context, nativeNodeMounter) {\n    this.__initComponent(parent, parentInstance, context);\n\n    let instance = this[INSTANCE] = {};\n    instance[INTERNAL] = this;\n\n    // Mount children\n    this.__mountChildren(this.__currentElement, context);\n\n    let fragment = this.__getNativeNode();\n\n    if (nativeNodeMounter) {\n      nativeNodeMounter(fragment, parent);\n    } else {\n      for (let i = 0; i < fragment.length; i++) {\n        Host.driver.appendChild(fragment[i], parent);\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      this.__currentElement.type = FragmentComponent;\n      Host.reconciler.mountComponent(this);\n    }\n\n    return instance;\n  }\n\n  __mountChildren(children, context) {\n    let fragment = this.__getNativeNode();\n\n    return this.__mountChildrenImpl(this._parent, children, context, (nativeNode) => {\n      nativeNode = toArray(nativeNode);\n      for (let i = 0; i < nativeNode.length; i++) {\n        fragment.push(nativeNode[i]);\n      }\n    });\n  }\n\n  unmountComponent(shouldNotRemoveChild) {\n    let nativeNode = this[NATIVE_NODE];\n\n    if (nativeNode) {\n      Instance.remove(nativeNode);\n\n      if (!shouldNotRemoveChild) {\n        for (let i = 0, l = nativeNode.length; i < l; i++) {\n          Host.driver.removeChild(nativeNode[i]);\n        }\n      }\n    }\n\n    // Do not need remove child when their parent is removed\n    this.__unmountChildren(true);\n\n    this.__destoryComponent();\n  }\n\n  __updateComponent(prevElement, nextElement, prevContext, nextContext) {\n    // Replace current element\n    this.__currentElement = nextElement;\n    this.__updateChildren(this.__currentElement, nextContext);\n\n    if (process.env.NODE_ENV !== 'production') {\n      this.__currentElement.type = FragmentComponent;\n      Host.reconciler.receiveComponent(this);\n    }\n  }\n\n  __createNativeNode() {\n    return [];\n  }\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  FragmentComponent.displayName = 'Fragment';\n}\n\nexport default FragmentComponent;\n","export default function createRef() {\n  return {\n    current: null\n  };\n}","export default function(render) {\n  // _forwardRef is also use in rax server renderer\n  render._forwardRef = true;\n  return render;\n}","import shallowEqual from './vdom/shallowEqual';\n\nexport default function memo(type, compare) {\n  compare = compare || shallowEqual;\n\n  // Memo could composed\n  if (type.__compares) {\n    type.__compares.push(compare);\n  } else {\n    type.__compares = [compare];\n  }\n\n  return type;\n}\n","export default function Fragment(props) {\n  return props.children;\n}","import inject from './vdom/inject';\nimport Instance from './vdom/instance';\nimport { isFunction, EMPTY_OBJECT } from './types';\n\nfunction render(element, container, options, callback) {\n  // Compatible with `render(element, container, callback)`\n  if (isFunction(options)) {\n    callback = options;\n    options = null;\n  }\n\n  options = options || EMPTY_OBJECT;\n  // Init inject\n  inject(options);\n\n  let rootComponent = Instance.mount(element, container, options);\n  let componentInstance = rootComponent.__getPublicInstance();\n\n  if (callback) {\n    callback.call(componentInstance);\n  }\n\n  return componentInstance;\n}\n\nexport default render;\n","import Host from './host';\nimport EmptyComponent from './empty';\nimport NativeComponent from './native';\nimport TextComponent from './text';\nimport CompositeComponent from './composite';\nimport FragmentComponent from './fragment';\nimport reconciler from '../devtools/reconciler';\nimport { throwError, throwMinifiedError } from '../error';\n\nexport default function inject({ driver, measurer }) {\n  // Inject component class\n  Host.__Empty = EmptyComponent;\n  Host.__Native = NativeComponent;\n  Host.__Text = TextComponent;\n  Host.__Fragment = FragmentComponent;\n  Host.__Composite = CompositeComponent;\n\n  // Inject render driver\n  if (!(Host.driver = driver || Host.driver)) {\n    if (process.env.NODE_ENV !== 'production') {\n      throwError('Rax driver not found.');\n    } else {\n      throwMinifiedError(5);\n    }\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    // Inject devtool renderer hook\n    Host.reconciler = reconciler;\n\n    // Inject performance measurer\n    Host.measurer = measurer;\n  }\n}\n","export default '1.1.0';\n","export createElement from './createElement';\nexport createContext from './createContext';\nexport createRef from './createRef';\nexport forwardRef from './forwardRef';\nexport { useState, useContext, useEffect, useLayoutEffect, useRef, useCallback, useMemo, useReducer, useImperativeHandle } from './hooks';\nexport memo from './memo';\nexport Fragment from './fragment';\nexport render from './render';\nexport Component, { PureComponent } from './vdom/component';\nexport version from './version';\n\nimport Host from './vdom/host';\nimport Instance from './vdom/instance';\nimport Element from './vdom/element';\nimport flattenChildren from './vdom/flattenChildren';\n\nexport const shared = {\n  Host,\n  Instance,\n  Element,\n  flattenChildren\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  if (typeof window !== 'undefined') {\n    if (window.__RAX_INITIALISED__) {\n      console.error('Warning: more than one instance of Rax has been initialised, this could lead to unexpected behaviour.');\n    }\n    window.__RAX_INITIALISED__ = true;\n  }\n}\n","\n    import * as Rax from './index.js';\n    if (typeof module !== 'undefined') module.exports = Rax;\n    else self.Rax = Rax;\n    "],"names":["__mountID","__isUpdating","driver","rootComponents","rootInstances","owner","Element","type","key","ref","props","_owner","isNull","obj","isFunction","isObject","isPlainObject","EMPTY_OBJECT","toString","call","isArray","array","Array","isString","string","isNumber","NOOP","flattenChildren","children","result","traverseChildren","i","l","length","push","updateCallbacks","effectCallbacks","layoutCallbacks","scheduler","setTimeout","invokeFunctionsWithClear","callbacks","callback","shift","schedule","flush","scheduleEffect","flushEffect","scheduleLayout","createMinifiedError","code","typeInfo","undefined","Object","keys","getTypeInfo","Error","ownerComponent","Host","__getName","getRenderErrorInfo","throwMinifiedError","throwMinifiedWarn","err","RESERVED_PROPS","createElement","config","propName","childrenLength","arguments","childArray","defaultProps","invokeFunctionsWithContext","fns","context","value","hasOwnProperty","is","x","y","shallowEqual","objA","objB","keysA","INTERNAL","INSTANCE","NATIVE_NODE","RENDERED_COMPONENT","getCurrentInstance","getCurrentRenderingInstance","currentInstance","areInputsEqual","inputs","prevInputs","useState","initialState","hookID","getHookID","hooks","getHooks","newState","hook","eagerState","__isScheduled","__update","__shouldUpdate","useLayoutEffect","effect","useEffectImpl","defered","__create","__inputs","__prevInputs","current","immediately","__destory","didMount","willUnmount","didUpdate","useMemo","create","toArray","getNearestParent","instance","matcher","parent","__parentInstance","id","BaseComponent","element","__currentElement","__initComponent","parentInstance","_parent","_context","_mountID","__destoryComponent","this","__mountComponent","nativeNodeMounter","__mountNativeNode","unmountComponent","shouldNotRemoveChild","removeChild","currentElement","displayName","name","nativeNode","__getNativeNode","appendChild","__createNativeNode","__getPublicInstance","EmptyComponent","createEmpty","updateRef","prevElement","nextElement","component","prevRef","nextRef","detachRef","attachRef","refs","instantiateComponent","__Native","__Composite","__Text","String","__Fragment","__Empty","shouldUpdateComponent","prevEmpty","nextEmpty","getElementKeyName","index","elementKey","defaultName","keyName","getPrevSiblingNativeNode","__renderedChildren","__mountIndex","Component","setState","partialState","updater","forceUpdate","PureComponent","__isPureComponent","rootID","Root","__element","__rootID","__getRenderedComponent","render","set","node","get","remove","mount","container","hydrate","createBody","parentContext","renderOptions","beforeRender","parentInternal","__processChildContext","prevRootInstance","__penddingContext","rootInstance","afterRender","assign","STYLE","CHILDREN","EVENT_PREFIX_REGEXP","NativeComponent","appendType","append","__prevStyleCopy","__mountChildren","__mountChildrenImpl","renderedChildren","renderedChildrenImage","renderedChild","mountImage","__unmountChildren","Instance","__updateComponent","prevContext","nextContext","prevProps","nextProps","__updateProperties","__updateChildren","propKey","styleName","styleUpdates","lastStyle","test","eventListener","removeEventListener","slice","toLowerCase","removeAttribute","nextProp","prevProp","eventName","addEventListener","setAttribute","setStyle","nextChildrenElements","prevChildren","nextChildren","prevChild","__unmount","isFragmentParent","prevFirstChild","prevFirstNativeNode","isPrevFirstEmptyFragment","shouldUnmountPrevFirstChild","lastPlacedNode","shouldRemoveAllChildren","removeChildren","shouldUnmount","insertNodes","nativeNodes","parentNode","insertAfter","insertBefore","nextIndex","nextNativeNodes","nextChild","prevChildNativeNode","concat","TextComponent","updateText","createText","ReactiveComponent","pureRender","__isReactiveComponent","__render","__hookID","__reRenders","__hooks","__children","__contexts","state","_forwardRef","__prevForwardRef","_this","compares","__compares","shouldComponentUpdate","arePropsEqual","useContext","contextID","_contextID","contextItem","provider","__getNearestParentProvider","__provider","handleContextChange","__lastValue","_this2","__on","__off","getValue","_defaultValue","componentWillMount","componentDidMount","componentWillReceiveProps","componentDidUpdate","componentWillUnmount","__isPendingForceUpdate","dirtyComponents","getPendingStateQueue","internal","__pendingStateQueue","enqueueCallback","__pendingCallbacks","getPendingCallbacks","setPendingCallbacks","enqueueState","setPendingStateQueue","runUpdate","prevUnmaskedContext","nextUnmaskedContext","mountOrderComparator","c1","c2","performUpdate","dirties","sort","pop","scheduleUpdate","shouldAsyncUpdate","indexOf","requestUpdate","hasComponentRendered","__isPendingState","Updater","performInSandbox","fn","e","error","boundary","componentDidCatch","boundaryInternal","handleError","scheduleLayoutInSandbox","scheduleLayoutCallbacksInSandbox","CompositeComponent","renderedElement","publicProps","componentPrototype","prototype","publicContext","__processContext","__processPendingState","maskedContext","contextTypes","contextName","currentContext","childContext","getChildContext","queue","nextState","partial","willReceive","shouldUpdate","prevState","componentWillUpdate","__updateRenderedComponent","nextRenderedElement","prevRenderedComponent","prevRenderedElement","prevRenderedUnmaskedContext","nextRenderedUnmaskedContext","lastNativeNode","prevNativeNode","newNativeNode","replaceChild","renderedComponent","FragmentComponent","fragment","defaultValue","getNearestParentProvider","__contextID","Provider","__handlers","handler","filter","h","_getChildContext","Consumer","setValue","consumer","compare","options","inject","componentInstance","initialValue","reducer","initialArg","init","action","__actions","currentState","__eagerState","eagerReducer","__eagerReducer","next","module","exports","Rax","self"],"mappings":"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"}