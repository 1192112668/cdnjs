{"version":3,"file":"rax.min.js","sources":["../src/vdom/host.js","../src/vdom/element.js","../src/types.js","../src/vdom/flattenChildren.js","../src/error.js","../src/createElement.js","../src/invokeFunctionsWithContext.js","../src/vdom/scheduler.js","../src/vdom/shallowEqual.js","../src/constant.js","../src/hooks.js","../src/toArray.js","../src/vdom/getNearestParent.js","../src/createContext.js","../src/vdom/base.js","../src/vdom/empty.js","../src/vdom/ref.js","../src/vdom/instantiateComponent.js","../src/vdom/shouldUpdateComponent.js","../src/vdom/getElementKeyName.js","../src/vdom/getPrevSiblingNativeNode.js","../src/vdom/component.js","../src/vdom/root.js","../src/vdom/instance.js","../src/assign.js","../src/vdom/native.js","../src/vdom/text.js","../src/vdom/reactive.js","../src/vdom/updater.js","../src/vdom/composite.js","../src/vdom/fragment.js","../src/createRef.js","../src/forwardRef.js","../src/memo.js","../src/fragment.js","../src/render.js","../src/vdom/inject.js","../src/version.js","../src/index.js","../src/index.js"],"sourcesContent":["/*\n * Stateful things in runtime\n */\nexport default {\n  __mountID: 1,\n  __isUpdating: false,\n  // Inject\n  driver: null,\n  // Roots\n  rootComponents: {},\n  rootInstances: {},\n  // Current owner component\n  owner: null,\n};\n","export default function Element(type, key, ref, props, owner) {\n  let element = {\n    // Built-in properties that belong on the element\n    type,\n    key,\n    ref,\n    props,\n    // Record the component responsible for creating this element.\n    _owner: owner,\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    // We make validation flag non-enumerable, so the test framework could ignore it\n    Object.defineProperty(element, '__validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    });\n  }\n\n  return element;\n};\n","export function isNull(obj) {\n  return obj === null;\n}\n\nexport function isFunction(obj) {\n  return typeof obj === 'function';\n}\n\nexport function isObject(obj) {\n  return typeof obj === 'object';\n}\n\nexport function isArray(array) {\n  return Array.isArray(array);\n}\n\nexport function isString(string) {\n  return typeof string === 'string';\n}\n\nexport function isNumber(string) {\n  return typeof string === 'number';\n}\n","import { isArray } from '../types';\n\nfunction traverseChildren(children, result) {\n  if (isArray(children)) {\n    for (let i = 0, l = children.length; i < l; i++) {\n      traverseChildren(children[i], result);\n    }\n  } else {\n    result.push(children);\n  }\n}\n\nexport default function flattenChildren(children) {\n  if (children == null) {\n    return children;\n  }\n  const result = [];\n  traverseChildren(children, result);\n\n  // If length equal 1, return the only one.\n  return result.length - 1 ? result : result[0];\n}\n","/**\n * ErrorCode mapping:\n *  0: Type of createElement  should not be null or undefined.\n *  1: Hooks can only be called inside a component.\n *  2: Invalid element type.\n *  3: ref: multiple version of Rax used in project.\n * @param errCode {Number}\n */\nexport function invokeMinifiedError(errCode) {\n  throw new Error('Minified error: ' + errCode);\n}\n","import Host from './vdom/host';\nimport Element from './vdom/element';\nimport flattenChildren from './vdom/flattenChildren';\nimport { invokeMinifiedError } from './error';\nimport { isString, isArray } from './types';\nimport warning from './warning';\nimport validateChildKeys from './validateChildKeys';\nimport getRenderErrorInfo from './getRenderErrorInfo';\n\nconst RESERVED_PROPS = {\n  key: true,\n  ref: true,\n};\n\nexport default function createElement(type, config, children) {\n  if (type == null) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error('createElement: type should not be null or undefined.' + getRenderErrorInfo());\n    } else {\n      invokeMinifiedError(0);\n    }\n  }\n  // Reserved names are extracted\n  let props = {};\n  let propName;\n  let key = null;\n  let ref = null;\n  const ownerComponent = Host.owner;\n\n  if (config != null) {\n    let hasReservedProps = false;\n\n    if (config.ref != null) {\n      hasReservedProps = true;\n      ref = config.ref;\n      if (process.env.NODE_ENV !== 'production') {\n        if (isString(ref) && !ownerComponent) {\n          warning('createElement: adding a string ref \"' + ref + '\" outside the render method.');\n        }\n      }\n    }\n\n    if (config.key != null) {\n      hasReservedProps = true;\n      key = '' + config.key;\n    }\n\n    // If no reserved props, assign config to props for better performance\n    if (hasReservedProps) {\n      for (propName in config) {\n        // Extract reserved props\n        if (!RESERVED_PROPS[propName]) {\n          props[propName] = config[propName];\n        }\n      }\n    } else {\n      props = config;\n    }\n  }\n\n  // Children arguments can be more than one\n  const childrenLength = arguments.length - 2;\n  if (childrenLength > 0) {\n    if (childrenLength === 1 && !isArray(children)) {\n      props.children = children;\n    } else {\n      let childArray = children;\n      if (childrenLength > 1) {\n        childArray = new Array(childrenLength);\n        for (var i = 0; i < childrenLength; i++) {\n          childArray[i] = arguments[i + 2];\n        }\n      }\n      props.children = flattenChildren(childArray);\n    }\n  }\n\n  // Resolve default props\n  if (type && type.defaultProps) {\n    let defaultProps = type.defaultProps;\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    for (let i = 2; i < arguments.length; i ++) {\n      validateChildKeys(arguments[i], type);\n    }\n  }\n\n  return new Element(\n    type,\n    key,\n    ref,\n    props,\n    ownerComponent\n  );\n}\n\n","export default function invokeFunctionsWithContext(fns, context, value) {\n  for (let i = 0, l = fns && fns.length; i < l; i++) {\n    fns[i].call(context, value);\n  }\n}\n","let updateCallbacks = [];\nlet effectCallbacks = [];\nexport let scheduler = setTimeout;\n\nif (process.env.NODE_ENV !== 'production') {\n  // Wrapper timer for hijack timers in jest\n  scheduler = (callback) => {\n    setTimeout(callback);\n  };\n}\n\n// Schedule before next render\nexport function schedule(callback) {\n  if (updateCallbacks.length === 0) {\n    scheduler(flush);\n  }\n  updateCallbacks.push(callback);\n}\n\n// Flush before next render\nexport function flush() {\n  let callback;\n  while (callback = updateCallbacks.shift()) {\n    callback();\n  }\n}\n\nexport function scheduleEffect(callback) {\n  if (effectCallbacks.length === 0) {\n    scheduler(flushEffect);\n  }\n  effectCallbacks.push(callback);\n}\n\nexport function flushEffect() {\n  let callback;\n  while (callback = effectCallbacks.shift()) {\n    callback();\n  }\n}\n","import {isNull, isObject} from '../types';\n\nconst hasOwnProperty = {}.hasOwnProperty;\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nexport function is(x, y) {\n  // SameValue algorithm\n  if (x === y) {\n    // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    return x !== 0 || 1 / x === 1 / y;\n  } else {\n    // Step 6.a: NaN == NaN\n    return x !== x && y !== y; // eslint-disable-line no-self-compare\n  }\n}\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * Returns true when the values of all keys are strictly equal.\n */\nexport default function shallowEqual(objA, objB) {\n  if (is(objA, objB)) {\n    return true;\n  }\n\n  if (!isObject(objA) || isNull(objA) || !isObject(objB) || isNull(objB)) {\n    return false;\n  }\n\n  let keysA = Object.keys(objA);\n  let keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A's keys different from B.\n  for (let i = 0; i < keysA.length; i++) {\n    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","/* Common constant variables for rax */\n\nexport const INTERNAL = '_internal';\nexport const INSTANCE = '_instance';\nexport const NATIVE_NODE = '_nativeNode';\nexport const RENDERED_COMPONENT = '_renderedComponent';\n","import Host from './vdom/host';\nimport { scheduleEffect, flushEffect } from './vdom/scheduler';\nimport { is } from './vdom/shallowEqual';\nimport { isArray, isFunction, isNull } from './types';\nimport { invokeMinifiedError } from './error';\nimport { INSTANCE } from './constant';\n\nfunction getCurrentInstance() {\n  return Host.owner && Host.owner[INSTANCE];\n}\n\nfunction getCurrentRenderingInstance() {\n  const currentInstance = getCurrentInstance();\n  if (currentInstance) {\n    return currentInstance;\n  } else {\n    if (process.env.NODE_ENV === 'production') {\n      invokeMinifiedError(1);\n    } else {\n      throw new Error('Hooks can only be called inside a component.');\n    }\n  }\n}\n\nfunction areInputsEqual(inputs, prevInputs) {\n  if (isNull(prevInputs) || inputs.length !== prevInputs.length) {\n    return false;\n  }\n\n  for (let i = 0; i < inputs.length; i++) {\n    if (is(inputs[i], prevInputs[i])) {\n      continue;\n    }\n    return false;\n  }\n  return true;\n}\n\nexport function useState(initialState) {\n  const currentInstance = getCurrentRenderingInstance();\n  const hookID = currentInstance.getHookID();\n  const hooks = currentInstance.getHooks();\n\n  if (!hooks[hookID]) {\n    // If the initial state is the result of an expensive computation,\n    // you may provide a function instead for lazy initial state.\n    if (isFunction(initialState)) {\n      initialState = initialState();\n    }\n\n    const setState = newState => {\n      // Flush all effects first before update state\n      if (!Host.__isUpdating) {\n        flushEffect();\n      }\n\n      const hook = hooks[hookID];\n      const eagerState = hook[2];\n      // function updater\n      if (isFunction(newState)) {\n        newState = newState(eagerState);\n      }\n\n      if (!is(newState, eagerState)) {\n        // Current instance is in render update phase.\n        // After this one render finish, will containue run.\n        hook[2] = newState;\n        if (getCurrentInstance() === currentInstance) {\n          // Marked as is scheduled that could finish hooks.\n          currentInstance.__isScheduled = true;\n        } else {\n          currentInstance.__update();\n        }\n      }\n    };\n\n    hooks[hookID] = [\n      initialState,\n      setState,\n      initialState\n    ];\n  }\n\n  const hook = hooks[hookID];\n  if (!is(hook[0], hook[2])) {\n    hook[0] = hook[2];\n    currentInstance.__shouldUpdate = true;\n  }\n\n  return hook;\n}\n\nexport function useContext(context) {\n  const currentInstance = getCurrentRenderingInstance();\n  return currentInstance.useContext(context);\n}\n\nexport function useEffect(effect, inputs) {\n  useEffectImpl(effect, inputs, true);\n}\n\nexport function useLayoutEffect(effect, inputs) {\n  useEffectImpl(effect, inputs);\n}\n\nfunction useEffectImpl(effect, inputs, defered) {\n  const currentInstance = getCurrentRenderingInstance();\n  const hookID = currentInstance.getHookID();\n  const hooks = currentInstance.getHooks();\n  inputs = inputs === undefined ? null : inputs;\n\n  if (!hooks[hookID]) {\n    const __create = (immediately) => {\n      if (!immediately && defered) return scheduleEffect(() => __create(true));\n      const { current } = __create;\n      if (current) {\n        __destory.current = current();\n        __create.current = null;\n      }\n    };\n\n    const __destory = (immediately) => {\n      if (!immediately && defered) return scheduleEffect(() => __destory(true));\n      const { current } = __destory;\n      if (current) {\n        current();\n        __destory.current = null;\n      }\n    };\n\n    __create.current = effect;\n\n    hooks[hookID] = {\n      __create,\n      __destory,\n      __prevInputs: inputs,\n      __inputs: inputs\n    };\n\n    currentInstance.didMount.push(__create);\n    currentInstance.willUnmount.push(__destory);\n    currentInstance.didUpdate.push(() => {\n      const { __prevInputs, __inputs, __create } = hooks[hookID];\n      if (__inputs == null || !areInputsEqual(__inputs, __prevInputs)) {\n        __destory();\n        __create();\n      }\n    });\n  } else {\n    const hook = hooks[hookID];\n    const { __create, __inputs: prevInputs } = hook;\n    hook.__inputs = inputs;\n    hook.__prevInputs = prevInputs;\n    __create.current = effect;\n  }\n}\n\nexport function useImperativeHandle(ref, create, inputs) {\n  const nextInputs = isArray(inputs) ? inputs.concat([ref]) : null;\n\n  useLayoutEffect(() => {\n    if (isFunction(ref)) {\n      ref(create());\n      return () => ref(null);\n    } else if (ref != null) {\n      ref.current = create();\n      return () => {\n        ref.current = null;\n      };\n    }\n  }, nextInputs);\n}\n\nexport function useRef(initialValue) {\n  const currentInstance = getCurrentRenderingInstance();\n  const hookID = currentInstance.getHookID();\n  const hooks = currentInstance.getHooks();\n\n  if (!hooks[hookID]) {\n    hooks[hookID] = {\n      current: initialValue\n    };\n  }\n\n  return hooks[hookID];\n}\n\nexport function useCallback(callback, inputs) {\n  return useMemo(() => callback, inputs);\n}\n\nexport function useMemo(create, inputs) {\n  const currentInstance = getCurrentRenderingInstance();\n  const hookID = currentInstance.getHookID();\n  const hooks = currentInstance.getHooks();\n  inputs = inputs === undefined ? null : inputs;\n\n  if (!hooks[hookID]) {\n    hooks[hookID] = [create(), inputs];\n  } else {\n    const prevInputs = hooks[hookID][1];\n    if (isNull(inputs) || !areInputsEqual(inputs, prevInputs)) {\n      hooks[hookID] = [create(), inputs];\n    }\n  }\n\n  return hooks[hookID][0];\n}\n\nexport function useReducer(reducer, initialArg, init) {\n  const currentInstance = getCurrentRenderingInstance();\n  const hookID = currentInstance.getHookID();\n  const hooks = currentInstance.getHooks();\n  const hook = hooks[hookID];\n\n  if (!hook) {\n    const initialState = isFunction(init) ? init(initialArg) : initialArg;\n\n    const dispatch = action => {\n      // Flush all effects first before update state\n      if (!Host.__isUpdating) {\n        flushEffect();\n      }\n\n      const hook = hooks[hookID];\n      // Reducer will update in the next render, before that we add all\n      // actions to the queue\n      const queue = hook[2];\n\n      if (getCurrentInstance() === currentInstance) {\n        queue.__actions.push(action);\n        currentInstance.__isScheduled = true;\n      } else {\n        const currentState = queue.__eagerState;\n        const eagerReducer = queue.__eagerReducer;\n        const eagerState = eagerReducer(currentState, action);\n        if (is(eagerState, currentState)) {\n          return;\n        }\n        queue.__eagerState = eagerState;\n        queue.__actions.push(action);\n        currentInstance.__update();\n      }\n    };\n\n    return hooks[hookID] = [\n      initialState,\n      dispatch,\n      {\n        __actions: [],\n        __eagerReducer: reducer,\n        __eagerState: initialState\n      }\n    ];\n  }\n\n  const queue = hook[2];\n  let next = hook[0];\n\n  if (currentInstance.__reRenders > 0) {\n    for (let i = 0; i < queue.__actions.length; i++) {\n      next = reducer(next, queue.__actions[i]);\n    }\n  } else {\n    next = queue.__eagerState;\n  }\n\n  if (!is(next, hook[0])) {\n    hook[0] = next;\n    currentInstance.__shouldUpdate = true;\n  }\n\n  queue.__eagerReducer = reducer;\n  queue.__eagerState = next;\n  queue.__actions.length = 0;\n\n  return hooks[hookID];\n}\n","import { isArray } from './types';\n\nexport default function toArray(obj) {\n  return isArray(obj) ? obj : [obj];\n}\n","import { INTERNAL } from '../constant';\n\nexport default function getNearestParent(instance, matcher) {\n  let parent;\n  while (instance && instance[INTERNAL]) {\n    if (matcher(instance)) {\n      parent = instance;\n      break;\n    }\n    instance = instance[INTERNAL].__parentInstance;\n  }\n  return parent;\n}","import invokeFunctionsWithContext from './invokeFunctionsWithContext';\nimport { useState, useLayoutEffect } from './hooks';\nimport { isFunction } from './types';\nimport toArray from './toArray';\nimport { INTERNAL } from './constant';\nimport getNearestParent from './vdom/getNearestParent';\n\nlet id = 0;\n\nexport default function createContext(defaultValue) {\n  const contextID = '_c' + id++;\n\n  // Provider Component\n  class Provider {\n    constructor() {\n      this.__contextID = contextID;\n      this.__handlers = [];\n    }\n    __on(handler) {\n      this.__handlers.push(handler);\n    }\n    __off(handler) {\n      this.__handlers = this.__handlers.filter(h => h !== handler);\n    }\n    // Like getChildContext but called in SSR\n    _getChildContext() {\n      return {\n        [contextID]: this\n      };\n    }\n    getValue() {\n      return this.props.value !== undefined ? this.props.value : defaultValue;\n    }\n    componentDidUpdate(prevProps) {\n      if (this.props.value !== prevProps.value) {\n        invokeFunctionsWithContext(this.__handlers, null, this.getValue());\n      }\n    }\n    render() {\n      return this.props.children;\n    }\n  }\n\n  function getNearestParentProvider(instance) {\n    return getNearestParent(instance, parent => parent.__contextID === contextID);\n  }\n\n  // Consumer Component\n  function Consumer(props, context) {\n    // Current `context[contextID]` only works in SSR\n    const [provider] = useState(() => context[contextID] || getNearestParentProvider(this));\n    let value = provider ? provider.getValue() : defaultValue;\n    const [prevValue, setValue] = useState(value);\n\n    if (value !== prevValue) {\n      setValue(value);\n      return; // Interrupt execution of consumer.\n    }\n\n    useLayoutEffect(() => {\n      if (provider) {\n        provider.__on(setValue);\n        return () => {\n          provider.__off(setValue);\n        };\n      }\n    }, []);\n\n    // Consumer requires a function as a child.\n    // The function receives the current context value.\n    const consumer = toArray(props.children)[0];\n    if (isFunction(consumer)) {\n      return consumer(value);\n    }\n  }\n\n  return {\n    Provider,\n    Consumer,\n    _contextID: contextID, // Export for SSR\n    _defaultValue: defaultValue,\n    __getNearestParentProvider: getNearestParentProvider,\n  };\n}\n","import Host from './host';\nimport { INSTANCE, INTERNAL, NATIVE_NODE } from '../constant';\n\n/**\n * Base Component\n */\nexport default class BaseComponent {\n  constructor(element) {\n    this.__currentElement = element;\n  }\n\n  __initComponent(parent, parentInstance, context) {\n    this._parent = parent;\n    this.__parentInstance = parentInstance;\n    this._context = context;\n    this._mountID = Host.__mountID++;\n  }\n\n  __destoryComponent() {\n    if (process.env.NODE_ENV !== 'production') {\n      Host.reconciler.unmountComponent(this);\n    }\n\n    this.__currentElement\n      = this[NATIVE_NODE]\n      = this._parent\n      = this.__parentInstance\n      = this._context\n      = null;\n\n    if (this[INSTANCE]) {\n      this[INSTANCE] = this[INSTANCE][INTERNAL] = null;\n    }\n  }\n\n  __mountComponent(parent, parentInstance, context, nativeNodeMounter) {\n    this.__initComponent(parent, parentInstance, context);\n    this.__mountNativeNode(nativeNodeMounter);\n\n    if (process.env.NODE_ENV !== 'production') {\n      Host.reconciler.mountComponent(this);\n    }\n\n    const instance = {};\n    instance[INTERNAL] = this;\n\n    return instance;\n  }\n\n  unmountComponent(shouldNotRemoveChild) {\n    if (this[NATIVE_NODE] && !shouldNotRemoveChild) {\n      Host.driver.removeChild(this[NATIVE_NODE], this._parent);\n    }\n\n    this.__destoryComponent();\n  }\n\n  __getName() {\n    let currentElement = this.__currentElement;\n    let type = currentElement && currentElement.type;\n\n    return (\n      type && type.displayName ||\n      type && type.name ||\n      type || // Native component's name is type\n      currentElement\n    );\n  }\n\n  __mountNativeNode(nativeNodeMounter) {\n    let nativeNode = this.__getNativeNode();\n    let parent = this._parent;\n\n    if (nativeNodeMounter) {\n      nativeNodeMounter(nativeNode, parent);\n    } else {\n      Host.driver.appendChild(nativeNode, parent);\n    }\n  }\n\n  __getNativeNode() {\n    return this[NATIVE_NODE] == null\n      ? this[NATIVE_NODE] = this.__createNativeNode()\n      : this[NATIVE_NODE];\n  }\n\n  __getPublicInstance() {\n    return this.__getNativeNode();\n  }\n}\n","import Host from './host';\nimport BaseComponent from './base';\n\n/**\n * Empty Component\n */\nclass EmptyComponent extends BaseComponent {\n  __createNativeNode() {\n    return Host.driver.createEmpty(this);\n  }\n}\n\nexport default EmptyComponent;\n","/*\n * Ref manager\n */\nimport { invokeMinifiedError } from '../error';\nimport { isFunction, isObject } from '../types';\nimport { INSTANCE } from '../constant';\nimport warning from '../warning';\n\nexport function updateRef(prevElement, nextElement, component) {\n  let prevRef = prevElement ? prevElement.ref : null;\n  let nextRef = nextElement ? nextElement.ref : null;\n\n  // Update refs in owner component\n  if (prevRef !== nextRef) {\n    // Detach prev RenderedElement's ref\n    prevRef && detachRef(prevElement._owner, prevRef, component);\n    // Attach next RenderedElement's ref\n    nextRef && attachRef(nextElement._owner, nextRef, component);\n  }\n}\n\nexport function attachRef(ownerComponent, ref, component) {\n  if (!ownerComponent) {\n    if (process.env.NODE_ENV !== 'production') {\n      return warning('ref: multiple version of Rax used in project.');\n    } else {\n      invokeMinifiedError(3);\n    }\n  }\n\n  let instance = component.__getPublicInstance();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (instance == null) {\n      warning('ref: do not attach ref to function components because they don’t have instances.');\n    }\n  }\n\n  if (isFunction(ref)) {\n    ref(instance);\n  } else if (isObject(ref)) {\n    ref.current = instance;\n  } else {\n    ownerComponent[INSTANCE].refs[ref] = instance;\n  }\n}\n\nexport function detachRef(ownerComponent, ref, component) {\n  if (isFunction(ref)) {\n    // When the referenced component is unmounted and whenever the ref changes, the old ref will be called with null as an argument.\n    ref(null);\n  } else {\n    // Must match component and ref could detach the ref on owner when A's before ref is B's current ref\n    let instance = component.__getPublicInstance();\n\n    if (isObject(ref) && ref.current === instance) {\n      ref.current = null;\n    } else if (ownerComponent[INSTANCE].refs[ref] === instance) {\n      delete ownerComponent[INSTANCE].refs[ref];\n    }\n  }\n}\n","import Host from './host';\nimport {isString, isNumber, isObject, isArray, isNull} from '../types';\nimport { invokeMinifiedError } from '../error';\n\nexport default function instantiateComponent(element) {\n  let instance;\n\n  if (isObject(element) && element !== null && element.type) {\n    // Special case string values\n    if (isString(element.type)) {\n      instance = new Host.__Native(element);\n    } else {\n      instance = new Host.__Composite(element);\n    }\n  } else if (isString(element) || isNumber(element)) {\n    instance = new Host.__Text(String(element));\n  } else if (element === undefined || isNull(element) || element === false || element === true) {\n    instance = new Host.__Empty();\n  } else if (isArray(element)) {\n    instance = new Host.__Fragment(element);\n  } else {\n    throwInvalidComponentError(element);\n  }\n\n  return instance;\n}\n\nexport function throwInvalidComponentError(element) {\n  if (process.env.NODE_ENV === 'production') {\n    invokeMinifiedError(2);\n  } else {\n    throw new Error(`Invalid element type: ${element}. (current: ${isObject(element) && Object.keys(element) || typeof element})`);\n  }\n}\n","import {isArray, isString, isNumber, isObject, isNull} from '../types';\n\nfunction shouldUpdateComponent(prevElement, nextElement) {\n  let prevEmpty = isNull(prevElement);\n  let nextEmpty = isNull(nextElement);\n  if (prevEmpty || nextEmpty) {\n    return prevEmpty === nextEmpty;\n  }\n\n  if (isArray(prevElement) && isArray(nextElement)) {\n    return true;\n  }\n\n  const isPrevStringOrNumber = isString(prevElement) || isNumber(prevElement);\n  if (isPrevStringOrNumber) {\n    return isString(nextElement) || isNumber(nextElement);\n  } else {\n    // prevElement and nextElement could be array, typeof [] is \"object\"\n    return (\n      isObject(prevElement) &&\n      isObject(nextElement) &&\n      prevElement.type === nextElement.type &&\n      prevElement.key === nextElement.key\n    );\n  }\n}\n\nexport default shouldUpdateComponent;\n","import { isString } from '../types';\nimport warning from '../warning';\n\nexport default function getElementKeyName(children, element, index) {\n  const elementKey = element && element.key;\n  const defaultName = '.' + index.toString(36); // Inner child name default format fallback\n\n  // Key should must be string type\n  if (isString(elementKey)) {\n    let keyName = '$' + elementKey;\n    // Child keys must be unique.\n    let keyUnique = children[keyName] === undefined;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!keyUnique) {\n        // Only the first child will be used when encountered two children with the same key\n        warning(`Encountered two children with the same key \"${elementKey}\".`);\n      }\n    }\n\n    return keyUnique ? keyName : defaultName;\n  } else {\n    return defaultName;\n  }\n}\n","import Host from './host';\nimport { isArray } from '../types';\nimport { INTERNAL } from '../constant';\n\n/**\n * This function is usually been used to find the closet previous sibling native node of FragmentComponent.\n * FragmentComponent does not have a native node in the DOM tree, so when it is replaced, the new node has no corresponding location to insert.\n * So we need to look forward from the current mount position of the FragmentComponent to the nearest component which have the native node.\n * @param component\n * @return nativeNode\n */\nexport default function getPrevSiblingNativeNode(component) {\n  let parent = component;\n  while (parent = component.__parentInstance &&\n    component.__parentInstance[INTERNAL]) {\n    if (parent instanceof Host.__Composite) {\n      component = parent;\n      continue;\n    }\n\n    const keys = Object.keys(parent.__renderedChildren);\n    // Find previous sibling native node from current mount index\n    for (let i = component.__mountIndex - 1; i >= 0; i--) {\n      const nativeNode = parent.__renderedChildren[keys[i]].__getNativeNode();\n      // Fragment component always return array\n      if (isArray(nativeNode)) {\n        if (nativeNode.length > 0) {\n          // Get the last one\n          return nativeNode[nativeNode.length - 1];\n        }\n      } else {\n        // Others maybe native node or empty node\n        return nativeNode;\n      }\n    }\n\n    // Find parent over parent\n    if (parent instanceof Host.__Fragment) {\n      component = parent;\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * Base component class.\n */\nexport default class Component {\n  constructor(props, context) {\n    this.props = props;\n    this.context = context;\n    this.refs = {};\n  }\n\n  setState(partialState, callback) {\n    // The updater property is injected when composite component mounting\n    this.updater.setState(this, partialState, callback);\n  }\n\n  forceUpdate(callback) {\n    this.updater.forceUpdate(this, callback);\n  }\n}\n\n/**\n * Pure component.\n */\nexport class PureComponent extends Component {\n  constructor() {\n    super(...arguments);\n    this.__isPureComponent = true;\n  }\n}\n","import Component from './component';\nimport {INTERNAL, RENDERED_COMPONENT} from '../constant';\n\nlet rootID = 1;\n\nclass Root extends Component {\n  constructor() {\n    super();\n    // Using fragment instead of null for avoid create a comment node when init mount\n    this.__element = [];\n    this.__rootID = rootID++;\n  }\n\n  __getPublicInstance() {\n    return this.__getRenderedComponent().__getPublicInstance();\n  }\n\n  __getRenderedComponent() {\n    return this[INTERNAL][RENDERED_COMPONENT];\n  }\n\n  __update(element) {\n    this.__element = element;\n    this.forceUpdate();\n  }\n\n  render() {\n    return this.__element;\n  }\n}\n\nexport default Root;\n","import Host from './host';\nimport createElement from '../createElement';\nimport instantiateComponent from './instantiateComponent';\nimport Root from './root';\nimport {INTERNAL, RENDERED_COMPONENT} from '../constant';\n\n/**\n * Instance manager\n * @NOTE Key should not be compressed, for that will be added to native node and cause DOM Exception.\n */\nconst KEY = '_r';\n\nexport default {\n  set(node, instance) {\n    if (!node[KEY]) {\n      node[KEY] = instance;\n      // Record root instance to roots map\n      if (instance.__rootID) {\n        Host.rootInstances[instance.__rootID] = instance;\n        Host.rootComponents[instance.__rootID] = instance[INTERNAL];\n      }\n    }\n  },\n  get(node) {\n    return node[KEY];\n  },\n  remove(node) {\n    let instance = this.get(node);\n    if (instance) {\n      node[KEY] = null;\n      if (instance.__rootID) {\n        delete Host.rootComponents[instance.__rootID];\n        delete Host.rootInstances[instance.__rootID];\n      }\n    }\n  },\n  mount(element, container, { parent, hydrate }) {\n    if (process.env.NODE_ENV !== 'production') {\n      Host.measurer && Host.measurer.beforeRender();\n    }\n\n    const driver = Host.driver;\n\n    // Real native root node is body\n    if (container == null) {\n      container = driver.createBody();\n    }\n\n    const renderOptions = {\n      element,\n      container,\n      hydrate\n    };\n\n    // Before render callback\n    driver.beforeRender && driver.beforeRender(renderOptions);\n\n    // Get the context from the conceptual parent component.\n    let parentContext;\n    if (parent) {\n      let parentInternal = parent[INTERNAL];\n      parentContext = parentInternal.__processChildContext(parentInternal._context);\n    }\n\n    // Update root component\n    let prevRootInstance = this.get(container);\n    if (prevRootInstance && prevRootInstance.__rootID) {\n      if (parentContext) {\n        // Using __penddingContext to pass new context\n        prevRootInstance[INTERNAL].__penddingContext = parentContext;\n      }\n      prevRootInstance.__update(element);\n      return prevRootInstance;\n    }\n\n    // Init root component with empty children\n    let renderedComponent = instantiateComponent(createElement(Root));\n    let defaultContext = parentContext || {};\n    let rootInstance = renderedComponent.__mountComponent(container, null, defaultContext);\n    this.set(container, rootInstance);\n    // Mount new element through update queue avoid when there is in rendering phase\n    rootInstance.__update(element);\n\n    // After render callback\n    driver.afterRender && driver.afterRender(renderOptions);\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Devtool render new root hook\n      Host.reconciler.renderNewRootComponent(rootInstance[INTERNAL][RENDERED_COMPONENT]);\n\n      Host.measurer && Host.measurer.afterRender();\n    }\n\n    return rootInstance;\n  }\n};\n","export default Object.assign;\n","import Host from './host';\nimport { detachRef, attachRef, updateRef } from './ref';\nimport instantiateComponent from './instantiateComponent';\nimport shouldUpdateComponent from './shouldUpdateComponent';\nimport getElementKeyName from './getElementKeyName';\nimport getPrevSiblingNativeNode from './getPrevSiblingNativeNode';\nimport Instance from './instance';\nimport BaseComponent from './base';\nimport toArray from '../toArray';\nimport { isFunction, isArray, isNull } from '../types';\nimport assign from '../assign';\nimport { INSTANCE, INTERNAL, NATIVE_NODE } from '../constant';\n\nconst STYLE = 'style';\nconst CHILDREN = 'children';\nconst TREE = 'tree';\nconst EVENT_PREFIX_REGEXP = /^on[A-Z]/;\n\n/**\n * Native Component\n */\nexport default class NativeComponent extends BaseComponent {\n  __mountComponent(parent, parentInstance, context, nativeNodeMounter) {\n    this.__initComponent(parent, parentInstance, context);\n\n    const currentElement = this.__currentElement;\n    const props = currentElement.props;\n    const type = currentElement.type;\n    const children = props[CHILDREN];\n    const appendType = props.append || TREE; // Default is tree\n\n    // Clone a copy for style diff\n    this.__prevStyleCopy = assign({}, props[STYLE]);\n\n    let instance = {\n      type,\n      props,\n    };\n    instance[INTERNAL] = this;\n\n    this[INSTANCE] = instance;\n\n    if (appendType === TREE) {\n      // Should after process children when mount by tree mode\n      this.__mountChildren(children, context);\n      this.__mountNativeNode(nativeNodeMounter);\n    } else {\n      // Should before process children when mount by node mode\n      this.__mountNativeNode(nativeNodeMounter);\n      this.__mountChildren(children, context);\n    }\n\n    // Ref acttach\n    if (currentElement && currentElement.ref) {\n      attachRef(currentElement._owner, currentElement.ref, this);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      Host.reconciler.mountComponent(this);\n    }\n\n    return instance;\n  }\n\n  __mountChildren(children, context) {\n    if (children == null) return children;\n\n    const nativeNode = this.__getNativeNode();\n    return this.__mountChildrenImpl(nativeNode, toArray(children), context);\n  }\n\n  __mountChildrenImpl(parent, children, context, nativeNodeMounter) {\n    let renderedChildren = this.__renderedChildren = {};\n\n    const renderedChildrenImage = [];\n    for (let i = 0, l = children.length; i < l; i++) {\n      const element = children[i];\n      const renderedChild = instantiateComponent(element);\n      const name = getElementKeyName(renderedChildren, element, i);\n      renderedChildren[name] = renderedChild;\n      renderedChild.__mountIndex = i;\n      // Mount children\n      const mountImage = renderedChild.__mountComponent(\n        parent,\n        this[INSTANCE],\n        context,\n        nativeNodeMounter\n      );\n      renderedChildrenImage.push(mountImage);\n    }\n\n    return renderedChildrenImage;\n  }\n\n  __unmountChildren(shouldNotRemoveChild) {\n    let renderedChildren = this.__renderedChildren;\n\n    if (renderedChildren) {\n      for (let name in renderedChildren) {\n        let renderedChild = renderedChildren[name];\n        renderedChild.unmountComponent(shouldNotRemoveChild);\n      }\n      this.__renderedChildren = null;\n    }\n  }\n\n  unmountComponent(shouldNotRemoveChild) {\n    if (this[NATIVE_NODE]) {\n      let ref = this.__currentElement.ref;\n      if (ref) {\n        detachRef(this.__currentElement._owner, ref, this);\n      }\n\n      Instance.remove(this[NATIVE_NODE]);\n\n      if (!shouldNotRemoveChild) {\n        Host.driver.removeChild(this[NATIVE_NODE], this._parent);\n\n        // If the parent node has been removed, child node don't need to be removed\n        shouldNotRemoveChild = true;\n      }\n    }\n\n    this.__unmountChildren(shouldNotRemoveChild);\n\n    this.__prevStyleCopy = null;\n    this.__destoryComponent();\n  }\n\n  __updateComponent(prevElement, nextElement, prevContext, nextContext) {\n    // Replace current element\n    this.__currentElement = nextElement;\n\n    updateRef(prevElement, nextElement, this);\n\n    let prevProps = prevElement.props;\n    let nextProps = nextElement.props;\n\n    this.__updateProperties(prevProps, nextProps);\n\n    // If the prevElement has no child, mount children directly\n    if (prevProps[CHILDREN] == null ||\n      isArray(prevProps[CHILDREN]) && prevProps[CHILDREN].length === 0) {\n      this.__mountChildren(nextProps[CHILDREN], nextContext);\n    } else {\n      this.__updateChildren(nextProps[CHILDREN], nextContext);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      Host.reconciler.receiveComponent(this);\n    }\n  }\n\n  __updateProperties(prevProps, nextProps) {\n    let propKey;\n    let styleName;\n    let styleUpdates;\n    const driver = Host.driver;\n    const nativeNode = this.__getNativeNode();\n\n    for (propKey in prevProps) {\n      // Continue children and null value prop or nextProps has some propKey that do noting\n      if (\n        propKey === CHILDREN ||\n        prevProps[propKey] == null ||\n        // Use hasOwnProperty here for avoid propKey name is some with method name in object proptotype\n        nextProps.hasOwnProperty(propKey)\n      ) {\n        continue;\n      }\n\n      if (propKey === STYLE) {\n        // Remove all style\n        let lastStyle = this.__prevStyleCopy;\n        for (styleName in lastStyle) {\n          styleUpdates = styleUpdates || {};\n          styleUpdates[styleName] = '';\n        }\n        this.__prevStyleCopy = null;\n      } else if (EVENT_PREFIX_REGEXP.test(propKey)) {\n        // Remove event\n        const eventListener = prevProps[propKey];\n\n        if (isFunction(eventListener)) {\n          driver.removeEventListener(\n            nativeNode,\n            propKey.slice(2).toLowerCase(),\n            eventListener\n          );\n        }\n      } else {\n        // Remove attribute\n        driver.removeAttribute(\n          nativeNode,\n          propKey,\n          prevProps[propKey]\n        );\n      }\n    }\n\n    for (propKey in nextProps) {\n      let nextProp = nextProps[propKey];\n      let prevProp = propKey === STYLE ? this.__prevStyleCopy :\n        prevProps != null ? prevProps[propKey] : undefined;\n\n      // Continue children or prevProp equal nextProp\n      if (\n        propKey === CHILDREN ||\n        prevProp === nextProp ||\n        nextProp == null && prevProp == null\n      ) {\n        continue;\n      }\n\n      // Update style\n      if (propKey === STYLE) {\n        if (nextProp) {\n          // Clone property\n          nextProp = this.__prevStyleCopy = assign({}, nextProp);\n        } else {\n          this.__prevStyleCopy = null;\n        }\n\n        if (prevProp != null) {\n          // Unset styles on `prevProp` but not on `nextProp`.\n          for (styleName in prevProp) {\n            if (!nextProp || !nextProp[styleName] && nextProp[styleName] !== 0) {\n              styleUpdates = styleUpdates || {};\n              styleUpdates[styleName] = '';\n            }\n          }\n          // Update styles that changed since `prevProp`.\n          for (styleName in nextProp) {\n            if (prevProp[styleName] !== nextProp[styleName]) {\n              styleUpdates = styleUpdates || {};\n              styleUpdates[styleName] = nextProp[styleName];\n            }\n          }\n        } else {\n          // Assign next prop when prev style is null\n          styleUpdates = nextProp;\n        }\n      } else if (EVENT_PREFIX_REGEXP.test(propKey)) {\n        // Update event binding\n        let eventName = propKey.slice(2).toLowerCase();\n\n        if (isFunction(prevProp)) {\n          driver.removeEventListener(nativeNode, eventName, prevProp, nextProps);\n        }\n\n        if (isFunction(nextProp)) {\n          driver.addEventListener(nativeNode, eventName, nextProp, nextProps);\n        }\n      } else {\n        // Update other property\n        if (nextProp != null) {\n          driver.setAttribute(\n            nativeNode,\n            propKey,\n            nextProp\n          );\n        } else {\n          driver.removeAttribute(\n            nativeNode,\n            propKey,\n            prevProps[propKey]\n          );\n        }\n\n        if (process.env.NODE_ENV !== 'production') {\n          Host.measurer && Host.measurer.recordOperation({\n            instanceID: this._mountID,\n            type: 'update attribute',\n            payload: {\n              [propKey]: nextProp\n            }\n          });\n        }\n      }\n    }\n\n    if (styleUpdates) {\n      if (process.env.NODE_ENV !== 'production') {\n        Host.measurer && Host.measurer.recordOperation({\n          instanceID: this._mountID,\n          type: 'update style',\n          payload: styleUpdates\n        });\n      }\n\n      driver.setStyle(nativeNode, styleUpdates);\n    }\n  }\n\n  __updateChildren(nextChildrenElements, context) {\n    // prev rendered children\n    let prevChildren = this.__renderedChildren;\n    let driver = Host.driver;\n\n    if (nextChildrenElements == null && prevChildren == null) {\n      return;\n    }\n\n    let nextChildren = {};\n\n    if (nextChildrenElements != null) {\n      nextChildrenElements = toArray(nextChildrenElements);\n\n      // Update next children elements\n      for (let index = 0, length = nextChildrenElements.length; index < length; index++) {\n        let nextElement = nextChildrenElements[index];\n        let name = getElementKeyName(nextChildren, nextElement, index);\n        let prevChild = prevChildren && prevChildren[name];\n        let prevElement = prevChild && prevChild.__currentElement;\n        let prevContext = prevChild && prevChild._context;\n\n        // Try to update between the two of some name that has some element type,\n        // and move child in next children loop if need\n        if (prevChild != null && shouldUpdateComponent(prevElement, nextElement)) {\n          if (prevElement !== nextElement || prevContext !== context) {\n            // Pass the same context when updating children\n            prevChild.__updateComponent(prevElement, nextElement, context,\n              context);\n          }\n\n          nextChildren[name] = prevChild;\n        } else {\n          // Unmount the prevChild when some name with nextChild but different element type,\n          // and move child node in next children loop\n          if (prevChild) {\n            prevChild.__unmount = true;\n          }\n          // The child must be instantiated before it's mounted.\n          nextChildren[name] = instantiateComponent(nextElement);\n        }\n      }\n    }\n\n    let parent = this.__getNativeNode();\n    let isFragmentParent = isArray(parent);\n    let prevFirstChild = null;\n    let prevFirstNativeNode = null;\n    let isPrevFirstEmptyFragment = false;\n    let shouldUnmountPrevFirstChild = false;\n    let lastPlacedNode = null;\n\n    // Directly remove all children from component, if nextChildren is empty (null, [], '').\n    // `driver.removeChildren` is optional driver protocol.\n    let shouldRemoveAllChildren = Boolean(\n      driver.removeChildren\n      // nextChildElements == null or nextChildElements is empty\n      && (isNull(nextChildrenElements) || nextChildrenElements && !nextChildrenElements.length)\n    );\n\n    // Unmount children that are no longer present.\n    if (prevChildren != null) {\n      for (let name in prevChildren) {\n        let prevChild = prevChildren[name];\n        let shouldUnmount = prevChild.__unmount || !nextChildren[name];\n\n        // Store old first child ref for append node ahead and maybe delay remove it\n        if (!prevFirstChild) {\n          shouldUnmountPrevFirstChild = shouldUnmount;\n          prevFirstChild = prevChild;\n          prevFirstNativeNode = prevFirstChild.__getNativeNode();\n\n          if (isArray(prevFirstNativeNode)) {\n            isPrevFirstEmptyFragment = prevFirstNativeNode.length === 0;\n            prevFirstNativeNode = prevFirstNativeNode[0];\n          }\n        } else if (shouldUnmount) {\n          prevChild.unmountComponent(shouldRemoveAllChildren);\n        }\n      }\n\n      // 1. When fragment embed fragment updated but prev fragment is empty\n      // that need to get the prev sibling native node.\n      // like: [ [] ] -> [ [1, 2] ]\n      // 2. When prev fragment is empty and update to other type\n      // like: [ [], 1 ] -> [ 1, 2 ]\n      if (isFragmentParent && parent.length === 0 || isPrevFirstEmptyFragment) {\n        lastPlacedNode = getPrevSiblingNativeNode(this);\n      }\n    }\n\n\n    if (nextChildren != null) {\n      // `nextIndex` will increment for each child in `nextChildren`\n      let nextIndex = 0;\n      let nextNativeNodes = [];\n\n      function insertNodes(nativeNodes, parentNode) {\n        // The nativeNodes maybe fragment, so convert to array type\n        nativeNodes = toArray(nativeNodes);\n\n        for (let i = 0, l = nativeNodes.length; i < l; i++) {\n          if (lastPlacedNode) {\n            // Should reverse order when insert new child after lastPlacedNode:\n            // [lastPlacedNode, *newChild1, *newChild2],\n            // And if prev is empty fragment, lastPlacedNode is the prevSiblingNativeNode found.\n            driver.insertAfter(nativeNodes[l - i - 1], lastPlacedNode);\n          } else if (prevFirstNativeNode) {\n            // [*newChild1, *newChild2, prevFirstNativeNode]\n            driver.insertBefore(nativeNodes[i], prevFirstNativeNode);\n          } else if (parentNode) {\n            // [*newChild1, *newChild2]\n            driver.appendChild(nativeNodes[i], parentNode);\n          }\n        }\n      }\n\n      for (let name in nextChildren) {\n        let nextChild = nextChildren[name];\n        let prevChild = prevChildren && prevChildren[name];\n\n        // Try to move the some key prevChild but current not at the some position\n        if (prevChild === nextChild) {\n          let prevChildNativeNode = prevChild.__getNativeNode();\n\n          if (prevChild.__mountIndex !== nextIndex) {\n            insertNodes(prevChildNativeNode);\n          }\n        } else {\n          // Mount nextChild that in prevChildren there has no some name\n\n          // Fragment extended native component, so if parent is fragment should get this._parent\n          if (isFragmentParent) {\n            parent = this._parent;\n          }\n\n          nextChild.__mountComponent(\n            parent,\n            this[INSTANCE],\n            context,\n            insertNodes // Insert nodes mounter\n          );\n        }\n\n        // Update to the latest mount order\n        nextChild.__mountIndex = nextIndex++;\n\n        // Get the last child\n        lastPlacedNode = nextChild.__getNativeNode();\n\n        // Push to nextNativeNodes\n        if (isArray(lastPlacedNode)) {\n          nextNativeNodes = nextNativeNodes.concat(lastPlacedNode);\n          lastPlacedNode = lastPlacedNode[lastPlacedNode.length - 1];\n        } else {\n          nextNativeNodes.push(lastPlacedNode);\n        }\n      }\n\n      // Sync update native refs\n      if (isArray(this[NATIVE_NODE])) {\n        // Clear all and push the new array\n        this[NATIVE_NODE].length = 0;\n        assign(this[NATIVE_NODE], nextNativeNodes);\n      }\n    }\n\n    if (shouldUnmountPrevFirstChild) {\n      prevFirstChild.unmountComponent(shouldRemoveAllChildren);\n    }\n\n    if (shouldRemoveAllChildren) {\n      driver.removeChildren(this[NATIVE_NODE]);\n    }\n\n    this.__renderedChildren = nextChildren;\n  }\n\n  __createNativeNode() {\n    const instance = this[INSTANCE];\n    const nativeNode = Host.driver.createElement(instance.type, instance.props, this);\n    Instance.set(nativeNode, instance);\n    return nativeNode;\n  }\n}\n","import Host from './host';\nimport BaseComponent from './base';\n\n/**\n * Text Component\n */\nclass TextComponent extends BaseComponent {\n  __updateComponent(prevElement, nextElement, context) {\n    nextElement = '' + nextElement;\n    // If text is some value that do not update even there number 1 and string \"1\"\n    if (prevElement !== nextElement) {\n      // Replace current element\n      this.__currentElement = nextElement;\n      Host.driver.updateText(this.__getNativeNode(), nextElement);\n\n      if (process.env.NODE_ENV !== 'production') {\n        this._stringText = this.__currentElement;\n        Host.reconciler.receiveComponent(this);\n      }\n    }\n  }\n\n  __createNativeNode() {\n    if (process.env.NODE_ENV !== 'production') {\n      this._stringText = this.__currentElement;\n    }\n    return Host.driver.createText(this.__currentElement, this);\n  }\n}\n\nexport default TextComponent;\n","import Host from './host';\nimport Component from './component';\nimport invokeFunctionsWithContext from '../invokeFunctionsWithContext';\nimport { invokeMinifiedError } from '../error';\nimport { INTERNAL } from '../constant';\n\nconst RE_RENDER_LIMIT = 24;\n/**\n * Functional Reactive Component Class Wrapper\n */\nexport default class ReactiveComponent extends Component {\n  constructor(pureRender, ref) {\n    super();\n    // Marked ReactiveComponent.\n    this.__isReactiveComponent = true;\n    // A pure function\n    this.__render = pureRender;\n    this.__hookID = 0;\n    // Number of rerenders\n    this.__reRenders = 0;\n    this.__hooks = {};\n    // Is render scheduled\n    this.__isScheduled = false;\n    this.__shouldUpdate = false;\n    this.__children = null;\n    this.__contexts = {};\n    // Handles store\n    this.didMount = [];\n    this.didUpdate = [];\n    this.willUnmount = [];\n\n    this.state = {};\n\n    if (pureRender.__forwardRef) {\n      this.__prevForwardRef = this.__forwardRef = ref;\n    }\n\n    const compares = pureRender.__compares;\n    if (compares) {\n      this.shouldComponentUpdate = (nextProps) => {\n        // Process composed compare\n        let arePropsEqual = true;\n\n        // Compare push in and pop out\n        for (let i = compares.length - 1; i > -1; i--) {\n          if (arePropsEqual = compares[i](this.props, nextProps)) {\n            break;\n          }\n        }\n\n        return !arePropsEqual || this.__prevForwardRef !== this.__forwardRef;\n      };\n    }\n  }\n\n  getHooks() {\n    return this.__hooks;\n  }\n\n  getHookID() {\n    return ++this.__hookID;\n  }\n\n  useContext(context) {\n    const contextID = context._contextID;\n    let contextItem = this.__contexts[contextID];\n    function getValue() {\n      return contextItem.__provider ? contextItem.__provider.getValue() : context._defaultValue;\n    }\n    if (!contextItem) {\n      const provider = context.__getNearestParentProvider(this);\n      contextItem = this.__contexts[contextID] = {\n        __provider: provider\n      };\n\n      if (provider) {\n        const handleContextChange = () => {\n          // Check the last value that maybe alread rerender\n          // avoid rerender twice when provider value changed\n          if (contextItem.__lastValue !== getValue()) {\n            this.__shouldUpdate = true;\n            this.__update();\n          }\n        };\n        provider.__on(handleContextChange);\n        this.willUnmount.push(() => provider.__off(handleContextChange));\n      }\n    }\n\n    return contextItem.__lastValue = getValue();\n  }\n\n  componentWillMount() {\n    this.__shouldUpdate = true;\n  }\n\n  componentDidMount() {\n    invokeFunctionsWithContext(this.didMount);\n  }\n\n  componentWillReceiveProps() {\n    this.__shouldUpdate = true;\n  }\n\n  componentDidUpdate() {\n    invokeFunctionsWithContext(this.didUpdate);\n  }\n\n  componentWillUnmount() {\n    invokeFunctionsWithContext(this.willUnmount);\n  }\n\n  __update() {\n    this[INTERNAL].__isPendingForceUpdate = true;\n    this.setState({});\n  }\n\n  render() {\n    if (process.env.NODE_ENV !== 'production') {\n      Host.measurer && Host.measurer.beforeRender();\n    }\n\n    this.__hookID = 0;\n    this.__reRenders = 0;\n    this.__isScheduled = false;\n    let children = this.__render(this.props, this.__forwardRef ? this.__forwardRef : this.context);\n\n    while (this.__isScheduled) {\n      this.__reRenders++;\n      if (this.__reRenders > RE_RENDER_LIMIT) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error('Too many re-renders, the number of renders is limited to prevent an infinite loop.');\n        } else {\n          invokeMinifiedError(4);\n        }\n      }\n\n      this.__hookID = 0;\n      this.__isScheduled = false;\n      children = this.__render(this.props, this.__forwardRef ? this.__forwardRef : this.context);\n    }\n\n    if (this.__shouldUpdate) {\n      this.__children = children;\n      this.__shouldUpdate = false;\n    }\n\n    return this.__children;\n  }\n}\n","import Host from './host';\nimport { flushEffect, schedule } from './scheduler';\nimport invokeFunctionsWithContext from '../invokeFunctionsWithContext';\nimport { INTERNAL, RENDERED_COMPONENT } from '../constant';\n\n// Dirty components store\nlet dirtyComponents = [];\n\nfunction getPendingCallbacks(internal) {\n  return internal.__pendingCallbacks;\n}\n\nfunction setPendingCallbacks(internal, callbacks) {\n  return internal.__pendingCallbacks = callbacks;\n}\n\nfunction getPendingStateQueue(internal) {\n  return internal.__pendingStateQueue;\n}\n\nfunction setPendingStateQueue(internal, partialState) {\n  return internal.__pendingStateQueue = partialState;\n}\n\nfunction enqueueCallback(internal, callback) {\n  let callbackQueue = getPendingCallbacks(internal) || setPendingCallbacks(internal, []);\n  callbackQueue.push(callback);\n}\n\nfunction enqueueState(internal, partialState) {\n  let stateQueue = getPendingStateQueue(internal) || setPendingStateQueue(internal, []);\n  stateQueue.push(partialState);\n}\n\nfunction runUpdate(component) {\n  let internal = component[INTERNAL];\n  if (!internal) {\n    return;\n  }\n\n  Host.__isUpdating = true;\n\n  // If updateComponent happens to enqueue any new updates, we\n  // shouldn't execute the callbacks until the next render happens, so\n  // stash the callbacks first\n  let callbacks = getPendingCallbacks(internal);\n  setPendingCallbacks(internal, null);\n\n  let prevElement = internal.__currentElement;\n  let prevUnmaskedContext = internal._context;\n  let nextUnmaskedContext = internal.__penddingContext || prevUnmaskedContext;\n  internal.__penddingContext = undefined;\n\n  if (getPendingStateQueue(internal) || internal.__isPendingForceUpdate) {\n    internal.__updateComponent(\n      prevElement,\n      prevElement,\n      prevUnmaskedContext,\n      nextUnmaskedContext\n    );\n  }\n\n  invokeFunctionsWithContext(callbacks, component);\n\n  Host.__isUpdating = false;\n}\n\nfunction mountOrderComparator(c1, c2) {\n  return c2[INTERNAL]._mountID - c1[INTERNAL]._mountID;\n}\n\nfunction performUpdate() {\n  if (Host.__isUpdating) {\n    return schedule(performUpdate);\n  }\n\n  let component;\n  let dirties = dirtyComponents;\n  if (dirties.length > 0) {\n    // Before next render, we will flush all the effects\n    flushEffect();\n    dirtyComponents = [];\n    // Since reconciling a component higher in the owner hierarchy usually (not\n    // always -- see shouldComponentUpdate()) will reconcile children, reconcile\n    // them before their children by sorting the array.\n    if (dirties.length > 1) {\n      dirties = dirties.sort(mountOrderComparator);\n    }\n\n    while (component = dirties.pop()) {\n      runUpdate(component);\n    }\n  }\n}\n\nfunction scheduleUpdate(component, shouldAsyncUpdate) {\n  if (dirtyComponents.indexOf(component) < 0) {\n    dirtyComponents.push(component);\n  }\n\n  if (shouldAsyncUpdate) {\n    // If have been scheduled before, don't not need schedule again\n    if (dirtyComponents.length > 1) {\n      return;\n    }\n    schedule(performUpdate);\n  } else {\n    performUpdate();\n  }\n}\n\nfunction requestUpdate(component, partialState, callback) {\n  let internal = component[INTERNAL];\n\n  if (!internal) {\n    return;\n  }\n\n  if (callback) {\n    enqueueCallback(internal, callback);\n  }\n\n  const hasComponentRendered = internal[RENDERED_COMPONENT];\n\n  // setState\n  if (partialState) {\n    enqueueState(internal, partialState);\n    // State pending when request update in componentWillMount and componentWillReceiveProps,\n    // isPendingState default is false value (false or null) and set to true after componentWillReceiveProps,\n    // _renderedComponent is null when componentWillMount exec.\n    if (!internal.__isPendingState && hasComponentRendered) {\n      scheduleUpdate(component, true);\n    }\n  } else {\n    // forceUpdate\n    internal.__isPendingForceUpdate = true;\n\n    if (hasComponentRendered) {\n      scheduleUpdate(component);\n    }\n  }\n}\n\nconst Updater = {\n  setState(component, partialState, callback) {\n    // Flush all effects first before update state\n    if (!Host.__isUpdating) {\n      flushEffect();\n    }\n    requestUpdate(component, partialState, callback);\n  },\n  forceUpdate(component, callback) {\n    requestUpdate(component, null, callback);\n  },\n  runCallbacks: invokeFunctionsWithContext,\n};\n\nexport default Updater;\n","import ReactiveComponent from './reactive';\nimport updater from './updater';\nimport Host from './host';\nimport { attachRef, updateRef, detachRef } from './ref';\nimport instantiateComponent, { throwInvalidComponentError } from './instantiateComponent';\nimport shouldUpdateComponent from './shouldUpdateComponent';\nimport shallowEqual from './shallowEqual';\nimport BaseComponent from './base';\nimport toArray from '../toArray';\nimport { scheduler } from './scheduler';\nimport { isFunction, isArray } from '../types';\nimport assign from '../assign';\nimport { INSTANCE, INTERNAL, RENDERED_COMPONENT } from '../constant';\nimport getPrevSiblingNativeNode from './getPrevSiblingNativeNode';\nimport invokeFunctionsWithContext from '../invokeFunctionsWithContext';\nimport getNearestParent from './getNearestParent';\nimport validateChildKeys from '../validateChildKeys';\n\nfunction performInSandbox(fn, instance, callback) {\n  try {\n    return fn();\n  } catch (e) {\n    if (callback) {\n      callback(e);\n    } else {\n      handleError(instance, e);\n    }\n  }\n}\n\nfunction handleError(instance, error) {\n  let boundary = getNearestParent(instance, parent => parent.componentDidCatch);\n\n  if (boundary) {\n    // Should not attempt to recover an unmounting error boundary\n    const boundaryInternal = boundary[INTERNAL];\n    if (boundaryInternal) {\n      let callbackQueue = boundaryInternal.__pendingCallbacks || (boundaryInternal.__pendingCallbacks = []);\n      callbackQueue.push(() => boundary.componentDidCatch(error));\n    }\n  } else {\n    // Do not break when error happens\n    scheduler(() => {\n      throw error;\n    }, 0);\n  }\n}\n\nlet measureLifeCycle;\nif (process.env.NODE_ENV !== 'production') {\n  measureLifeCycle = function(callback, instanceID, type) {\n    Host.measurer && Host.measurer.beforeLifeCycle(instanceID, type);\n    callback();\n    Host.measurer && Host.measurer.afterLifeCycle(instanceID, type);\n  };\n}\n\n/**\n * Composite Component\n */\nclass CompositeComponent extends BaseComponent {\n  __mountComponent(parent, parentInstance, context, nativeNodeMounter) {\n    this.__initComponent(parent, parentInstance, context);\n\n    if (process.env.NODE_ENV !== 'production') {\n      this._updateCount = 0;\n      Host.measurer && Host.measurer.beforeMountComponent(this._mountID, this);\n    }\n\n    let currentElement = this.__currentElement;\n    let Component = currentElement.type;\n    let ref = currentElement.ref;\n    let publicProps = currentElement.props;\n    let componentPrototype = Component.prototype;\n\n    // Context process\n    let publicContext = this.__processContext(context);\n\n    // Initialize the public class\n    let instance;\n    let renderedElement;\n\n    try {\n      if (componentPrototype && componentPrototype.render) {\n        // Class Component instance\n        instance = new Component(publicProps, publicContext);\n      } else if (isFunction(Component)) {\n        // Functional reactive component with hooks\n        instance = new ReactiveComponent(Component, ref);\n      } else {\n        throwInvalidComponentError(Component);\n      }\n    } catch (e) {\n      return handleError(parentInstance, e);\n    }\n\n    // These should be set up in the constructor, but as a convenience for\n    // simpler class abstractions, we set them up after the fact.\n    instance.props = publicProps;\n    instance.context = publicContext;\n    instance.refs = {};\n\n    // Inject the updater into instance\n    instance.updater = updater;\n    instance[INTERNAL] = this;\n    this[INSTANCE] = instance;\n\n    // Init state, must be set to an object or null\n    let initialState = instance.state;\n    if (initialState === undefined) {\n      // TODO clone the state?\n      instance.state = initialState = null;\n    }\n\n    let error = null;\n    let errorCallback = (e) => {\n      error = e;\n    };\n\n    if (instance.componentWillMount) {\n      performInSandbox(() => {\n        if (process.env.NODE_ENV !== 'production') {\n          measureLifeCycle(() => {\n            instance.componentWillMount();\n          }, this._mountID, 'componentWillMount');\n        } else {\n          instance.componentWillMount();\n        }\n      }, instance, errorCallback);\n    }\n\n    if (renderedElement == null) {\n      Host.owner = this;\n      // Process pending state when call setState in componentWillMount\n      instance.state = this.__processPendingState(publicProps, publicContext);\n\n      performInSandbox(() => {\n        if (process.env.NODE_ENV !== 'production') {\n          measureLifeCycle(() => {\n            renderedElement = instance.render();\n          }, this._mountID, 'render');\n        } else {\n          renderedElement = instance.render();\n        }\n      }, instance, errorCallback);\n\n      if (process.env.NODE_ENV !== 'production') {\n        validateChildKeys(renderedElement, this.__currentElement.type);\n      }\n\n      Host.owner = null;\n    }\n\n    this[RENDERED_COMPONENT] = instantiateComponent(renderedElement);\n    this[RENDERED_COMPONENT].__mountComponent(\n      this._parent,\n      instance,\n      this.__processChildContext(context),\n      nativeNodeMounter\n    );\n\n    if (error) {\n      handleError(instance, error);\n    }\n\n    if (!currentElement.type.__forwardRef && ref) {\n      attachRef(currentElement._owner, ref, this);\n    }\n\n    if (instance.componentDidMount) {\n      performInSandbox(() => {\n        if (process.env.NODE_ENV !== 'production') {\n          measureLifeCycle(() => {\n            instance.componentDidMount();\n          }, this._mountID, 'componentDidMount');\n        } else {\n          instance.componentDidMount();\n        }\n      }, instance);\n    }\n\n    // Trigger setState callback in componentWillMount or boundary callback after rendered\n    let callbacks = this.__pendingCallbacks;\n    if (callbacks) {\n      this.__pendingCallbacks = null;\n      invokeFunctionsWithContext(callbacks, instance);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      Host.reconciler.mountComponent(this);\n      Host.measurer && Host.measurer.afterMountComponent(this._mountID);\n    }\n\n    return instance;\n  }\n\n  unmountComponent(shouldNotRemoveChild) {\n    let instance = this[INSTANCE];\n\n    // Unmounting a composite component maybe not complete mounted\n    // when throw error in component constructor stage\n    if (instance && instance.componentWillUnmount) {\n      performInSandbox(() => {\n        instance.componentWillUnmount();\n      }, instance);\n    }\n\n    if (this[RENDERED_COMPONENT] != null) {\n      let currentElement = this.__currentElement;\n      let ref = currentElement.ref;\n\n      if (!currentElement.type.__forwardRef && ref) {\n        detachRef(currentElement._owner, ref, this);\n      }\n\n      this[RENDERED_COMPONENT].unmountComponent(shouldNotRemoveChild);\n      this[RENDERED_COMPONENT] = null;\n    }\n\n    // Reset pending fields\n    // Even if this component is scheduled for another async update,\n    // it would still be ignored because these fields are reset.\n    this.__pendingStateQueue = null;\n    this.__isPendingForceUpdate = false;\n\n    this.__destoryComponent();\n  }\n\n  /**\n   * Filters the context object to only contain keys specified in\n   * `contextTypes`\n   */\n  __processContext(context) {\n    let maskedContext = {};\n    let Component = this.__currentElement.type;\n    let contextTypes = Component.contextTypes;\n\n    if (contextTypes) {\n      for (let contextName in contextTypes) {\n        maskedContext[contextName] = context[contextName];\n      }\n    }\n\n    return maskedContext;\n  }\n\n  __processChildContext(currentContext) {\n    let instance = this[INSTANCE];\n    // The getChildContext method context should be current instance\n    let childContext = instance.getChildContext && instance.getChildContext();\n    if (childContext) {\n      return assign({}, currentContext, childContext);\n    }\n\n    return currentContext;\n  }\n\n  __processPendingState(props, context) {\n    let instance = this[INSTANCE];\n    let queue = this.__pendingStateQueue;\n    if (!queue) {\n      return instance.state;\n    }\n    // Reset pending queue\n    this.__pendingStateQueue = null;\n    let nextState = assign({}, instance.state);\n    for (let i = 0; i < queue.length; i++) {\n      let partial = queue[i];\n      assign(\n        nextState,\n        isFunction(partial) ?\n          partial.call(instance, nextState, props, context) :\n          partial\n      );\n    }\n\n    return nextState;\n  }\n\n  __updateComponent(\n    prevElement,\n    nextElement,\n    prevUnmaskedContext,\n    nextUnmaskedContext\n  ) {\n    let instance = this[INSTANCE];\n\n    // Maybe update component that has already been unmounted or failed mount.\n    if (!instance) {\n      return;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      Host.measurer && Host.measurer.beforeUpdateComponent(this._mountID, this);\n    }\n\n    let willReceive;\n    let nextContext;\n    let nextProps;\n\n    // Determine if the context has changed or not\n    if (this._context === nextUnmaskedContext) {\n      nextContext = instance.context;\n    } else {\n      nextContext = this.__processContext(nextUnmaskedContext);\n      willReceive = true;\n    }\n\n    // Distinguish between a props update versus a simple state update\n    // Skip checking prop types again -- we don't read component.props to avoid\n    // warning for DOM component props in this upgrade\n    nextProps = nextElement.props;\n    if (prevElement !== nextElement) {\n      willReceive = true;\n    }\n\n    if (willReceive && instance.componentWillReceiveProps) {\n      // Calling this.setState() within componentWillReceiveProps will not trigger an additional render.\n      this.__isPendingState = true;\n      performInSandbox(() => {\n        instance.componentWillReceiveProps(nextProps, nextContext);\n      }, instance);\n      this.__isPendingState = false;\n    }\n\n    // Update refs\n    if (this.__currentElement.type.__forwardRef) {\n      instance.__prevForwardRef = prevElement.ref;\n      instance.__forwardRef = nextElement.ref;\n    } else {\n      updateRef(prevElement, nextElement, this);\n    }\n\n    // Shoud update default\n    let shouldUpdate = true;\n    let prevProps = instance.props;\n    let prevState = instance.state;\n    // TODO: could delay execution processPendingState\n    let nextState = this.__processPendingState(nextProps, nextContext);\n\n    // ShouldComponentUpdate is not called when forceUpdate is used\n    if (!this.__isPendingForceUpdate) {\n      if (instance.shouldComponentUpdate) {\n        shouldUpdate = performInSandbox(() => {\n          return instance.shouldComponentUpdate(nextProps, nextState, nextContext);\n        }, instance);\n      } else if (instance.__isPureComponent) {\n        // Pure Component\n        shouldUpdate = !shallowEqual(prevProps, nextProps) ||\n          !shallowEqual(prevState, nextState);\n      }\n    }\n\n    if (shouldUpdate) {\n      this.__isPendingForceUpdate = false;\n      // Will set `this.props`, `this.state` and `this.context`.\n      let prevContext = instance.context;\n\n      // Cannot use this.setState() in componentWillUpdate.\n      // If need to update state in response to a prop change, use componentWillReceiveProps instead.\n      if (instance.componentWillUpdate) {\n        performInSandbox(() => {\n          instance.componentWillUpdate(nextProps, nextState, nextContext);\n        }, instance);\n      }\n\n      // Replace with next\n      this.__currentElement = nextElement;\n      this._context = nextUnmaskedContext;\n      instance.props = nextProps;\n      instance.state = nextState;\n      instance.context = nextContext;\n\n      this.__updateRenderedComponent(nextUnmaskedContext);\n\n      if (instance.componentDidUpdate) {\n        performInSandbox(() => {\n          instance.componentDidUpdate(prevProps, prevState, prevContext);\n        }, instance);\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        // Calc update count.\n        this._updateCount++;\n      }\n    } else {\n      // If it's determined that a component should not update, we still want\n      // to set props and state but we shortcut the rest of the update.\n      this.__currentElement = nextElement;\n      this._context = nextUnmaskedContext;\n      instance.props = nextProps;\n      instance.state = nextState;\n      instance.context = nextContext;\n    }\n\n    // Flush setState callbacks set in componentWillReceiveProps or boundary callback\n    let callbacks = this.__pendingCallbacks;\n    if (callbacks) {\n      this.__pendingCallbacks = null;\n      invokeFunctionsWithContext(callbacks, instance);\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      Host.measurer && Host.measurer.afterUpdateComponent(this._mountID);\n      Host.reconciler.receiveComponent(this);\n    }\n  }\n\n  /**\n   * Call the component's `render` method and update the DOM accordingly.\n   */\n  __updateRenderedComponent(context) {\n    let prevRenderedComponent = this[RENDERED_COMPONENT];\n    let prevRenderedElement = prevRenderedComponent.__currentElement;\n\n    let instance = this[INSTANCE];\n    let nextRenderedElement;\n\n    Host.owner = this;\n\n    performInSandbox(() => {\n      if (process.env.NODE_ENV !== 'production') {\n        measureLifeCycle(() => {\n          nextRenderedElement = instance.render();\n        }, this._mountID, 'render');\n      } else {\n        nextRenderedElement = instance.render();\n      }\n    }, instance);\n\n    Host.owner = null;\n\n    if (shouldUpdateComponent(prevRenderedElement, nextRenderedElement)) {\n      const prevRenderedUnmaskedContext = prevRenderedComponent._context;\n      const nextRenderedUnmaskedContext = this.__processChildContext(context);\n      // If getChildContext existed and invoked when component updated that will make\n      // prevRenderedUnmaskedContext not equal nextRenderedUnmaskedContext under the tree\n      if (prevRenderedElement !== nextRenderedElement || prevRenderedUnmaskedContext !== nextRenderedUnmaskedContext) {\n        prevRenderedComponent.__updateComponent(\n          prevRenderedElement,\n          nextRenderedElement,\n          prevRenderedUnmaskedContext,\n          nextRenderedUnmaskedContext\n        );\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        Host.measurer && Host.measurer.recordOperation({\n          instanceID: this._mountID,\n          type: 'update component',\n          payload: {}\n        });\n      }\n    } else {\n      let lastNativeNode = null;\n      let prevNativeNode = prevRenderedComponent.__getNativeNode();\n      // Only prevNativeNode is empty fragment should find the prevSlibingNativeNode\n      // And current root component is fragment, but not need find the prevSlibingNativeNode when init mounting\n      if (isArray(prevNativeNode) && prevNativeNode.length === 0 && instance.__rootID == null) {\n        lastNativeNode = getPrevSiblingNativeNode(prevRenderedComponent);\n      }\n\n      prevRenderedComponent.unmountComponent(true);\n\n      this[RENDERED_COMPONENT] = instantiateComponent(nextRenderedElement);\n      this[RENDERED_COMPONENT].__mountComponent(\n        this._parent,\n        instance,\n        this.__processChildContext(context),\n        (newNativeNode, parent) => {\n          prevNativeNode = toArray(prevNativeNode);\n          newNativeNode = toArray(newNativeNode);\n\n          const driver = Host.driver;\n\n          // If the new length large then prev\n          for (let i = 0; i < newNativeNode.length; i++) {\n            let nativeNode = newNativeNode[i];\n            if (prevNativeNode[i]) {\n              driver.replaceChild(nativeNode, prevNativeNode[i]);\n            } else if (lastNativeNode) {\n              driver.insertAfter(nativeNode, lastNativeNode);\n            } else {\n              driver.appendChild(nativeNode, parent);\n            }\n            lastNativeNode = nativeNode;\n          }\n\n          // If the new length less then prev\n          for (let i = newNativeNode.length; i < prevNativeNode.length; i++) {\n            driver.removeChild(prevNativeNode[i]);\n          }\n        }\n      );\n    }\n  }\n\n  __getNativeNode() {\n    let renderedComponent = this[RENDERED_COMPONENT];\n    if (renderedComponent) {\n      return renderedComponent.__getNativeNode();\n    }\n  }\n\n  __getPublicInstance() {\n    let instance = this[INSTANCE];\n\n    // The functional components cannot be given refs\n    if (instance.__isReactiveComponent) return null;\n\n    return instance;\n  }\n}\n\nexport default CompositeComponent;\n","import Host from './host';\nimport NativeComponent from './native';\nimport Instance from './instance';\nimport toArray from '../toArray';\nimport { INSTANCE, INTERNAL, NATIVE_NODE } from '../constant';\n\n/**\n * Fragment Component\n */\nclass FragmentComponent extends NativeComponent {\n  __mountComponent(parent, parentInstance, context, nativeNodeMounter) {\n    this.__initComponent(parent, parentInstance, context);\n\n    let instance = this[INSTANCE] = {};\n    instance[INTERNAL] = this;\n\n    // Mount children\n    this.__mountChildren(this.__currentElement, context);\n\n    let fragment = this.__getNativeNode();\n\n    if (nativeNodeMounter) {\n      nativeNodeMounter(fragment, parent);\n    } else {\n      for (let i = 0; i < fragment.length; i++) {\n        Host.driver.appendChild(fragment[i], parent);\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      this.__currentElement.type = FragmentComponent;\n      Host.reconciler.mountComponent(this);\n    }\n\n    return instance;\n  }\n\n  __mountChildren(children, context) {\n    let fragment = this.__getNativeNode();\n\n    return this.__mountChildrenImpl(this._parent, children, context, (nativeNode) => {\n      nativeNode = toArray(nativeNode);\n      for (let i = 0; i < nativeNode.length; i++) {\n        fragment.push(nativeNode[i]);\n      }\n    });\n  }\n\n  unmountComponent(shouldNotRemoveChild) {\n    let nativeNode = this[NATIVE_NODE];\n\n    if (nativeNode) {\n      Instance.remove(nativeNode);\n\n      if (!shouldNotRemoveChild) {\n        for (let i = 0, l = nativeNode.length; i < l; i++) {\n          Host.driver.removeChild(nativeNode[i]);\n        }\n      }\n    }\n\n    // Do not need remove child when their parent is removed\n    this.__unmountChildren(true);\n\n    this.__destoryComponent();\n  }\n\n  __updateComponent(prevElement, nextElement, prevContext, nextContext) {\n    // Replace current element\n    this.__currentElement = nextElement;\n    this.__updateChildren(this.__currentElement, nextContext);\n\n    if (process.env.NODE_ENV !== 'production') {\n      this.__currentElement.type = FragmentComponent;\n      Host.reconciler.receiveComponent(this);\n    }\n  }\n\n  __createNativeNode() {\n    return [];\n  }\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  FragmentComponent.displayName = 'Fragment';\n}\n\nexport default FragmentComponent;\n","export default function createRef() {\n  return {\n    current: null\n  };\n}","export default function(render) {\n  render.__forwardRef = true;\n  return render;\n}","import shallowEqual from './vdom/shallowEqual';\n\nexport default function memo(type, compare) {\n  compare = compare || shallowEqual;\n\n  // Memo could composed\n  if (type.__compares) {\n    type.__compares.push(compare);\n  } else {\n    type.__compares = [compare];\n  }\n\n  return type;\n}\n","export default function Fragment(props) {\n  return props.children;\n}","import inject from './vdom/inject';\nimport Instance from './vdom/instance';\nimport { isFunction } from './types';\n\nfunction render(element, container, options, callback) {\n  // Compatible with `render(element, container, callback)`\n  if (isFunction(options)) {\n    callback = options;\n    options = null;\n  }\n\n  options = options || {};\n  // Init inject\n  inject(options);\n\n  let rootComponent = Instance.mount(element, container, options);\n  let componentInstance = rootComponent.__getPublicInstance();\n\n  if (callback) {\n    callback.call(componentInstance);\n  }\n\n  return componentInstance;\n}\n\nexport default render;\n","import Host from './host';\nimport EmptyComponent from './empty';\nimport NativeComponent from './native';\nimport TextComponent from './text';\nimport CompositeComponent from './composite';\nimport FragmentComponent from './fragment';\nimport reconciler from '../devtools/reconciler';\nimport { invokeMinifiedError } from '../error';\n\nexport default function inject({ driver, measurer }) {\n  // Inject component class\n  Host.__Empty = EmptyComponent;\n  Host.__Native = NativeComponent;\n  Host.__Text = TextComponent;\n  Host.__Fragment = FragmentComponent;\n  Host.__Composite = CompositeComponent;\n\n  // Inject render driver\n  if (!(Host.driver = driver || Host.driver)) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error('Driver not found.');\n    } else {\n      invokeMinifiedError(5);\n    }\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    // Inject devtool renderer hook\n    Host.reconciler = reconciler;\n\n    // Inject performance measurer\n    Host.measurer = measurer;\n  }\n}\n","export default '1.0.12';\n","export createElement from './createElement';\nexport createContext from './createContext';\nexport createRef from './createRef';\nexport forwardRef from './forwardRef';\nexport { useState, useContext, useEffect, useLayoutEffect, useRef, useCallback, useMemo, useReducer, useImperativeHandle } from './hooks';\nexport memo from './memo';\nexport Fragment from './fragment';\nexport render from './render';\nexport Component, { PureComponent } from './vdom/component';\nexport version from './version';\n\nimport Host from './vdom/host';\nimport Instance from './vdom/instance';\nimport Element from './vdom/element';\nimport flattenChildren from './vdom/flattenChildren';\n\nexport const shared = {\n  Host,\n  Instance,\n  Element,\n  flattenChildren\n};\n","\n    import * as Rax from './index.js';\n    if (typeof module !== 'undefined') module.exports = Rax;\n    else self.Rax = Rax;\n    "],"names":["__mountID","__isUpdating","driver","rootComponents","rootInstances","owner","Element","type","key","ref","props","_owner","isNull","obj","isFunction","isObject","isArray","array","Array","isString","string","isNumber","flattenChildren","children","result","traverseChildren","i","l","length","push","invokeMinifiedError","errCode","Error","RESERVED_PROPS","createElement","config","propName","ownerComponent","Host","hasReservedProps","childrenLength","arguments","childArray","defaultProps","undefined","invokeFunctionsWithContext","fns","context","value","call","updateCallbacks","effectCallbacks","scheduler","setTimeout","schedule","callback","flush","shift","scheduleEffect","flushEffect","hasOwnProperty","is","x","y","shallowEqual","objA","objB","keysA","Object","keys","INTERNAL","INSTANCE","NATIVE_NODE","RENDERED_COMPONENT","getCurrentInstance","getCurrentRenderingInstance","currentInstance","areInputsEqual","inputs","prevInputs","useState","initialState","hookID","getHookID","hooks","getHooks","newState","hook","eagerState","__isScheduled","__update","__shouldUpdate","useLayoutEffect","effect","useEffectImpl","defered","__create","__inputs","__prevInputs","current","immediately","__destory","didMount","willUnmount","didUpdate","useMemo","create","toArray","getNearestParent","instance","matcher","parent","__parentInstance","id","BaseComponent","element","__currentElement","__initComponent","parentInstance","_parent","_context","_mountID","__destoryComponent","this","__mountComponent","nativeNodeMounter","__mountNativeNode","unmountComponent","shouldNotRemoveChild","removeChild","__getName","currentElement","displayName","name","nativeNode","__getNativeNode","appendChild","__createNativeNode","__getPublicInstance","EmptyComponent","createEmpty","updateRef","prevElement","nextElement","component","prevRef","nextRef","detachRef","attachRef","refs","instantiateComponent","__Native","__Composite","__Text","String","__Empty","__Fragment","throwInvalidComponentError","shouldUpdateComponent","prevEmpty","nextEmpty","getElementKeyName","index","elementKey","defaultName","toString","keyName","getPrevSiblingNativeNode","__renderedChildren","__mountIndex","Component","setState","partialState","updater","forceUpdate","PureComponent","__isPureComponent","rootID","Root","__element","__rootID","__getRenderedComponent","render","set","node","get","remove","mount","container","hydrate","createBody","parentContext","renderOptions","beforeRender","parentInternal","__processChildContext","prevRootInstance","__penddingContext","rootInstance","afterRender","assign","STYLE","CHILDREN","EVENT_PREFIX_REGEXP","NativeComponent","appendType","append","__prevStyleCopy","__mountChildren","__mountChildrenImpl","renderedChildren","renderedChildrenImage","renderedChild","mountImage","__unmountChildren","Instance","__updateComponent","prevContext","nextContext","prevProps","nextProps","__updateProperties","__updateChildren","propKey","styleName","styleUpdates","lastStyle","test","eventListener","removeEventListener","slice","toLowerCase","removeAttribute","nextProp","prevProp","eventName","addEventListener","setAttribute","setStyle","nextChildrenElements","prevChildren","nextChildren","prevChild","__unmount","isFragmentParent","prevFirstChild","prevFirstNativeNode","isPrevFirstEmptyFragment","shouldUnmountPrevFirstChild","lastPlacedNode","shouldRemoveAllChildren","removeChildren","shouldUnmount","insertNodes","nativeNodes","parentNode","insertAfter","insertBefore","nextIndex","nextNativeNodes","nextChild","prevChildNativeNode","concat","TextComponent","updateText","createText","ReactiveComponent","pureRender","__isReactiveComponent","__render","__hookID","__reRenders","__hooks","__children","__contexts","state","__forwardRef","__prevForwardRef","_this","compares","__compares","shouldComponentUpdate","arePropsEqual","useContext","contextID","_contextID","contextItem","getValue","__provider","_defaultValue","provider","__getNearestParentProvider","handleContextChange","__lastValue","_this2","__on","__off","componentWillMount","componentDidMount","componentWillReceiveProps","componentDidUpdate","componentWillUnmount","__isPendingForceUpdate","dirtyComponents","getPendingCallbacks","internal","__pendingCallbacks","setPendingCallbacks","callbacks","getPendingStateQueue","__pendingStateQueue","runUpdate","prevUnmaskedContext","nextUnmaskedContext","mountOrderComparator","c1","c2","performUpdate","dirties","sort","pop","scheduleUpdate","shouldAsyncUpdate","indexOf","requestUpdate","hasComponentRendered","__isPendingState","Updater","runCallbacks","performInSandbox","fn","e","handleError","error","boundary","componentDidCatch","boundaryInternal","CompositeComponent","renderedElement","publicProps","componentPrototype","prototype","publicContext","__processContext","errorCallback","__processPendingState","maskedContext","contextTypes","contextName","currentContext","childContext","getChildContext","queue","nextState","partial","willReceive","shouldUpdate","prevState","componentWillUpdate","__updateRenderedComponent","nextRenderedElement","prevRenderedComponent","prevRenderedElement","prevRenderedUnmaskedContext","nextRenderedUnmaskedContext","lastNativeNode","prevNativeNode","newNativeNode","replaceChild","renderedComponent","FragmentComponent","fragment","defaultValue","getNearestParentProvider","__contextID","Provider","__handlers","handler","filter","h","_getChildContext","Consumer","setValue","consumer","compare","options","componentInstance","initialValue","reducer","initialArg","init","action","__actions","currentState","__eagerState","eagerReducer","__eagerReducer","next","module","exports","Rax","self"],"mappings":"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"}