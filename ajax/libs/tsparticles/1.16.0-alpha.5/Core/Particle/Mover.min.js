"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.Mover=void 0;const Utils_1=require("../../Utils"),Enums_1=require("../../Enums");class Mover{constructor(e,i){this.container=e,this.particle=i}static calcNoiseValue(e,i,t){return Math.floor(e/i)/t.value+t.offset}move(e){var i;const t=this.container,o=t.options,s=this.particle,n=s.particlesOptions;if(n.move.enable){const a=this.getProximitySpeedFactor(),l=o.fpsLimit>0?60*e/1e3:3.6,r=(null!==(i=s.moveSpeed)&&void 0!==i?i:t.retina.moveSpeed)/2*a*l,c=n.move.noise;if(c.enable)if(s.lastNoiseTime>s.noiseDelay){const e=s.position,i=c.factor,o=t.simplex,n={angle:o.noise3D(Mover.calcNoiseValue(e.x,s.size.value,i.horizontal),Mover.calcNoiseValue(e.y,s.size.value,i.horizontal),t.particles.noiseZ),length:o.noise3D(Mover.calcNoiseValue(e.x,s.size.value,i.vertical),Mover.calcNoiseValue(e.y,s.size.value,i.vertical),t.particles.noiseZ)};s.velocity.horizontal+=Math.cos(n.angle)*n.length,s.velocity.horizontal=Utils_1.Utils.clamp(s.velocity.horizontal,-1,1),s.velocity.vertical+=Math.sin(n.angle)*n.length,s.velocity.vertical=Utils_1.Utils.clamp(s.velocity.vertical,-1,1),s.lastNoiseTime-=s.noiseDelay}else s.lastNoiseTime+=e;s.position.x+=s.velocity.horizontal*r,s.position.y+=s.velocity.vertical*r,n.move.vibrate&&(s.position.x+=Math.sin(s.position.x*Math.cos(s.position.y)),s.position.y+=Math.cos(s.position.y*Math.sin(s.position.x)))}this.moveParallax(e)}moveParallax(e){const i=this.container,t=i.options;if(!t.interactivity.events.onHover.parallax.enable)return;const o=this.particle,s=t.interactivity.events.onHover.parallax.force,n=i.interactivity.mouse.position;if(!n)return;const a=window.innerHeight/2,l=window.innerWidth/2,r=t.interactivity.events.onHover.parallax.smooth,c=(n.x-l)*(o.size.value/s),v=(n.y-a)*(o.size.value/s);o.offset.x+=(c-o.offset.x)/r,o.offset.y+=(v-o.offset.y)/r}getProximitySpeedFactor(){const e=this.container,i=e.options,t=this.particle;if(!Utils_1.Utils.isInArray(Enums_1.HoverMode.slow,i.interactivity.events.onHover.mode))return 1;const o=this.container.interactivity.mouse.position;if(!o)return 1;const s=t.getPosition(),n=Utils_1.Utils.getDistance(o,s),a=e.retina.slowModeRadius;return n>a?1:(n/a||0)/i.interactivity.modes.slow.factor}}exports.Mover=Mover;