"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.Linker=void 0;const Utils_1=require("../../../../Utils");class Linker{static link(i,t,s){var l;const n=i.particlesOptions.links,o=n.opacity,e=null!==(l=i.linksDistance)&&void 0!==l?l:t.retina.linksDistance,r=t.canvas.size,a=n.warp,c=i.getPosition(),d=a?new Utils_1.CircleWarp(c.x,c.y,e,r):new Utils_1.Circle(c.x,c.y,e),p=t.particles.quadTree.query(d);for(const s of p){const l=s.particlesOptions.links;if(i===s||!l.enable||n.id!==l.id)continue;const d=s.getPosition();let p=Utils_1.Utils.getDistance(c,d);if(a&&p>e){const i={x:d.x-r.width,y:d.y};if((p=Utils_1.Utils.getDistance(c,i))>e){const i={x:d.x-r.width,y:d.y-r.height};if((p=Utils_1.Utils.getDistance(c,i))>e){const i={x:d.x,y:d.y-r.height};p=Utils_1.Utils.getDistance(c,i)}}}if(p>e)return;const U=o-p*o/e;if(U>0){const l=i.particlesOptions.links;let n=void 0!==l.id?t.particles.linksColors[l.id]:t.particles.linksColor;if(!n){const i=l.color,s="string"==typeof i?i:i.value;n=s===Utils_1.Constants.randomColorValue?l.consent?Utils_1.ColorUtils.colorToRgb({value:s}):l.blink?Utils_1.Constants.randomColorValue:Utils_1.Constants.midColorValue:Utils_1.ColorUtils.colorToRgb({value:s}),void 0!==l.id?t.particles.linksColors[l.id]=n:t.particles.linksColor=n}-1===s.links.map(i=>i.destination).indexOf(i)&&-1===i.links.map(i=>i.destination).indexOf(s)&&i.links.push({destination:s,opacity:U})}}}}exports.Linker=Linker;