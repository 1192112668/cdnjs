"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.SimplexNoise=void 0;const F3=1/3,G3=1/6,grad3=new Float32Array([1,1,0,-1,1,0,1,-1,0,-1,-1,0,1,0,1,-1,0,1,1,0,-1,-1,0,-1,0,1,1,0,-1,1,0,1,-1,0,-1,-1]),buildPermutationTable=e=>{const t=new Uint8Array(256);for(let e=0;e<256;e++)t[e]=e;for(let r=0;r<255;r++){const o=r+~~(e()*(256-r)),s=t[r];t[r]=t[o],t[o]=s}return t};class SimplexNoise{constructor(e){const t=null!=e?e:Math.random;this.p=buildPermutationTable(t),this.perm=new Uint8Array(512),this.permMod12=new Uint8Array(512);for(let e=0;e<512;e++)this.perm[e]=this.p[255&e],this.permMod12[e]=this.perm[e]%12}noise3D(e,t,r){const o=this.permMod12,s=this.perm;let i,l,a,n;const d=(e+t+r)*F3,p=Math.floor(e+d),c=Math.floor(t+d),m=Math.floor(r+d),g=(p+c+m)*G3,h=e-(p-g),f=t-(c-g),u=r-(m-g);let G,M,x,b,y,w;h>=f?f>=u?(G=1,M=0,x=0,b=1,y=1,w=0):h>=u?(G=1,M=0,x=0,b=1,y=0,w=1):(G=0,M=0,x=1,b=1,y=0,w=1):f<u?(G=0,M=0,x=1,b=0,y=1,w=1):h<u?(G=0,M=1,x=0,b=0,y=1,w=1):(G=0,M=1,x=0,b=1,y=1,w=0);const A=h-G+G3,N=f-M+G3,S=u-x+G3,F=h-b+2*G3,P=f-y+2*G3,U=u-w+2*G3,v=h-1+3*G3,T=f-1+3*G3,_=u-1+3*G3,j=255&p,D=255&c,O=255&m;let k=.6-h*h-f*f-u*u;if(k<0)i=0;else{const e=3*o[j+s[D+s[O]]];i=(k*=k)*k*(grad3[e]*h+grad3[e+1]*f+grad3[e+2]*u)}let q=.6-A*A-N*N-S*S;if(q<0)l=0;else{const e=3*o[j+G+s[D+M+s[O+x]]];l=(q*=q)*q*(grad3[e]*A+grad3[e+1]*N+grad3[e+2]*S)}let z=.6-F*F-P*P-U*U;if(z<0)a=0;else{const e=3*o[j+b+s[D+y+s[O+w]]];a=(z*=z)*z*(grad3[e]*F+grad3[e+1]*P+grad3[e+2]*U)}let B=.6-v*v-T*T-_*_;if(B<0)n=0;else{const e=3*o[j+1+s[D+1+s[O+1]]];n=(B*=B)*B*(grad3[e]*v+grad3[e+1]*T+grad3[e+2]*_)}return 32*(i+l+a+n)}}exports.SimplexNoise=SimplexNoise;