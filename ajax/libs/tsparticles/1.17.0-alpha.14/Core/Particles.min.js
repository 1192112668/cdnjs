"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.Particles=void 0;const Particle_1=require("./Particle"),Utils_1=require("../Utils"),InteractionManager_1=require("./Particle/InteractionManager");class Particles{constructor(t){this.container=t,this.array=[],this.interactionManager=new InteractionManager_1.InteractionManager(t);const i=this.container.canvas.size;this.linksColors=new Map,this.quadTree=new Utils_1.QuadTree(new Utils_1.Rectangle(0,0,i.width,i.height),4)}get count(){return this.array.length}init(){const t=this.container,i=t.options;let e=!1;for(const[,i]of t.plugins)if(void 0!==i.particlesInitialization&&(e=i.particlesInitialization()),e)break;if(!e)for(let t=this.count;t<i.particles.number.value;t++)this.addParticle();if(i.infection.enable)for(let t=0;t<i.infection.infections;t++){const t=this.array.map(t=>t.infecter).filter(t=>void 0===t.infectionStage);Utils_1.Utils.itemFromArray(t).startInfection(0)}this.interactionManager.init(),t.noise.init()}redraw(){this.clear(),this.init(),this.draw({value:0,factor:0})}removeAt(t,i){if(t>=0&&t<=this.count)for(const e of this.array.splice(t,null!=i?i:1))e.destroy()}remove(t){this.removeAt(this.array.indexOf(t))}update(t){const i=this.container,e=[];i.noise.update();for(const r of this.array){r.bubble.inRange=!1;for(const[,e]of i.plugins){if(r.destroyed)break;e.particleUpdate&&e.particleUpdate(r,t)}r.destroyed||r.update(t),r.destroyed?e.push(r):this.quadTree.insert(new Utils_1.Point(r.getPosition(),r))}for(const t of e)this.remove(t);this.interactionManager.interact(t)}draw(t){const i=this.container;i.canvas.clear();const e=this.container.canvas.size;this.quadTree=new Utils_1.QuadTree(new Utils_1.Rectangle(0,0,e.width,e.height),4),this.update(t);for(const[,e]of i.plugins)i.canvas.drawPlugin(e,t);for(const i of this.array)i.draw(t)}clear(){this.array=[]}push(t,i,e){const r=this.container,n=r.options,a=n.particles.number.limit*r.density;if(this.pushing=!0,a>0){const i=this.count+t-a;i>0&&this.removeQuantity(i)}for(let r=0;r<t;r++)this.addParticle(null==i?void 0:i.position,e);n.particles.move.enable||this.container.play(),this.pushing=!1}addParticle(t,i){try{const e=new Particle_1.Particle(this.container,t,i);return this.array.push(e),e}catch(t){return void console.log("error adding particle")}}removeQuantity(t){const i=this.container.options;this.removeAt(0,t),i.particles.move.enable||this.container.play()}}exports.Particles=Particles;