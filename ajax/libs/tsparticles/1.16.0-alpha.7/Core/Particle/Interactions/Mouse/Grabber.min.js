"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.Grabber=void 0;const Utils_1=require("../../../../Utils"),Modes_1=require("../../../../Enums/Modes");class Grabber{constructor(t){this.container=t}isEnabled(){const t=this.container,o=t.interactivity.mouse,e=t.options.interactivity.events;if(!e.onHover.enable||!o.position)return!1;const i=e.onHover.mode;return Utils_1.Utils.isInArray(Modes_1.HoverMode.grab,i)}reset(t){}interact(t){var o,e;const i=this.container,r=i.options.interactivity;if(r.events.onHover.enable&&i.interactivity.status===Utils_1.Constants.mouseMoveEvent){const t=i.interactivity.mouse.position;if(void 0===t)return;const s=i.retina.grabModeDistance,n=i.particles.quadTree.query(new Utils_1.Circle(t.x,t.y,s));for(const s of n){const n=s.getPosition(),a=Utils_1.Utils.getDistance(n,t);if(a<=i.retina.grabModeDistance){const n=r.modes.grab.links,l=n.opacity,c=l-a*l/i.retina.grabModeDistance;if(c>0){const r=null!==(o=n.color)&&void 0!==o?o:s.particlesOptions.links.color;let a;if(i.particles.grabLineColor||(i.particles.grabLineColor=r===Utils_1.Constants.randomColorValue||(null===(e=r)||void 0===e?void 0:e.value)===Utils_1.Constants.randomColorValue?Utils_1.Constants.randomColorValue:Utils_1.ColorUtils.colorToRgb(r)),void 0===(a=i.particles.grabLineColor===Utils_1.Constants.randomColorValue?Utils_1.ColorUtils.getRandomRgbColor():i.particles.grabLineColor))return;i.canvas.drawGrabLine(s,a,c,t)}}}}}}exports.Grabber=Grabber;