"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var ResizeBilinear3DProgram=function(e,t,o){this.variableNames=["A"],this.outputShape=[];var r=e[2];this.outputShape=[t[0],t[1],r];var n=o?[e[0]-1,e[1]-1,r]:e,c=o?[this.outputShape[0]-1,this.outputShape[1]-1,r]:this.outputShape;this.userCode="\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          "+n[0]/c[0]+",\n          "+n[1]/c[1]+");\n      const vec2 inputShapeRC = vec2("+e[0]+".0, "+e[1]+".0);\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        ivec2 yRC = coords.xy;\n        int d = coords.z;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    "};exports.ResizeBilinear3DProgram=ResizeBilinear3DProgram;