"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var environment_1=require("./environment"),array_ops=require("./ops/array_ops"),batchnorm=require("./ops/batchnorm"),binary_ops=require("./ops/binary_ops"),compare=require("./ops/compare"),conv=require("./ops/conv"),image_ops=require("./ops/image_ops"),logical=require("./ops/logical_ops"),lrn_ops=require("./ops/lrn"),lstm_ops=require("./ops/lstm"),matmul=require("./ops/matmul"),norm=require("./ops/norm"),ops=require("./ops/ops"),pool=require("./ops/pool"),reduction_ops=require("./ops/reduction_ops"),reverse=require("./ops/reverse"),slice=require("./ops/slice"),softmax_ops=require("./ops/softmax"),transpose=require("./ops/transpose"),unary_ops=require("./ops/unary_ops"),tracking_1=require("./tracking"),util=require("./util"),tidy=tracking_1.Tracking.tidy,keep=tracking_1.Tracking.keep,NDArrayMath=function(){function s(s,r){this.matMul=matmul.Ops.matMul,this.vectorTimesMatrix=matmul.Ops.vectorTimesMatrix,this.outerProduct=matmul.Ops.outerProduct,this.matrixTimesVector=matmul.Ops.matrixTimesVector,this.dotProduct=matmul.Ops.dotProduct,this.slice=slice.Ops.slice,this.slice1D=slice.Ops.slice1d,this.slice2D=slice.Ops.slice2d,this.slice3D=slice.Ops.slice3d,this.slice4D=slice.Ops.slice4d,this.reverse=reverse.Ops.reverse,this.reverse1D=reverse.Ops.reverse1d,this.reverse2D=reverse.Ops.reverse2d,this.reverse3D=reverse.Ops.reverse3d,this.reverse4D=reverse.Ops.reverse4d,this.batchNormalization=batchnorm.Ops.batchNormalization,this.batchNormalization2D=batchnorm.Ops.batchNormalization2d,this.batchNormalization3D=batchnorm.Ops.batchNormalization3d,this.batchNormalization4D=batchnorm.Ops.batchNormalization4d,this.avgPool=pool.Ops.avgPool,this.maxPool=pool.Ops.maxPool,this.minPool=pool.Ops.minPool,this.maxPoolBackprop=pool.Ops.maxPoolBackprop,this.conv2dTranspose=conv.Ops.conv2dTranspose,this.depthwiseConv2D=conv.Ops.depthwiseConv2d,this.conv2dDerFilter=conv.Ops.conv2dDerFilter,this.conv2dDerInput=conv.Ops.conv2dDerInput,this.argMax=reduction_ops.Ops.argMax,this.argMin=reduction_ops.Ops.argMin,this.logSumExp=reduction_ops.Ops.logSumExp,this.max=reduction_ops.Ops.max,this.mean=reduction_ops.Ops.mean,this.min=reduction_ops.Ops.min,this.moments=reduction_ops.Ops.moments,this.sum=reduction_ops.Ops.sum,this.add=binary_ops.Ops.add,this.addStrict=binary_ops.Ops.addStrict,this.div=binary_ops.Ops.div,this.divide=this.div,this.divStrict=binary_ops.Ops.divStrict,this.divideStrict=this.divStrict,this.maximum=binary_ops.Ops.maximum,this.maximumStrict=binary_ops.Ops.maximumStrict,this.minimum=binary_ops.Ops.minimum,this.minimumStrict=binary_ops.Ops.minimumStrict,this.mul=binary_ops.Ops.mul,this.multiply=this.mul,this.mulStrict=binary_ops.Ops.mulStrict,this.multiplyStrict=this.mulStrict,this.pow=binary_ops.Ops.pow,this.powStrict=binary_ops.Ops.powStrict,this.sub=binary_ops.Ops.sub,this.subtract=this.sub,this.subStrict=binary_ops.Ops.subStrict,this.logicalNot=logical.Ops.logicalNot,this.logicalAnd=logical.Ops.logicalAnd,this.logicalOr=logical.Ops.logicalOr,this.logicalXor=logical.Ops.logicalXor,this.where=logical.Ops.where,this.transpose=transpose.Ops.transpose,this.equal=compare.Ops.equal,this.equalStrict=compare.Ops.equalStrict,this.greater=compare.Ops.greater,this.greaterStrict=compare.Ops.greaterStrict,this.greaterEqual=compare.Ops.greaterEqual,this.greaterEqualStrict=compare.Ops.greaterEqualStrict,this.less=compare.Ops.less,this.lessStrict=compare.Ops.lessStrict,this.lessEqual=compare.Ops.lessEqual,this.lessEqualStrict=compare.Ops.lessEqualStrict,this.notEqual=compare.Ops.notEqual,this.notEqualStrict=compare.Ops.notEqualStrict,this.abs=unary_ops.Ops.abs,this.acos=unary_ops.Ops.acos,this.asin=unary_ops.Ops.asin,this.atan=unary_ops.Ops.atan,this.ceil=unary_ops.Ops.ceil,this.clip=unary_ops.Ops.clipByValue,this.cos=unary_ops.Ops.cos,this.cosh=unary_ops.Ops.cosh,this.elu=unary_ops.Ops.elu,this.exp=unary_ops.Ops.exp,this.floor=unary_ops.Ops.floor,this.leakyRelu=unary_ops.Ops.leakyRelu,this.log=unary_ops.Ops.log,this.neg=unary_ops.Ops.neg,this.prelu=unary_ops.Ops.prelu,this.relu=unary_ops.Ops.relu,this.selu=unary_ops.Ops.selu,this.sigmoid=unary_ops.Ops.sigmoid,this.sin=unary_ops.Ops.sin,this.sinh=unary_ops.Ops.sinh,this.sqrt=unary_ops.Ops.sqrt,this.square=unary_ops.Ops.square,this.step=unary_ops.Ops.step,this.tan=unary_ops.Ops.tan,this.tanh=unary_ops.Ops.tanh,this.norm=norm.Ops.norm,this.basicLSTMCell=lstm_ops.Ops.basicLSTMCell,this.multiRNNCell=lstm_ops.Ops.multiRNNCell,this.softmax=softmax_ops.Ops.softmax,this.softmaxCrossEntropy=softmax_ops.Ops.softmaxCrossEntropy,this.cast=array_ops.Ops.cast,this.clone=array_ops.Ops.clone,this.gather=array_ops.Ops.gather,this.reshape=array_ops.Ops.reshape,this.tile=array_ops.Ops.tile,this.oneHot=array_ops.Ops.oneHot,this.multinomial=array_ops.Ops.multinomial,this.pad1D=array_ops.Ops.pad1d,this.pad2D=array_ops.Ops.pad2d,this.resizeBilinear3D=image_ops.Ops.resizeBilinear,this.localResponseNormalization3D=lrn_ops.LRN.localResponseNormalization,this.localResponseNormalization4D=lrn_ops.LRN.localResponseNormalization,this.keep=tracking_1.Tracking.keep,environment_1.ENV.setMath(this,s,r),this.engine=environment_1.ENV.engine,this.dispose=environment_1.ENV.engine.dispose.bind(environment_1.ENV.engine),this.registeredVariables=environment_1.ENV.engine.registeredVariables,this.startScope=environment_1.ENV.engine.startScope.bind(environment_1.ENV.engine),this.endScope=environment_1.ENV.engine.endScope.bind(environment_1.ENV.engine)}return s.prototype.scope=function(s){function r(s){return keep(s)}function t(s){return s}return tidy(function(){return s(r,t)})},s.prototype.track=function(s){return s},s.prototype.topK=function(s,r){var t,i;return util.assert(r<=s.size,"Error in topK: k value ("+r+") must be less than size of input tensor, got shape "+s.shape+"."),tidy("topK",function(){return t=environment_1.ENV.engine.executeKernel("TopKValues",{inputs:{x:s},args:{k:r}}),i=environment_1.ENV.engine.executeKernel("TopKIndices",{inputs:{x:s},args:{k:r}}),t}),{values:t,indices:i}},s.prototype.elementWiseMul=function(s,r){return s.mulStrict(r)},s.prototype.scalarDividedByArray=function(s,r){return util.assert(1===s.size,"Error in scalarDividedByArray: first argument must be rank 0, but got Tensor of rank "+s.rank+"."),s.div(r)},s.prototype.arrayDividedByScalar=function(s,r){return util.assert(1===r.size,"Error in arrayDividedByScalar: second argument must be rank 0, but got Tensor of rank "+r.rank+"."),s.div(r)},s.prototype.switchDim=function(s,r){return ops.transpose(s,r)},s.prototype.scalarPlusArray=function(s,r){return util.assert(1===s.size,"Error in scalarPlusArray: first argument must be rank 0, but got rank "+s.rank+"."),this.add(s,r)},s.prototype.scalarMinusArray=function(s,r){return util.assert(1===s.size,"Error in scalarMinusArray: first argument must be rank 0, but got rank "+s.rank+"."),this.subtract(s,r)},s.prototype.arrayMinusScalar=function(s,r){return util.assert(1===r.size,"Error in arrayMinusScalar: second argument must be rank 0, but got rank "+r.rank+"."),this.subtract(s,r)},s.prototype.scaledArrayAdd=function(s,r,t,i){var e=this;return util.assert(1===s.size,"Error in scaledArrayAdd: first argument must rank 0, but got  rank "+s.rank+"."),util.assert(1===t.size,"Error in scaledArrayAdd: third argument must be rank 0, but got Tensor of rank "+t.rank+"."),util.assertShapesMatch(r.shape,i.shape,"Error in scaledArrayAdd: "),tidy("scaledArrayAdd",function(){return e.add(e.multiply(s,r),e.multiply(t,i))})},s.prototype.scalarTimesArray=function(s,r){return util.assert(1===s.size,"Error in arrayDividedByScalar: first argument must be rank 0, but got rank "+s.rank+"."),this.multiply(s,r)},s.prototype.concat=function(s,r,t){return ops.concat([s,r],t)},s.prototype.concat1D=function(s,r){return ops.concat1d([s,r])},s.prototype.concat2D=function(s,r,t){return ops.concat2d([s,r],t)},s.prototype.concat3D=function(s,r,t){return ops.concat3d([s,r],t)},s.prototype.concat4D=function(s,r,t){return ops.concat4d([s,r],t)},s.prototype.conv1d=function(s,r,t,i,e,o){return null!=t&&util.assert(1===t.rank,"Error in conv1d: bias must be rank 1, but got rank "+t.rank+"."),ops.conv1d(s,r,i,e,o).add(t)},s.prototype.conv2d=function(s,r,t,i,e,o){return null!=t&&util.assert(1===t.rank,"Error in conv2d: bias must be rank 1, but got rank "+t.rank+"."),ops.conv2d(s,r,i,e,o).add(t)},s.prototype.argMaxEquals=function(s,r){return util.assertShapesMatch(s.shape,r.shape,"Error in argMaxEquals: "),s.argMax().equal(r.argMax())},s}();exports.NDArrayMath=NDArrayMath;