"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var ops=require("../ops/ops"),tensor_1=require("../tensor"),util=require("../util");function executeKernel(r,n,i){if("MatMul"===n){var t=i;return r.matMul(t.inputs.a,t.inputs.b,t.args.transposeA,t.args.transposeB)}if("Slice1D"===n){t=i;return r.slice1D(t.inputs.x,t.args.begin,t.args.size)}if("Slice2D"===n){t=i;return r.slice2D(t.inputs.x,t.args.begin,t.args.size)}if("Slice3D"===n){t=i;return r.slice3D(t.inputs.x,t.args.begin,t.args.size)}if("Slice4D"===n){t=i;return r.slice4D(t.inputs.x,t.args.begin,t.args.size)}if("Reverse4D"===n){t=i;return r.reverse4D(t.inputs.x,t.args.axis)}if("Concat"===n){t=i;return r.concat(t.inputs.a,t.inputs.b)}if("Neg"===n){t=i;return r.neg(t.inputs.x)}if("Add"===n){t=i;return r.add(t.inputs.a,t.inputs.b)}if("Sub"===n){t=i;return r.subtract(t.inputs.a,t.inputs.b)}if("Mul"===n){t=i;return r.multiply(t.inputs.a,t.inputs.b)}if("Div"===n){t=i;return r.divide(t.inputs.a,t.inputs.b)}if("Sum"===n){t=i;return r.sum(t.inputs.x,t.args.axes)}if("ArgMax"===n){t=i;return r.argMax(t.inputs.x,t.args.axes)}if("ArgMin"===n){t=i;return r.argMin(t.inputs.x,t.args.axes)}if("Equal"===n){t=i;return r.equal(t.inputs.a,t.inputs.b)}if("NotEqual"===n){t=i;return r.notEqual(t.inputs.a,t.inputs.b)}if("Less"===n){t=i;return r.less(t.inputs.a,t.inputs.b)}if("LessEqual"===n){t=i;return r.lessEqual(t.inputs.a,t.inputs.b)}if("Greater"===n){t=i;return r.greater(t.inputs.a,t.inputs.b)}if("GreaterEqual"===n){t=i;return r.greaterEqual(t.inputs.a,t.inputs.b)}if("LogicalNot"===n){t=i;return r.logicalNot(t.inputs.x)}if("LogicalAnd"===n){t=i;return r.logicalAnd(t.inputs.a,t.inputs.b)}if("LogicalOr"===n){t=i;return r.logicalOr(t.inputs.a,t.inputs.b)}if("LogicalXor"===n){t=i;return r.logicalXor(t.inputs.a,t.inputs.b)}if("Where"===n){t=i;return r.where(t.inputs.condition,t.inputs.a,t.inputs.b,t.args.dtype)}if("TopKValues"===n){t=i;return r.topKValues(t.inputs.x,t.args.k)}if("TopKIndices"===n){t=i;return r.topKIndices(t.inputs.x,t.args.k)}if("Min"===n){t=i;return r.min(t.inputs.x,t.args.axes)}if("Minimum"===n){t=i;return r.minimum(t.inputs.a,t.inputs.b)}if("Max"===n){t=i;return r.max(t.inputs.x,t.args.axes)}if("Maximum"===n){t=i;return r.maximum(t.inputs.a,t.inputs.b)}if("Ceil"===n){t=i;return r.ceil(t.inputs.x)}if("Floor"===n){t=i;return r.floor(t.inputs.x)}if("Pow"===n){t=i;return r.pow(t.inputs.base,t.inputs.exp)}if("Exp"===n){t=i;return r.exp(t.inputs.x)}if("Log"===n){t=i;return r.log(t.inputs.x)}if("Sqrt"===n){t=i;return r.sqrt(t.inputs.x)}if("Square"===n){t=i;return r.square(t.inputs.x)}if("Relu"===n){t=i;return r.relu(t.inputs.x)}if("Reshape"===n){var e=(t=i).inputs.x,s=t.args.newShape;return tensor_1.Tensor.make(s,{dataId:e.dataId},e.dtype)}if("Cast"===n){var e=(t=i).inputs.x,u=t.args.newDType;if(!util.hasEncodingLoss(e.dtype,u))return tensor_1.Tensor.make(e.shape,{dataId:e.dataId},u);if("int32"===u)return r.int(e);if("bool"===u)return r.notEqual(e,ops.scalar(0,e.dtype));throw new Error("Error in Cast: unknown dtype argument ("+u+")")}if("LeakyRelu"===n){t=i;return r.leakyRelu(t.inputs.x,t.args.alpha)}if("PReLU"===n){t=i;return r.prelu(t.inputs.x,t.inputs.alpha)}if("PReLUDer"===n){t=i;return r.preluDer(t.inputs.x,t.inputs.alpha)}if("Elu"===n){t=i;return r.elu(t.inputs.x)}if("EluDer"===n){t=i;return r.eluDer(t.inputs.x)}if("Selu"===n){t=i;return r.selu(t.inputs.x)}if("Abs"===n){t=i;return r.abs(t.inputs.x)}if("Sigmoid"===n){t=i;return r.sigmoid(t.inputs.x)}if("Step"===n){t=i;return r.step(t.inputs.x,t.args.alpha)}if("Sin"===n){t=i;return r.sin(t.inputs.x)}if("Cos"===n){t=i;return r.cos(t.inputs.x)}if("Tan"===n){t=i;return r.tan(t.inputs.x)}if("Asin"===n){t=i;return r.asin(t.inputs.x)}if("Acos"===n){t=i;return r.acos(t.inputs.x)}if("Atan"===n){t=i;return r.atan(t.inputs.x)}if("Sinh"===n){t=i;return r.sinh(t.inputs.x)}if("Cosh"===n){t=i;return r.cosh(t.inputs.x)}if("Tanh"===n){t=i;return r.tanh(t.inputs.x)}if("Clip"===n){t=i;return r.clip(t.inputs.x,t.args.min,t.args.max)}if("Tile"===n){t=i;return r.tile(t.inputs.x,t.args.reps)}if("Gather"===n){t=i;return r.gather(t.inputs.x,t.inputs.indices,t.args.axis)}if("Pad1D"===n){t=i;return r.pad1D(t.inputs.x,t.args.paddings,t.args.constantValue)}if("Pad2D"===n){t=i;return r.pad2D(t.inputs.x,t.args.paddings,t.args.constantValue)}if("Transpose"===n){t=i;return r.transpose(t.inputs.x,t.args.perm)}if("Conv2D"===n){t=i;return r.conv2d(t.inputs.x,t.inputs.filter,t.args.convInfo)}if("Conv2DDerInput"===n){t=i;return r.conv2dDerInput(t.inputs.dy,t.inputs.filter,t.args.convInfo)}if("Conv2DDerFilter"===n){t=i;return r.conv2dDerFilter(t.inputs.x,t.inputs.dy,t.args.convInfo)}if("DepthwiseConv2D"===n){t=i;return r.depthwiseConv2D(t.inputs.x,t.inputs.filter,t.args.convInfo)}if("MaxPool"===n){t=i;return r.maxPool(t.inputs.x,t.args.convInfo)}if("MaxPoolBackprop"===n){t=i;return r.maxPoolBackprop(t.inputs.dy,t.inputs.x,t.args.convInfo)}if("AvgPool"===n){t=i;return r.avgPool(t.inputs.x,t.args.convInfo)}if("AvgPoolBackprop"===n){t=i;return r.avgPoolBackprop(t.inputs.dy,t.inputs.x,t.args.convInfo)}if("MinPool"===n){t=i;return r.minPool(t.inputs.x,t.args.convInfo)}if("ResizeBilinear"===n){t=i;return r.resizeBilinear(t.inputs.x,t.args.newHeight,t.args.newWidth,t.args.alignCorners)}if("BatchNorm4D"===n){t=i;return r.batchNormalization4D(t.inputs.x,t.inputs.mean,t.inputs.variance,t.args.varianceEpsilon,t.inputs.scale,t.inputs.offset)}if("LRN4D"===n){t=i;return r.localResponseNormalization4D(t.inputs.x,t.args.radius,t.args.bias,t.args.alpha,t.args.beta,t.args.normRegion)}if("Multinomial"===n){t=i;return r.multinomial(t.inputs.probs,t.args.numSamples,t.args.seed)}if("OneHot"!==n)throw new Error("No backend method found for kernel "+n);t=i;return r.oneHot(t.inputs.indices,t.args.depth,t.args.onValue,t.args.offValue)}exports.executeKernel=executeKernel;