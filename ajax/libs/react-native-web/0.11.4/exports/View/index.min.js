function _inheritsLoose(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}import applyLayout from"../../modules/applyLayout";import applyNativeMethods from"../../modules/applyNativeMethods";import{bool}from"prop-types";import createElement from"../createElement";import css from"../StyleSheet/css";import filterSupportedProps from"./filterSupportedProps";import invariant from"fbjs/lib/invariant";import warning from"fbjs/lib/warning";import StyleSheet from"../StyleSheet";import ViewPropTypes from"./ViewPropTypes";import React,{Component}from"react";var calculateHitSlopStyle=function(e){var t={};for(var o in e)if(e.hasOwnProperty(o)){var r=e[o];t[o]=r>0?-1*r:0}return t},View=function(e){function t(){return e.apply(this,arguments)||this}return _inheritsLoose(t,e),t.prototype.render=function(){var e=this.props.hitSlop,t=filterSupportedProps(this.props);"production"!==process.env.NODE_ENV&&(warning(null==this.props.className,'Using the "className" prop on <View> is deprecated.'),React.Children.toArray(this.props.children).forEach(function(e){invariant("string"!=typeof e,"Unexpected text node: "+e+". A text node cannot be a child of a <View>.")}));var o=this.context.isInAParentText;if(t.classList=[this.props.className,classes.view],t.style=StyleSheet.compose(o&&styles.inline,this.props.style),e){var r=calculateHitSlopStyle(e),i=createElement("span",{classList:[classes.hitSlop],style:r});t.children=React.Children.toArray([i,t.children])}return createElement("div",t)},t}(Component);View.displayName="View",View.contextTypes={isInAParentText:bool},View.propTypes="production"!==process.env.NODE_ENV?ViewPropTypes:{};var classes=css.create({view:{alignItems:"stretch",border:"0 solid black",boxSizing:"border-box",display:"flex",flexBasis:"auto",flexDirection:"column",flexShrink:0,margin:0,minHeight:0,minWidth:0,padding:0,position:"relative",zIndex:0},hitSlop:{position:"absolute",top:0,left:0,right:0,bottom:0,zIndex:-1}}),styles=StyleSheet.create({inline:{display:"inline-flex"}});export default applyLayout(applyNativeMethods(View));