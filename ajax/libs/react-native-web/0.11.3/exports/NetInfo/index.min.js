import ExecutionEnvironment from"fbjs/lib/ExecutionEnvironment";import findIndex from"array-find-index";import invariant from"fbjs/lib/invariant";var connection=ExecutionEnvironment.canUseDOM&&(window.navigator.connection||window.navigator.mozConnection||window.navigator.webkitConnection),getConnectionInfoObject=function(){var n={effectiveType:"unknown",type:"unknown"};if(!connection)return n;for(var e in connection){var t=connection[e];"function"!=typeof t&&null!=t&&(n[e]=t)}return n},eventTypesMap={change:"change",connectionChange:"change"},eventTypes=Object.keys(eventTypesMap),connectionListeners=[],netInfoListeners=[],NetInfo={addEventListener:function(n,e){if(invariant(-1!==eventTypes.indexOf(n),'Trying to subscribe to unknown event: "%s"',n),"change"===n&&console.warn("Listening to event `change` is deprecated. Use `connectionChange` instead."),!connection)return console.error("Network Connection API is not supported. Not listening for connection type changes."),{remove:function(){}};var t=function(){return e(getConnectionInfoObject())};return netInfoListeners.push([e,t]),connection.addEventListener(eventTypesMap[n],t),{remove:function(){return NetInfo.removeEventListener(eventTypesMap[n],e)}}},removeEventListener:function(n,e){invariant(-1!==eventTypes.indexOf(n),'Trying to unsubscribe from unknown event: "%s"',n),"change"===n&&console.warn("Listening to event `change` is deprecated. Use `connectionChange` instead.");var t=findIndex(netInfoListeners,function(n){return n[0]===e});invariant(-1!==t,"Trying to remove NetInfo listener for unregistered handler");var o=netInfoListeners[t][1];connection.removeEventListener(eventTypesMap[n],o),netInfoListeners.splice(t,1)},fetch:function(){return console.warn("`fetch` is deprecated. Use `getConnectionInfo` instead."),new Promise(function(n,e){try{n(connection.type)}catch(e){n("unknown")}})},getConnectionInfo:function(){return new Promise(function(n,e){n(getConnectionInfoObject())})},isConnected:{addEventListener:function(n,e){invariant(-1!==eventTypes.indexOf(n),'Trying to subscribe to unknown event: "%s"',n),"change"===n&&console.warn("Listening to event `change` is deprecated. Use `connectionChange` instead.");var t=function(){return e(!0)},o=function(){return e(!1)};return connectionListeners.push([e,t,o]),window.addEventListener("online",t,!1),window.addEventListener("offline",o,!1),{remove:function(){return NetInfo.isConnected.removeEventListener(eventTypesMap[n],e)}}},removeEventListener:function(n,e){invariant(-1!==eventTypes.indexOf(n),'Trying to subscribe to unknown event: "%s"',n),"change"===n&&console.warn("Listening to event `change` is deprecated. Use `connectionChange` instead.");var t=findIndex(connectionListeners,function(n){return n[0]===e});invariant(-1!==t,"Trying to remove NetInfo connection listener for unregistered handler");var o=connectionListeners[t],i=o[1],r=o[2];window.removeEventListener("online",i,!1),window.removeEventListener("offline",r,!1),connectionListeners.splice(t,1)},fetch:function(){return new Promise(function(n,e){try{n(window.navigator.onLine)}catch(e){n(!0)}})}}};export default NetInfo;