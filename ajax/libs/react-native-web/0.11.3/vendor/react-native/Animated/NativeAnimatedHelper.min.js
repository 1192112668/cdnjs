"use strict";import invariant from"fbjs/lib/invariant";import NativeModules from"../../../exports/NativeModules";import NativeEventEmitter from"../NativeEventEmitter";var nativeEventEmitter,NativeAnimatedModule=NativeModules.NativeAnimatedModule,__nativeAnimatedNodeTagCount=1,__nativeAnimationIdCount=1,API={createAnimatedNode:function(e,t){assertNativeAnimatedModule(),NativeAnimatedModule.createAnimatedNode(e,t)},startListeningToAnimatedNodeValue:function(e){assertNativeAnimatedModule(),NativeAnimatedModule.startListeningToAnimatedNodeValue(e)},stopListeningToAnimatedNodeValue:function(e){assertNativeAnimatedModule(),NativeAnimatedModule.stopListeningToAnimatedNodeValue(e)},connectAnimatedNodes:function(e,t){assertNativeAnimatedModule(),NativeAnimatedModule.connectAnimatedNodes(e,t)},disconnectAnimatedNodes:function(e,t){assertNativeAnimatedModule(),NativeAnimatedModule.disconnectAnimatedNodes(e,t)},startAnimatingNode:function(e,t,a,i){assertNativeAnimatedModule(),NativeAnimatedModule.startAnimatingNode(e,t,a,i)},stopAnimation:function(e){assertNativeAnimatedModule(),NativeAnimatedModule.stopAnimation(e)},setAnimatedNodeValue:function(e,t){assertNativeAnimatedModule(),NativeAnimatedModule.setAnimatedNodeValue(e,t)},setAnimatedNodeOffset:function(e,t){assertNativeAnimatedModule(),NativeAnimatedModule.setAnimatedNodeOffset(e,t)},flattenAnimatedNodeOffset:function(e){assertNativeAnimatedModule(),NativeAnimatedModule.flattenAnimatedNodeOffset(e)},extractAnimatedNodeOffset:function(e){assertNativeAnimatedModule(),NativeAnimatedModule.extractAnimatedNodeOffset(e)},connectAnimatedNodeToView:function(e,t){assertNativeAnimatedModule(),NativeAnimatedModule.connectAnimatedNodeToView(e,t)},disconnectAnimatedNodeFromView:function(e,t){assertNativeAnimatedModule(),NativeAnimatedModule.disconnectAnimatedNodeFromView(e,t)},dropAnimatedNode:function(e){assertNativeAnimatedModule(),NativeAnimatedModule.dropAnimatedNode(e)},addAnimatedEventToView:function(e,t,a){assertNativeAnimatedModule(),NativeAnimatedModule.addAnimatedEventToView(e,t,a)},removeAnimatedEventFromView:function(e,t,a){assertNativeAnimatedModule(),NativeAnimatedModule.removeAnimatedEventFromView(e,t,a)}},STYLES_WHITELIST={opacity:!0,transform:!0,shadowOpacity:!0,shadowRadius:!0,scaleX:!0,scaleY:!0,translateX:!0,translateY:!0},TRANSFORM_WHITELIST={translateX:!0,translateY:!0,scale:!0,scaleX:!0,scaleY:!0,rotate:!0,rotateX:!0,rotateY:!0,perspective:!0},SUPPORTED_INTERPOLATION_PARAMS={inputRange:!0,outputRange:!0,extrapolate:!0,extrapolateRight:!0,extrapolateLeft:!0};function addWhitelistedStyleProp(e){STYLES_WHITELIST[e]=!0}function addWhitelistedTransformProp(e){TRANSFORM_WHITELIST[e]=!0}function addWhitelistedInterpolationParam(e){SUPPORTED_INTERPOLATION_PARAMS[e]=!0}function validateTransform(e){e.forEach(function(e){if(!TRANSFORM_WHITELIST.hasOwnProperty(e.property))throw new Error("Property '"+e.property+"' is not supported by native animated module")})}function validateStyles(e){for(var t in e)if(!STYLES_WHITELIST.hasOwnProperty(t))throw new Error("Style property '"+t+"' is not supported by native animated module")}function validateInterpolation(e){for(var t in e)if(!SUPPORTED_INTERPOLATION_PARAMS.hasOwnProperty(t))throw new Error("Interpolation property '"+t+"' is not supported by native animated module")}function generateNewNodeTag(){return __nativeAnimatedNodeTagCount++}function generateNewAnimationId(){return __nativeAnimationIdCount++}function assertNativeAnimatedModule(){invariant(NativeAnimatedModule,"Native animated module is not available")}var _warnedMissingNativeAnimated=!1;function shouldUseNativeDriver(e){return e.useNativeDriver&&!NativeAnimatedModule?(_warnedMissingNativeAnimated||(console.warn("Animated: `useNativeDriver` is not supported because the native animated module is missing. Falling back to JS-based animation. To resolve this, add `RCTAnimation` module to this app, or remove `useNativeDriver`. More info: https://github.com/facebook/react-native/issues/11094#issuecomment-263240420"),_warnedMissingNativeAnimated=!0),!1):e.useNativeDriver||!1}var NativeAnimatedHelper={API:API,addWhitelistedStyleProp:addWhitelistedStyleProp,addWhitelistedTransformProp:addWhitelistedTransformProp,addWhitelistedInterpolationParam:addWhitelistedInterpolationParam,validateStyles:validateStyles,validateTransform:validateTransform,validateInterpolation:validateInterpolation,generateNewNodeTag:generateNewNodeTag,generateNewAnimationId:generateNewAnimationId,assertNativeAnimatedModule:assertNativeAnimatedModule,shouldUseNativeDriver:shouldUseNativeDriver,get nativeEventEmitter(){return nativeEventEmitter||(nativeEventEmitter=new NativeEventEmitter(NativeAnimatedModule)),nativeEventEmitter}};export{API,addWhitelistedStyleProp,addWhitelistedTransformProp,addWhitelistedInterpolationParam,validateStyles,validateTransform,validateInterpolation,generateNewNodeTag,generateNewAnimationId,assertNativeAnimatedModule,shouldUseNativeDriver};export default NativeAnimatedHelper;