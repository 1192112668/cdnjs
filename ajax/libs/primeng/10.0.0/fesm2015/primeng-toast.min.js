import{EventEmitter,Component,ViewEncapsulation,ChangeDetectionStrategy,NgZone,Input,Output,ViewChild,ChangeDetectorRef,ContentChildren,NgModule}from"@angular/core";import{CommonModule}from"@angular/common";import{DomHandler}from"primeng/dom";import{MessageService,PrimeTemplate,SharedModule}from"primeng/api";import{RippleModule}from"primeng/ripple";import{trigger,state,style,transition,animate,query,animateChild}from"@angular/animations";class ToastItem{constructor(t){this.zone=t,this.onClose=new EventEmitter}ngAfterViewInit(){this.initTimeout()}initTimeout(){this.message.sticky||this.zone.runOutsideAngular(()=>{this.timeout=setTimeout(()=>{this.onClose.emit({index:this.index,message:this.message})},this.message.life||3e3)})}clearTimeout(){this.timeout&&(clearTimeout(this.timeout),this.timeout=null)}onMouseEnter(){this.clearTimeout()}onMouseLeave(){this.initTimeout()}onCloseIconClick(t){this.clearTimeout(),this.onClose.emit({index:this.index,message:this.message}),t.preventDefault()}ngOnDestroy(){this.clearTimeout()}}ToastItem.decorators=[{type:Component,args:[{selector:"p-toastItem",template:'\n        <div #container [attr.id]="message.id" class="p-toast-message" [ngClass]="\'p-toast-message-\' + message.severity" [@messageState]="{value: \'visible\', params: {showTransformParams: showTransformOptions, hideTransformParams: hideTransformOptions, showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}"\n                (mouseenter)="onMouseEnter()" (mouseleave)="onMouseLeave()">\n            <div class="p-toast-message-content" role="alert" aria-live="assertive" aria-atomic="true">\n                <ng-container *ngIf="!template">\n                    <span class="p-toast-message-icon pi" [ngClass]="{\'pi-info-circle\': message.severity == \'info\', \'pi-exclamation-triangle\': message.severity == \'warn\',\n                        \'pi-times-circle\': message.severity == \'error\', \'pi-check\' :message.severity == \'success\'}"></span>\n                    <div class="p-toast-message-text">\n                        <div class="p-toast-summary">{{message.summary}}</div>\n                        <div class="p-toast-detail">{{message.detail}}</div>\n                    </div>\n                </ng-container>\n                <button type="button" class="p-toast-icon-close p-link" (click)="onCloseIconClick($event)" (keydown.enter)="onCloseIconClick($event)" *ngIf="message.closable !== false" pRipple>\n                    <span class="p-toast-icon-close-icon pi pi-times"></span>\n                </button>\n                <ng-container *ngTemplateOutlet="template; context: {$implicit: message}"></ng-container>\n            </div>\n        </div>\n    ',animations:[trigger("messageState",[state("visible",style({transform:"translateY(0)",opacity:1})),transition("void => *",[style({transform:"{{showTransformParams}}",opacity:0}),animate("{{showTransitionParams}}")]),transition("* => void",[animate("{{hideTransitionParams}}",style({height:0,opacity:0,transform:"{{hideTransformParams}}"}))])])],encapsulation:ViewEncapsulation.None,changeDetection:ChangeDetectionStrategy.OnPush}]}],ToastItem.ctorParameters=(()=>[{type:NgZone}]),ToastItem.propDecorators={message:[{type:Input}],index:[{type:Input}],template:[{type:Input}],showTransformOptions:[{type:Input}],hideTransformOptions:[{type:Input}],showTransitionOptions:[{type:Input}],hideTransitionOptions:[{type:Input}],onClose:[{type:Output}],containerViewChild:[{type:ViewChild,args:["container"]}]};class Toast{constructor(t,e){this.messageService=t,this.cd=e,this.autoZIndex=!0,this.baseZIndex=0,this.position="top-right",this.preventOpenDuplicates=!1,this.preventDuplicates=!1,this.showTransformOptions="translateY(100%)",this.hideTransformOptions="translateY(-100%)",this.showTransitionOptions="300ms ease-out",this.hideTransitionOptions="250ms ease-in",this.onClose=new EventEmitter}ngOnInit(){this.messageSubscription=this.messageService.messageObserver.subscribe(t=>{if(t)if(t instanceof Array){const e=t.filter(t=>this.canAdd(t));this.add(e)}else this.canAdd(t)&&this.add([t])}),this.clearSubscription=this.messageService.clearObserver.subscribe(t=>{t?this.key===t&&(this.messages=null):this.messages=null,this.cd.markForCheck()})}add(t){this.messages=this.messages?[...this.messages,...t]:[...t],this.preventDuplicates&&(this.messagesArchieve=this.messagesArchieve?[...this.messagesArchieve,...t]:[...t]),this.cd.markForCheck()}canAdd(t){let e=this.key===t.key;return e&&this.preventOpenDuplicates&&(e=!this.containsMessage(this.messages,t)),e&&this.preventDuplicates&&(e=!this.containsMessage(this.messagesArchieve,t)),e}containsMessage(t,e){return!!t&&null!=t.find(t=>t.summary===e.summary&&t.detail==e.detail&&t.severity===e.severity)}ngAfterContentInit(){this.templates.forEach(t=>{switch(t.getType()){case"message":default:this.template=t.template}})}onMessageClose(t){this.messages.splice(t.index,1),this.onClose.emit({message:t.message}),this.cd.detectChanges()}onAnimationStart(t){"void"===t.fromState&&this.autoZIndex&&(this.containerViewChild.nativeElement.style.zIndex=String(this.baseZIndex+ ++DomHandler.zindex))}ngOnDestroy(){this.messageSubscription&&this.messageSubscription.unsubscribe(),this.clearSubscription&&this.clearSubscription.unsubscribe()}}Toast.decorators=[{type:Component,args:[{selector:"p-toast",template:'\n        <div #container [ngClass]="\'p-toast p-component p-toast-\' + position" [ngStyle]="style" [class]="styleClass">\n            <p-toastItem *ngFor="let msg of messages; let i=index" [message]="msg" [index]="i" (onClose)="onMessageClose($event)"\n                    [template]="template" @toastAnimation (@toastAnimation.start)="onAnimationStart($event)" \n                    [showTransformOptions]="showTransformOptions" [hideTransformOptions]="hideTransformOptions" \n                    [showTransitionOptions]="showTransitionOptions" [hideTransitionOptions]="hideTransitionOptions"></p-toastItem>\n        </div>\n    ',animations:[trigger("toastAnimation",[transition(":enter, :leave",[query("@*",animateChild())])])],changeDetection:ChangeDetectionStrategy.OnPush,encapsulation:ViewEncapsulation.None,styles:[".p-toast{position:fixed;width:25rem}.p-toast-message{overflow:hidden}.p-toast-message-content{-ms-flex-align:start;align-items:flex-start;display:-ms-flexbox;display:flex}.p-toast-message-text{-ms-flex:1 1 auto;flex:1 1 auto}.p-toast-top-right{right:20px;top:20px}.p-toast-top-left{left:20px;top:20px}.p-toast-bottom-left{bottom:20px;left:20px}.p-toast-bottom-right{bottom:20px;right:20px}.p-toast-top-center{left:50%;margin-left:-10em;top:20px}.p-toast-bottom-center{bottom:20px;left:50%;margin-left:-10em}.p-toast-center{-ms-transform:translate(-50%,-50%);left:50%;min-width:20vw;top:50%;transform:translate(-50%,-50%)}.p-toast-icon-close{-ms-flex-align:center;-ms-flex-pack:center;align-items:center;display:-ms-flexbox;display:flex;justify-content:center;overflow:hidden;position:relative}.p-toast-icon-close.p-link{cursor:pointer}"]}]}],Toast.ctorParameters=(()=>[{type:MessageService},{type:ChangeDetectorRef}]),Toast.propDecorators={key:[{type:Input}],autoZIndex:[{type:Input}],baseZIndex:[{type:Input}],style:[{type:Input}],styleClass:[{type:Input}],position:[{type:Input}],preventOpenDuplicates:[{type:Input}],preventDuplicates:[{type:Input}],showTransformOptions:[{type:Input}],hideTransformOptions:[{type:Input}],showTransitionOptions:[{type:Input}],hideTransitionOptions:[{type:Input}],onClose:[{type:Output}],containerViewChild:[{type:ViewChild,args:["container"]}],templates:[{type:ContentChildren,args:[PrimeTemplate]}]};class ToastModule{}ToastModule.decorators=[{type:NgModule,args:[{imports:[CommonModule,RippleModule],exports:[Toast,SharedModule],declarations:[Toast,ToastItem]}]}];export{Toast,ToastItem,ToastModule};