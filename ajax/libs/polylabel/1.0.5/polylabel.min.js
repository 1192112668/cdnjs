"use strict";var Queue=require("tinyqueue");function polylabel(e,t,l){var n,r,o,u;t=t||1;for(var a=0;a<e[0].length;a++){var i=e[0][a];(!a||i[0]<n)&&(n=i[0]),(!a||i[1]<r)&&(r=i[1]),(!a||i[0]>o)&&(o=i[0]),(!a||i[1]>u)&&(u=i[1])}var s=o-n,h=u-r,d=Math.min(s,h),f=d/2;if(0===d)return[n,r];for(var p=new Queue(void 0,compareMax),g=n;g<o;g+=d)for(var v=r;v<u;v+=d)p.push(new Cell(g+f,v+f,f,e));var x=getCentroidCell(e),c=new Cell(n+s/2,r+h/2,0,e);c.d>x.d&&(x=c);for(var C=p.length;p.length;){var y=p.pop();y.d>x.d&&(x=y,l&&console.log("found best %d after %d probes",Math.round(1e4*y.d)/1e4,C)),y.max-x.d<=t||(f=y.h/2,p.push(new Cell(y.x-f,y.y-f,f,e)),p.push(new Cell(y.x+f,y.y-f,f,e)),p.push(new Cell(y.x-f,y.y+f,f,e)),p.push(new Cell(y.x+f,y.y+f,f,e)),C+=4)}return l&&(console.log("num probes: "+C),console.log("best distance: "+x.d)),[x.x,x.y]}function compareMax(e,t){return t.max-e.max}function Cell(e,t,l,n){this.x=e,this.y=t,this.h=l,this.d=pointToPolygonDist(e,t,n),this.max=this.d+this.h*Math.SQRT2}function pointToPolygonDist(e,t,l){for(var n=!1,r=1/0,o=0;o<l.length;o++)for(var u=l[o],a=0,i=u.length,s=i-1;a<i;s=a++){var h=u[a],d=u[s];h[1]>t!=d[1]>t&&e<(d[0]-h[0])*(t-h[1])/(d[1]-h[1])+h[0]&&(n=!n),r=Math.min(r,getSegDistSq(e,t,h,d))}return(n?1:-1)*Math.sqrt(r)}function getCentroidCell(e){for(var t=0,l=0,n=0,r=e[0],o=0,u=r.length,a=u-1;o<u;a=o++){var i=r[o],s=r[a],h=i[0]*s[1]-s[0]*i[1];l+=(i[0]+s[0])*h,n+=(i[1]+s[1])*h,t+=3*h}return 0===t?new Cell(r[0][0],r[0][1],0,e):new Cell(l/t,n/t,0,e)}function getSegDistSq(e,t,l,n){var r,o=l[0],u=l[1],a=n[0]-o,i=n[1]-u;return 0===a&&0===i||(1<(r=((e-o)*a+(t-u)*i)/(a*a+i*i))?(o=n[0],u=n[1]):0<r&&(o+=a*r,u+=i*r)),(a=e-o)*a+(i=t-u)*i}Queue.default&&(Queue=Queue.default),module.exports=polylabel,module.exports.default=polylabel;