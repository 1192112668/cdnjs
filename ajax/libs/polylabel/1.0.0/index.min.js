"use strict";var Queue=require("tinyqueue");function polylabel(e,t,n){var r,o,l,a;t=t||1;for(var u=0;u<e[0].length;u++){var s=e[0][u];(!u||s[0]<r)&&(r=s[0]),(!u||s[1]<o)&&(o=s[1]),(!u||s[0]>l)&&(l=s[0]),(!u||s[1]>a)&&(a=s[1])}for(var i=l-r,h=a-o,g=Math.min(i,h),p=g/2,d=new Queue(null,compareMax),f=r;f<l;f+=g)for(var v=o;v<a;v+=g)d.push(new Cell(f+p,v+p,p,e));for(var c=getCentroidCell(e),C=d.length;d.length;){var m=d.pop();m.d>c.d&&(c=m,n&&console.log("found best %d after %d probes",Math.round(1e4*m.d)/1e4,C)),m.max-c.d<=t||(f=m.x,v=m.y,p=m.h/2,d.push(new Cell(f-p,v-p,p,e)),d.push(new Cell(f+p,v-p,p,e)),d.push(new Cell(f-p,v+p,p,e)),d.push(new Cell(f+p,v+p,p,e)),C+=4)}return n&&(console.log("num probes: "+C),console.log("best distance: "+c.d)),[c.x,c.y]}function compareMax(e,t){return t.max-e.max}function Cell(e,t,n,r){this.x=e,this.y=t,this.h=n,this.d=pointToPolygonDist(e,t,r),this.max=this.d+this.h*Math.SQRT2}function pointToPolygonDist(e,t,n){for(var r=!1,o=1/0,l=0;l<n.length;l++)for(var a=n[l],u=0,s=a.length,i=s-1;u<s;i=u++){var h=a[u],g=a[i];h[1]>t!=g[1]>t&&e<(g[0]-h[0])*(t-h[1])/(g[1]-h[1])+h[0]&&(r=!r),o=Math.min(o,getSegDistSq(e,t,h,g))}return(r?1:-1)*Math.sqrt(o)}function getCentroidCell(e){for(var t=0,n=0,r=0,o=e[0],l=0,a=o.length,u=a-1;l<a;u=l++){var s=o[l],i=o[u],h=s[0]*i[1]-i[0]*s[1];n+=(s[0]+i[0])*h,r+=(s[1]+i[1])*h,t+=3*h}return new Cell(n/t,r/t,0,e)}function getSegDistSq(e,t,n,r){var o,l=n[0],a=n[1],u=r[0]-l,s=r[1]-a;return 0===u&&0===s||(1<(o=((e-l)*u+(t-a)*s)/(u*u+s*s))?(l=r[0],a=r[1]):0<o&&(l+=u*o,a+=s*o)),(u=e-l)*u+(s=t-a)*s}module.exports=polylabel;