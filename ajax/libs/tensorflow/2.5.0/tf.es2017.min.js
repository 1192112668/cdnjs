/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e((t=t||self).tf=t.tf||{})}(this,(function(t){"use strict";class e{constructor(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0}get(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)}set(t,e){this.dataIdsCount++,this.data.set(t,e)}has(t){return this.data.has(t)}delete(t){return this.dataIdsCount--,this.data.delete(t)}numDataIds(){return this.dataIdsCount}}class n{time(t){return s("time")}read(t){return s("read")}readSync(t){return s("readSync")}numDataIds(){return s("numDataIds")}disposeData(t){return s("disposeData")}write(t,e,n){return s("write")}move(t,e,n,r){return s("move")}memory(){return s("memory")}floatPrecision(){return s("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}batchMatMul(t,e,n,r){return s("batchMatMul")}fusedBatchMatMul({a:t,b:e,transposeA:n,transposeB:r,bias:a,activation:i,preluActivationWeights:o}){return s("fusedBatchMatMul")}slice(t,e,n){return s("slice")}stridedSlice(t,e,n,r){return s("stridedSlice")}unstack(t,e){return s("unstack")}reverse(t,e){return s("reverse")}concat(t,e){return s("concat")}neg(t){return s("neg")}add(t,e){return s("add")}addN(t){return s("addN")}subtract(t,e){return s("subtract")}multiply(t,e){return s("multiply")}realDivide(t,e){return s("realDivide")}floorDiv(t,e){return s("floorDiv")}sum(t,e){return s("sum")}prod(t,e){return s("prod")}unsortedSegmentSum(t,e,n){return s("unsortedSegmentSum")}argMin(t,e){return s("argMin")}argMax(t,e){return s("argMax")}equal(t,e){return s("equal")}notEqual(t,e){return s("notEqual")}less(t,e){return s("less")}lessEqual(t,e){return s("lessEqual")}greater(t,e){return s("greater")}greaterEqual(t,e){return s("greaterEqual")}logicalNot(t){return s("logicalNot")}logicalAnd(t,e){return s("logicalAnd")}logicalOr(t,e){return s("logicalOr")}where(t){return s("where")}select(t,e,n){return s("select")}topk(t,e,n){return s("topk")}min(t,e){return s("min")}minimum(t,e){return s("minimum")}mod(t,e){return s("mod")}max(t,e){return s("max")}maximum(t,e){return s("maximum")}all(t,e){return s("all")}any(t,e){return s("any")}squaredDifference(t,e){return s("squaredDifference")}ceil(t){return s("ceil")}floor(t){return s("floor")}round(t){return s("round")}sign(t){return s("sign")}isNaN(t){return s("isNaN")}isInf(t){return s("isInf")}isFinite(t){return s("isFinite")}pow(t,e){return s("pow")}exp(t){return s("exp")}expm1(t){return s("expm1")}softmax(t,e){return s("softmax")}log(t){return s("log")}log1p(t){return s("log1p")}sqrt(t){return s("sqrt")}rsqrt(t){return s("rsqrt")}square(t){return s("square")}reciprocal(t){return s("reciprocal")}relu(t){return s("relu")}relu6(t){return s("relu6")}prelu(t,e){return s("prelu")}elu(t){return s("elu")}eluDer(t,e){return s("eluDer")}selu(t){return s("selu")}int(t){return s("int")}clip(t,e,n){return s("clip")}abs(t){return s("abs")}complexAbs(t){return s("complexAbs")}sigmoid(t){return s("sigmoid")}softplus(t){return s("softplus")}sin(t){return s("sin")}cos(t){return s("cos")}tan(t){return s("tan")}asin(t){return s("asin")}acos(t){return s("acos")}atan(t){return s("atan")}atan2(t,e){return s("atan2")}sinh(t){return s("sinh")}cosh(t){return s("cosh")}tanh(t){return s("tanh")}asinh(t){return s("asinh")}acosh(t){return s("acosh")}atanh(t){return s("atanh")}erf(t){return s("erf")}step(t,e){return s("step")}fusedConv2d({input:t,filter:e,convInfo:n,bias:r,activation:a,preluActivationWeights:i}){return s("fusedConv2d")}conv2d(t,e,n){return s("conv2d")}conv2dDerInput(t,e,n){return s("conv2dDerInput")}conv2dDerFilter(t,e,n){return s("conv2dDerFilter")}fusedDepthwiseConv2D({input:t,filter:e,convInfo:n,bias:r,activation:a,preluActivationWeights:i}){return s("fusedDepthwiseConv2D")}depthwiseConv2D(t,e,n){return s("depthwiseConv2D")}depthwiseConv2DDerInput(t,e,n){return s("depthwiseConv2DDerInput")}depthwiseConv2DDerFilter(t,e,n){return s("depthwiseConv2DDerFilter")}conv3d(t,e,n){return s("conv3d")}conv3dDerInput(t,e,n){return s("conv3dDerInput")}conv3dDerFilter(t,e,n){return s("conv3dDerFilter")}maxPool(t,e){return s("maxPool")}maxPoolBackprop(t,e,n,r){return s("maxPoolBackprop")}avgPool(t,e){return s("avgPool")}avgPoolBackprop(t,e,n){return s("avgPoolBackprop")}avgPool3d(t,e){return s("avgPool3d")}avgPool3dBackprop(t,e,n){return s("avgPool3dBackprop")}maxPool3d(t,e){return s("maxPool3d")}maxPool3dBackprop(t,e,n,r){return s("maxPool3dBackprop")}reshape(t,e){return s("reshape")}cast(t,e){return s("cast")}tile(t,e){return s("tile")}pad(t,e,n){return s("pad")}transpose(t,e){return s("transpose")}gather(t,e,n){return s("gather")}gatherND(t,e){return s("gatherND")}scatterND(t,e,n){return s("scatterND")}batchToSpaceND(t,e,n){return s("batchToSpaceND")}spaceToBatchND(t,e,n){return s("spaceToBatchND")}resizeBilinear(t,e,n,r){return s("resizeBilinear")}resizeBilinearBackprop(t,e,n){return s("resizeBilinearBackprop")}resizeNearestNeighbor(t,e,n,r){return s("resizeNearestNeighbor")}resizeNearestNeighborBackprop(t,e,n){return s("resizeNearestNeighborBackprop")}batchNorm(t,e,n,r,a,i){return s("batchNorm")}localResponseNormalization4D(t,e,n,r,a){return s("localResponseNormalization4D")}LRNGrad(t,e,n,r,a,i,o){return s("LRNGrad")}multinomial(t,e,n,r){return s("multinomial")}oneHot(t,e,n,r){return s("oneHot")}cumsum(t,e,n,r){return s("cumsum")}nonMaxSuppression(t,e,n,r,a){return s("nonMaxSuppression")}fft(t){return s("fft")}ifft(t){return s("ifft")}complex(t,e){return s("complex")}real(t){return s("real")}imag(t){return s("imag")}cropAndResize(t,e,n,r,a,i){return s("cropAndResize")}depthToSpace(t,e,n){return s("depthToSpace")}split(t,e,n){return s("split")}sparseToDense(t,e,n,r){return s("sparseToDense")}diag(t){return s("diag")}fill(t,e,n){return s("fill")}onesLike(t){return s("onesLike")}zerosLike(t){return s("zerosLike")}linspace(t,e,n){return s("linspace")}dispose(){return s("dispose")}}function s(t){throw new Error(`'${t}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}class r{constructor(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}setPlatform(t,e){null!=this.platform&&console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`),this.platformName=t,this.platform=e}registerFlag(t,e,n){if(this.flagRegistry[t]={evaluationFn:e,setHook:n},null!=this.urlFlags[t]){const e=this.urlFlags[t];console.warn(`Setting feature override from URL ${t}: ${e}.`),this.set(t,e)}}async getAsync(t){return t in this.flags||(this.flags[t]=await this.evaluateFlag(t)),this.flags[t]}get(t){if(t in this.flags)return this.flags[t];const e=this.evaluateFlag(t);if(e instanceof Promise)throw new Error(`Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[t]=e,this.flags[t]}getNumber(t){return this.get(t)}getBool(t){return this.get(t)}getFlags(){return this.flags}get features(){return this.flags}set(t,e){if(null==this.flagRegistry[t])throw new Error(`Cannot set flag ${t} as it has not been registered.`);this.flags[t]=e,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(e)}evaluateFlag(t){if(null==this.flagRegistry[t])throw new Error(`Cannot evaluate flag '${t}': no evaluation function found.`);return this.flagRegistry[t].evaluationFn()}setFlags(t){this.flags=Object.assign({},t)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const t=function(t){const e={};return t.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(t,...n)=>(function(t,e,n){t[decodeURIComponent(e)]=decodeURIComponent(n||"")}(e,n[0],n[1]),n.join("="))),e}(this.global.location.search);if("tfjsflags"in t){t.tfjsflags.split(",").forEach(t=>{const[e,n]=t.split(":");this.urlFlags[e]=function(t,e){if("true"===(e=e.toLowerCase())||"false"===e)return"true"===e;if(""+ +e===e)return+e;throw new Error(`Could not parse value flag value ${e} for flag ${t}.`)}(e,n)})}}}function a(){return t.ENV}let i;function o(){if(null==i){let t;if("undefined"!=typeof window)t=window;else if("undefined"!=typeof global)t=global;else if("undefined"!=typeof process)t=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");t=self}i=t}return i}function l(t,e){const n=function(){const t=o();return null==t._tfGlobals&&(t._tfGlobals=new Map),t._tfGlobals}();if(n.has(t))return n.get(t);{const s=e();return n.set(t,s),n.get(t)}}t.ENV=null;const u="Add",c="Cos",h="Div",p="Sin",d="Tan",f=l("kernelRegistry",()=>new Map),m=l("gradRegistry",()=>new Map);function g(t,e){const n=v(t,e);return f.get(n)}function y(t){return m.get(t)}function b(t){const e=f.entries(),n=[];for(;;){const{done:s,value:r}=e.next();if(s)break;const[a,i]=r,[o]=a.split("_");o===t&&n.push(i)}return n}function x(t){const{kernelName:e,backendName:n}=t,s=v(e,n);f.has(s)&&console.warn(`The kernel '${e}' for backend '${n}' is already registered`),f.set(s,t)}function w(t){const{kernelName:e}=t;m.has(e)&&a().getBool("DEBUG")&&console.warn(`Overriding the gradient for '${e}'`),m.set(e,t)}function v(t,e){return`${e}_${t}`}function N(t){let e=t.length,n=0,s=0;for(;e>0;)s=Math.random()*e|0,e--,n=t[e],t[e]=t[s],t[s]=n}function k(t,e,n){return Math.max(t,Math.min(e,n))}function C(t){return t%2==0?t:t+1}function S(t){let e=0;for(let n=0;n<t.length;n++)e+=t[n];return e}function I(t,e){if(!t)throw new Error("string"==typeof e?e:e())}function E(t,e,n=""){I(R(t,e),()=>n+` Shapes ${t} and ${e} must match`)}function T(t){I(null!=t,()=>"The input to the tensor constructor must be a non-null value.")}function A(t,e=[],n=!1){if(null==e&&(e=[]),Array.isArray(t)||G(t)&&!n)for(let s=0;s<t.length;++s)A(t[s],e,n);else e.push(t);return e}function $(t){if(0===t.length)return 1;let e=t[0];for(let n=1;n<t.length;n++)e*=t[n];return e}function R(t,e){if(t===e)return!0;if(null==t||null==e)return!1;if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(t[n]!==e[n])return!1;return!0}function D(t){return t%1==0}function _(t){const e=Math.ceil(Math.sqrt(t));return[e,Math.ceil(t/e)]}function F(t,e){return e<=t.length?t:t+" ".repeat(e-t.length)}function O(t,e=(t=>0),n){return new Promise((s,r)=>{let a=0;const i=()=>{if(t())return void s();a++;const o=e(a);null!=n&&a>=n?r():setTimeout(i,o)};i()})}function M(t,e){let n=1,s=-1;for(let e=0;e<t.length;++e)if(t[e]>=0)n*=t[e];else if(-1===t[e]){if(-1!==s)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${e}`);s=e}else if(t[e]<0)throw Error(`Shapes can not be < 0. Found ${t[e]} at dim ${e}`);if(-1===s){if(e>0&&e!==n)throw Error(`Size(${e}) must match the product of shape ${t}`);return t}if(0===n)throw Error(`Cannot infer the missing size in [${t}] when there are 0 elements`);if(e%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${e} / ${n}`);const r=t.slice();return r[s]=e/n,r}function L(t,e){const n=e.length;return I((t=null==t?e.map((t,e)=>e):[].concat(t)).every(t=>t>=-n&&t<n),()=>`All values in axis param must be in range [-${n}, ${n}) but got axis `+t),I(t.every(t=>D(t)),()=>"All values in axis param must be integers but got axis "+t),t.map(t=>t<0?n+t:t)}function z(t,e){const n=[],s=[],r=null!=e&&Array.isArray(e)&&0===e.length,a=null==e||r?null:L(e,t).sort();let i=0;for(let e=0;e<t.length;++e){if(null!=a){if(a[i]===e&&1!==t[e])throw new Error(`Can't squeeze axis ${e} since its dim '${t[e]}' is not 1`);(null==a[i]||a[i]>e)&&1===t[e]&&(n.push(t[e]),s.push(e)),a[i]<=e&&i++}1!==t[e]&&(n.push(t[e]),s.push(e))}return{newShape:n,keptDims:s}}function B(t,e){let n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else{if("bool"!==t)throw new Error("Unknown data type "+t);n=new Uint8Array(e)}return n}function P(t,e){let n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else if("bool"===t)n=new Uint8Array(e);else{if("string"!==t)throw new Error("Unknown data type "+t);n=new Array(e)}return n}function W(t,e){for(let n=0;n<t.length;n++){const s=t[n];if(isNaN(s)||!isFinite(s))throw Error(`A tensor of type ${e} being uploaded contains ${s}.`)}}function V(t){return"bool"===t||"complex64"===t||"float32"===t||"int32"===t||"string"===t}function U(t,e){return"complex64"!==e&&(("float32"!==e||"complex64"===t)&&(("int32"!==e||"float32"===t||"complex64"===t)&&("bool"!==e||"bool"!==t)))}function G(t){return t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array}function H(t){if("float32"===t||"int32"===t)return 4;if("complex64"===t)return 8;if("bool"===t)return 1;throw new Error("Unknown dtype "+t)}function j(t){if(null==t)return 0;let e=0;return t.forEach(t=>e+=t.length),e}function q(t){return"string"==typeof t||t instanceof String}function K(t){return"boolean"==typeof t}function X(t){return"number"==typeof t}function Y(t){return Array.isArray(t)?Y(t[0]):t instanceof Float32Array?"float32":t instanceof Int32Array||t instanceof Uint8Array?"int32":X(t)?"float32":q(t)?"string":K(t)?"bool":"float32"}function J(t){return!!(t&&t.constructor&&t.call&&t.apply)}function Z(t,e){for(let n=e;n<t;++n)if(t%n==0)return n;return t}function Q(t){const e=t.length;if(e<2)return[];const n=new Array(e-1);n[e-2]=t[e-1];for(let s=e-3;s>=0;--s)n[s]=n[s+1]*t[s+1];return n}function tt(t,e){return"string"===e?ut(t):et([t],e)}function et(t,e){if("string"===e)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(t)&&(t=A(t)),a().getBool("DEBUG")&&W(t,e),function(t,e){return t instanceof Float32Array&&"float32"===e||t instanceof Int32Array&&"int32"===e||t instanceof Uint8Array&&"bool"===e}(t,e))return t;if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e){const e=new Uint8Array(t.length);for(let n=0;n<e.length;++n)0!==Math.round(t[n])&&(e[n]=1);return e}throw new Error("Unknown data type "+e)}function nt(t,e){if(0===t.length)return e[0];const n=t.reduce((t,e)=>t*e);if(0===n)return[];if(n!==e.length)throw new Error(`[${t}] does not match the input size ${e.length}.`);return function t(e,n,s){const r=new Array;if(1===n.length){const t=n[0];for(let n=0;n<t;n++)r[n]=s[e+n]}else{const a=n[0],i=n.slice(1),o=i.reduce((t,e)=>t*e);for(let n=0;n<a;n++)r[n]=t(e+n*o,i,s)}return r}(0,t,e)}function st(t,e){const n=rt(t,e);for(let t=0;t<n.length;t++)n[t]=1;return n}function rt(t,e){if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e)return new Uint8Array(t);throw new Error("Unknown data type "+e)}function at(t,e){const n=t.reduce((t,e)=>t*e,1);if(null==e||"float32"===e)return nt(t,new Float32Array(n));if("int32"===e)return nt(t,new Int32Array(n));if("bool"===e)return nt(t,new Uint8Array(n));throw new Error("Unknown data type "+e)}function it(){return a().platform.now()}function ot(t){t.forEach(e=>{I(Number.isInteger(e)&&e>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${t}].`)})}function lt(t,e){return a().platform.fetch(t,e)}function ut(t,e="utf-8"){return e=e||"utf-8",a().platform.encode(t,e)}function ct(t,e="utf-8"){return e=e||"utf-8",a().platform.decode(t,e)}function ht(t,e,n){if(0===e)return 0;if(1===e)return t[0];let s=t[t.length-1];for(let e=0;e<t.length-1;++e)s+=n[e]*t[e];return s}function pt(t,e,n){if(0===e)return[];if(1===e)return[t];const s=new Array(e);for(let e=0;e<s.length-1;++e)s[e]=Math.floor(t/n[e]),t-=s[e]*n[e];return s[s.length-1]=t,s}var dt=Object.freeze({__proto__:null,shuffle:N,clamp:k,nearestLargerEven:C,sum:S,randUniform:function(t,e){const n=Math.random();return e*n+(1-n)*t},distSquared:function(t,e){let n=0;for(let s=0;s<t.length;s++){const r=Number(t[s])-Number(e[s]);n+=r*r}return n},assert:I,assertShapesMatch:E,assertNonNull:T,flatten:A,sizeFromShape:$,isScalarShape:function(t){return 0===t.length},arraysEqual:R,isInt:D,tanh:function(t){if(null!=Math.tanh)return Math.tanh(t);if(t===1/0)return 1;if(t===-1/0)return-1;{const e=Math.exp(2*t);return(e-1)/(e+1)}},sizeToSquarishShape:_,createShuffledIndices:function(t){const e=new Uint32Array(t);for(let n=0;n<t;++n)e[n]=n;return N(e),e},rightPad:F,repeatedTry:O,inferFromImplicitShape:M,parseAxisParam:L,squeezeShape:z,getTypedArrayFromDType:B,getArrayFromDType:P,checkConversionForErrors:W,isValidDtype:V,hasEncodingLoss:U,isTypedArray:G,bytesPerElement:H,bytesFromStringArray:j,isString:q,isBoolean:K,isNumber:X,inferDtype:Y,isFunction:J,nearestDivisor:Z,computeStrides:Q,createScalarValue:tt,toTypedArray:et,toNestedArray:nt,makeOnesTypedArray:st,makeZerosTypedArray:rt,makeZerosNestedTypedArray:at,now:it,assertNonNegativeIntegerDimensions:ot,fetch:lt,encodeString:ut,decodeString:ct,locToIndex:ht,indexToLoc:pt});class ft{constructor(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new gt)}profileKernel(t,e,n){let s;const r=this.backendTimer.time(()=>{s=n()});for(let e=0;e<s.length;e++){const n=s[e];n.data().then(e=>{mt(e,n.dtype,t)})}return{kernelName:t,outputs:s,inputs:e,timeMs:r.then(t=>t.kernelMs),extraInfo:r.then(t=>null!=t.getExtraProfileInfo?t.getExtraProfileInfo():"")}}logKernelProfile(t){const{kernelName:e,outputs:n,timeMs:s,inputs:r,extraInfo:a}=t;n.forEach(t=>{Promise.all([t.data(),s,a]).then(n=>{this.logger.logKernelProfile(e,t,n[0],n[1],r,n[2])})})}}function mt(t,e,n){if("float32"!==e)return!1;for(let e=0;e<t.length;e++){const s=t[e];if(isNaN(s)||!isFinite(s))return console.warn(`Found ${s} in the result of '${n}'`),!0}return!1}class gt{logKernelProfile(t,e,n,s,r,a){const i="number"==typeof s?F(s+"ms",9):s.error,o=F(t,25),l=e.rank,u=e.size,c=F(e.shape.toString(),14);let h="";for(const t in r){const n=r[t];if(null!=n){const s=n.shape||e.shape,r=s.length;h+=`${t}: ${r}D ${r>0?s:""} `}}console.log(`%c${o}\t%c${i}\t%c${l}D ${c}\t%c${u}\t%c${h}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function yt(t,e,n,s){const r=Q(e),a=function(t,e,n,s){const r=$(e),a=s[s.length-1],i=new Array(a).fill(0),o=e.length,l="complex64"===n?wt(t):t;if(o>1)for(let t=0;t<r/a;t++){const e=t*a;for(let t=0;t<a;t++)i[t]=Math.max(i[t],bt(l[e+t],0,n).length)}return i}(t,e,n,r),i=e.length,o=function t(e,n,s,r,a,i=!0){const o="complex64"===s?2:1,l=n[0],u=n.length;if(0===u){if("complex64"===s){return[bt(wt(e)[0],0,s)]}return"bool"===s?[xt(e[0])]:[e[0].toString()]}if(1===u){if(l>20){const t=3*o;let n=Array.from(e.slice(0,t)),r=Array.from(e.slice((l-3)*o,l*o));return"complex64"===s&&(n=wt(n),r=wt(r)),["["+n.map((t,e)=>bt(t,a[e],s)).join(", ")+", ..., "+r.map((t,e)=>bt(t,a[l-3+e],s)).join(", ")+"]"]}return["["+("complex64"===s?wt(e):Array.from(e)).map((t,e)=>bt(t,a[e],s)).join(", ")+"]"]}const c=n.slice(1),h=r.slice(1),p=r[0]*o,d=[];if(l>20){for(let n=0;n<3;n++){const r=n*p,i=r+p;d.push(...t(e.slice(r,i),c,s,h,a,!1))}d.push("...");for(let n=l-3;n<l;n++){const r=n*p,i=r+p;d.push(...t(e.slice(r,i),c,s,h,a,n===l-1))}}else for(let n=0;n<l;n++){const r=n*p,i=r+p;d.push(...t(e.slice(r,i),c,s,h,a,n===l-1))}const f=2===u?",":"";d[0]="["+d[0]+f;for(let t=1;t<d.length-1;t++)d[t]=" "+d[t]+f;let m=",\n";for(let t=2;t<u;t++)m+="\n";return d[d.length-1]=" "+d[d.length-1]+"]"+(i?"":m),d}(t,e,n,r,a),l=["Tensor"];return s&&(l.push("  dtype: "+n),l.push("  rank: "+i),l.push(`  shape: [${e}]`),l.push("  values:")),l.push(o.map(t=>"    "+t).join("\n")),l.join("\n")}function bt(t,e,n){let s;return s=Array.isArray(t)?parseFloat(t[0].toFixed(7))+" + "+parseFloat(t[1].toFixed(7))+"j":q(t)?`'${t}'`:"bool"===n?xt(t):parseFloat(t.toFixed(7)).toString(),F(s,e)}function xt(t){return 0===t?"false":"true"}function wt(t){const e=[];for(let n=0;n<t.length;n+=2)e.push([t[n],t[n+1]]);return e}class vt{constructor(t,e,n){if(this.dtype=e,this.shape=t.slice(),this.size=$(t),null!=n){const t=n.length;I(t===this.size,()=>`Length of values '${t}' does not match the size inferred by the shape '${this.size}'.`)}if("complex64"===e)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||P(e,this.size),this.strides=Q(t)}set(t,...e){0===e.length&&(e=[0]),I(e.length===this.rank,()=>`The number of provided coordinates (${e.length}) must match the rank (${this.rank})`);const n=this.locToIndex(e);this.values[n]=t}get(...t){0===t.length&&(t=[0]);let e=0;for(const n of t){if(n<0||n>=this.shape[e]){const e=`Requested out of range element at ${t}.   Buffer shape=`+this.shape;throw new Error(e)}e++}let n=t[t.length-1];for(let e=0;e<t.length-1;++e)n+=this.strides[e]*t[e];return this.values[n]}locToIndex(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];let e=t[t.length-1];for(let n=0;n<t.length-1;++n)e+=this.strides[n]*t[n];return e}indexToLoc(t){if(0===this.rank)return[];if(1===this.rank)return[t];const e=new Array(this.shape.length);for(let n=0;n<e.length-1;++n)e[n]=Math.floor(t/this.strides[n]),t-=e[n]*this.strides[n];return e[e.length-1]=t,e}get rank(){return this.shape.length}toTensor(){return Nt().makeTensor(this.values,this.shape,this.dtype)}}let Nt=null,kt=null,Ct=null;class St{constructor(t,e,n,s){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=$(t),this.strides=Q(t),this.dataId=n,this.id=s,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const t=await this.data();return kt.buffer(this.shape,this.dtype,t)}bufferSync(){return kt.buffer(this.shape,this.dtype,this.dataSync())}async array(){const t=await this.data();return nt(this.shape,t)}arraySync(){return nt(this.shape,this.dataSync())}async data(){this.throwIfDisposed();const t=Nt().read(this.dataId);if("string"===this.dtype){const e=await t;try{return e.map(t=>ct(t))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return t}dataSync(){this.throwIfDisposed();const t=Nt().readSync(this.dataId);if("string"===this.dtype)try{return t.map(t=>ct(t))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t}async bytes(){this.throwIfDisposed();const t=await Nt().read(this.dataId);return"string"===this.dtype?t:new Uint8Array(t.buffer)}dispose(){this.isDisposed||(Nt().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(t=!1){return kt.print(this,t)}clone(){return this.throwIfDisposed(),kt.clone(this)}toString(t=!1){return yt(this.dataSync(),this.shape,this.dtype,t)}cast(t){return this.throwIfDisposed(),kt.cast(this,t)}variable(t=!0,e,n){return this.throwIfDisposed(),Nt().makeVariable(this,t,e,n)}}Object.defineProperty(St,Symbol.hasInstance,{value:t=>!!t&&null!=t.data&&null!=t.dataSync&&null!=t.throwIfDisposed});class It extends St{constructor(t,e,n,s){super(t.shape,t.dtype,t.dataId,s),this.trainable=e,this.name=n}assign(t){if(t.dtype!==this.dtype)throw new Error(`dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`);if(!R(t.shape,this.shape))throw new Error(`shape of the new value (${t.shape}) and previous value (${this.shape}) must match`);Nt().disposeTensor(this),this.dataId=t.dataId,Nt().incRef(this,null)}dispose(){Nt().disposeVariable(this),this.isDisposedInternal=!0}}var Et,Tt,At,$t,Rt;Object.defineProperty(It,Symbol.hasInstance,{value:t=>t instanceof St&&null!=t.assign&&t.assign instanceof Function}),(Et=t.Rank||(t.Rank={})).R0="R0",Et.R1="R1",Et.R2="R2",Et.R3="R3",Et.R4="R4",Et.R5="R5",Et.R6="R6",function(t){t.float32="float32",t.int32="int32",t.bool="int32",t.complex64="complex64"}(Tt||(Tt={})),function(t){t.float32="float32",t.int32="int32",t.bool="bool",t.complex64="complex64"}(At||(At={})),function(t){t.float32="float32",t.int32="float32",t.bool="float32",t.complex64="complex64"}($t||($t={})),function(t){t.float32="complex64",t.int32="complex64",t.bool="complex64",t.complex64="complex64"}(Rt||(Rt={}));const Dt={float32:$t,int32:Tt,bool:At,complex64:Rt};function _t(t,e){if("string"===t||"string"===e){if("string"===t&&"string"===e)return"string";throw new Error(`Can not upcast ${t} with ${e}`)}return Dt[t][e]}function Ft(t){return _t(t,"int32")}function Ot(t,e){if(t.dtype===e.dtype)return[t,e];const n=_t(t.dtype,e.dtype);return[t.cast(n),e.cast(n)]}function Mt(t,e){I(t.dtype===e.dtype,()=>`The dtypes of the first(${t.dtype}) and second(${e.dtype}) input must match`)}function Lt(t,e){return e.some(e=>e.id===t.id)}function zt(t){const e=[];return function t(e,n,s){if(null==e)return;if(e instanceof St)return void n.push(e);if(r=e,!Array.isArray(r)&&"object"!=typeof r)return;var r;const a=e;for(const e in a){const r=a[e];s.has(r)||(s.add(r),t(r,n,s))}}(t,e,new Set),e}var Bt=Object.freeze({__proto__:null,makeTypesMatch:Ot,assertTypesMatch:Mt,isTensorInList:Lt,getTensorsInContainer:zt});class Pt{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null}}dispose(){for(const t in this.registeredVariables)this.registeredVariables[t].dispose()}}class Wt{constructor(t){this.ENV=t,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Pt}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then(()=>{});if(null!=this.backendInstance)return;const t=this.getSortedBackends();for(let e=0;e<t.length;e++){const n=t[e];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:t,asyncInit:e}=this.initializeBackendsAndReturnBest();if(e)throw new Error(`The highest priority backend '${t}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(t)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(t){if(!(t in this.registry)){if(!(t in this.registryFactory))return null;{const{asyncInit:e}=this.initializeBackend(t);if(e)return null}}return this.registry[t]}findBackendFactory(t){return t in this.registryFactory?this.registryFactory[t].factory:null}registerBackend(t,e,n=1){return t in this.registryFactory?(console.warn(t+" backend was already registered. Reusing existing backend factory."),!1):(this.registryFactory[t]={factory:e,priority:n},!0)}async setBackend(t){if(null==this.registryFactory[t])throw new Error(`Backend name '${t}' not found in registry`);if(this.backendName=t,null==this.registry[t]){this.backendInstance=null;const{success:e,asyncInit:n}=this.initializeBackend(t);if(!(n?await e:e))return!1}return this.backendInstance=this.registry[t],this.setupRegisteredKernels(),this.profiler=new ft(this.backendInstance),!0}setupRegisteredKernels(){b(this.backendName).forEach(t=>{null!=t.setupFunc&&t.setupFunc(this.backendInstance)})}disposeRegisteredKernels(t){b(t).forEach(e=>{null!=e.disposeFunc&&e.disposeFunc(this.registry[t])})}initializeBackend(t){const e=this.registryFactory[t];if(null==e)throw new Error(`Cannot initialize backend ${t}, no registration found.`);try{const s=e.factory();if(!s||s instanceof n||"function"!=typeof s.then)return this.registry[t]=s,{success:!0,asyncInit:!1};{const e=++this.pendingBackendInitId,n=s.then(n=>!(e<this.pendingBackendInitId)&&(this.registry[t]=n,this.pendingBackendInit=null,!0)).catch(n=>(e<this.pendingBackendInitId||(this.pendingBackendInit=null,console.warn(`Initialization of backend ${t} failed`),console.warn(n.stack||n.message)),!1));return this.pendingBackendInit=n,{success:n,asyncInit:!0}}}catch(e){return console.warn(`Initialization of backend ${t} failed`),console.warn(e.stack||e.message),{success:!1,asyncInit:!1}}}removeBackend(t){if(!(t in this.registryFactory))throw new Error(t+" backend not found in registry");this.backendName===t&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,t in this.registry&&(this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t]),delete this.registryFactory[t],this.backendName===t&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((t,e)=>this.registryFactory[e].priority-this.registryFactory[t].priority)}initializeBackendsAndReturnBest(){const t=this.getSortedBackends();for(let e=0;e<t.length;e++){const n=t[e],{success:s,asyncInit:r}=this.initializeBackend(n);if(r||s)return{name:n,asyncInit:r}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(t,e){const n=this.state.tensorInfo.get(e),s=n.backend,r=this.readSync(e);s.disposeData(e),n.backend=t,t.move(e,r,n.shape,n.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(t,e){let n,s=null;if(null==e){if("function"!=typeof t)throw new Error("Please provide a function to tidy()");e=t}else{if("string"!=typeof t&&!(t instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof e)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");s=t}return this.scopedRun(()=>this.startScope(s),()=>this.endScope(n),()=>(n=e(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n))}scopedRun(t,e,n){t();try{const t=n();return e(),t}catch(t){throw e(),t}}nextTensorId(){return Wt.nextTensorId++}nextVariableId(){return Wt.nextVariableId++}clone(t){const e=this.makeTensorFromDataId(t.dataId,t.shape,t.dtype),n={x:t};return this.addTapeNode(this.state.activeScope.name,n,[e],t=>({x:()=>{const e={x:t},n={dtype:"float32"};return Ut.runKernelFunc(e=>e.cast(t,"float32"),e,null,"Cast",n)}}),[],{}),e}runKernel(t,e,n,s,r){return this.runKernelFunc(null,e,null,t,n,s,r)}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(t,e,n){const s=this.backend.numDataIds();let r=0;n.forEach(t=>{r+="complex64"===t.dtype?3:1});const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=s-e-r-a;if(i>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${t}'`)}runKernelFunc(t,e,n,s,r,a,i){let o,l=[];const u=this.isTapeOn();null==s&&(s=null!=this.state.activeScope?this.state.activeScope.name:"");const c=this.state.numBytes,h=this.state.numTensors;let p;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);const d=g(s,this.backendName);let f,m;if(null!=d)p=()=>{const t=this.backend.numDataIds();f=d.kernelFunc({inputs:e,attrs:r,backend:this.backend});const n=Array.isArray(f)?f:[f];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(s,t,n);const o=n.map(({dataId:t,shape:e,dtype:n})=>this.makeTensorFromDataId(t,e,n));if(u){let t=this.getTensorsForGradient(s,e,o);if(null==t){null==i&&(i=[]);const e=o.filter((t,e)=>i[e]);t=(a||[]).slice().concat(e)}l=this.saveTensorsForBackwardMode(t)}return o};else{const e=t=>{u&&(l=t.map(t=>this.keep(this.clone(t))))};p=()=>{const n=this.backend.numDataIds();f=this.tidy(()=>t(this.backend,e));const r=Array.isArray(f)?f:[f];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(s,n,r),r}}return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(m=this.profiler.profileKernel(s,e,()=>p()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(m),o=m.outputs):o=p()}),u&&this.addTapeNode(s,e,o,n,l,r),this.state.profiling&&this.state.activeProfile.kernels.push({name:s,bytesAdded:this.state.numBytes-c,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-h,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(e).map(t=>null!=e[t]?e[t].shape:null),outputShapes:o.map(t=>t.shape),kernelTimeMs:m.timeMs,extraInfo:m.extraInfo}),Array.isArray(f)?o:o[0]}saveTensorsForBackwardMode(t){return t.map(t=>this.keep(this.clone(t)))}getTensorsForGradient(t,e,n){const s=y(t);if(null!=s){const t=s.inputsToSave||[],r=s.outputsToSave||[];let a;s.saveAllInputs?(I(Array.isArray(e),()=>"saveAllInputs is true, expected inputs to be an array."),a=Object.keys(e).map(t=>e[t])):a=t.map(t=>e[t]);const i=n.filter((t,e)=>r[e]);return a.concat(i)}return null}makeTensor(t,e,n,s){if(null==t)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",s=s||this.backend;let r=t;"string"===n&&q(t[0])&&(r=t.map(t=>ut(t)));const a=s.write(r,e,n),i=new St(e,n,a,this.nextTensorId());if(this.incRef(i,s),"string"===n){const t=this.state.tensorInfo.get(a),e=j(r);this.state.numBytes+=e-t.bytes,t.bytes=e}return i}makeTensorFromDataId(t,e,n,s){const r=new St(e,n=n||"float32",t,this.nextTensorId());return this.incRef(r,s),r}makeVariable(t,e=!0,n,s){n=n||this.nextVariableId().toString(),null!=s&&s!==t.dtype&&(t=t.cast(s));const r=new It(t,e,n,this.nextTensorId());if(null!=this.state.registeredVariables[r.name])throw new Error(`Variable with name ${r.name} was already registered`);return this.state.registeredVariables[r.name]=r,this.incRef(r,this.backend),r}incRef(t,e){const n=this.state.tensorInfo.has(t.dataId)?this.state.tensorInfo.get(t.dataId).refCount:0;if(this.state.numTensors++,"string"===t.dtype&&this.state.numStringTensors++,0===n){this.state.numDataBuffers++;let n=0;"complex64"!==t.dtype&&"string"!==t.dtype&&(n=t.size*H(t.dtype)),this.state.tensorInfo.set(t.dataId,{backend:e||this.backend,dtype:t.dtype,shape:t.shape,bytes:n,refCount:0}),this.state.numBytes+=n}this.state.tensorInfo.get(t.dataId).refCount++,t instanceof It||this.track(t)}disposeTensor(t){if(!this.state.tensorInfo.has(t.dataId))return;this.state.numTensors--,"string"===t.dtype&&this.state.numStringTensors--;const e=this.state.tensorInfo.get(t.dataId);e.refCount<=1?("complex64"!==t.dtype&&(this.state.numBytes-=e.bytes),this.state.numDataBuffers--,e.backend.disposeData(t.dataId),this.state.tensorInfo.delete(t.dataId)):this.state.tensorInfo.get(t.dataId).refCount--}disposeVariables(){for(const t in this.state.registeredVariables){const e=this.state.registeredVariables[t];this.disposeVariable(e)}}disposeVariable(t){this.disposeTensor(t),null!=this.state.registeredVariables[t.name]&&delete this.state.registeredVariables[t.name]}memory(){const t=this.backend.memory();return t.numTensors=this.state.numTensors,t.numDataBuffers=this.state.numDataBuffers,t.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(t.unreliable=!0,null==t.reasons&&(t.reasons=[]),t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),t}async profile(t){this.state.profiling=!0;const e=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await t(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(t=>t.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-e,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const t of this.state.activeProfile.kernels)t.kernelTimeMs=await t.kernelTimeMs,t.extraInfo=await t.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(t,e,n,s,r,a){const i={id:this.state.nextTapeNodeId++,kernelName:t,inputs:e,outputs:n,saved:r},o=y(t);null!=o&&(s=o.gradFunc),null!=s&&(i.gradient=t=>(t=t.map((t,e)=>{if(null==t){const t=n[e],s=rt(t.size,t.dtype);return this.makeTensor(s,t.shape,t.dtype)}return t}),s(t.length>1?t:t[0],r,a))),this.state.activeTape.push(i)}keep(t){return t.kept=!0,t}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(t){const e={track:[],name:"unnamed scope",id:this.state.nextScopeId++};t&&(e.name=t),this.state.scopeStack.push(e),this.state.activeScope=e}endScope(t){const e=zt(t),n=new Set(e.map(t=>t.id));for(let t=0;t<this.state.activeScope.track.length;t++){const e=this.state.activeScope.track[t];e.kept||n.has(e.id)||e.dispose()}const s=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],e.forEach(t=>{t.kept||t.scopeId!==s.id||this.track(t)})}gradients(t,e,n,s=!1){if(I(e.length>0,()=>"gradients() received an empty list of xs."),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const r=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",t));I(r instanceof St,()=>"The result y returned by f() must be a tensor.");const a=function(t,e,n){const s={},r={};for(let t=0;t<e.length;t++)s[e[t].id]=!0;for(let n=0;n<t.length;n++){const a=t[n],i=a.inputs;for(const t in i){const n=i[t];let o=!1;for(let t=0;t<e.length;t++)if(s[n.id]){a.outputs.forEach(t=>s[t.id]=!0),o=!0,r[a.id]=!0;break}if(o)break}}const a={};a[n.id]=!0;const i={};for(let e=t.length-1;e>=0;e--){const n=t[e],s=n.inputs;for(let t=0;t<n.outputs.length;t++)if(a[n.outputs[t].id]){for(const t in s)a[s[t].id]=!0,i[n.id]=!0;break}}const o=[];for(let e=0;e<t.length;e++){const n=t[e];if(r[n.id]&&i[n.id]){const t={};for(const e in n.inputs){const r=n.inputs[e];s[r.id]&&(t[e]=r)}const e=Object.assign({},n);e.inputs=t,e.outputs=n.outputs,o.push(e)}}return o}(this.state.activeTape,e,r);if(!s&&0===a.length&&e.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const t={};t[r.id]=null==n?function(t){const e=st($(t),"float32");return Ut.makeTensor(e,t,"float32")}(r.shape):n,function(t,e,n,s){for(let r=e.length-1;r>=0;r--){const a=e[r],i=[];if(a.outputs.forEach(e=>{const n=t[e.id];null!=n?i.push(n):i.push(null)}),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const o=a.gradient(i);for(const e in a.inputs){if(!(e in o))throw new Error(`Cannot backprop through input ${e}. Available gradients found: ${Object.keys(o)}.`);const r=n(()=>o[e]());if("float32"!==r.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${e} must have 'float32' dtype, but has '${r.dtype}'`);const i=a.inputs[e];if(!R(r.shape,i.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${e}' has shape '${r.shape}', which does not match the shape of the input '${i.shape}'`);if(null==t[i.id])t[i.id]=r;else{const e=t[i.id];t[i.id]=s(e,r),e.dispose()}}}}(t,a,t=>this.tidy(t),Gt);const s=e.map(e=>t[e.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(t=>{for(const e of t.saved)e.dispose()}),this.state.activeTape=null),{value:r,grads:s}})}customGrad(t){return I(J(t),()=>"The f passed in customGrad(f) must be a function."),(...e)=>{let n;I(e.every(t=>t instanceof St),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");const s={};return e.forEach((t,e)=>{s[e]=t}),this.runKernelFunc((s,r)=>(n=t(...e,r),I(n.value instanceof St,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),I(J(n.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),n.value),s,(t,s)=>{const r=n.gradFunc(t,s),a=Array.isArray(r)?r:[r];I(a.length===e.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),I(a.every(t=>t instanceof St),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const i={};return a.forEach((t,e)=>{i[e]=()=>t}),i})}}readSync(t){return this.state.tensorInfo.get(t).backend.readSync(t)}read(t){return this.state.tensorInfo.get(t).backend.read(t)}async time(t){const e=it(),n=await this.backend.time(t);return n.wallMs=it()-e,n}track(t){return null!=this.state.activeScope&&(t.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(t)),t}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Pt;for(const t in this.registry)this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function Vt(){const e=o();if(null==e._tfengine){const t=new r(e);e._tfengine=new Wt(t)}var n;return n=e._tfengine.ENV,t.ENV=n,Nt=()=>e._tfengine,e._tfengine}Wt.nextTensorId=0,Wt.nextVariableId=0;const Ut=Vt();function Gt(t,e){const n={a:t,b:e};return Ut.runKernelFunc((n,s)=>{const r=n.add(t,e);return s([t,e]),r},n,null,u)}function Ht(){if("undefined"!=typeof navigator&&null!=navigator){const t=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function jt(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}var qt=Object.freeze({__proto__:null,isMobile:Ht,isBrowser:jt});const Kt=a();function Xt(t,e){let n=t;if(G(t))return"string"===e?[]:[t.length];if(!Array.isArray(t))return[];const s=[];for(;Array.isArray(n)||G(n)&&"string"!==e;)s.push(n.length),n=n[0];return Array.isArray(t)&&a().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&function t(e,n,s){if(s=s||[],!Array.isArray(e)&&!G(e))return void I(0===n.length,()=>`Element arr[${s.join("][")}] is a primitive, but should be an array/TypedArray of ${n[0]} elements`);I(n.length>0,()=>`Element arr[${s.join("][")}] should be a primitive, but is an array of ${e.length} elements`),I(e.length===n[0],()=>`Element arr[${s.join("][")}] should have ${n[0]} elements, but has ${e.length} elements`);const r=n.slice(1);for(let n=0;n<e.length;++n)t(e[n],r,s.concat(n))}(t,s,[]),s}function Yt(t,e,n,s){if(null!=t&&("numeric"!==t&&t!==e||"numeric"===t&&"string"===e))throw new Error(`Argument '${n}' passed to '${s}' must be ${t} tensor, but got ${e} tensor`)}function Jt(t,e,n,s="numeric"){if(t instanceof St)return Yt(s,t.dtype,e,n),t;let r=Y(t);if("string"!==r&&["bool","int32","float32"].indexOf(s)>=0&&(r=s),Yt(s,r,e,n),null==t||!G(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t){const s=null==t?"null":t.constructor.name;throw new Error(`Argument '${e}' passed to '${n}' must be a Tensor or TensorLike, but got '${s}'`)}const a=Xt(t,r);G(t)||Array.isArray(t)||(t=[t]);const i="string"!==r?et(t,r):A(t,[],!0);return Ut.makeTensor(i,a,r)}function Zt(t,e,n,s="numeric"){if(!Array.isArray(t))throw new Error(`Argument ${e} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return t.map((t,s)=>Jt(t,`${e}[${s}]`,n),s)}Kt.registerFlag("DEBUG",()=>!1,t=>{t&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),Kt.registerFlag("IS_BROWSER",()=>jt()),Kt.registerFlag("IS_NODE",()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node),Kt.registerFlag("IS_CHROME",()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),Kt.registerFlag("PROD",()=>!1),Kt.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>Kt.getBool("DEBUG")),Kt.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),Kt.registerFlag("IS_TEST",()=>!1);function Qt(t){const e=Object.keys(t);if(1!==e.length)throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with "+e.length+" keys.");let n=e[0];const s=t[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+="__op";const r=(...t)=>{Ut.startScope(n);try{const e=s(...t);return e instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),Ut.endScope(e),e}catch(t){throw Ut.endScope(null),t}};return Object.defineProperty(r,"name",{value:n,configurable:!0}),r}const te=Qt({complex_:function(t,e){const n=Jt(t,"real","complex"),s=Jt(e,"imag","complex");E(n.shape,s.shape,`real and imag shapes, ${n.shape} and ${s.shape}, must match in call to tf.complex().`);const r={real:n,imag:s};return Ut.runKernelFunc(t=>t.complex(n,s),r,null,"Complex")}});function ee(t,e,n,s){if(null==s&&(s=Y(t)),"complex64"===s)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!G(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=e){ot(e);const t=$(e),s=$(n);I(t===s,()=>`Based on the provided shape, [${e}], the tensor should have ${t} values but has ${s}`);for(let t=0;t<n.length;++t){const s=n[t],r=t!==n.length-1||s!==$(e.slice(t));I(n[t]===e[t]||!r,()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${e}). `)}}return G(t)||Array.isArray(t)||(t=[t]),e=e||n,t="string"!==s?et(t,s):A(t,[],!0),Ut.makeTensor(t,e,s)}function ne(t,e,n){return ee(t,e,Xt(t,n),n)}const se={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};async function re(t,e){const n=[],s=[],r=Array.isArray(t)?t.map(t=>t.name):Object.keys(t);for(let a=0;a<r.length;++a){const i=r[a],o=Array.isArray(t)?t[a].tensor:t[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const l={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const t=new Promise(async t=>{const e=await o.bytes(),n=e.reduce((t,e)=>t+e.length,0)+4*e.length,s=new Uint8Array(n);let r=0;for(let t=0;t<e.length;t++){const n=e[t],a=new Uint8Array(new Uint32Array([n.length]).buffer);s.set(a,r),r+=4,s.set(n,r),r+=n.length}t(s)});s.push(t)}else s.push(o.data());null!=e&&(l.group=e),n.push(l)}return{data:ie(await Promise.all(s)),specs:n}}function ae(t,e){const n={};let s,r=0;for(const a of e){const e=a.name,i=a.dtype,o=a.shape,l=$(o);let u;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==i)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${i}.`)}const o=se[n.dtype],c=t.slice(r,r+l*o),h="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===i)if("uint8"===n.dtype||"uint16"===n.dtype){u=new Float32Array(h.length);for(let t=0;t<h.length;t++){const e=h[t];u[t]=e*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===s&&(s=pe()),u=s(h)}else{if("int32"!==i)throw new Error(`Unsupported dtype in weight '${e}': ${i}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);u=new Int32Array(h.length);for(let t=0;t<h.length;t++){const e=h[t];u[t]=Math.round(e*n.scale+n.min)}}r+=l*o}else if("string"===i){const e=$(a.shape);u=[];for(let n=0;n<e;n++){const e=new Uint32Array(t.slice(r,r+4))[0];r+=4;const n=new Uint8Array(t.slice(r,r+e));u.push(n),r+=e}}else{const s=se[i],a=t.slice(r,r+l*s);if("float32"===i)u=new Float32Array(a);else if("int32"===i)u=new Int32Array(a);else if("bool"===i)u=new Uint8Array(a);else{if("complex64"!==i)throw new Error(`Unsupported dtype in weight '${e}': ${i}`);{u=new Float32Array(a);const t=new Float32Array(u.length/2),s=new Float32Array(u.length/2);for(let e=0;e<t.length;e++)t[e]=u[2*e],s[e]=u[2*e+1];const r=ne(t,o,"float32"),i=ne(s,o,"float32");n[e]=te(r,i)}}r+=l*s}"complex64"!==i&&(n[e]=ne(u,o,i))}return n}function ie(t){if(null===t)throw new Error("Invalid input value: "+JSON.stringify(t));let e=0;const n=[];t.forEach(t=>{if(e+=t.byteLength,n.push(t.byteLength===t.buffer.byteLength?t:new t.constructor(t)),!(t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array))throw new Error("Unsupported TypedArray subtype: "+t.constructor.name)});const s=new Uint8Array(e);let r=0;return n.forEach(t=>{s.set(new Uint8Array(t.buffer),r),r+=t.byteLength}),s.buffer}const oe="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function le(t){return oe?Buffer.byteLength(t):new Blob([t]).size}function ue(t){if(1===t.length)return t[0];let e=0;t.forEach(t=>{e+=t.byteLength});const n=new Uint8Array(e);let s=0;return t.forEach(t=>{n.set(new Uint8Array(t),s),s+=t.byteLength}),n.buffer}function ce(t){for(t=t.trim();t.endsWith("/");)t=t.slice(0,t.length-1);const e=t.split("/");return e[e.length-1]}function he(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==t.modelTopology?0:le(JSON.stringify(t.modelTopology)),weightSpecsBytes:null==t.weightSpecs?0:le(JSON.stringify(t.weightSpecs)),weightDataBytes:null==t.weightData?0:t.weightData.byteLength}}function pe(){const t=function(){const t=t=>{let e=t<<13,n=0;for(;0==(8388608&e);)n-=8388608,e<<=1;return e&=-8388609,n+=947912704,e|n},e=new Uint32Array(2048);e[0]=0;for(let n=1;n<1024;n++)e[n]=t(n);for(let t=1024;t<2048;t++)e[t]=939524096+(t-1024<<13);return e}(),e=function(){const t=new Uint32Array(64);t[0]=0,t[31]=1199570944,t[32]=2147483648,t[63]=3347054592;for(let e=1;e<31;e++)t[e]=e<<23;for(let e=33;e<63;e++)t[e]=2147483648+(e-32<<23);return t}(),n=function(){const t=new Uint32Array(64);for(let e=0;e<64;e++)t[e]=1024;return t[0]=t[32]=0,t}();return s=>{const r=new ArrayBuffer(4*s.length),a=new Uint32Array(r);for(let r=0;r<s.length;r++){const i=s[r],o=t[n[i>>10]+(1023&i)]+e[i>>10];a[r]=o}return new Float32Array(r)}}class de{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==de.instance&&(de.instance=new de),de.instance}static registerSaveRouter(t){de.getInstance().saveRouters.push(t)}static registerLoadRouter(t){de.getInstance().loadRouters.push(t)}static getSaveHandlers(t){return de.getHandlers(t,"save")}static getLoadHandlers(t,e){return de.getHandlers(t,"load",e)}static getHandlers(t,e,n){const s=[];return("load"===e?de.getInstance().loadRouters:de.getInstance().saveRouters).forEach(e=>{const r=e(t,n);null!==r&&s.push(r)}),s}}const fe=t=>de.getSaveHandlers(t),me=(t,e)=>de.getLoadHandlers(t,e);function ge(){if(!a().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const t="undefined"==typeof window?self:window,e=t.indexedDB||t.mozIndexedDB||t.webkitIndexedDB||t.msIndexedDB||t.shimIndexedDB;if(null==e)throw new Error("The current browser does not appear to support IndexedDB.");return e}function ye(t){const e=t.result;e.createObjectStore("models_store",{keyPath:"modelPath"}),e.createObjectStore("model_info_store",{keyPath:"modelPath"})}class be{constructor(t){if(this.indexedDB=ge(),null==t||!t)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=t}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,t)}async load(){return this.databaseAction(this.modelPath)}databaseAction(t,e){return new Promise((t,n)=>{const s=this.indexedDB.open("tensorflowjs",1);s.onupgradeneeded=()=>ye(s),s.onsuccess=()=>{const r=s.result;if(null==e){const e=r.transaction("models_store","readonly"),s=e.objectStore("models_store").get(this.modelPath);s.onsuccess=()=>{if(null==s.result)return r.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));t(s.result.modelArtifacts)},s.onerror=t=>(r.close(),n(s.error)),e.oncomplete=()=>r.close()}else{const s=he(e),a=r.transaction("model_info_store","readwrite");let i=a.objectStore("model_info_store");const o=i.put({modelPath:this.modelPath,modelArtifactsInfo:s});let l;o.onsuccess=()=>{l=r.transaction("models_store","readwrite");const o=l.objectStore("models_store").put({modelPath:this.modelPath,modelArtifacts:e,modelArtifactsInfo:s});o.onsuccess=()=>t({modelArtifactsInfo:s}),o.onerror=t=>{i=a.objectStore("model_info_store");const e=i.delete(this.modelPath);e.onsuccess=()=>(r.close(),n(o.error)),e.onerror=t=>(r.close(),n(o.error))}},o.onerror=t=>(r.close(),n(o.error)),a.oncomplete=()=>{null==l?r.close():l.oncomplete=()=>r.close()}}},s.onerror=t=>n(s.error)})}}be.URL_SCHEME="indexeddb://";const xe=t=>{return a().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(be.URL_SCHEME)?(e=t.slice(be.URL_SCHEME.length),new be(e)):null;var e};de.registerSaveRouter(xe),de.registerLoadRouter(xe);class we{constructor(){this.indexedDB=ge()}async listModels(){return new Promise((t,e)=>{const n=this.indexedDB.open("tensorflowjs",1);n.onupgradeneeded=()=>ye(n),n.onsuccess=()=>{const s=n.result,r=s.transaction("model_info_store","readonly"),a=r.objectStore("model_info_store").getAll();a.onsuccess=()=>{const e={};for(const t of a.result)e[t.modelPath]=t.modelArtifactsInfo;t(e)},a.onerror=t=>(s.close(),e(a.error)),r.oncomplete=()=>s.close()},n.onerror=t=>e(n.error)})}async removeModel(t){var e;return t=(e=t).startsWith(be.URL_SCHEME)?e.slice(be.URL_SCHEME.length):e,new Promise((e,n)=>{const s=this.indexedDB.open("tensorflowjs",1);s.onupgradeneeded=()=>ye(s),s.onsuccess=()=>{const r=s.result,a=r.transaction("model_info_store","readwrite"),i=a.objectStore("model_info_store"),o=i.get(t);let l;o.onsuccess=()=>{if(null==o.result)return r.close(),n(new Error(`Cannot find model with path '${t}' in IndexedDB.`));{const s=i.delete(t),a=()=>{l=r.transaction("models_store","readwrite");const s=l.objectStore("models_store").delete(t);s.onsuccess=()=>e(o.result.modelArtifactsInfo),s.onerror=t=>n(o.error)};s.onsuccess=a,s.onerror=t=>(a(),r.close(),n(o.error))}},o.onerror=t=>(r.close(),n(o.error)),a.oncomplete=()=>{null==l?r.close():l.oncomplete=()=>r.close()}},s.onerror=t=>n(s.error)})}}const ve="tensorflowjs_models",Ne="info",ke="model_topology",Ce="weight_specs",Se="weight_data",Ie="model_metadata";function Ee(t){return{info:[ve,t,Ne].join("/"),topology:[ve,t,ke].join("/"),weightSpecs:[ve,t,Ce].join("/"),weightData:[ve,t,Se].join("/"),modelMetadata:[ve,t,Ie].join("/")}}function Te(t){const e=t.split("/");if(e.length<3)throw new Error("Invalid key format: "+t);return e.slice(1,e.length-1).join("/")}class Ae{constructor(t){if(!a().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==t||!t)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=t,this.keys=Ee(this.modelPath)}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const e=JSON.stringify(t.modelTopology),n=JSON.stringify(t.weightSpecs),s=he(t);try{return this.LS.setItem(this.keys.info,JSON.stringify(s)),this.LS.setItem(this.keys.topology,e),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(t){if(oe)return Buffer.from(t).toString("base64");const e=new Uint8Array(t);let n="";for(let t=0,s=e.length;t<s;t++)n+=String.fromCharCode(e[t]);return btoa(n)}(t.weightData)),this.LS.setItem(this.keys.modelMetadata,JSON.stringify({format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata})),{modelArtifactsInfo:s}}catch(t){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${s.modelTopologyBytes}, weightSpecsBytes=${s.weightSpecsBytes}, weightDataBytes=${s.weightDataBytes}.`)}}}async load(){const t=JSON.parse(this.LS.getItem(this.keys.info));if(null==t)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==t.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const e={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);e.modelTopology=n;const s=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==s)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);e.weightSpecs=s;const r=this.LS.getItem(this.keys.modelMetadata);if(null!=r){const t=JSON.parse(r);e.format=t.format,e.generatedBy=t.generatedBy,e.convertedBy=t.convertedBy,e.userDefinedMetadata=t.userDefinedMetadata}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return e.weightData=function(t){if(oe){const e=Buffer.from(t,"base64");return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}const e=atob(t),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)n.set([e.charCodeAt(t)],t);return n.buffer}(a),e}}Ae.URL_SCHEME="localstorage://";const $e=t=>{return a().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(Ae.URL_SCHEME)?(e=t.slice(Ae.URL_SCHEME.length),new Ae(e)):null;var e};de.registerSaveRouter($e),de.registerLoadRouter($e);class Re{constructor(){I(a().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),I("undefined"==typeof window||void 0!==window.localStorage,()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){const t={},e=ve+"/",n="/"+Ne;for(let s=0;s<this.LS.length;++s){const r=this.LS.key(s);if(r.startsWith(e)&&r.endsWith(n)){t[Te(r)]=JSON.parse(this.LS.getItem(r))}}return t}async removeModel(t){var e;const n=Ee(t=(e=t).startsWith(Ae.URL_SCHEME)?e.slice(Ae.URL_SCHEME.length):e);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${t}'`);const s=JSON.parse(this.LS.getItem(n.info));return this.LS.removeItem(n.info),this.LS.removeItem(n.topology),this.LS.removeItem(n.weightSpecs),this.LS.removeItem(n.weightData),s}}class De{constructor(){this.managers={}}static getInstance(){return null==De.instance&&(De.instance=new De),De.instance}static registerManager(t,e){I(null!=t,()=>"scheme must not be undefined or null."),t.endsWith("://")&&(t=t.slice(0,t.indexOf("://"))),I(t.length>0,()=>"scheme must not be an empty string.");const n=De.getInstance();I(null==n.managers[t],()=>`A model store manager is already registered for scheme '${t}'.`),n.managers[t]=e}static getManager(t){const e=this.getInstance().managers[t];if(null==e)throw new Error(`Cannot find model manager for scheme '${t}'`);return e}static getSchemes(){return Object.keys(this.getInstance().managers)}}function _e(t){if(-1===t.indexOf("://"))throw new Error("The url string provided does not contain a scheme. Supported schemes are: "+De.getSchemes().join(","));return{scheme:t.split("://")[0],path:t.split("://")[1]}}async function Fe(t,e,n=!1){I(t!==e,()=>`Old path and new path are the same: '${t}'`);const s=de.getLoadHandlers(t);I(s.length>0,()=>`Copying failed because no load handler is found for source URL ${t}.`),I(s.length<2,()=>`Copying failed because more than one (${s.length}) load handlers for source URL ${t}.`);const r=s[0],a=de.getSaveHandlers(e);I(a.length>0,()=>`Copying failed because no save handler is found for destination URL ${e}.`),I(a.length<2,()=>`Copying failed because more than one (${s.length}) save handlers for destination URL ${e}.`);const i=a[0],o=_e(t).scheme,l=_e(t).path,u=o===_e(t).scheme,c=await r.load();n&&u&&await De.getManager(o).removeModel(l);const h=await i.save(c);return n&&!u&&await De.getManager(o).removeModel(l),h.modelArtifactsInfo}class Oe{fetch(t,e){return fetch(t,e)}now(){return performance.now()}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error("Browser's encoder only supports utf-8, but got "+e);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)}decode(t,e){return new TextDecoder(e).decode(t)}}if(a().get("IS_BROWSER")){a().setPlatform("browser",new Oe);try{De.registerManager(Ae.URL_SCHEME,new Re)}catch(t){}try{De.registerManager(be.URL_SCHEME,new we)}catch(t){}}const Me=()=>require("node-fetch");let Le;class ze{constructor(){this.util=require("util"),this.textEncoder=new this.util.TextEncoder}fetch(t,e){return null!=a().global.fetch?a().global.fetch(t,e):(null==Le&&(Le=Me()),Le(t,e))}now(){const t=process.hrtime();return 1e3*t[0]+t[1]/1e6}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error("Node built-in encoder only supports utf-8, but got "+e);return this.textEncoder.encode(t)}decode(t,e){return 0===t.length?"":new this.util.TextDecoder(e).decode(t)}}function Be(t,e="float32",n){return e=e||"float32",ot(t),new vt(t,e,n)}a().get("IS_NODE")&&a().setPlatform("node",new ze);const Pe=Qt({cast_:function(t,e){const n=Jt(t,"x","cast");if(!V(e))throw new Error("Failed to cast to unknown dtype "+e);if("string"===e&&"string"!==n.dtype||"string"!==e&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const s={x:n},r={dtype:e};return Ut.runKernelFunc(t=>t.cast(n,e),s,null,"Cast",r)}});const We=Qt({clone_:function(t){const e=Jt(t,"x","clone",null),n={x:e};return Ut.runKernelFunc(()=>Ut.makeTensorFromDataId(e.dataId,e.shape,e.dtype),n,null,"Identity")}});function Ve(t,e=!1){console.log(t.toString(e))}Vt(),kt={buffer:Be,cast:Pe,clone:We,print:Ve};function Ue(t){return new Promise(t=>setTimeout(t)).then(t)}class Ge{constructor(t){if(!a().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");t.startsWith(Ge.URL_SCHEME)&&(t=t.slice(Ge.URL_SCHEME.length)),null!=t&&0!==t.length||(t="model"),this.modelTopologyFileName=t+".json",this.weightDataFileName=t+".weights.bin"}async save(t){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const e=window.URL.createObjectURL(new Blob([t.weightData],{type:"application/octet-stream"}));if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=[{paths:["./"+this.weightDataFileName],weights:t.weightSpecs}],s={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,weightsManifest:n},r=window.URL.createObjectURL(new Blob([JSON.stringify(s)],{type:"application/json"})),a=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor;if(a.download=this.modelTopologyFileName,a.href=r,await Ue(()=>a.dispatchEvent(new MouseEvent("click"))),null!=t.weightData){const t=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;t.download=this.weightDataFileName,t.href=e,await Ue(()=>t.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:he(t)}}}}Ge.URL_SCHEME="downloads://";class He{constructor(t){if(null==t||t.length<1)throw new Error("When calling browserFiles, at least 1 file is required, but received "+t);this.files=t}async load(){const t=this.files[0],e=this.files.slice(1);return new Promise((n,s)=>{const r=new FileReader;r.onload=r=>{const a=JSON.parse(r.target.result),i=a.modelTopology;if(null==i)return void s(new Error("modelTopology field is missing from file "+t.name));0===e.length&&n({modelTopology:i});const o=a.weightsManifest;if(null==o)return void s(new Error("weightManifest field is missing from file "+t.name));let l;try{l=this.checkManifestAndWeightFiles(o,e)}catch(t){return void s(t)}const u=[],c=[],h=[];o.forEach(t=>{t.paths.forEach(t=>{c.push(t),h.push(null)}),u.push(...t.weights)}),o.forEach(t=>{t.paths.forEach(t=>{const e=new FileReader;e.onload=e=>{const s=e.target.result,r=c.indexOf(t);h[r]=s,-1===h.indexOf(null)&&n({modelTopology:i,weightSpecs:u,weightData:ue(h),format:a.format,generatedBy:a.generatedBy,convertedBy:a.convertedBy,userDefinedMetadata:a.userDefinedMetadata})},e.onerror=e=>s(`Failed to weights data from file of path '${t}'.`),e.readAsArrayBuffer(l[t])})})},r.onerror=e=>s(`Failed to read model topology and weights manifest JSON from file '${t.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),r.readAsText(t)})}checkManifestAndWeightFiles(t,e){const n=[],s=e.map(t=>ce(t.name)),r={};for(const a of t)a.paths.forEach(t=>{const a=ce(t);if(-1!==n.indexOf(a))throw new Error(`Duplicate file basename found in weights manifest: '${a}'`);if(n.push(a),-1===s.indexOf(a))throw new Error(`Weight file with basename '${a}' is not provided.`);r[t]=e[s.indexOf(a)]});if(n.length!==e.length)throw new Error(`Mismatch in the number of files in weights manifest (${n.length}) and the number of weight files provided (${e.length}).`);return r}}function je(t,e,n,s){!function(t){I(null!=t&&Array.isArray(t)&&t.length>0,()=>"promises must be a none empty array")}(t),function(t,e){I(t>=0&&t<=1,()=>"Progress fraction must be in range [0, 1], but got startFraction "+t),I(e>=0&&e<=1,()=>"Progress fraction must be in range [0, 1], but got endFraction "+e),I(e>=t,()=>`startFraction must be no more than endFraction, but got startFraction ${t} and endFraction `+e)}(n=null==n?0:n,s=null==s?1:s);let r=0;return Promise.all(t.map(a=>(a.then(a=>{const i=n+ ++r/t.length*(s-n);return e(i),a}),a)))}async function qe(t,e){null==e&&(e={});const n=null==e.fetchFunc?a().platform.fetch:e.fetchFunc,s=t.map(t=>n(t,e.requestInit,{isBinary:!0})),r=(null==e.onProgress?await Promise.all(s):await je(s,e.onProgress,0,.5)).map(t=>t.arrayBuffer());return null==e.onProgress?await Promise.all(r):await je(r,e.onProgress,.5,1)}async function Ke(t,e="",n,s){return Xe(t=>qe(t,{requestInit:s}))(t,e,n)}function Xe(t){return async(e,n="",s)=>{const r=e.map(()=>!1),a={},i=null!=s?s.map(()=>!1):[],o=[];if(e.forEach((t,e)=>{let n=0;t.weights.forEach(t=>{const l="quantization"in t?t.quantization.dtype:t.dtype,u=se[l]*$(t.shape),c=()=>{r[e]=!0,null==a[e]&&(a[e]=[]),a[e].push({manifestEntry:t,groupOffset:n,sizeBytes:u})};null!=s?s.forEach((e,n)=>{e===t.name&&(c(),i[n]=!0)}):c(),o.push(t.name),n+=u})}),!i.every(t=>t)){const t=s.filter((t,e)=>!i[e]);throw new Error("Could not find weights in manifest with names: "+t.join(", ")+". \nManifest JSON has weights with names: "+o.join(", ")+".")}const l=r.reduce((t,e,n)=>(e&&t.push(n),t),[]),u=[];l.forEach(t=>{e[t].paths.forEach(t=>{const e=n+(n.endsWith("/")?"":"/")+t;u.push(e)})});const c=await t(u),h={};let p=0;return l.forEach(t=>{const n=e[t].paths.length;let s=0;for(let t=0;t<n;t++)s+=c[p+t].byteLength;const r=new ArrayBuffer(s),i=new Uint8Array(r);let o=0;for(let t=0;t<n;t++){const e=new Uint8Array(c[p+t]);i.set(e,o),o+=e.byteLength}a[t].forEach(t=>{const e=ae(r.slice(t.groupOffset,t.groupOffset+t.sizeBytes),[t.manifestEntry]);for(const t in e)h[t]=e[t]}),p+=n}),h}}de.registerSaveRouter(t=>a().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(Ge.URL_SCHEME)?function(t="model"){return new Ge(t)}(t.slice(Ge.URL_SCHEME.length)):null);class Ye{constructor(t,e){if(this.DEFAULT_METHOD="POST",null==e&&(e={}),this.weightPathPrefix=e.weightPathPrefix,this.onProgress=e.onProgress,this.weightUrlConverter=e.weightUrlConverter,null!=e.fetchFunc?(I("function"==typeof e.fetchFunc,()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=e.fetchFunc):this.fetch=a().platform.fetch,I(null!=t&&t.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(t)&&I(2===t.length,()=>`URL paths for http must have a length of 2, (actual length is ${t.length}).`),this.path=t,null!=e.requestInit&&null!=e.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=e.requestInit||{}}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const e=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);e.body=new FormData;const n=[{paths:["./model.weights.bin"],weights:t.weightSpecs}],s={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata,weightsManifest:n};e.body.append("model.json",new Blob([JSON.stringify(s)],{type:"application/json"}),"model.json"),null!=t.weightData&&e.body.append("model.weights.bin",new Blob([t.weightData],{type:"application/octet-stream"}),"model.weights.bin");const r=await this.fetch(this.path,e);if(r.ok)return{modelArtifactsInfo:he(t),responses:[r]};throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status "+r.status+".")}async load(){const t=await this.fetch(this.path,this.requestInit);if(!t.ok)throw new Error(`Request to ${this.path} failed with status code `+t.status+". Please verify this URL points to the model JSON of the model to load.");let e;try{e=await t.json()}catch(t){let e=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?e+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":e+=" Please make sure the server is serving valid JSON for this request.",new Error(e)}const n=e.modelTopology,s=e.weightsManifest,r=e.generatedBy,a=e.convertedBy,i=e.format,o=e.userDefinedMetadata;if(null==n&&null==s)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);let l,u;if(null!=s){const t=await this.loadWeights(s);[l,u]=t}return{modelTopology:n,weightSpecs:l,weightData:u,userDefinedMetadata:o,generatedBy:r,convertedBy:a,format:i}}async loadWeights(t){const e=Array.isArray(this.path)?this.path[1]:this.path,[n,s]=function(t){const e=t.lastIndexOf("/"),n=t.lastIndexOf("?"),s=t.substring(0,e),r=n>e?t.substring(n):"";return[s+"/",r]}(e),r=this.weightPathPrefix||n,a=[];for(const e of t)a.push(...e.weights);const i=[],o=[];for(const e of t)for(const t of e.paths)null!=this.weightUrlConverter?o.push(this.weightUrlConverter(t)):i.push(r+t+s);return this.weightUrlConverter&&i.push(...await Promise.all(o)),[a,ue(await qe(i,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function Je(t){return null!=t.match(Ye.URL_SCHEME_REGEX)}Ye.URL_SCHEME_REGEX=/^https?:\/\//;const Ze=(t,e)=>{if("undefined"==typeof fetch&&(null==e||null==e.fetchFunc))return null;{let n=!0;if(n=Array.isArray(t)?t.every(t=>Je(t)):Je(t),n)return Qe(t,e)}return null};function Qe(t,e){return new Ye(t,e)}function tn(t,e){return Qe(t,e)}de.registerSaveRouter(Ze),de.registerLoadRouter(Ze);class en{constructor(t){this.modelArtifacts=t}async load(){return this.modelArtifacts}}class nn{constructor(t){this.saveHandler=t}async save(t){return this.saveHandler(t)}}var sn=Object.freeze({__proto__:null,browserFiles:function(t){return new He(t)},browserHTTPRequest:tn,concatenateArrayBuffers:ue,decodeWeights:ae,encodeWeights:re,fromMemory:function(t,e,n,s){if(1===arguments.length){return null!=t.modelTopology||null!=t.weightSpecs?new en(t):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new en({modelTopology:t}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new en({modelTopology:t,weightSpecs:e,weightData:n,trainingConfig:s})},getLoadHandlers:me,getModelArtifactsInfoForJSON:he,getSaveHandlers:fe,http:Qe,isHTTPScheme:Je,loadWeights:Ke,registerLoadRouter:t=>de.registerLoadRouter(t),registerSaveRouter:t=>de.registerSaveRouter(t),weightsLoaderFactory:Xe,withSaveHandler:function(t){return new nn(t)},copyModel:async function(t,e){return Fe(t,e,!1)},listModels:async function(){const t=De.getSchemes(),e={};for(const n of t){const t=await De.getManager(n).listModels();for(const s in t){e[n+"://"+s]=t[s]}}return e},moveModel:async function(t,e){return Fe(t,e,!0)},removeModel:async function(t){const e=_e(t);return De.getManager(e.scheme).removeModel(e.path)}});const rn=Qt({reshape_:function(t,e){const n=Jt(t,"x","reshape",null),s={x:n},r={shape:e};return Ut.runKernelFunc((t,s)=>(e=M(e,n.size),I(n.size===$(e),()=>"new shape and old shape must have the same number of elements."),s([n]),t.reshape(n,e)),s,null,"Reshape",r)}});const an=Qt({matMul_:function(t,e,n=!1,s=!1){let r=Jt(t,"a","matMul"),a=Jt(e,"b","matMul");[r,a]=Ot(r,a),I(r.rank>=2&&a.rank>=2&&r.rank===a.rank,()=>`Error in matMul: inputs must have the same rank of at least 2, got ranks ${r.rank} and ${a.rank}.`);const i=n?r.shape[r.rank-2]:r.shape[r.rank-1],o=s?a.shape[a.rank-1]:a.shape[a.rank-2],l=n?r.shape[r.rank-1]:r.shape[r.rank-2],u=s?a.shape[a.rank-2]:a.shape[a.rank-1],c=r.shape.slice(0,-2),h=a.shape.slice(0,-2),p=$(c),d=$(h);I(R(c,h),()=>`Error in matMul: outer dimensions (${c}) and (${h}) of Tensors with shapes ${r.shape} and `+a.shape+" must match."),I(i===o,()=>`Error in matMul: inner shapes (${i}) and (${o}) of Tensors with shapes ${r.shape} and ${a.shape} and transposeA=${n} and transposeB=${s} must match.`);const f=r.shape.slice(0,-2).concat([l,u]),m=rn(r,n?[p,i,l]:[p,l,i]),g=rn(a,s?[d,u,o]:[d,o,u]),y={a:m,b:g},b={transposeA:n,transposeB:s},x=Ut.runKernelFunc((t,e)=>(e([m,g]),t.batchMatMul(m,g,n,s)),y,null,"BatchMatMul",b);return rn(x,f)}});const on=Qt({oneHot_:function(t,e,n=1,s=0){if(e<2)throw new Error("Error in oneHot: depth must be >=2, but it is "+e);const r=Jt(t,"indices","oneHot","int32"),a=[...r.shape,e],i={indices:r},o={depth:e,onValue:n,offValue:s};return Ut.runKernelFunc((t,i)=>(i([r]),rn(t.oneHot(rn(r,[r.size]),e,n,s),a)),i,null,"OneHot",o)}});const ln=Qt({transpose_:function(t,e){const n=Jt(t,"x","transpose");if(null==e&&(e=n.shape.map((t,e)=>e).reverse()),I(n.rank===e.length,()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${e}.`),e.forEach(t=>{I(t>=0&&t<n.rank,()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+" but got "+e)}),n.rank<=1)return n.clone();const s={x:n},r={perm:e};return Ut.runKernelFunc(t=>t.transpose(n,e),s,null,"Transpose",r)}});const un=Qt({confusionMatrix_:function(t,e,n){const s=Jt(t,"labels","confusionMatrix"),r=Jt(e,"predictions","confusionMatrix");I(null==n||n>0&&Number.isInteger(n),()=>"If provided, numClasses must be a positive integer, but got "+n),I(1===s.rank,()=>"Expected the rank of labels to be 1, but got "+s.rank),I(1===r.rank,()=>"Expected the rank of predictions to be 1, but got "+r.rank),I(s.shape[0]===r.shape[0],()=>`Mismatch in the number of examples: ${s.shape[0]} vs. ${r.shape[0]}. Labels and predictions should have the same number of elements.`),I(n>0&&Number.isInteger(n),()=>"numClasses is required to be a positive integer, but got "+n);const a=on(Pe(s,"int32"),n),i=on(Pe(r,"int32"),n),o=ln(a);return Pe(an(o,i),"int32")}});var cn=Object.freeze({__proto__:null,confusionMatrix:un});function hn(t,e,n){if(T(t),null!=e&&3!==e.length)throw new Error("tensor3d() requires shape to have three numbers");const s=Xt(t,n);if(3!==s.length&&1!==s.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===s.length&&null==e)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return ee(t,e,s,n)}let pn;const dn=Qt({fromPixels_:function(t,e=3){if(e>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==t)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,s=!1,r=!1,a=!1,i=!1;if(t.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&t instanceof ImageData)s=!0;else if("undefined"!=typeof HTMLVideoElement&&t instanceof HTMLVideoElement)r=!0;else if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement)a=!0;else{if(null==t.getContext)throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was "+t.constructor.name);i=!0}if(r){const e=2;if(r&&t.readyState<e)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=g("FromPixels",Ut.backendName)){const n={pixels:t},s={numChannels:e};return Ut.runKernel("FromPixels",n,s)}const[o,l]=r?[t.videoWidth,t.videoHeight]:[t.width,t.height];let u,c;if(i?u=t.getContext("2d").getImageData(0,0,o,l).data:s||n?u=t.data:(a||r)&&(null==pn&&(pn=document.createElement("canvas").getContext("2d")),pn.canvas.width=o,pn.canvas.height=l,pn.drawImage(t,0,0,o,l),u=pn.getImageData(0,0,o,l).data),4===e)c=new Int32Array(u);else{const t=o*l;c=new Int32Array(t*e);for(let n=0;n<t;n++)for(let t=0;t<e;++t)c[n*e+t]=u[4*n+t]}return hn(c,[l,o,e],"int32")}});var fn=Object.freeze({__proto__:null,toPixels:async function(t,e){let n=Jt(t,"img","toPixels");if(!(t instanceof St)){const t=n;n=Pe(t,"int32"),t.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[s,r]=n.shape.slice(0,2),a=2===n.rank?1:n.shape[2];if(a>4||2===a)throw new Error("toPixels only supports depth of size 1, 3 or 4 but got "+a);if("float32"!==n.dtype&&"int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);const i=await n.data(),o="float32"===n.dtype?255:1,l=new Uint8ClampedArray(r*s*4);for(let t=0;t<s*r;++t){const e=[0,0,0,255];for(let s=0;s<a;s++){const r=i[t*a+s];if("float32"===n.dtype){if(r<0||r>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${r}.`)}else if("int32"===n.dtype&&(r<0||r>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${r}.`);1===a?(e[0]=r*o,e[1]=r*o,e[2]=r*o):e[s]=r*o}const s=4*t;l[s+0]=Math.round(e[0]),l[s+1]=Math.round(e[1]),l[s+2]=Math.round(e[2]),l[s+3]=Math.round(e[3])}if(null!=e){e.width=r,e.height=s;const t=e.getContext("2d"),n=new ImageData(l,r,s);t.putImageData(n,0,0)}return n!==t&&n.dispose(),l},fromPixels:dn});function mn(t,e){if(t.rank<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==e.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.shape[e.rank-1]>t.rank)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${e.shape[e.rank-1]} vs. ${t.rank}`);if(0===t.size)throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${t.shape}.`);const n=e.shape,s=n[n.length-1];let r=1;for(let t=0;t<n.length-1;++t)r*=n[t];const a=t.shape,i=n.slice();i.pop();let o=1;for(let e=s;e<t.rank;++e)o*=a[e],i.push(a[e]);const l=[...Q(t.shape).map(t=>t/o),1].slice(0,s);return[i,r,o,l]}var gn=Object.freeze({__proto__:null,prepareAndValidate:mn});function yn(t,e,n){const s=e.rank>1?e.shape[e.rank-1]:1,r=e.rank>1?e.rank-1:1,a="Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: "+n.shape+`, indices.shape: ${e.shape}, shape: ${t}`+`, sliceDim: ${s}, and batchDim: ${r}.`;if(n.rank<r)throw new Error(a+` update.rank < ${r}. `);if(t.length<s+(n.rank-r))throw new Error(a+" Output shape length < "+(s+(n.rank-r)));if(n.rank!==r+t.length-s)throw new Error(a+" update.rank != "+(r+t.length-s));for(let t=0;t<r;++t)if(n.shape[t]!==e.shape[t])throw new Error(a+` updates.shape[${t}] (${n.shape[t]}) != indices.shape[${t}] (${e.shape[t]}).`);for(let e=0;e<n.rank-r;++e)if(n.shape[e+r]!==t[e+s])throw new Error(a+` updates.shape[${e+r}] (${n.shape[e+r]}) != shape[${e+r}] (${t[e+r]})`)}function bn(t,e,n){if(e.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);if(t.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${t.rank}.`);if("int32"!==e.dtype)throw new Error("The dtype of 'indices' should be int32, but got dtype: "+e.dtype);if(n.length<1)throw new Error("Output rank must be greater or equal to 1, but got shape: "+n);if(0===n.length){if(0===e.size)throw new Error("Indices specified for empty output. indices shape: "+e.shape);if(0===t.size)throw new Error("Updates specified for empty output. updates shape: "+t.shape)}yn(n,e,t)}function xn(t,e,n){const s=e.shape.length,r=s>1?e.shape[s-1]:1,a=n.length;let i=1;for(let t=r;t<a;++t)i*=n[t];const o=r<1?1:r;return{sliceRank:r,numUpdates:$(e.shape)/o,sliceSize:i,strides:[...Q(n.slice(0,r)),1],outputSize:$(n)}}var wn=Object.freeze({__proto__:null,validateUpdateShape:yn,validateInput:bn,calculateShapes:xn});function vn(t,e,n){const s=t.shape.length;I(s===e.length,()=>`Error in slice${s}D: Length of begin ${e} must match the rank of the array (${s}).`),I(s===n.length,()=>`Error in slice${s}D: Length of size ${n} must match the rank of the array (${s}).`);for(let r=0;r<s;++r)I(e[r]+n[r]<=t.shape[r],()=>`Error in slice${s}D: begin[${r}] + size[${r}] (${e[r]+n[r]}) would overflow input.shape[${r}] (${t.shape[r]})`)}function Nn(t){const e=[];let n=0;for(;t>0;)1&t&&e.push(n),t/=2,n++;return e}function kn(t,e,n){const s=[];for(let r=0;r<t.length;r++)s[r]=Math.ceil((e[r]-t[r])/n[r]);return s}function Cn(t,e,n,s){const r=[...t];for(let t=r.length;t<s.length;t++)r.push(1);for(let t=0;t<n;t++)0===t?r[e]=1:(r.splice(e,0,1),r.pop());return r}function Sn(t,e,n){return n<=t?n:n-(e-1)}function In(t,e){const n=[];for(let s=0;s<t;s++)n.push(e+s);return n}function En(t,e,n,s,r,a,i,o,l){const u=t.length;let c=new Array(u),h=new Array(u),p=new Array(u);if(e.length&&n>0){const l=e[0],u=n+1;c=Tn(i,l,u,s,t),h=An(o,l,u,r,t),p=Cn(a,l,u,t)}else for(let e=0;e<u;e++)c[e]=Rn(i,s,a,t,e,l),h[e]=Dn(o,r,a,t,e,l),p[e]=$n(a,e,l);return{begin:c,end:h,strides:p}}function Tn(t,e,n,s,r){const a=[...r],i=In(n,e);for(let r=0;r<a.length;r++)if(i.indexOf(r)>-1)a[r]=0;else{const i=Sn(e,n,r);let o=s[i];t&1<<i&&(o=0),a[r]=o}return a}function An(t,e,n,s,r){const a=[...r],i=In(n,e);for(let r=0;r<a.length;r++)if(i.indexOf(r)>-1)a[r]=Number.MAX_SAFE_INTEGER;else{const i=Sn(e,n,r);let o=s[i];t&1<<i&&(o=Number.MAX_SAFE_INTEGER),a[r]=o}for(let t=0;t<a.length;t++){const e=r[t];a[t]<0&&(a[t]+=e),a[t]=k(0,a[t],r[t])}return a}function $n(t,e,n){let s=t[e];return(n&1<<e||null==s)&&(s=1),s}function Rn(t,e,n,s,r,a){let i=e[r];const o=n[r]||1;(t&1<<r||a&1<<r||null==i)&&(i=o>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=s[r];return i<0&&(i+=l),i=k(0,i,l-1),i}function Dn(t,e,n,s,r,a){let i=e[r];const o=n[r]||1;(t&1<<r||a&1<<r||null==i)&&(i=o>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=s[r];return i<0&&(i+=l),i=o>0?k(0,i,l):k(-1,i,l-1),i}function _n(t,e,n){let s=n.length;for(let t=0;t<n.length;t++)if(n[t]>1){s=t;break}for(let r=s+1;r<n.length;r++)if(e[r]>0||n[r]!==t[r])return!1;return!0}function Fn(t,e){let n=t.length>0?t[t.length-1]:1;for(let s=0;s<t.length-1;s++)n+=t[s]*e[s];return n}function On(t,e,n){let s;const r=t.shape.length;let a;return s="number"==typeof e?[e,...new Array(r-1).fill(0)]:e.length<r?e.concat(new Array(r-e.length).fill(0)):e.slice(),s.forEach(t=>{I(-1!==t,()=>"slice() does not support negative begin indexing.")}),a=null==n?new Array(r).fill(-1):"number"==typeof n?[n,...new Array(r-1).fill(-1)]:n.length<r?n.concat(new Array(r-n.length).fill(-1)):n,a=a.map((e,n)=>e>=0?e:(I(-1===e,()=>`Negative size values should be exactly -1 but got ${e} for the slice() size at index ${n}.`),t.shape[n]-s[n])),[s,a]}var Mn=Object.freeze({__proto__:null,assertParamsValid:vn,maskToAxes:Nn,computeOutShape:kn,stridesWithElidedDims:Cn,getNormalizedAxes:En,startIndicesWithElidedDims:Tn,stopIndicesWithElidedDims:An,stridesForAxis:$n,startForAxis:Rn,stopForAxis:Dn,isSliceContinous:_n,computeFlatOffset:Fn,parseSliceParams:On});class Ln{getClassName(){return this.constructor.className}static fromConfig(t,e){return new t(e)}}class zn{constructor(){this.classNameMap={}}static getMap(){return null==zn.instance&&(zn.instance=new zn),zn.instance}static register(t){zn.getMap().classNameMap[t.className]=[t,t.fromConfig]}}function Bn(t){I(null!=t.className,()=>"Class being registered does not have the static className property defined."),I("string"==typeof t.className,()=>"className is required to be a string, but got type "+typeof t.className),I(t.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),zn.register(t)}var Pn=Object.freeze({__proto__:null,Serializable:Ln,SerializationMap:zn,registerClass:Bn});function Wn(){return 32===Ut.backend.floatPrecision()?.001:.1}function Vn(t,e,n){let s=!0;if((G(t)||G(e))&&(s=!1),G(t)&&G(e)&&(s=!0),s){const n=t.constructor.name,s=e.constructor.name;if(n!==s)throw new Error(`Arrays are of different type. Actual: ${n}. Expected: `+s)}if(Array.isArray(t)&&Array.isArray(e)){const n=Xt(t),s=Xt(e);if(!R(n,s))throw new Error(`Arrays have different shapes. Actual: [${n}]. Expected: [${s}]`)}const r=G(t)?t:A(t),a=G(e)?e:A(e);if(r.length!==a.length)throw new Error(`Arrays have different lengths actual: ${r.length} vs expected: ${a.length}.\nActual:   ${r}.\nExpected: ${a}.`);for(let t=0;t<a.length;++t){const e=r[t],s=a[t];if(!n(e,s))throw new Error(`Arrays differ: actual[${t}] = ${e}, expected[${t}] = ${s}.\nActual:   ${r}.\nExpected: ${a}.`)}}function Un(t,e,n){if(null==n&&(n=Wn()),!Gn(t,e,n))throw new Error(`Numbers differ: actual === ${t}, expected === ${e}`)}function Gn(t,e,n){return!isFinite(t)&&!isFinite(e)||!(isNaN(t)||isNaN(e)||Math.abs(t-e)>n)}var Hn=Object.freeze({__proto__:null,TEST_EPSILON_FLOAT16:.1,expectArraysClose:function(t,e,n){return null==n&&(n=Wn()),Vn(t,e,(t,e)=>Gn(t,e,n))},testEpsilon:Wn,expectPromiseToFail:function(t,e){t().then(()=>e.fail(),()=>e())},expectArraysEqual:function(t,e){const n="string"==typeof e||"number"==typeof e||"boolean"==typeof e?[e]:e;return q(t)||q(t[0])||q(e)||q(e[0])?Vn(t,n,(t,e)=>t==e):Vn(t,e,(t,e)=>Gn(t,e,0))},expectNumbersClose:Un,expectValuesInRange:function(t,e,n){for(let s=0;s<t.length;s++)if(t[s]<e||t[s]>n)throw new Error(`Value out of range:${t[s]} low: ${e}, high: ${n}`)},expectArrayBuffersEqual:function(t,e){expect(new Float32Array(t)).toEqual(new Float32Array(e))}});function jn(t){a().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(t+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function qn(){return Ut}function Kn(){return Ut.memory()}function Xn(t,e){return Ut.tidy(t,e)}function Yn(t){zt(t).forEach(t=>t.dispose())}function Jn(t){return Ut.keep(t)}function Zn(t){return Ut.setBackend(t)}function Qn(t,e,n=1){return Ut.registerBackend(t,e,n)}function ts(){return Ut.backend}Ct=jn;const es=Qt({add_:function(t,e){let n=Jt(t,"a","add"),s=Jt(e,"b","add");[n,s]=Ot(n,s);const r={a:n,b:s};return Ut.runKernelFunc((t,e)=>{const r=t.add(n,s);return e([n,s]),r},r,null,u)}});const ns=Qt({floorDiv_:function(t,e){let n=Jt(t,"a","floorDiv"),s=Jt(e,"b","floorDiv");[n,s]=Ot(n,s);const r={a:n,b:s};return Ut.runKernelFunc((t,e)=>{const r=t.floorDiv(n,s);return e([n,s]),r},r,null,"FloorDiv")}});const ss=Qt({div_:function(t,e){let n=Jt(t,"a","div"),s=Jt(e,"b","div");if([n,s]=Ot(n,s),"int32"===n.dtype&&"int32"===s.dtype)return ns(n,s);const r={a:n,b:s};return Ut.runKernelFunc((t,e)=>{const r=t.realDivide(n,s);return e([n,s]),r},r,null,h,{})}});const rs=Qt({mul_:function(t,e){let n=Jt(t,"a","mul"),s=Jt(e,"b","mul");[n,s]=Ot(n,s);const r={a:n,b:s};return Ut.runKernelFunc((t,e)=>{const r=t.multiply(n,s);return e([n,s]),r},r,null,"Multiply")}});const as=Qt({abs_:function(t){const e=Jt(t,"x","abs"),n={x:e};return Ut.runKernelFunc((t,n)=>(n([e]),"complex64"===e.dtype?t.complexAbs(e):t.abs(e)),n,null,"Abs")}});const is=Qt({acos_:function(t){const e=Jt(t,"x","acos"),n={x:e};return Ut.runKernelFunc((t,n)=>{const s=t.acos(e);return n([e]),s},n,null,"Acos")}});const os=Qt({acosh_:function(t){const e=Jt(t,"x","acosh"),n={x:e};return Ut.runKernelFunc((t,n)=>{const s=t.acosh(e);return n([e]),s},n,null,"Acosh")}});const ls=Qt({addN_:function(t){I(Array.isArray(t),()=>"The argument passed to tf.addN() must be a list of tensors"),I(t.length>=1,()=>"Must pass at least one tensor to tf.addN(), but got "+t.length);const e=t.map((t,e)=>Jt(t,"tensors"+e,"addN")),n=e[0];e.forEach(t=>{if(t.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),e.forEach(t=>{if(!R(t.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")});const s=e;return Ut.runKernelFunc((t,n)=>{const s=t.addN(e);return n(e),s},s,null,"AddN")}});function us(t,e){for(let n=0;n<t.length;++n)if(t[t.length-n-1]!==e-1-n)return!1;return!0}function cs(t,e,n){const s=t.length+e.length,r=[];let a=0,i=0;for(let o=0;o<s;o++)-1===n.indexOf(o)?r.push(t[a++]):r.push(e[i++]);return r}function hs(t,e){const n=[],s=t.length;for(let r=0;r<s;r++)-1===e.indexOf(r)&&n.push(t[r]);return[n,e.map(e=>t[e])]}function ps(t,e){return cs(t,e.map(t=>1),e)}function ds(t,e,n){I(us(e,n),()=>t+" supports only inner-most axes for now. "+`Got axes ${e} and rank-${n} input.`)}function fs(t,e){if(us(t,e))return null;const n=[];for(let s=0;s<e;++s)-1===t.indexOf(s)&&n.push(s);return t.forEach(t=>n.push(t)),n}function ms(t){return t.map((t,e)=>[e,t]).sort((t,e)=>t[1]-e[1]).map(t=>t[0])}function gs(t,e){const n=[];for(let s=e-t;s<e;++s)n.push(s);return n}const ys=Qt({all_:function(t,e=null,n=!1){let s=Jt(t,"x","all","bool");const r={x:s},a={axis:e,keepDims:n};return Ut.runKernelFunc(t=>{const r=L(e,s.shape);let a=r;const i=fs(a,s.rank);null!=i&&(s=ln(s,i),a=gs(a.length,s.rank));const o=t.all(s,a);if(n){const t=ps(o.shape,r);return rn(o,t)}return o},r,null,"All",a)}});const bs=Qt({any_:function(t,e=null,n=!1){let s=Jt(t,"x","any","bool");const r={x:s},a={axis:e,keepDims:n};return Ut.runKernelFunc(t=>{const r=L(e,s.shape);let a=r;const i=fs(a,s.rank);null!=i&&(s=ln(s,i),a=gs(a.length,s.rank));const o=t.any(s,a);if(n){const t=ps(o.shape,r);return rn(o,t)}return o},r,null,"Any",a)}});const xs=Qt({argMax_:function(t,e=0){let n=Jt(t,"x","argMax");const s={x:n},r={axis:e};return Ut.runKernelFunc((t,s)=>{s([n]);let r=L(e,n.shape);const a=fs(r,n.rank);return null!=a&&(n=ln(n,a),r=gs(r.length,n.rank)),t.argMax(n,r[0])},s,null,"ArgMax",r)}});const ws=Qt({argMin_:function(t,e=0){let n=Jt(t,"x","argMin");const s={x:n},r={axis:e};return Ut.runKernelFunc((t,s)=>{s([n]),null==e&&(e=0);let r=L(e,n.shape);const a=fs(r,n.rank);return null!=a&&(n=ln(n,a),r=gs(r.length,n.rank)),t.argMin(n,r[0])},s,null,"ArgMin",r)}});const vs=Qt({asin_:function(t){const e=Jt(t,"x","asin"),n={x:e};return Ut.runKernelFunc((t,n)=>{const s=t.asin(e);return n([e]),s},n,null,"Asin")}});const Ns=Qt({asinh_:function(t){const e=Jt(t,"x","asinh"),n={x:e};return Ut.runKernelFunc((t,n)=>{const s=t.asinh(e);return n([e]),s},n,null,"Asinh")}});const ks=Qt({atan_:function(t){const e=Jt(t,"x","atan"),n={x:e};return Ut.runKernelFunc((t,n)=>{const s=t.atan(e);return n([e]),s},n,null,"Atan")}});const Cs=Qt({atan2_:function(t,e){let n=Jt(t,"a","atan2"),s=Jt(e,"b","atan2");[n,s]=Ot(n,s);const r={a:n,b:s};return Ut.runKernelFunc((t,e)=>{const r=t.atan2(n,s);return e([n,s]),r},r,null,"Atan2")}});const Ss=Qt({atanh_:function(t){const e=Jt(t,"x","atanh"),n={x:e};return Ut.runKernelFunc((t,n)=>{const s=t.atanh(e);return n([e]),s},n,null,"Atanh")}});function Is(t,e,n,s,r="NHWC",a){return As(t,[...e,t[3]],n,a,s,null,null,zs(r))}function Es(t,e,n,s,r,a,i="channelsLast"){const[o,l]=Ds(e);let u;if("channelsLast"===i)u=[o,l,t[3],t[3]];else{if("channelsFirst"!==i)throw new Error("Unknown dataFormat "+i);u=[o,l,t[1],t[1]]}return As(t,u,n,s,r,a,!1,i)}function Ts(t,e,n,s,r,a,i="NDHWC"){const[o,l,u]=_s(e);let c,h;if("NDHWC"===i)h="channelsLast",c=[o,l,u,t[4],t[4]];else{if("NCDHW"!==i)throw new Error("Unknown dataFormat "+i);h="channelsFirst",c=[o,l,u,t[1],t[1]]}return $s(t,c,n,s,r,!1,h,a)}function As(t,e,n,s,r,a,i=!1,o="channelsLast"){let[l,u,c,h]=[-1,-1,-1,-1];if("channelsLast"===o)[l,u,c,h]=t;else{if("channelsFirst"!==o)throw new Error("Unknown dataFormat "+o);[l,h,u,c]=t}const[p,d,,f]=e,[m,g]=Ds(n),[y,b]=Ds(s),x=Fs(p,y),w=Fs(d,b),{padInfo:v,outHeight:N,outWidth:k}=function(t,e,n,s,r,a,i,o,l){let u,c,h;if("number"==typeof t){u={top:t,bottom:t,left:t,right:t,type:0===t?"VALID":"NUMBER"};const r=function(t,e,n,s,r){null==s&&(s=Rs(t,e,n));const a=t[0],i=t[1],o=Os((a-e+2*s)/n+1,r);I(D(o),()=>`The output # of rows (${o}) must be an integer. Change the stride and/or zero pad parameters`);const l=Os((i-e+2*s)/n+1,r);return I(D(l),()=>`The output # of columns (${l}) must be an integer. Change the stride and/or zero pad parameters`),[o,l]}([e,n],a,s,t,o);c=r[0],h=r[1]}else if("same"===t){c=Math.ceil(e/s),h=Math.ceil(n/r);const t=Math.max(0,(c-1)*s+a-e),o=Math.max(0,(h-1)*r+i-n),l=Math.floor(t/2),p=t-l,d=Math.floor(o/2);u={top:l,bottom:p,left:d,right:o-d,type:"SAME"}}else if("valid"===t)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((e-a+1)/s),h=Math.ceil((n-i+1)/r);else{if("object"!=typeof t)throw Error("Unknown padding parameter: "+t);{const p="channelsLast"===l?t[1][0]:t[2][0],d="channelsLast"===l?t[1][1]:t[2][1],f="channelsLast"===l?t[2][0]:t[3][0],m="channelsLast"===l?t[2][1]:t[3][1];u={top:p,bottom:d,left:f,right:m,type:0===p&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=Os((e-a+p+d)/s+1,o),h=Os((n-i+f+m)/r+1,o)}}return{padInfo:u,outHeight:c,outWidth:h}}(r,u,c,m,g,x,w,a,o),C=i?f*h:f;let S;return"channelsFirst"===o?S=[l,C,N,k]:"channelsLast"===o&&(S=[l,N,k,C]),{batchSize:l,dataFormat:o,inHeight:u,inWidth:c,inChannels:h,outHeight:N,outWidth:k,outChannels:C,padInfo:v,strideHeight:m,strideWidth:g,filterHeight:p,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:t,outShape:S,filterShape:e}}function $s(t,e,n,s,r,a=!1,i="channelsLast",o){let[l,u,c,h,p]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,h,p]=t;else{if("channelsFirst"!==i)throw new Error("Unknown dataFormat "+i);[l,p,u,c,h]=t}const[d,f,m,,g]=e,[y,b,x]=_s(n),[w,v,N]=_s(s),k=Fs(d,w),C=Fs(f,v),S=Fs(m,N),{padInfo:E,outDepth:T,outHeight:A,outWidth:$}=function(t,e,n,s,r,a,i,o,l,u,c){let h,p,d,f;if("number"==typeof t){h={top:t,bottom:t,left:t,right:t,front:t,back:t,type:0===t?"VALID":"NUMBER"};const a=function(t,e,n,s,r,a){null==r&&(r=Rs(t,e,s));const i=t[0],o=t[1],l=t[2],u=Os((i-e+2*r)/s+1,a);I(D(u),()=>`The output # of depths (${u}) must be an integer. Change the stride and/or zero pad parameters`);const c=Os((o-e+2*r)/s+1,a);I(D(c),()=>`The output # of rows (${c}) must be an integer. Change the stride and/or zero pad parameters`);const h=Os((l-e+2*r)/s+1,a);return I(D(h),()=>`The output # of columns (${h}) must be an integer. Change the stride and/or zero pad parameters`),[u,c,h,n]}([e,n,s,1],o,1,r,t,c);p=a[0],d=a[1],f=a[2]}else if("same"===t){p=Math.ceil(e/r),d=Math.ceil(n/a),f=Math.ceil(s/i);const t=(p-1)*r+o-e,c=(d-1)*a+l-n,m=(f-1)*i+u-s,g=Math.floor(t/2),y=t-g,b=Math.floor(c/2),x=c-b,w=Math.floor(m/2);h={top:b,bottom:x,left:w,right:m-w,front:g,back:y,type:"SAME"}}else{if("valid"!==t)throw Error("Unknown padding parameter: "+t);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},p=Math.ceil((e-o+1)/r),d=Math.ceil((n-l+1)/a),f=Math.ceil((s-u+1)/i)}return{padInfo:h,outDepth:p,outHeight:d,outWidth:f}}(r,u,c,h,y,b,x,k,C,S,o),R=a?g*p:g;let _;return"channelsFirst"===i?_=[l,R,T,A,$]:"channelsLast"===i&&(_=[l,T,A,$,R]),{batchSize:l,dataFormat:i,inDepth:u,inHeight:c,inWidth:h,inChannels:p,outDepth:T,outHeight:A,outWidth:$,outChannels:R,padInfo:E,strideDepth:y,strideHeight:b,strideWidth:x,filterDepth:d,filterHeight:f,filterWidth:m,effectiveFilterDepth:k,effectiveFilterHeight:C,effectiveFilterWidth:S,dilationDepth:w,dilationHeight:v,dilationWidth:N,inShape:t,outShape:_,filterShape:e}}function Rs(t,e,n,s=1){const r=Fs(e,s);return Math.floor((t[0]*(n-1)-n+r)/2)}function Ds(t){return"number"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}function _s(t){return"number"==typeof t?[t,t,t]:t}function Fs(t,e){return e<=1?t:t+(t-1)*(e-1)}function Os(t,e){if(!e)return t;switch(e){case"round":return Math.round(t);case"ceil":return Math.ceil(t);case"floor":return Math.floor(t);default:throw new Error("Unknown roundingMode "+e)}}function Ms(t){const[e,n,s]=Ds(t);return 1===e&&1===n&&1===s}function Ls(t,e){return Ms(t)||Ms(e)}function zs(t){if("NHWC"===t)return"channelsLast";if("NCHW"===t)return"channelsFirst";throw new Error("Unknown dataFormat "+t)}const Bs=Qt({avgPool_:function(t,e,n,s,r){const a=Jt(t,"x","avgPool","float32");I(Ls(n,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`);let i=a,o=!1;3===a.rank&&(o=!0,i=rn(a,[1,a.shape[0],a.shape[1],a.shape[2]])),I(4===i.rank,()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`),null!=r&&I(D(s),()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`);const l={x:i},u={filterSize:e,strides:n,pad:s,dimRoundingMode:r};let c=Ut.runKernelFunc((t,a)=>{const o=Es(i.shape,e,n,1,s,r);return a([i]),1===o.filterWidth&&1===o.filterHeight&&R(o.inShape,o.outShape)?i.clone():t.avgPool(i,o)},l,null,"AvgPool",u);return c=Pe(c,a.dtype),o?rn(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Ps=Qt({avgPool3d_:function(t,e,n,s,r,a="NDHWC",i){null==i?i=[1,1,1]:jn("dilations is deprecated, this field will be gone in v3.0.0.");const o=Jt(t,"x","avgPool3d","float32");let l=o,u=!1;4===o.rank&&(u=!0,l=rn(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),I(5===l.rank,()=>`Error in avgPool3d: x must be rank 5 but got rank ${l.rank}.`),I("NDHWC"===a,()=>"Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of "+a),I(Ls(n,i),()=>`Error in avgPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`),null!=r&&I(D(s),()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`);const c={x:l},h={filterSize:e,strides:n,pad:s,dimRoundingMode:r,dataFormat:a,dilations:i};let p=Ut.runKernelFunc((t,o)=>{null==i&&(i=[1,1,1]);const u=Ts(l.shape,e,n,i,s,r,a);return o([l]),t.avgPool3d(l,u)},c,null,"AvgPool3D",h);return p=Pe(p,l.dtype),u?rn(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});function Ws(t,e){const n=t[0].length;t.forEach((t,e)=>{I(t.length===n,()=>`Error in concat${n}D: rank of tensors[${e}] must be the same as the rank of the rest (${n})`)}),I(e>=0&&e<n,()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`);const s=t[0];t.forEach((t,r)=>{for(let a=0;a<n;a++)I(a===e||t[a]===s[a],()=>`Error in concat${n}D: Shape of tensors[${r}] (${t}) does not match the shape of the rest (${s}) along the non-concatenated axis ${r}.`)})}function Vs(t,e){const n=t[0].slice();for(let s=1;s<t.length;s++)n[e]+=t[s][e];return n}const Us=Qt({concat_:function(t,e=0){I(t.length>=1,()=>"Pass at least one tensor to concat");let n=Zt(t,"tensors","concat");"complex64"===n[0].dtype&&n.forEach(t=>{if("complex64"!==t.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${t.dtype}. `)});const s=n,r={axis:e};return Ut.runKernelFunc((t,s)=>{const r=L(e,n[0].shape)[0],a=Vs(n.map(t=>t.shape),r);if(0===$(a))return ne([],a);if(n=n.filter(t=>t.size>0),1===n.length)return n[0];Ws(n.map(t=>t.shape),r);const i=t.concat(n,r);return s(n),i},s,null,"Concat",r)}});const Gs=Qt({sigmoid_:function(t){const e=Jt(t,"x","sigmoid"),n={x:e};return Ut.runKernelFunc((t,n)=>{const s=t.sigmoid(e);return n([s]),s},n,null,"Sigmoid")}});const Hs=Qt({slice_:function(t,e,n){const s=Jt(t,"x","slice");if(0===s.rank)throw new Error("Slicing scalar is not possible");const r={x:s},a={begin:e,size:n};return Ut.runKernelFunc((t,r)=>{const[a,i]=On(s,e,n);return vn(s,a,i),r([s]),t.slice(s,a,i)},r,null,"Slice",a)}});const js=Qt({tanh_:function(t){const e=Jt(t,"x","tanh"),n={x:e};return Ut.runKernelFunc((t,n)=>{const s=t.tanh(e);return n([s]),s},n,null,"Tanh")}});const qs=Qt({basicLSTMCell_:function(t,e,n,s,r,a){const i=Jt(t,"forgetBias","basicLSTMCell"),o=Jt(e,"lstmKernel","basicLSTMCell"),l=Jt(n,"lstmBias","basicLSTMCell"),u=Jt(s,"data","basicLSTMCell"),c=Jt(r,"c","basicLSTMCell"),h=Jt(a,"h","basicLSTMCell"),p=Us([u,h],1),d=an(p,o),f=es(d,l),m=f.shape[0],g=f.shape[1]/4,y=[m,g],b=Hs(f,[0,0],y),x=Hs(f,[0,g],y),w=Hs(f,[0,2*g],y),v=Hs(f,[0,3*g],y),N=es(rs(Gs(b),js(x)),rs(c,Gs(es(i,w))));return[N,rs(js(N),Gs(v))]}});const Ks=Qt({batchToSpaceND_:function(t,e,n){const s=Jt(t,"x","batchToSpaceND"),r=e.reduce((t,e)=>t*e);I(s.rank>=1+e.length,()=>`input rank is ${s.rank} but should be > than blockShape.length ${e.length}`),I(n.length===e.length,()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${e.length}`),I(s.shape[0]%r==0,()=>`input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${e.join(" * ")} === ${r}`);const a={x:s},i={blockShape:e,crops:n};return Ut.runKernelFunc(t=>t.batchToSpaceND(s,e,n),a,null,"BatchToSpaceND",i)}});function Xs(t){return null==t?null:0===t.rank?rn(t,[t.size]):1===t.rank?t:2===t.rank?rn(t,[1,1,t.shape[0],t.shape[1]]):3===t.rank?rn(t,[1,t.shape[0],t.shape[1],t.shape[2]]):t}const Ys=Qt({batchNorm_:function(t,e,n,s,r,a){null==a&&(a=.001);const i=Jt(t,"x","batchNorm"),o=Jt(e,"mean","batchNorm"),l=Jt(n,"variance","batchNorm");let u,c;null!=r&&(u=Jt(r,"scale","batchNorm")),null!=s&&(c=Jt(s,"offset","batchNorm")),I(o.rank===l.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),I(null==c||o.rank===c.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),I(null==u||o.rank===u.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");const h=function(t){let e;return e=0===t.rank||1===t.rank?rn(t,[1,1,1,t.size]):2===t.rank?rn(t,[1,1,t.shape[0],t.shape[1]]):3===t.rank?rn(t,[1,t.shape[0],t.shape[1],t.shape[2]]):t,e}(i),p={x:h,scale:u,offset:c,mean:o,variance:l},d={varianceEpsilon:a},f=Ut.runKernelFunc((t,e)=>(e([h,o,l,u]),t.batchNorm(h,Xs(o),Xs(l),Xs(c),Xs(u),a)),p,null,"FusedBatchNorm",d);return rn(f,i.shape)}});const Js=Qt({batchNorm2d_:function(t,e,n,s,r,a){const i=Jt(t,"x","batchNorm"),o=Jt(e,"mean","batchNorm"),l=Jt(n,"variance","batchNorm");let u,c;return null!=r&&(u=Jt(r,"scale","batchNorm")),null!=s&&(c=Jt(s,"offset","batchNorm")),I(2===i.rank,()=>"Error in batchNorm2D: x must be rank 2 but got rank "+i.rank+"."),I(2===o.rank||1===o.rank,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`),I(2===l.rank||1===l.rank,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`),null!=u&&I(2===u.rank||1===u.rank,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`),null!=c&&I(2===c.rank||1===c.rank,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`),Ys(i,o,l,c,u,a)}});const Zs=Qt({batchNorm3d_:function(t,e,n,s,r,a){const i=Jt(t,"x","batchNorm"),o=Jt(e,"mean","batchNorm"),l=Jt(n,"variance","batchNorm");let u,c;return null!=r&&(u=Jt(r,"scale","batchNorm")),null!=s&&(c=Jt(s,"offset","batchNorm")),I(3===i.rank,()=>"Error in batchNorm3D: x must be rank 3 but got rank "+i.rank+"."),I(3===o.rank||1===o.rank,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`),I(3===l.rank||1===l.rank,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`),null!=u&&I(3===u.rank||1===u.rank,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`),null!=c&&I(3===c.rank||1===c.rank,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`),Ys(i,o,l,c,u,a)}});const Qs=Qt({batchNorm4d_:function(t,e,n,s,r,a){const i=Jt(t,"x","batchNorm"),o=Jt(e,"mean","batchNorm"),l=Jt(n,"variance","batchNorm");let u,c;return null!=r&&(u=Jt(r,"scale","batchNorm")),null!=s&&(c=Jt(s,"offset","batchNorm")),I(4===i.rank,()=>"Error in batchNorm4D: x must be rank 4 but got rank "+i.rank+"."),I(4===o.rank||1===o.rank,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`),I(4===l.rank||1===l.rank,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`),null!=u&&I(4===u.rank||1===u.rank,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`),null!=c&&I(4===c.rank||1===c.rank,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`),Ys(i,o,l,c,u,a)}});const tr=Qt({broadcastTo_:function(t,e){let n=Jt(t,"broadcastTo","x");const s=n.shape;if(e.some(t=>!(t>0)||t%1!=0))throw new Error(`broadcastTo(): Invalid broadcast shape [${e}].`);if(e.length<n.rank)throw new Error(`broadcastTo(): shape.length=${e.length} < input.rank=${n.rank}.`);if(e.length>n.rank){const t=n.shape.slice();for(;t.length<e.length;)t.unshift(1);n=rn(n,t)}const r=n.shape,a=Array.from(e);for(let t=e.length-1;t>=0;t--)if(r[t]===e[t])a[t]=1;else if(1!==n.shape[t])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${e}].`);if(0===a.map((t,e)=>t>1?e:-1).filter(t=>t>=0).length)return We(n);const i={x:n},o={shape:e,inputShape:r};return Ut.runKernelFunc(t=>t.tile(n,a),i,null,"BroadcastTo",o)}});const er=Qt({ceil_:function(t){const e=Jt(t,"x","ceil"),n={x:e};return Ut.runKernelFunc(t=>t.ceil(e),n,null,"Ceil")}});const nr=Qt({clipByValue_:function(t,e,n){const s=Jt(t,"x","clipByValue");I(e<=n,()=>`Error in clip: min (${e}) must be less than or equal to max (${n}).`);const r={x:s},a={clipValueMin:e,clipValueMax:n};return Ut.runKernelFunc((t,r)=>{const a=t.clip(s,e,n);return r([s]),a},r,null,"ClipByValue",a)}});const sr=Qt({concat1d_:function(t){return Us(t,0)}});const rr=Qt({concat2d_:function(t,e){return Us(t,e)}});const ar=Qt({concat3d_:function(t,e){return Us(t,e)}});const ir=Qt({concat4d_:function(t,e){return Us(t,e)}});const or=Qt({conv2d_:function(t,e,n,s,r="NHWC",a=[1,1],i){const o=Jt(t,"x","conv2d"),l=Jt(e,"filter","conv2d");let u=o,c=!1;3===o.rank&&(c=!0,u=rn(o,[1,o.shape[0],o.shape[1],o.shape[2]])),I(4===u.rank,()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`),I(4===l.rank,()=>"Error in conv2d: filter must be rank 4, but got rank "+l.rank+"."),null!=i&&I(D(s),()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`);const h="NHWC"===r?u.shape[3]:u.shape[1];I(h===l.shape[2],()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`),I(Ls(n,a),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`);const p={x:u,filter:l},d={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i},f=Ut.runKernelFunc((t,e)=>{const o=zs(r),c=As(u.shape,l.shape,n,a,s,i,!1,o),h=t.conv2d(u,l,c);return e([u,l]),h},p,null,"Conv2D",d);return c?rn(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const lr=Qt({conv1d_:function(t,e,n,s,r="NWC",a=1,i){const o=Jt(t,"x","conv1d"),l=Jt(e,"filter","conv1d");let u=o,c=!1;2===o.rank&&(c=!0,u=rn(o,[1,o.shape[0],o.shape[1]])),I(3===u.rank,()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`),I(3===l.rank,()=>"Error in conv1d: filter must be rank 3, but got rank "+l.rank+"."),null!=i&&I(D(s),()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`),I(u.shape[2]===l.shape[1],()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`),I(Ls(n,a),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`),I("NWC"===r,()=>`Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`);const h=rn(l,[1,l.shape[0],l.shape[1],l.shape[2]]),p=rn(u,[u.shape[0],1,u.shape[1],u.shape[2]]),d=or(p,h,[1,n],s,"NHWC",[1,a],i);return rn(d,c?[d.shape[2],d.shape[3]]:[d.shape[0],d.shape[2],d.shape[3]])}});const ur=Qt({conv2DBackpropInput_:function(t,e,n,s,r,a="NHWC",i){I(t.length===e.rank,()=>`Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`);let o=t,l=e,u=!1;3===e.rank&&(u=!0,l=rn(e,[1,e.shape[0],e.shape[1],e.shape[2]]),o=[1,t[0],t[1],t[2]]),I(4===o.length,()=>"Error in conv2dDerInput: inShape must be length 4, but got length "+o.length+"."),I(4===l.rank,()=>"Error in conv2dDerInput: dy must be rank 4, but got rank "+l.rank),I(4===n.rank,()=>"Error in conv2dDerInput: filter must be rank 4, but got rank "+n.rank);const c="NHWC"===a?o[3]:o[1],h="NHWC"===a?l.shape[3]:l.shape[1];I(c===n.shape[2],()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`),I(h===n.shape[3],()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[3]}.`),null!=i&&I(D(r),()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`);const p={dy:l,filter:n},d={strides:s,pad:r,dataFormat:a,dimRoundingMode:i,inputShape:o},f=Ut.runKernelFunc((t,e)=>{const u=zs(a),c=As(o,n.shape,s,1,r,i,!1,u),h=t.conv2dDerInput(l,n,c);return e([l,n]),h},p,null,"Conv2DBackpropInput",d);return u?rn(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const cr=Qt({conv2dTranspose_:function(t,e,n,s,r,a){const i=Jt(t,"x","conv2dTranspose"),o=Jt(e,"filter","conv2dTranspose");return ur(n,i,o,s,r,"NHWC",a)}});const hr=Qt({conv3d_:function(t,e,n,s,r="NDHWC",a=[1,1,1]){const i=Jt(t,"x","conv3d"),o=Jt(e,"filter","conv3d");let l=i,u=!1;4===i.rank&&(u=!0,l=rn(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),I(5===l.rank,()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`),I(5===o.rank,()=>"Error in conv3d: filter must be rank 5, but got rank "+o.rank+"."),I(l.shape[4]===o.shape[3],()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${o.shape[3]}.`),I(Ls(n,a),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),I("NDHWC"===r,()=>`Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`);const c={x:l,filter:o},h={strides:n,pad:s,dataFormat:r,dilations:a},p=Ut.runKernelFunc((t,e)=>{const r=$s(l.shape,o.shape,n,a,s),i=t.conv3d(l,o,r);return e([l,o]),i},c,null,"Conv3D",h);return u?rn(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const pr=Qt({conv3DBackpropInput_:function(t,e,n,s,r){I(t.length===e.rank,()=>`Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`);let a=t,i=e,o=!1;4===e.rank&&(o=!0,i=rn(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]),a=[1,t[0],t[1],t[2],t[3]]);const l=a[4],u=i.shape[4];I(5===a.length,()=>"Error in conv3dDerInput: inShape must be length 5, but got length "+a.length+"."),I(5===i.rank,()=>"Error in conv3dDerInput: dy must be rank 5, but got rank "+i.rank),I(5===n.rank,()=>"Error in conv3dDerInput: filter must be rank 5, but got rank "+n.rank),I(l===n.shape[3],()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`),I(u===n.shape[4],()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${n.shape[4]}.`);const c={dy:i},h={pad:r},p=Ut.runKernelFunc(t=>{const e=$s(a,n.shape,s,1,r);return t.conv3dDerInput(i,n,e)},c,null,"Conv3DBackpropInputV2",h);return o?rn(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const dr=Qt({conv3dTranspose_:function(t,e,n,s,r){const a=Jt(t,"x","conv3dTranspose"),i=Jt(e,"filter","conv3dTranspose");return pr(n,a,i,s,r)}});const fr=Qt({cos_:function(t){const e=Jt(t,"x","cos"),n={x:e};return Ut.runKernelFunc((t,n)=>{const s=t.cos(e);return n([e]),s},n,null,c)}});const mr=Qt({cosh_:function(t){const e=Jt(t,"x","cosh"),n={x:e};return Ut.runKernelFunc((t,n)=>{const s=t.cosh(e);return n([e]),s},n,null,"Cosh")}});const gr=Qt({cumsum_:function(t,e=0,n=!1,s=!1){const r=Jt(t,"x","cumsum"),a={x:r},i={axis:e,exclusive:n,reverse:s};return Ut.runKernelFunc((t,a)=>{const i=fs([e],r.rank);let o=r;null!=i&&(o=ln(r,i));const l=gs(1,r.rank)[0];let u=t.cumsum(o,l,n,s);if(a([r]),null!=i){const t=ms(i);u=ln(u,t)}return u},a,null,"Cumsum",i)}});const yr=Qt({depthToSpace_:function(t,e,n="NHWC"){const s=Jt(t,"x","depthToSpace"),r="NHWC"===n?s.shape[1]:s.shape[2],a="NHWC"===n?s.shape[2]:s.shape[3],i="NHWC"===n?s.shape[3]:s.shape[1];I(r*e>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${r} and ${e}  for depthToSpace with input shape\n    ${s.shape}`),I(a*e>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${e} for depthToSpace with input shape\n        ${s.shape}`),I(i%(e*e)==0,()=>`Dimension size must be evenly divisible by ${e*e} but is ${i} for depthToSpace with input shape ${s.shape}`);const o={x:s},l={blockSize:e,dataFormat:n};return Ut.runKernelFunc(t=>t.depthToSpace(s,e,n),o,null,"DepthToSpace",l)}});const br=Qt({depthwiseConv2d_:function(t,e,n,s,r="NHWC",a=[1,1],i){const o=Jt(t,"x","depthwiseConv2d"),l=Jt(e,"filter","depthwiseConv2d");let u=o,c=!1;3===o.rank&&(c=!0,u=rn(o,[1,o.shape[0],o.shape[1],o.shape[2]])),I(4===u.rank,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`),I(4===l.rank,()=>"Error in depthwiseConv2d: filter must be rank 4, but got rank "+l.rank+"."),I(u.shape[3]===l.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`),null!=i&&I(D(s),()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`);const h={x:u,filter:l},p={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i},d=Ut.runKernelFunc((t,e)=>{null==a&&(a=[1,1]),I(Ls(n,a),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`);const r=As(u.shape,l.shape,n,a,s,i,!0),o=t.depthwiseConv2D(u,l,r);return e([u,l]),o},h,null,"DepthwiseConv2dNative",p);return c?rn(d,[d.shape[1],d.shape[2],d.shape[3]]):d}});const xr=Qt({diag_:function(t){const e=Jt(t,"x","diag"),n={x:e};return Ut.runKernelFunc(n=>{const s=rn(e,[e.size]),r=n.diag(s),a=[...t.shape,...t.shape];return rn(r,a)},n,null,"Diag")}});const wr=Qt({dilation2d_:function(t,e,n,s,r=[1,1],a="NHWC"){const i=Jt(t,"x","dilation2d"),o=Jt(e,"filter","dilation2d");I(3===i.rank||4===i.rank,()=>"Error in dilation2d: input must be rank 3 or 4, but got rank "+i.rank+"."),I(3===o.rank,()=>"Error in dilation2d: filter must be rank 3, but got rank "+o.rank+"."),I("NHWC"===a,()=>"Error in dilation2d: Only NHWC is currently supported, but got dataFormat of "+a);let l=i,u=!1;3===i.rank&&(l=rn(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=!0);const c={x:l,filter:o},h={strides:n,pad:s,dilations:r},p=Ut.runKernel("Dilation2D",c,h);return u?rn(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});function vr(t,e){const n=t.length,s=[];for(let r=0;r<n;r++){const a=n-1-r,i=t[a]||1;(e[e.length-1-r]||1)>1&&1===i&&s.unshift(a)}return s}function Nr(t,e){const n=[];for(let s=0;s<e.length;s++){const r=t[t.length-s-1],a=e.length-s-1,i=e[a];(null==r||1===r&&i>1)&&n.unshift(a)}return n}function kr(t,e){const n=[],s=Math.max(t.length,e.length);for(let r=0;r<s;r++){let s=t[t.length-r-1];null==s&&(s=1);let a=e[e.length-r-1];if(null==a&&(a=1),1===s)n.unshift(a);else if(1===a)n.unshift(s);else{if(s!==a){throw Error(`Operands could not be broadcast together with shapes ${t} and ${e}.`)}n.unshift(s)}}return n}const Cr=Qt({equal_:function(t,e){let n=Jt(t,"a","equal"),s=Jt(e,"b","equal");[n,s]=Ot(n,s),kr(n.shape,s.shape);const r={a:n,b:s};return Ut.runKernelFunc(t=>t.equal(n,s),r,null,"Equal")}});const Sr=Qt({where_:function(t,e,n){const s=Jt(e,"a","where"),r=Jt(n,"b","where"),a=Jt(t,"condition","where","bool"),i=kr(s.shape,r.shape),o=tr(s,i),l=tr(r,i);1===a.rank&&I(a.shape[0]===s.shape[0],()=>"The first dimension of `a` must match the size of `condition`."),1!==a.rank&&E(a.shape,l.shape,"Error in where: ");const u={condition:a,t:o,e:l};return Ut.runKernelFunc((t,e)=>{const n=t.select(a,o,l);return e([a]),n},u,null,"SelectV2")}});const Ir=Qt({zerosLike_:function(t){const e=Jt(t,"x","zerosLike"),n={x:e};return Ut.runKernelFunc(t=>t.zerosLike(e),n,null,"ZerosLike")}});const Er=Qt({divNoNan_:function(t,e){let n=Jt(t,"a","div"),s=Jt(e,"b","div");[n,s]=Ot(n,s);const r=ss(n,s),a=Ir(r),i=Cr(s,a);return Sr(i,a,r)}});const Tr=Qt({dot_:function(t,e){const n=Jt(t,"t1","dot"),s=Jt(e,"t2","dot");I(!(1!==n.rank&&2!==n.rank||1!==s.rank&&2!==s.rank),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${s.rank}.`);const r=1===n.rank?n.size:n.shape[1],a=1===s.rank?s.size:s.shape[0];if(I(r===a,()=>`Error in dot: inner dimensions of inputs must match, but got ${r} and ${a}.`),1===n.rank&&1===s.rank){const t=rn(n,[1,-1]),e=rn(s,[-1,1]),r=an(t,e);return rn(r,[])}if(1===n.rank&&2===s.rank){const t=rn(n,[1,-1]),e=rn(s,[s.shape[0],s.shape[1]]),r=an(t,e);return rn(r,[r.size])}if(2===n.rank&&1===s.rank){const t=rn(s,[-1,1]),e=an(n,t);return rn(e,[e.size])}{const t=rn(s,[s.shape[0],s.shape[1]]);return an(n,t)}}});const Ar=Qt({elu_:function(t){const e=Jt(t,"x","elu"),n={x:e};return Ut.runKernelFunc((t,n)=>{const s=t.elu(e);return n([s]),s},n,null,"Elu")}});const $r=Qt({erf_:function(t){let e=Jt(t,"x","erf");I("int32"===e.dtype||"float32"===e.dtype,()=>"Input dtype must be `int32` or `float32`."),"int32"===e.dtype&&(e=Pe(e,"float32"));const n={x:e};return Ut.runKernelFunc((t,n)=>{const s=t.erf(e);return n([e]),s},n,null,"Erf")}});const Rr=Qt({exp_:function(t){const e=Jt(t,"x","exp"),n={x:e};return Ut.runKernelFunc((t,n)=>{const s=t.exp(e);return n([s]),s},n,null,"Exp")}});const Dr=Qt({expandDims_:function(t,e=0){const n=Jt(t,"x","expandDims",null);I(e<=n.rank,()=>"Axis must be <= rank of the tensor");const s=n.shape.slice();return e<0&&(I(-(n.rank+1)<=e,()=>`Axis must be in the interval [${-(n.rank+1)}, ${n.rank}]`),e=n.rank+e+1),s.splice(e,0,1),rn(n,s)}});const _r=Qt({expm1_:function(t){const e=Jt(t,"x","expm1"),n={x:e};return Ut.runKernelFunc((t,n)=>{const s=t.expm1(e);return n([e]),s},n,null,"Expm1")}});const Fr=Qt({tile_:function(t,e){const n=Jt(t,"x","tile",null);I(n.rank===e.length,()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${e}.`);const s=[n],r={x:n},a={reps:e};return Ut.runKernelFunc((t,s)=>{const r=t.tile(n,e);return s([n]),r},r,null,"Tile",a,s)}});const Or=Qt({eye_:function(t,e,n,s="float32"){null==e&&(e=t);const r=Be([t,e],s),a=t<=e?t:e;for(let t=0;t<a;++t)r.set(1,t,t);const i=rn(r.toTensor(),[t,e]);if(null==n)return i;if(1===n.length)return Fr(Dr(i,0),[n[0],1,1]);if(2===n.length)return Fr(Dr(Dr(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return Fr(Dr(Dr(Dr(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});function Mr(t,e,n){const s={shape:t,value:e,dtype:n};return Ut.runKernelFunc(s=>s.fill(t,e,n),{},null,"Fill",s)}const Lr=Qt({floor_:function(t){const e=Jt(t,"x","floor"),n={x:e};return Ut.runKernelFunc(t=>t.floor(e),n,null,"Floor")}});function zr(t){return t<=30?t:Z(t,Math.floor(Math.sqrt(t)))}function Br(t,e,n){const s=t.shape[n],r=[];let a=1,i=1;for(let e=0;e<n;e++)r.push(t.shape[e]),a*=t.shape[e];for(let t=0;t<e.rank;t++)r.push(e.shape[t]);for(let e=n+1;e<t.rank;e++)r.push(t.shape[e]),i*=t.shape[e];return{batchSize:a,sliceSize:i,dimSize:s,outputShape:r}}var Pr=Object.freeze({__proto__:null,segOpComputeOptimalWindowSize:function(t,e){let n,s=!1;for(t<=30?(n=t,s=!0):n=Z(t,Math.floor(Math.sqrt(t)));!s;)n>e||n===t?s=!0:n=Z(t,n+1);return n},computeOutShape:function(t,e,n){const s=[],r=t.length;for(let a=0;a<r;a++)a!==e?s.push(t[a]):s.push(n);return s},collectGatherOpShapeInfo:Br});const Wr=Qt({gather_:function(t,e,n=0){const s=Jt(t,"x","gather"),r=Jt(e,"indices","gather","int32"),a={x:s,indices:r},i={axis:n};return Ut.runKernelFunc((t,e)=>{const a=L(n,s.shape)[0],i=Br(s,r,a),o=t.gather(s,rn(r,[r.size]),a);return e([s,r]),rn(o,i.outputShape)},a,null,"GatherV2",i)}});const Vr=Qt({greater_:function(t,e){let n=Jt(t,"a","greater"),s=Jt(e,"b","greater");[n,s]=Ot(n,s),kr(n.shape,s.shape);const r={a:n,b:s};return Ut.runKernelFunc(t=>t.greater(n,s),r,null,"Greater")}});const Ur=Qt({greaterEqual_:function(t,e){let n=Jt(t,"a","greaterEqual"),s=Jt(e,"b","greaterEqual");[n,s]=Ot(n,s),kr(n.shape,s.shape);const r={a:n,b:s};return Ut.runKernelFunc((t,e)=>{const r=t.greaterEqual(n,s);return e([n,s]),r},r,null,"GreaterEqual")}});const Gr=Qt({imag_:function(t){const e=Jt(t,"input","imag"),n={input:e};return Ut.runKernelFunc(t=>t.imag(e),n,null,"Imag")}});const Hr=Qt({isFinite_:function(t){const e=Jt(t,"x","isFinite"),n={x:e};return Ut.runKernelFunc(t=>t.isFinite(e),n,null,"IsFinite")}});const jr=Qt({isInf_:function(t){const e=Jt(t,"x","isInf"),n={x:e};return Ut.runKernelFunc(t=>t.isInf(e),n,null,"IsInf")}});const qr=Qt({isNaN_:function(t){const e=Jt(t,"x","isNaN"),n={x:e};return Ut.runKernelFunc(t=>t.isNaN(e),n,null,"IsNan")}});const Kr=Qt({maximum_:function(t,e){let n=Jt(t,"a","maximum"),s=Jt(e,"b","maximum");[n,s]=Ot(n,s),"bool"===n.dtype&&(n=Pe(n,"int32"),s=Pe(s,"int32")),kr(n.shape,s.shape);const r={a:n,b:s};return Ut.runKernelFunc((t,e)=>{const r=t.maximum(n,s);return e([n,s]),r},r,null,"Maximum")}});function Xr(t,e){if((G(t)&&"string"!==e||Array.isArray(t))&&"complex64"!==e)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===e&&G(t)&&!(t instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return ee(t,[],[],e)}const Yr=Qt({leakyRelu_:function(t,e=.2){const n=Jt(t,"x","leakyRelu");return Kr(rs(Xr(e),n),n)}});const Jr=Qt({less_:function(t,e){let n=Jt(t,"a","less"),s=Jt(e,"b","less");[n,s]=Ot(n,s),kr(n.shape,s.shape);const r={a:n,b:s};return Ut.runKernelFunc(t=>t.less(n,s),r,null,"Less")}});const Zr=Qt({lessEqual_:function(t,e){let n=Jt(t,"a","lessEqual"),s=Jt(e,"b","lessEqual");[n,s]=Ot(n,s),kr(n.shape,s.shape);const r={a:n,b:s};return Ut.runKernelFunc((t,e)=>{const r=t.lessEqual(n,s);return e([n,s]),r},r,null,"LessEqual")}});function Qr(t,e,n){if(n<=0)throw new Error("The number of values should be positive.");const s={start:t,stop:e,num:n};return Ut.runKernelFunc(s=>s.linspace(t,e,n),{},null,"LinSpace",s)}const ta=Qt({localResponseNormalization_:function(t,e=5,n=1,s=1,r=.5){const a=Jt(t,"x","localResponseNormalization");I(4===a.rank||3===a.rank,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`),I(D(e),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${e}.`);let i=a,o=!1;3===a.rank&&(o=!0,i=rn(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const l={x:i},u={depthRadius:e,bias:n,alpha:s,beta:r},c=Ut.runKernelFunc((t,a)=>{const o=t.localResponseNormalization4D(i,e,n,s,r);return a([i,o]),o},l,null,"LRN",u);return o?rn(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const ea=Qt({log_:function(t){const e=Jt(t,"x","log"),n={x:e};return Ut.runKernelFunc((t,n)=>{const s=t.log(e);return n([e]),s},n,null,"Log")}});const na=Qt({log1p_:function(t){const e=Jt(t,"x","log1p"),n={x:e};return Ut.runKernelFunc((t,n)=>{const s=t.log1p(e);return n([e]),s},n,null,"Log1p")}});function sa(t,e){I(J(t),()=>"The f passed in variableGrads(f) must be a function"),I(null==e||Array.isArray(e)&&e.every(t=>t instanceof It),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");const n=null!=e;if(!n){e=[];for(const t in Ut.registeredVariables)e.push(Ut.registeredVariables[t])}const s=n?e.filter(t=>!t.trainable):null,r=e.length;I((e=e.filter(t=>t.trainable)).length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${r} variables is trainable.`);const{value:a,grads:i}=Ut.gradients(t,e,null,!0);I(i.some(t=>null!=t),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),I(0===a.rank,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`);const o={};return e.forEach((t,e)=>{null!=i[e]&&(o[t.name]=i[e])}),null!=s&&s.forEach(t=>o[t.name]=null),{value:a,grads:o}}function ra(t){return Ut.customGrad(t)}function aa(t){if(t.filter(t=>null==t).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}const ia=Qt({neg_:function(t){const e=Jt(t,"x","neg"),n={x:e};return Ut.runKernelFunc(t=>t.neg(e),n,null,"Negate")}});const oa=Qt({softplus_:function(t){const e=Jt(t,"x","softplus"),n={x:e};return Ut.runKernelFunc((t,n)=>{const s=t.softplus(e);return n([e]),s},n,null,"Softplus")}});const la=Qt({logSigmoid_:function(t){const e=Jt(t,"x","logSigmoid");return ra(t=>({value:ia(oa(ia(t))),gradFunc:e=>rs(e,Gs(ia(t)))}))(e)}});const ua=Qt({max_:function(t,e=null,n=!1){const s=Jt(t,"x","max"),r={x:s},a={reductionIndices:e,keepDims:n};return Ut.runKernelFunc((t,r)=>{let a=L(e,s.shape);const i=fs(a,s.rank);let o=s;null!=i&&(o=ln(s,i),a=gs(a.length,o.rank));const l=t.max(o,a);null!=i&&o.dispose();let u=l;if(n){const t=ps(u.shape,L(e,s.shape));u=rn(u,t),l.dispose()}return r([s,u]),u},r,null,"Max",a)}});const ca=Qt({sub_:function(t,e){let n=Jt(t,"a","sub"),s=Jt(e,"b","sub");[n,s]=Ot(n,s);const r={a:n,b:s};return Ut.runKernelFunc((t,e)=>{const r=t.subtract(n,s);return e([n,s]),r},r,null,"Sub")}});const ha=Qt({sum_:function(t,e=null,n=!1){let s=Jt(t,"x","sum");"bool"===s.dtype&&(s=Pe(s,"int32"));const r={x:s},a={axis:e,keepDims:n};return Ut.runKernelFunc((t,r)=>{r([s]);const a=L(e,s.shape),i=fs(a,s.rank);let o=a,l=s;null!=i&&(l=ln(s,i),o=gs(o.length,s.rank));let u=t.sum(l,o);if(n){const t=ps(u.shape,a);u=rn(u,t)}return u},r,null,"Sum",a)}});const pa=Qt({logSoftmax_:function(t,e=-1){const n=Jt(t,"logits","logSoftmax");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${e}`);const s={logits:n},r={axis:e};return Ut.runKernelFunc((n,s)=>{const r=ua(t,e,!0),a=ca(t,r),i=ca(Pe(a,"float32"),ea(ha(Rr(a),e,!0)));return s([i]),i},s,null,"LogSoftmax",r)}});const da=Qt({logSumExp_:function(t,e=null,n=!1){const s=Jt(t,"x","logSumExp"),r=L(e,s.shape),a=ua(s,r,!0),i=ca(s,a),o=Rr(i),l=ha(o,r),u=ea(l),c=es(rn(a,u.shape),u);if(n){const t=ps(c.shape,r);return rn(c,t)}return c}});const fa=Qt({logicalAnd_:function(t,e){const n=Jt(t,"a","logicalAnd","bool"),s=Jt(e,"b","logicalAnd","bool");kr(n.shape,s.shape);const r={a:n,b:s};return Ut.runKernelFunc(t=>t.logicalAnd(n,s),r,null,"LogicalAnd")}});const ma=Qt({logicalNot_:function(t){const e=Jt(t,"x","logicalNot","bool"),n={x:e};return Ut.runKernelFunc(t=>t.logicalNot(e),n,null,"LogicalNot")}});const ga=Qt({logicalOr_:function(t,e){const n=Jt(t,"a","logicalOr","bool"),s=Jt(e,"b","logicalOr","bool");kr(n.shape,s.shape);const r={a:n,b:s};return Ut.runKernelFunc(t=>t.logicalOr(n,s),r,null,"LogicalOr")}});const ya=Qt({logicalXor_:function(t,e){const n=Jt(t,"a","logicalXor","bool"),s=Jt(e,"b","logicalXor","bool");return kr(n.shape,s.shape),fa(ga(t,e),ma(fa(t,e)))}});const ba=Qt({maxPool_:function(t,e,n,s,r){const a=Jt(t,"x","maxPool");let i=a,o=!1;3===a.rank&&(o=!0,i=rn(a,[1,a.shape[0],a.shape[1],a.shape[2]])),I(4===i.rank,()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`),I(Ls(n,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`),null!=r&&I(D(s),()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`);const l={x:i},u={filterSize:e,strides:n,pad:s,dimRoundingMode:r},c=Ut.runKernelFunc((t,a)=>{const o=Es(i.shape,e,n,1,s,r);let l;return l=1===o.filterWidth&&1===o.filterHeight&&R(o.inShape,o.outShape)?i.clone():t.maxPool(i,o),a([i,l]),l},l,null,"MaxPool",u);return o?rn(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const xa=Qt({maxPool3d_:function(t,e=[1,1,1],n,s,r,a="NDHWC",i){null==i?i=[1,1,1]:jn("dilations is deprecated, this field will be gone in v3.0.0.");const o=Jt(t,"x","maxPool3d");let l=o,u=!1;4===o.rank&&(u=!0,l=rn(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),I(5===l.rank,()=>`Error in maxPool3d: x must be rank 5 but got rank ${l.rank}.`),I("NDHWC"===a,()=>"Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of "+a),I(Ls(n,i),()=>`Error in maxPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`),null!=r&&I(D(s),()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`);const c={x:l},h={filterSize:e,strides:n,pad:s,dimRoundingMode:r,dataFormat:a,dilations:i},p=Ut.runKernelFunc((t,o)=>{null==i&&(i=[1,1,1]);const u=Ts(l.shape,e,n,i,s,r,a),c=t.maxPool3d(l,u);return o([l,c]),c},c,null,"MaxPool3D",h);return u?rn(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const wa=Qt({maxPoolWithArgmax_:function(t,e,n,s,r=!1){const a={x:Jt(t,"x","maxPoolWithArgmax")},i={filterSize:e,strides:n,pad:s,includeBatchInIndex:r},o=Ut.runKernel("MaxPoolWithArgmax",a,i);return{result:o[0],indexes:o[1]}}});function va(t,e="float32"){if("complex64"===e){const e=va(t,"float32"),n=va(t,"float32");return te(e,n)}const n=rt($(t),e);return Ut.makeTensor(n,t,e)}function Na(t,e="float32"){if("complex64"===e){const e=Na(t,"float32"),n=va(t,"float32");return te(e,n)}const n=st($(t),e);return Ut.makeTensor(n,t,e)}const ka=Qt({mean_:function(t,e=null,n=!1){const s=Jt(t,"x","mean"),r=L(e,s.shape),a=$(hs(s.shape,r)[1]);return ra(t=>{const s=Xr(a),i=s.dtype===t.dtype?t:Pe(t,s.dtype),o=ss(i,s);return{value:ha(o,e,n),gradFunc:e=>{const n=t.shape.slice();r.forEach(t=>{n[t]=1});const s=rn(e,n);return ss(rs(s,Na(t.shape,"float32")),a)}}})(s)}});const Ca=Qt({min_:function(t,e=null,n=!1){const s=Jt(t,"x","min"),r={x:s},a={axis:e,keepDims:n};return Ut.runKernelFunc((t,r)=>{const a=L(e,s.shape);let i=a;const o=fs(i,s.rank);let l=s;null!=o&&(l=ln(s,o),i=gs(i.length,s.rank));const u=t.min(l,i);null!=o&&l.dispose();let c=u;if(n){const t=ps(c.shape,a);c=rn(u,t),u.dispose()}return r([s,c]),c},r,null,"Min",a)}});const Sa=Qt({minimum_:function(t,e){let n=Jt(t,"a","minimum"),s=Jt(e,"b","minimum");[n,s]=Ot(n,s),"bool"===n.dtype&&(n=Pe(n,"int32"),s=Pe(s,"int32")),kr(n.shape,s.shape);const r={a:n,b:s};return Ut.runKernelFunc((t,e)=>{const r=t.minimum(n,s);return e([n,s]),r},r,null,"Minimum")}});const Ia=Qt({mod_:function(t,e){let n=Jt(t,"a","mod"),s=Jt(e,"b","mod");[n,s]=Ot(n,s);const r={a:n,b:s};return Ut.runKernelFunc((t,e)=>{const r=t.mod(n,s);return e([n,s]),r},r,null,"Mod")}});const Ea=Qt({square_:function(t){const e=Jt(t,"x","square"),n=[e];return Ut.runKernelFunc((t,n)=>(n([e]),t.square(e)),{x:e},null,"Square",{},n,[])}});const Ta=Qt({moments_:function(t,e=null,n=!1){const s=L(e,(t=Jt(t,"x","moments")).shape),r=ka(t,s,n);let a=r.shape;n||(a=ps(r.shape,s));const i=Ea(ca(Pe(t,"float32"),rn(r,a)));return{mean:r,variance:ka(i,s,n)}}});const Aa=Qt({multiRNNCell_:function(t,e,n,s){const r=Jt(e,"data","multiRNNCell"),a=Zt(n,"c","multiRNNCell"),i=Zt(s,"h","multiRNNCell");let o=r;const l=[];for(let e=0;e<t.length;e++){const n=t[e](o,a[e],i[e]);l.push(n[0]),l.push(n[1]),o=n[1]}const u=[],c=[];for(let t=0;t<l.length;t+=2)u.push(l[t]),c.push(l[t+1]);return[u,c]}});const $a=Qt({multinomial_:function(t,e,n,s=!1){const r=Jt(t,"logits","multinomial"),a=r.size,i=r.rank;if(a<2)throw new Error("Error in multinomial: you need at least 2 outcomes, but got "+a+".");if(i>2)throw new Error("Rank of probabilities must be 1 or 2, but is "+i);n=n||Math.random();const o=1===i?rn(r,[1,-1]):r,l=Ut.runKernelFunc(t=>t.multinomial(o,s,e,n),{logits2D:o});return 1===i?rn(l,[l.size]):l}});const Ra=Qt({notEqual_:function(t,e){let n=Jt(t,"a","notEqual"),s=Jt(e,"b","notEqual");[n,s]=Ot(n,s),kr(n.shape,s.shape);const r={a:n,b:s};return Ut.runKernelFunc(t=>t.notEqual(n,s),r,null,"NotEqual")}});const Da=Qt({real_:function(t){const e=Jt(t,"input","real"),n={input:e};return Ut.runKernelFunc(t=>t.real(e),n,null,"Real")}});const _a=Qt({onesLike_:function(t){const e=Jt(t,"x","onesLike"),n={x:e};return Ut.runKernelFunc((t,n)=>{if("complex64"===e.dtype){const t=_a(Da(e)),n=Ir(Gr(e));return te(t,n)}return t.onesLike(e)},n,null,"OnesLike")}});const Fa=Qt({outerProduct_:function(t,e){const n=Jt(t,"v1","outerProduct"),s=Jt(e,"v2","outerProduct");I(1===n.rank&&1===s.rank,()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${s.rank}.`);const r=rn(n,[-1,1]),a=rn(s,[1,-1]);return an(r,a)}});const Oa=Qt({pad_:function(t,e,n=0){const s=Jt(t,"x","pad");if(0===s.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const r={paddings:e,constantValue:n},a={x:s};return Ut.runKernelFunc((t,r)=>(r([s]),t.pad(s,e,n)),a,null,"PadV2",r)}});const Ma=Qt({pad1d_:function(t,e,n=0){return I(2===e.length,()=>"Invalid number of paddings. Must be length of 2."),Oa(t,[e],n)}});const La=Qt({pad2d_:function(t,e,n=0){return I(2===e.length&&2===e[0].length&&2===e[1].length,()=>"Invalid number of paddings. Must be length of 2 each."),Oa(t,e,n)}});const za=Qt({pad3d_:function(t,e,n=0){return I(3===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length,()=>"Invalid number of paddings. Must be length of 2 each."),Oa(t,e,n)}});const Ba=Qt({pad4d_:function(t,e,n=0){return I(4===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length&&2===e[3].length,()=>"Invalid number of paddings. Must be length of 2 each."),Oa(t,e,n)}});const Pa=Qt({spaceToBatchND_:function(t,e,n){const s=Jt(t,"x","spaceToBatchND");I(s.rank>=1+e.length,()=>`input rank ${s.rank} should be > than [blockShape] ${e.length}`),I(n.length===e.length,()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${e.length}`),I(s.shape.reduce((t,s,r)=>r>0&&r<=e.length?t&&(s+n[r-1][0]+n[r-1][1])%e[r-1]==0:t,!0),()=>`input spatial dimensions ${s.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${e.toString()}`);const r={x:s},a={blockShape:e,paddings:n};return Ut.runKernelFunc(t=>t.spaceToBatchND(s,e,n),r,null,"SpaceToBatchND",a)}});const Wa=Qt({pool_:function(t,e,n,s,r,a){null==r&&(r=[1,1]),null==a&&(a=1),0===s&&(s="valid");const i=Jt(t,"x","maxPool");let o=i,l=!1;3===i.rank&&(l=!0,o=rn(i,[1,i.shape[0],i.shape[1],i.shape[2]])),I(Ls(a,r),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${r}'`);const u=Es(o.shape,e,a,r,s),c=[u.dilationHeight,u.dilationWidth];let h;h="same"===s?function(t,e){const n=t.map((t,n)=>t+(t-1)*(e[n]-1)).map(t=>t-1),s=n.map(t=>Math.floor(t/2)),r=n.map((t,e)=>t-s[e]);return n.map((t,e)=>[s[e],r[e]])}([u.filterHeight,u.filterWidth],c):[[0,0],[0,0]];const p=1===c[0]&&1===c[1],[d,f]=function(t,e,n){const s=n.map(t=>t[0]),r=n.map(t=>t[1]),a=t.concat(s,r),i=e.map((t,e)=>(t-a[e]%t)%t),o=r.map((t,e)=>t+i[e]),l=e.map((t,e)=>[s[e],o[e]]),u=e.map((t,e)=>[0,i[e]]);return[l,u]}([u.inHeight,u.inWidth],c,h),m=p?s:"valid",g=p?o:Pa(o,c,d),y=("avg"===n?()=>Bs(g,e,a,m):()=>ba(g,e,a,m))(),b=p?y:Ks(y,c,f);return l?rn(b,[b.shape[1],b.shape[2],b.shape[3]]):b}});const Va=Qt({pow_:function(t,e){let n=Jt(t,"base","pow"),s=Jt(e,"exp","pow");[n,s]=Ot(n,s);const r={a:n,b:s};return Ut.runKernelFunc((t,e)=>{const r=t.pow(n,s);return e([n,s,r]),r},r,null,"Pow")}});const Ua=Qt({prelu_:function(t,e){const n=Jt(t,"x","prelu"),s=Jt(e,"alpha","prelu"),r={x:n,alpha:s};return Ut.runKernelFunc((t,e)=>{const r=t.prelu(n,s);return e([n,s]),r},r,null,"Prelu")}});const Ga=Qt({prod_:function(t,e=null,n=!1){let s=Jt(t,"x","prod");const r={x:s},a={axis:e,keepDims:n};return Ut.runKernelFunc(t=>{"bool"===s.dtype&&(s=Pe(s,"int32"));const r=L(e,s.shape),a=fs(r,s.rank);let i=r,o=s;null!=a&&(o=ln(s,a),i=gs(i.length,s.rank));let l=t.prod(o,i);if(n){const t=ps(l.shape,r);l=rn(l,t)}return l},r,null,"Prod",a)}});const Ha=Qt({rand_:function(t,e,n){const s=$(t);let r=null;if(null==n||"float32"===n)r=new Float32Array(s);else if("int32"===n)r=new Int32Array(s);else{if("bool"!==n)throw new Error("Unknown data type "+n);r=new Uint8Array(s)}for(let t=0;t<s;t++)r[t]=e();return Ut.makeTensor(r,t,n)}});"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;function ja(t,e){return t(e={exports:{}},e.exports),e.exports}var qa=ja((function(t){!function(t,e,n){function s(t){var e,n=this,s=(e=4022871197,function(t){t=t.toString();for(var n=0;n<t.length;n++){var s=.02519603282416938*(e+=t.charCodeAt(n));s-=e=s>>>0,e=(s*=e)>>>0,e+=4294967296*(s-=e)}return 2.3283064365386963e-10*(e>>>0)});n.next=function(){var t=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=t-(n.c=0|t)},n.c=1,n.s0=s(" "),n.s1=s(" "),n.s2=s(" "),n.s0-=s(t),n.s0<0&&(n.s0+=1),n.s1-=s(t),n.s1<0&&(n.s1+=1),n.s2-=s(t),n.s2<0&&(n.s2+=1),s=null}function r(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function a(t,e){var n=new s(t),a=e&&e.state,i=n.next;return i.int32=function(){return 4294967296*n.next()|0},i.double=function(){return i()+11102230246251565e-32*(2097152*i()|0)},i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.alea=a}(0,t,!1)})),Ka=ja((function(t){!function(t,e,n){function s(t){var e=this,n="";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:n+=t;for(var s=0;s<n.length+64;s++)e.x^=0|n.charCodeAt(s),e.next()}function r(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function a(t,e){var n=new s(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xor128=a}(0,t,!1)})),Xa=ja((function(t){!function(t,e,n){function s(t){var e=this,n="";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:n+=t;for(var s=0;s<n.length+64;s++)e.x^=0|n.charCodeAt(s),s==n.length&&(e.d=e.x<<10^e.x>>>4),e.next()}function r(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function a(t,e){var n=new s(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xorwow=a}(0,t,!1)})),Ya=ja((function(t){!function(t,e,n){function s(t){var e=this;e.next=function(){var t,n,s=e.x,r=e.i;return t=s[r],n=(t^=t>>>7)^t<<24,n^=(t=s[r+1&7])^t>>>10,n^=(t=s[r+3&7])^t>>>3,n^=(t=s[r+4&7])^t<<7,t=s[r+7&7],n^=(t^=t<<13)^t<<9,s[r]=n,e.i=r+1&7,n},function(t,e){var n,s=[];if(e===(0|e))s[0]=e;else for(e=""+e,n=0;n<e.length;++n)s[7&n]=s[7&n]<<15^e.charCodeAt(n)+s[n+1&7]<<13;for(;s.length<8;)s.push(0);for(n=0;n<8&&0===s[n];++n);for(8==n?s[7]=-1:s[n],t.x=s,t.i=0,n=256;n>0;--n)t.next()}(e,t)}function r(t,e){return e.x=t.x.slice(),e.i=t.i,e}function a(t,e){null==t&&(t=+new Date);var n=new s(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&(a.x&&r(a,n),i.state=function(){return r(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xorshift7=a}(0,t,!1)})),Ja=ja((function(t){!function(t,e,n){function s(t){var e=this;e.next=function(){var t,n,s=e.w,r=e.X,a=e.i;return e.w=s=s+1640531527|0,n=r[a+34&127],t=r[a=a+1&127],n^=n<<13,t^=t<<17,n^=n>>>15,t^=t>>>12,n=r[a]=n^t,e.i=a,n+(s^s>>>16)|0},function(t,e){var n,s,r,a,i,o=[],l=128;for(e===(0|e)?(s=e,e=null):(e+="\0",s=0,l=Math.max(l,e.length)),r=0,a=-32;a<l;++a)e&&(s^=e.charCodeAt((a+32)%e.length)),0===a&&(i=s),s^=s<<10,s^=s>>>15,s^=s<<4,s^=s>>>13,a>=0&&(i=i+1640531527|0,r=0==(n=o[127&a]^=s+i)?r+1:0);for(r>=128&&(o[127&(e&&e.length||0)]=-1),r=127,a=512;a>0;--a)s=o[r+34&127],n=o[r=r+1&127],s^=s<<13,n^=n<<17,s^=s>>>15,n^=n>>>12,o[r]=s^n;t.w=i,t.X=o,t.i=r}(e,t)}function r(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function a(t,e){null==t&&(t=+new Date);var n=new s(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&(a.X&&r(a,n),i.state=function(){return r(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xor4096=a}(0,t,!1)})),Za=ja((function(t){!function(t,e,n){function s(t){var e=this,n="";e.next=function(){var t=e.b,n=e.c,s=e.d,r=e.a;return t=t<<25^t>>>7^n,n=n-s|0,s=s<<24^s>>>8^r,r=r-t|0,e.b=t=t<<20^t>>>12^n,e.c=n=n-s|0,e.d=s<<16^n>>>16^r,e.a=r-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):n+=t;for(var s=0;s<n.length+20;s++)e.b^=0|n.charCodeAt(s),e.next()}function r(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function a(t,e){var n=new s(t),a=e&&e.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.tychei=a}(0,t,!1)})),Qa=ja((function(t){!function(e,n){var s,r=this,a=n.pow(256,6),i=n.pow(2,52),o=2*i;function l(t,l,d){var f=[],m=h(function t(e,n){var s,r=[],a=typeof e;if(n&&"object"==a)for(s in e)try{r.push(t(e[s],n-1))}catch(t){}return r.length?r:"string"==a?e:e+"\0"}((l=1==l?{entropy:!0}:l||{}).entropy?[t,p(e)]:null==t?function(){try{var t;return s&&(t=s.randomBytes)?t=t(256):(t=new Uint8Array(256),(r.crypto||r.msCrypto).getRandomValues(t)),p(t)}catch(t){var n=r.navigator,a=n&&n.plugins;return[+new Date,r,a,r.screen,p(e)]}}():t,3),f),g=new u(f),y=function(){for(var t=g.g(6),e=a,n=0;t<i;)t=256*(t+n),e*=256,n=g.g(1);for(;t>=o;)t/=2,e/=2,n>>>=1;return(t+n)/e};return y.int32=function(){return 0|g.g(4)},y.quick=function(){return g.g(4)/4294967296},y.double=y,h(p(g.S),e),(l.pass||d||function(t,e,s,r){return r&&(r.S&&c(r,g),t.state=function(){return c(g,{})}),s?(n.random=t,e):t})(y,m,"global"in l?l.global:this==n,l.state)}function u(t){var e,n=t.length,s=this,r=0,a=s.i=s.j=0,i=s.S=[];for(n||(t=[n++]);r<256;)i[r]=r++;for(r=0;r<256;r++)i[r]=i[a=255&a+t[r%n]+(e=i[r])],i[a]=e;(s.g=function(t){for(var e,n=0,r=s.i,a=s.j,i=s.S;t--;)e=i[r=255&r+1],n=256*n+i[255&(i[r]=i[a=255&a+e])+(i[a]=e)];return s.i=r,s.j=a,n})(256)}function c(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function h(t,e){for(var n,s=t+"",r=0;r<s.length;)e[255&r]=255&(n^=19*e[255&r])+s.charCodeAt(r++);return p(e)}function p(t){return String.fromCharCode.apply(0,t)}if(n.seedrandom=l,h(n.random(),e),t.exports){t.exports=l;try{s=require("crypto")}catch(t){}}else 0}([],Math)}));Qa.alea=qa,Qa.xor128=Ka,Qa.xorwow=Xa,Qa.xorshift7=Ya,Qa.xor4096=Ja,Qa.tychei=Za;var ti=Qa.alea;class ei{constructor(t,e,n,s,r){this.mean=t,this.stdDev=e,this.dtype=n,this.nextVal=NaN,this.truncated=s,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=r||Math.random();this.random=ti(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const t=this.nextVal;return this.nextVal=NaN,t}let t,e,n=!1;for(;!n;){let s,r,a;do{s=2*this.random()-1,r=2*this.random()-1,a=s*s+r*r}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);t=this.mean+this.stdDev*s*i,e=this.mean+this.stdDev*r*i,this.truncated&&!this.isValidTruncated(t)||(n=!0)}return this.truncated&&!this.isValidTruncated(e)||(this.nextVal=this.convertValue(e)),this.convertValue(t)}convertValue(t){return null==this.dtype||"float32"===this.dtype?t:Math.round(t)}isValidTruncated(t){return t<=this.upper&&t>=this.lower}}class ni{constructor(t,e,n,s){this.alpha=t,this.beta=1/e,this.dtype=n;const r=s||Math.random();this.randu=ti(r.toString()),this.randn=new ei(0,1,n,!1,this.randu()),this.d=t<1?t+2/3:t-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let t,e,n,s,r,a;for(;;){do{s=this.randn.nextValue(),a=1+this.c*s}while(a<=0);if(a*=a*a,t=s*s,e=1-.331*t*t,n=.5*t+this.d*(1-a+Math.log(a)),r=this.randu(),r<e||Math.log(r)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(t){return"float32"===this.dtype?t:Math.round(t)}}class si{constructor(t=0,e=1,n,s){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=t,this.range=e-t,this.dtype=n,null==s&&(s=Math.random()),"number"==typeof s&&(s=s.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${t} - ${e} <= 1 and dtype is not float`);this.random=ti(s)}convertValue(t){return this.canReturnFloat()?t:Math.round(t)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const ri=Qt({randomGamma_:function(t,e,n=1,s="float32",r){if(null==n&&(n=1),null==s&&(s="float32"),"float32"!==s&&"int32"!==s)throw new Error("Unsupported data type "+s);const a=new ni(e,n,s,r),i=Be(t,s);for(let t=0;t<i.values.length;t++)i.values[t]=a.nextValue();return i.toTensor()}});const ai=Qt({randomNormal_:function(t,e=0,n=1,s,r){if(null!=s&&"bool"===s)throw new Error("Unsupported data type "+s);const a=new ei(e,n,s,!1,r),i=Be(t,s);for(let t=0;t<i.values.length;t++)i.values[t]=a.nextValue();return i.toTensor()}});const ii=Qt({randomUniform_:function(t,e=0,n=1,s="float32",r){const a=Be(t,s),i=new si(e,n,null,r);for(let t=0;t<a.values.length;t++)a.values[t]=i.nextValue();return a.toTensor()}});function oi(t,e){T(t);const n=Xt(t,e);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return ee(t,null,n,e)}function li(t,e,n=1,s="float32"){if(0===n)throw new Error("Cannot have a step of zero");const r={start:t,stop:e,step:n,dtype:s};return Ut.runKernelFunc(()=>{if(t===e||t<e&&n<0||e<t&&n>1)return va([0],s);const r=rt(Math.abs(Math.ceil((e-t)/n)),s);e<t&&1===n&&(n=-1),r[0]=t;for(let t=1;t<r.length;t++)r[t]=r[t-1]+n;return oi(r,s)},{},null,"Range",r)}const ui=Qt({reciprocal_:function(t){const e=Jt(t,"x","reciprocal"),n={x:e};return Ut.runKernelFunc((t,n)=>{const s=t.reciprocal(e);return n([e]),s},n,null,"Reciprocal")}});const ci=Qt({relu_:function(t){const e=Jt(t,"x","relu"),n={x:e};return Ut.runKernelFunc((t,n)=>(n([e]),"bool"===e.dtype?Pe(e,"int32"):t.relu(e)),n,null,"Relu")}});const hi=Qt({relu6_:function(t){const e=Jt(t,"x","relu6"),n={x:e};return Ut.runKernelFunc((t,n)=>(n([e]),"bool"===e.dtype?Pe(e,"int32"):t.relu6(e)),n,null,"Relu6")}});const pi=Qt({reverse_:function(t,e){const n=Jt(t,"x","reverse"),s={x:n},r={dims:e};return Ut.runKernelFunc(t=>{const s=L(e,n.shape);if(0===n.rank)return We(n);const r=t.reverse(n,s);return rn(r,n.shape)},s,null,"Reverse",r)}});const di=Qt({reverse1d_:function(t){const e=Jt(t,"x","reverse");return I(1===e.rank,()=>`Error in reverse1D: x must be rank 1 but got rank ${e.rank}.`),pi(e,0)}});const fi=Qt({reverse2d_:function(t,e){const n=Jt(t,"x","reverse");return I(2===n.rank,()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`),pi(n,e)}});const mi=Qt({reverse3d_:function(t,e){const n=Jt(t,"x","reverse");return I(3===n.rank,()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`),pi(n,e)}});const gi=Qt({reverse4d_:function(t,e){const n=Jt(t,"x","reverse");return I(4===n.rank,()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`),pi(n,e)}});const yi=Qt({round_:function(t){const e=Jt(t,"x","round"),n={x:e};return Ut.runKernelFunc(t=>t.round(e),n,null,"Round")}});const bi=Qt({rsqrt_:function(t){const e=Jt(t,"x","rsqrt"),n={x:e};return Ut.runKernelFunc((t,n)=>{const s=t.rsqrt(e);return n([e]),s},n,null,"Rsqrt")}});const xi=Qt({selu_:function(t){const e=Jt(t,"x","selu"),n={x:e};return Ut.runKernelFunc((t,n)=>{const s=t.selu(e);return n([e]),s},n,null,"Selu")}});const wi=Qt({separableConv2d_:function(t,e,n,s,r,a=[1,1],i="NHWC"){const o=Jt(t,"x","separableConv2d"),l=Jt(e,"depthwiseFilter","separableConv2d"),u=Jt(n,"pointwiseFilter","separableConv2d");let c=o,h=!1;if(3===o.rank&&(h=!0,c=rn(o,[1,o.shape[0],o.shape[1],o.shape[2]])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");I(4===c.rank,()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`),I(4===l.rank,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`),I(4===u.rank,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`),I(1===u.shape[0],()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`),I(1===u.shape[1],()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`);const p=l.shape[2],d=l.shape[3];I(u.shape[2]===p*d,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${p*d}, but got ${u.shape[2]}.`);const f=br(c,l,s,r,i,a),m=or(f,u,1,"valid",i);return h?rn(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const vi=async function(t,e){const n=Jt(t,"x","setdiff1d"),s=Jt(e,"y","setdiff1d");I(n.dtype===s.dtype,()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${s.dtype}).`),I(1===n.rank,()=>`x should be 1D tensor, but got x (${n.shape}).`),I(1===s.rank,()=>`y should be 1D tensor, but got y (${s.shape}).`);const r=await n.data(),a=await s.data(),i=new Set(a);let o=0;for(let t=0;t<r.length;t++)i.has(r[t])||o++;const l=new vt([o],n.dtype),u=new vt([o],"int32");for(let t=0,e=0;t<r.length;t++)i.has(r[t])||(l.values[e]=r[t],u.values[e]=t,e++);return[l.toTensor(),u.toTensor()]};const Ni=Qt({sign_:function(t){const e=Jt(t,"x","sign"),n={x:e};return Ut.runKernelFunc(t=>t.sign(e),n,null,"Sign")}});const ki=Qt({sin_:function(t){const e=Jt(t,"x","sin"),n={x:e};return Ut.runKernelFunc((t,n)=>{const s=t.sin(e);return n([e]),s},n,null,p)}});const Ci=Qt({sinh_:function(t){const e=Jt(t,"x","sinh"),n={x:e};return Ut.runKernelFunc((t,n)=>{const s=t.sinh(e);return n([e]),s},n,null,"Sinh")}});const Si=Qt({slice1d_:function(t,e,n){const s=Jt(t,"x","slice1d");return I(1===s.rank,()=>`slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`),Hs(s,[e],[n])}});const Ii=Qt({slice2d_:function(t,e,n){const s=Jt(t,"x","slice2d");return I(2===s.rank,()=>`slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`),Hs(s,e,n)}});const Ei=Qt({slice3d_:function(t,e,n){const s=Jt(t,"x","slice3d");return I(3===s.rank,()=>`slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`),Hs(s,e,n)}});const Ti=Qt({slice4d_:function(t,e,n){const s=Jt(t,"x","slice4d");return I(4===s.rank,()=>`slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`),Hs(s,e,n)}});const Ai=Qt({softmax_:function(t,e=-1){const n=Jt(t,"logits","softmax","float32");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${e}`);const s={logits:n},r={dim:e};return Ut.runKernelFunc((t,s)=>{const r=t.softmax(n,e);return s([r]),r},s,null,"Softmax",r)}});const $i=Qt({fft_:function(t){I("complex64"===t.dtype,()=>`The dtype for tf.spectral.fft() must be complex64 but got ${t.dtype}.`);const e={input:t};return Ut.runKernelFunc(e=>{const n=t.shape[t.shape.length-1],s=t.size/n,r=t.as2D(s,n);return e.fft(r).reshape(t.shape)},e,null,"FFT")}});const Ri=Qt({ifft_:function(t){I("complex64"===t.dtype,()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${t.dtype}.`);const e={input:t};return Ut.runKernelFunc(e=>{const n=t.shape[t.shape.length-1],s=t.size/n,r=rn(t,[s,n]),a=e.ifft(r);return rn(a,t.shape)},e,null,"IFFT")}});const Di=Qt({irfft_:function(t){const e=t.shape[t.shape.length-1],n=t.size/e;let s;if(e<=2){const r=rn(t,[n,e]);s=Ri(r)}else{const r=[n,2*(e-1)],a=rn(Da(t),[n,e]),i=rn(Gr(t),[n,e]),o=pi(Hs(a,[0,1],[n,e-2]),1),l=rs(pi(Hs(i,[0,1],[n,e-2]),1),Xr(-1)),u=Us([a,o],1),c=Us([i,l],1),h=rn(te(u,c),[r[0],r[1]]);s=Ri(h)}if(s=Da(s),3===t.rank&&0!==t.shape[0]){const e=s,n=t.shape[0];s=rn(s,[n,s.shape[0]/n,s.shape[1]]),e.dispose()}return s}});function _i(t,e,n=0){let s=[];if("number"==typeof e)I(t.shape[n]%e==0,()=>"Number of splits must evenly divide the axis."),s=new Array(e).fill(t.shape[n]/e);else{I(e.reduce((t,e)=>(-1===e&&(t+=1),t),0)<=1,()=>"There should be only one negative value in split array.");const r=e.indexOf(-1);if(-1!==r){const s=e.reduce((t,e)=>e>0?t+e:t);e[r]=t.shape[n]-s}I(t.shape[n]===e.reduce((t,e)=>t+e),()=>"The sum of sizes must match the size of the axis dimension."),s=e}return s}const Fi=Qt({split_:function(t,e,n=0){const s=Jt(t,"x","split"),r={x:s},a={numOrSizeSplits:e,axis:n};return Ut.runKernelFunc((t,r)=>{const a=L(n,s.shape)[0],i=_i(s,e,a);return t.split(s,i,a)},r,null,"SplitV",a)}});const Oi=Qt({rfft_:function(t,e){I("float32"===t.dtype,()=>"The dtype for rfft() must be real value but got "+t.dtype);let n=t.shape[t.shape.length-1];const s=t.size/n;let r;if(null!=e&&e<n){const s=t.shape.map(t=>0),a=t.shape.map(t=>t);a[t.shape.length-1]=e,r=Hs(t,s,a),n=e}else if(null!=e&&e>n){const s=t.shape.map(t=>t);s[t.shape.length-1]=e-n,r=Us([t,va(s)],t.shape.length-1),n=e}else r=t;const a=Ir(r),i=rn(te(r,a),[s,n]),o=$i(i),l=Math.floor(n/2)+1,u=Da(o),c=Gr(o),h=Fi(u,[l,n-l],u.shape.length-1),p=Fi(c,[l,n-l],c.shape.length-1),d=r.shape.slice();return d[r.shape.length-1]=l,rn(te(h[0],p[0]),d)}});const Mi=Qt({sqrt_:function(t){const e=Jt(t,"x","sqrt"),n={x:e};return Ut.runKernelFunc((t,n)=>{const s=t.sqrt(e);return n([e]),s},n,null,"Sqrt")}});const Li=Qt({squaredDifference_:function(t,e){let n=Jt(t,"a","squaredDifference"),s=Jt(e,"b","squaredDifference");[n,s]=Ot(n,s),kr(n.shape,s.shape);const r={a:n,b:s};return Ut.runKernelFunc((t,e)=>{const r=t.squaredDifference(n,s);return e([n,s]),r},r,null,"SquaredDifference",{})}});const zi=Qt({squeeze_:function(t,e){const n=Jt(t,"x","squeeze");return rn(n,z(n.shape,e).newShape)}});const Bi=Qt({stack_:function(t,e=0){const n=Zt(t,"tensors","stack");if(I(n.length>=1,()=>"Pass at least one tensor to tf.stack"),1===n.length)return Dr(n[0],e);const s=n[0].rank,r=n[0].shape,a=n[0].dtype;I(e<=s,()=>"Axis must be <= rank of the tensor"),n.forEach(t=>{E(r,t.shape,"All tensors passed to stack must have matching shapes"),I(a===t.dtype,()=>"All tensors passed to stack must have matching dtypes")});const i=n.map(t=>Dr(t,e));return Us(i,e)}});const Pi=Qt({step_:function(t,e=0){const n=Jt(t,"x","step"),s={x:n},r={alpha:e};return Ut.runKernelFunc(t=>t.step(n,e),s,null,"Step",r)}});const Wi=Qt({stridedSlice_:function(t,e,n,s,r=0,a=0,i=0,o=0,l=0){let u=Jt(t,"x","stridedSlice");const c={x:u},h={begin:e,end:n,strides:s,beginMask:r,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:l};return Ut.runKernelFunc(t=>{null==s&&(s=new Array(e.length));const c=Nn(i);if(c.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==i&&0!==o)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==i&&0!==l)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");const h=u.rank-e.length,p=Nn(o),d=u.shape.slice();p.forEach(t=>{e[t]=0,n[t]=1,d.splice(t,0,1)}),u=rn(u,d);const{begin:f,end:m,strides:g}=En(u.shape,c,h,e,n,s,r,a,i);e=f,n=m,s=g;const y=Nn(l);y.forEach(t=>{n[t]=e[t]+1,s[t]=1});const b=kn(e,n,s),x=b.filter((t,e)=>-1===y.indexOf(e));if(s.every(t=>1===t))return rn(Hs(u,e,b),x);const w=t.stridedSlice(u,e,n,s);return rn(w,x)},c,null,"StridedSlice",h)}});const Vi=Qt({tan_:function(t){const e=Jt(t,"x","tan"),n={x:e};return Ut.runKernelFunc((t,n)=>{const s=t.tan(e);return n([e]),s},n,null,d)}});function Ui(t,e,n){if(T(t),null!=e&&2!==e.length)throw new Error("tensor2d() requires shape to have two numbers");const s=Xt(t,n);if(2!==s.length&&1!==s.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===s.length&&null==e)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return ee(t,e,s,n)}function Gi(t,e,n){if(T(t),null!=e&&4!==e.length)throw new Error("tensor4d() requires shape to have four numbers");const s=Xt(t,n);if(4!==s.length&&1!==s.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===s.length&&null==e)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return ee(t,e,s,n)}const Hi=Qt({topk_:function(t,e=1,n=!0){const s=Jt(t,"x","topk");if(0===s.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const r=s.shape[s.shape.length-1];if(e>r)throw new Error(`'k' passed to topk() must be <= the last dimension (${r}) but got `+e);const a={x:s},i={k:e,sorted:n},[o,l]=Ut.runKernelFunc(t=>t.topk(s,e,n),a,null,"TopK",i);return{values:o,indices:l}}});const ji=Qt({truncatedNormal_:function(t,e=0,n=1,s,r){if(null!=s&&"bool"===s)throw new Error("Unsupported data type $ { dtype }");const a=new ei(e,n,s,!0,r),i=Be(t,s);for(let t=0;t<i.values.length;t++)i.values[t]=a.nextValue();return i.toTensor()}});const qi=Qt({unsortedSegmentSum_:function(t,e,n){const s=Jt(t,"x","unsortedSegmentSum"),r=Jt(e,"segmentIds","unsortedSegmentSum","int32");I(D(n),()=>"numSegments must be of dtype int");const a={x:s,segmentIds:r},i={numSegments:n};return Ut.runKernelFunc((t,e)=>{const a=t.unsortedSegmentSum(s,r,n);return e([r]),a},a,null,"UnsortedSegmentSum",i)}});const Ki=Qt({unstack_:function(t,e=0){const n=Jt(t,"x","unstack");I(e>=-n.shape.length&&e<n.shape.length,()=>`Axis = ${e} is not in [-${n.shape.length}, ${n.shape.length})`),e<0&&(e+=n.shape.length);const s={value:n},r={axis:e};return Ut.runKernelFunc(t=>t.unstack(n,e),s,null,"Unpack",r)}});function Xi(t,e=!0,n,s){return Ut.makeVariable(t,e,n,s)}function Yi(t,e){const n=[];for(let t=0;t<e.length;t++)e[t]&&n.push(t);const s=Be(t,"int32"),r=Be([n.length,t.length],"int32");for(let e=0;e<n.length;e++){const a=s.indexToLoc(n[e]),i=e*t.length;r.values.set(a,i)}return r.toTensor()}const Ji=async function(t){const e=Jt(t,"condition","whereAsync","bool"),n=await e.data(),s=Yi(e.shape,n);return t!==e&&e.dispose(),s};const Zi=async function(t,e,n){const s=Jt(t,"tensor","boolMask"),r=Jt(e,"mask","boolMask","bool"),a=null==n?0:n,i=r.rank,o=s.shape;I(i>0,()=>"mask cannot be scalar"),E(o.slice(a,a+i),r.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let t=a;t<a+i;t++)l*=o[t];const u=o.slice(0,a).concat([l],o.slice(a+i)),c=rn(s,u),h=rn(r,[-1]),p=await Ji(h),d=zi(p,[1]),f=Wr(c,d,a);return t!==s&&s.dispose(),e!==r&&r.dispose(),d.dispose(),c.dispose(),h.dispose(),p.dispose(),f};const Qi=Qt({equalStrict_:function(t,e){jn("strict variants of ops have been deprecated and will be removed in future");const n=Jt(t,"a","equalStrict"),s=Jt(e,"b","equalStrict");return E(n.shape,s.shape,"Error in equalStrict: "),Cr(n,s)}}),to=Qt({greaterEqualStrict_:function(t,e){jn("strict variants of ops have been deprecated and will be removed in future");const n=Jt(t,"a","greaterEqualStrict"),s=Jt(e,"b","greaterEqualStrict");return E(n.shape,s.shape,"Error in greaterEqualStrict: "),Ur(n,s)}}),eo=Qt({greaterStrict_:function(t,e){jn("strict variants of ops have been deprecated and will be removed in future");const n=Jt(t,"a","greaterStrict"),s=Jt(e,"b","greaterStrict");return E(n.shape,s.shape,"Error in greaterStrict: "),Vr(n,s)}}),no=Qt({lessEqualStrict_:function(t,e){jn("strict variants of ops have been deprecated and will be removed in future");const n=Jt(t,"a","lessEqualStrict"),s=Jt(e,"b","lessEqualStrict");return E(n.shape,s.shape,"Error in lessEqualStrict: "),Zr(n,s)}}),so=Qt({lessStrict_:function(t,e){jn("strict variants of ops have been deprecated and will be removed in future");const n=Jt(t,"a","lessStrict"),s=Jt(e,"b","lessStrict");return E(n.shape,s.shape,"Error in lessStrict: "),Jr(n,s)}}),ro=Qt({notEqualStrict_:function(t,e){jn("strict variants of ops have been deprecated and will be removed in future");const n=Jt(t,"a","notEqualStrict"),s=Jt(e,"b","notEqualStrict");return E(n.shape,s.shape,"Error in notEqualStrict: "),Ra(n,s)}});const ao=Qt({addStrict_:function(t,e){jn("strict variants of ops have been deprecated and will be removed in future");const n=Jt(t,"a","addStrict"),s=Jt(e,"b","addStrict");return E(n.shape,s.shape,"Error in addStrict: "),es(n,s)}}),io=Qt({divStrict_:function(t,e){jn("strict variants of ops have been deprecated and will be removed in future");const n=Jt(t,"a","div"),s=Jt(e,"b","div");return E(n.shape,s.shape,"Error in divideStrict: "),ss(n,s)}}),oo=Qt({maximumStrict_:function(t,e){jn("strict variants of ops have been deprecated and will be removed in future");const n=Jt(t,"a","maximumStrict"),s=Jt(e,"b","maximumStrict");return E(n.shape,s.shape,"Error in maximumStrict: "),Kr(n,s)}}),lo=Qt({minimumStrict_:function(t,e){jn("strict variants of ops have been deprecated and will be removed in future");const n=Jt(t,"a","minimumStrict"),s=Jt(e,"b","minimumStrict");return E(n.shape,s.shape,"Error in minimumStrict: "),Sa(n,s)}}),uo=Qt({modStrict_:function(t,e){jn("strict variants of ops have been deprecated and will be removed in future");const n=Jt(t,"a","modStrict"),s=Jt(e,"b","modStrict");return E(n.shape,s.shape,"Error in modStrict: "),Ia(n,s)}}),co=Qt({mulStrict_:function(t,e){jn("strict variants of ops have been deprecated and will be removed in future");const n=Jt(t,"a","mul"),s=Jt(e,"b","mul");return E(n.shape,s.shape,"Error in multiplyStrict: "),rs(n,s)}}),ho=Qt({powStrict_:function(t,e){return jn("strict variants of ops have been deprecated and will be removed in future"),E(t.shape,e.shape,"Error in powStrict: "),Va(t,e)}}),po=Qt({squaredDifferenceStrict_:function(t,e){jn("strict variants of ops have been deprecated and will be removed in future");const n=Jt(t,"a","squaredDifferenceStrict"),s=Jt(e,"b","squaredDifferenceStrict");return E(n.shape,s.shape,"Error in squaredDifferenceStrict: "),Li(n,s)}}),fo=Qt({subStrict_:function(t,e){jn("strict variants of ops have been deprecated and will be removed in future");const n=Jt(t,"a","subStrict"),s=Jt(e,"b","subStrict");return E(n.shape,s.shape,"Error in subStrict: "),ca(n,s)}});const mo=Qt({norm_:function(t,e="euclidean",n=null,s=!1){const r=function t(e,n,s=null){if(0===e.rank)return as(e);if(1!==e.rank&&null===s)return t(rn(e,[-1]),n,s);if(1===e.rank||"number"==typeof s||Array.isArray(s)&&1===s.length){if(1===n)return ha(as(e),s);if(n===1/0)return ua(as(e),s);if(n===-1/0)return Ca(as(e),s);if("euclidean"===n||2===n)return Mi(ha(Va(as(e),Xr(2,"int32")),s));throw new Error("Error in norm: invalid ord value: "+n)}if(Array.isArray(s)&&2===s.length){if(1===n)return ua(ha(as(e),s[0]),s[1]-1);if(n===1/0)return ua(ha(as(e),s[1]),s[0]);if(n===-1/0)return Ca(ha(as(e),s[1]),s[0]);if("fro"===n||"euclidean"===n)return Mi(ha(Ea(e),s));throw new Error("Error in norm: invalid ord value: "+n)}throw new Error("Error in norm: invalid axis: "+s)}(t=Jt(t,"x","norm"),e,n);let a=r.shape;if(s){const e=L(n,t.shape);a=ps(r.shape,e)}return rn(r,a)}});const go=Qt({movingAverage_:function(t,e,n,s,r=!0){const a=Jt(t,"v","movingAverage"),i=Jt(e,"x","movingAverage"),o=Jt(n,"decay","movingAverage");Mt(a,i),I(R(a.shape,i.shape),()=>"Shape mismatch in v and x");const l=Xr(1),u=ca(l,o);let c=rs(ca(i,a),u);if(r){I(null!=s,()=>"When using zeroDebias: true, step is required.");const t=Jt(s,"step","movingAverage");c=ss(c,ca(l,Va(o,t)))}return es(a,c)}});const yo=Qt({scatterND_:function(t,e,n){const s=Jt(t,"indices","scatterND","int32"),r=Jt(e,"updates","scatterND");bn(r,s,n);const a={indices:s,updates:r},i={shape:n};return Ut.runKernelFunc(t=>t.scatterND(s,r,n),a,null,"ScatterNd",i)}});const bo=Qt({sparseToDense_:function(t,e,n,s=0){const r=Jt(t,"sparseIndices","sparseToDense","int32"),a=Jt(e,"sparseValues","sparseToDense"),i=Jt(s,"defaultValue","sparseToDense",a.dtype);!function(t,e,n,s){if("int32"!==t.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${t.shape}.`);const r=t.rank>0?t.shape[0]:1,a=t.rank>1?t.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const i=e.size;if(0!==e.rank&&(1!==e.rank||i!==r))throw new Error(`sparseValues has incorrect shape ${e.shape}, should be [] or [${r}]`);if(e.dtype!==s.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(r,a,n,i);const o={sparseIndices:r,sparseValues:a,defaultValue:i},l={outputShape:n};return Ut.runKernelFunc(t=>t.sparseToDense(r,a,n,i),o,null,"SparseToDense",l)}});const xo=Qt({gatherND_:function(t,e){const n=Jt(e,"indices","gatherND","int32"),s=Jt(t,"x","gatherND"),r={params:s,indices:n};return Ut.runKernelFunc(t=>t.gatherND(s,n),r,null,"GatherNd")}});const wo=Qt({dropout_:function(t,e,n,s){const r=Jt(t,"x","dropout");if(I("float32"===r.dtype,()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`),I(e>=0&&e<1,()=>`rate must be a float in the range [0, 1), but got ${e}.`),0===e)return t instanceof St?r.clone():r;const a=function(t,e){if(null==e)return t.shape.slice();if(R(t.shape,e))return e;if(t.shape.length===e.length){const n=[];for(let s=0;s<t.shape.length;s++)null==e[s]&&null!=t.shape[s]?n.push(t.shape[s]):n.push(e[s]);return n}return e}(r,n),i=1-e,o=ss(Lr(es(ii(a,0,1,"float32",s),i)),i);return rs(r,o)}});function vo(t){return Math.floor(Math.pow(2,Math.ceil(Math.log(t)/Math.log(2))))}function No(t,e,n){const s=1-t%2,r=new Float32Array(t);for(let a=0;a<t;++a){const i=2*Math.PI*a/(t+s-1);r[a]=e-n*Math.cos(i)}return oi(r,"float32")}const ko=async function(t,e,n=1){const s=Jt(t,"predictions","inTopK"),r=Jt(e,"targets","inTopK");I(s.rank>1,()=>"inTopK() expects the predictions to be of rank 2 or higher, but got "+s.rank),I(s.rank-1===r.rank,()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${s.rank} and targets rank ${r.rank}`),E(s.shape.slice(0,s.shape.length-1),r.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=s.shape[s.shape.length-1];I(n>0&&n<=a,()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`);const i=await s.data(),o=await r.data(),[l,u]=[i.length/a,a],c=B("bool",l);for(let t=0;t<l;t++){const e=t*u,s=i.subarray(e,e+u),r=[];for(let t=0;t<s.length;t++)r.push({value:s[t],index:t});r.sort((t,e)=>e.value-t.value),c[t]=0;for(let e=0;e<n;e++)if(r[e].index===o[t]){c[t]=1;break}}return t!==s&&s.dispose(),e!==r&&r.dispose(),ne(c,r.shape,"bool")};const Co=Qt({conv2DBackpropFilter_:function(t,e,n,s,r,a="NHWC",i){let o=t;3===t.rank&&(o=rn(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let l=e;3===l.rank&&(l=rn(e,[1,e.shape[0],e.shape[1],e.shape[2]])),I(4===o.rank,()=>"Error in conv2dDerFilter: input must be rank 4, but got shape "+o.shape+"."),I(4===l.rank,()=>"Error in conv2dDerFilter: dy must be rank 4, but got shape "+l.shape+"."),I(4===n.length,()=>"Error in conv2dDerFilter: filterShape must be length 4, but got "+n+".");const u="NHWC"===a?o.shape[3]:o.shape[1],c="NHWC"===a?l.shape[3]:l.shape[1];I(u===n[2],()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${n[2]}.`),I(c===n[3],()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`),null!=i&&I(D(r),()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`);const h={x:o,dy:l},p={strides:s,pad:r,dataFormat:a,dimRoundingMode:i};return Ut.runKernelFunc(t=>{const e=zs(a),u=As(o.shape,n,s,1,r,i,!1,e);return t.conv2dDerFilter(o,l,u)},h,null,"Conv2DBackpropFilter",p)}});function So(t,e,n){if(null==n||"linear"===n)return t;if("relu"===n)return rs(t,Pi(e));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function Io(t,e){let n=e;const s=Nr(t.shape,e.shape);return s.length>0&&(n=ha(n,s)),rn(n,t.shape)}function Eo(t,e,n){if("linear"===e)return t;if("relu"===e)return ci(t);if("elu"===e)return Ar(t);if("relu6"===e)return hi(t);if("prelu"===e)return Ua(t,n);throw new Error(`Unknown fused activation ${e}.`)}const To=(t,e)=>!(t>0)||"linear"===e;const Ao=Qt({fusedConv2d_:function({x:t,filter:e,strides:n,pad:s,dataFormat:r="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u}){if(l=l||"linear",!1===To(Ut.state.gradientDepth,l)){let c=or(t,e,n,s,r,a,i);return null!=o&&(c=es(c,o)),Eo(c,l,u)}const c=Jt(t,"x","conv2d"),h=Jt(e,"filter","conv2d");let p=c,d=!1;3===c.rank&&(d=!0,p=rn(c,[1,c.shape[0],c.shape[1],c.shape[2]])),I(4===p.rank,()=>"Error in fused conv2d: input must be rank 4, but got rank "+p.rank+"."),I(4===h.rank,()=>"Error in fused conv2d: filter must be rank 4, but got rank "+h.rank+"."),null!=i&&I(D(s),()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`),I(p.shape[3]===h.shape[2],()=>`Error in conv2d: depth of input (${p.shape[3]}) must match input depth for filter ${h.shape[2]}.`),I(Ls(n,a),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),I("NHWC"===r,()=>`Error in conv2d: got dataFormat of ${r} but only NHWC is currently supported.`);const f=As(p.shape,h.shape,n,a,s,i);let m,g;null!=o&&(m=Jt(o,"bias","fused conv2d"),[m]=Ot(m,c),kr(f.outShape,m.shape)),null!=u&&(g=Jt(u,"prelu weights","fused conv2d"));const y=(t,e)=>{const[r,i,o,u]=e,c=So(t,o,l);I(Ms(a),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`);const h=[ur(i.shape,c,r,n,s),Co(i,c,r.shape,n,s)];if(null!=u){const t=Io(u,c);h.push(t)}return h},b=t=>t.fusedConv2d({input:p,filter:h,convInfo:f,bias:m,activation:l,preluActivationWeights:g}),x={x:p,filter:h,bias:m,preluActivationWeights:g},w={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i,activation:l};if(null==o){return ra((t,e,n)=>{let s=Ut.runKernelFunc(b,x,null,"FusedConv2D",w);return n([e,t,s]),d&&(s=rn(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:y}})(p,h)}return ra((t,e,n,s)=>{let r=Ut.runKernelFunc(b,x,null,"FusedConv2D",w);return s([e,t,r,n]),d&&(r=rn(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:y}})(p,h,m)}});const $o=Qt({depthwiseConv2dNativeBackpropFilter_:function(t,e,n,s){let r=t;3===t.rank&&(r=rn(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let a=e;3===a.rank&&(a=rn(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const i={x:r,dy:a};return Ut.runKernelFunc(t=>t.depthwiseConv2DDerFilter(r,a,s),i,null,"DepthwiseConv2dNativeBackpropFilter")}});const Ro=Qt({depthwiseConv2dNativeBackpropInput_:function(t,e,n,s){let r=e,a=!1;3===e.rank&&(a=!0,r=rn(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const i={dy:r},o=Ut.runKernelFunc(t=>t.depthwiseConv2DDerInput(r,n,s),i,null,"DepthwiseConv2dNativeBackpropInput");return a?rn(o,[o.shape[1],o.shape[2],o.shape[3]]):o}});const Do=Qt({fusedDepthwiseConv2d_:function({x:t,filter:e,strides:n,pad:s,dataFormat:r="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u}){if(!1===To(Ut.state.gradientDepth,l)){let c=br(t,e,n,s,r,a,i);return null!=o&&(c=es(c,o)),Eo(c,l,u)}const c=Jt(t,"x","depthwiseConv2d"),h=Jt(e,"filter","depthwiseConv2d");let p=c,d=!1;3===c.rank&&(d=!0,p=rn(c,[1,c.shape[0],c.shape[1],c.shape[2]])),I(4===p.rank,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${p.rank}.`),I(4===h.rank,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${h.rank}.`),I(p.shape[3]===h.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${p.shape[3]}) must match the inChannels dimension in filter ${h.shape[2]}.`),null==a&&(a=[1,1]),I(Ls(n,a),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),null!=i&&I(D(s),()=>`Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${i} but got pad ${s}.`);const f=As(p.shape,h.shape,n,a,s,i,!0);let m,g;null!=o&&(m=Jt(o,"bias","fused conv2d"),[m]=Ot(m,c),kr(f.outShape,m.shape)),null!=u&&(g=Jt(u,"prelu weights","fused depthwiseConv2d"));const y=(t,e)=>{I(Ms(a),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`);const[n,s,r,i]=e,o=So(t,r,l),u=Ro(s.shape,o,n,f),c=$o(s,o,n.shape,f);if(null!=i){return[u,c,Io(m,o)]}return[u,c]},b=t=>t.fusedDepthwiseConv2D({input:p,filter:h,convInfo:f,bias:m,activation:l,preluActivationWeights:g}),x={x:p,filter:h,bias:m,preluActivationWeights:g},w={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i,activation:l};if(null==o){return ra((t,e,n)=>{let s=Ut.runKernelFunc(b,x,null,"FusedDepthwiseConv2D",w);return n([e,t,s]),d&&(s=rn(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:y}})(p,h)}return ra((t,e,n,s)=>{let r=Ut.runKernelFunc(b,x,null,"FusedDepthwiseConv2D",w);return s([e,t,r,n]),d&&(r=rn(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:y}})(p,h,m)}});const _o=Qt({fusedMatMul_:function({a:t,b:e,transposeA:n=!1,transposeB:s=!1,bias:r,activation:a="linear",preluActivationWeights:i}){if(!1===To(Ut.state.gradientDepth,a)){let o=an(t,e,n,s);return null!=r&&(o=es(o,r)),Eo(o,a,i)}let o=Jt(t,"a","fused matMul"),l=Jt(e,"b","fused matMul");[o,l]=Ot(o,l);const u=n?o.shape[o.rank-2]:o.shape[o.rank-1],c=s?l.shape[l.rank-1]:l.shape[l.rank-2],h=n?o.shape[o.rank-1]:o.shape[o.rank-2],p=s?l.shape[l.rank-2]:l.shape[l.rank-1],d=o.shape.slice(0,-2),f=l.shape.slice(0,-2),m=$(d),g=$(f);I(o.rank>=2&&l.rank>=2&&o.rank===l.rank,()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${o.rank} and ${l.rank}.`),I(R(d,f),()=>`Error in fused matMul: outer dimensions (${d}) and (${f}) of Tensors with shapes ${o.shape} and `+l.shape+" must match."),I(u===c,()=>`Error in fused matMul: inner shapes (${u}) and (${c}) of Tensors with shapes ${o.shape} and ${l.shape} and transposeA=${n} and transposeB=${s} must match.`);const y=o.shape.slice(0,-2).concat([h,p]),b=rn(o,n?[m,u,h]:[m,h,u]),x=rn(l,s?[g,p,c]:[g,c,p]);let w,v;null!=r&&(w=Jt(r,"bias","fused matMul"),[w]=Ot(w,o),kr(y,w.shape)),null!=i&&(v=Jt(i,"prelu weights","fused matMul"));const N=(t,e)=>{const[i,o,l,u]=e,c=So(rn(t,l.shape),l,a);let h,p;if(n||s?!n&&s?(h=an(c,o,!1,!1),p=an(c,i,!0,!1)):n&&!s?(h=an(o,c,!1,!0),p=an(i,c,!1,!1)):(h=an(o,c,!0,!0),p=an(c,i,!0,!0)):(h=an(c,o,!1,!0),p=an(i,c,!0,!1)),null!=r){return[h,p,Io(u,c)]}return[h,p]},k=t=>t.fusedBatchMatMul({a:b,b:x,transposeA:n,transposeB:s,bias:w,activation:a,preluActivationWeights:v}),C={a:b,b:x,bias:w,preluActivationWeights:v},S={transposeA:n,transposeB:s,activation:a};if(null==r){return ra((t,e,n)=>{const s=Ut.runKernelFunc(k,C,null,"_FusedMatMul",S);return n([t,e,s]),{value:rn(s,y),gradFunc:N}})(b,x)}return ra((t,e,n,s)=>{const r=Ut.runKernelFunc(k,C,null,"_FusedMatMul",S);return s([t,e,r,n]),{value:rn(r,y),gradFunc:N}})(b,x,w)}});var Fo=Object.freeze({__proto__:null,conv2d:Ao,depthwiseConv2d:Do,matMul:_o});const Oo=Qt({hammingWindow_:function(t){return No(t,.54,.46)}});const Mo=Qt({hannWindow_:function(t){return No(t,.5,.5)}});const Lo=Qt({frame_:function(t,e,n,s=!1,r=0){let a=0;const i=[];for(;a+e<=t.size;)i.push(Hs(t,a,e)),a+=n;if(s)for(;a<t.size;){const s=a+e-t.size,o=Us([Hs(t,a,e-s),Mr([s],r)]);i.push(o),a+=n}return 0===i.length?Ui([],[0,e]):rn(Us(i),[i.length,e])}});const zo=Qt({stft_:function(t,e,n,s,r=Mo){null==s&&(s=vo(e));const a=Lo(t,e,n),i=rs(a,r(e)),o=[];for(let t=0;t<a.shape[0];t++)o.push(Oi(Hs(i,[t,0],[1,e]),s));return Us(o)}});const Bo=Qt({cropAndResize_:function(t,e,n,s,r,a){const i=Jt(t,"image","cropAndResize"),o=Jt(e,"boxes","cropAndResize","float32"),l=Jt(n,"boxInd","cropAndResize","int32");r=r||"bilinear",a=a||0;const u=o.shape[0];I(4===i.rank,()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`),I(2===o.rank&&4===o.shape[1],()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${o.shape}.`),I(1===l.rank&&l.shape[0]===u,()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${o.shape}.`),I(2===s.length,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`),I(s[0]>=1&&s[1]>=1,()=>"cropSize must be atleast [1,1], but was "+s),I("bilinear"===r||"nearest"===r,()=>"method must be bilinear or nearest, but was "+r);const c={image:i,boxes:o,boxInd:l},h={method:r,extrapolationValue:a,cropSize:s};return Ut.runKernelFunc(t=>t.cropAndResize(i,o,l,s,r,a),c,null,"CropAndResize",h)}});const Po=Qt({flipLeftRight_:function(t){const e=Jt(t,"image","flipLeftRight","float32");I(4===e.rank,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${e.rank}.`);const n={image:e};return Ut.runKernel("FlipLeftRight",n,{})}});const Wo=Qt({rotateWithOffset_:function(t,e,n=0,s=.5){const r=Jt(t,"image","rotateWithOffset","float32");I(4===r.rank,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`);const a={image:r},i={radians:e,fillValue:n,center:s};return Ut.runKernel("RotateWithOffset",a,i)}});function Vo(t,e,n,s,r,a){null==s&&(s=.5),null==r&&(r=Number.NEGATIVE_INFINITY),null==a&&(a=0);const i=t.shape[0];return n=Math.min(n,i),I(0<=s&&s<=1,()=>`iouThreshold must be in [0, 1], but was '${s}'`),I(2===t.rank,()=>`boxes must be a 2D tensor, but was of rank '${t.rank}'`),I(4===t.shape[1],()=>"boxes must have 4 columns, but 2nd dimension was "+t.shape[1]),I(1===e.rank,()=>"scores must be a 1D tensor"),I(e.shape[0]===i,()=>`scores has incompatible shape with boxes. Expected ${i}, but was `+e.shape[0]),I(0<=a&&a<=1,()=>`softNmsSigma must be in [0, 1], but was '${a}'`),{maxOutputSize:n,iouThreshold:s,scoreThreshold:r,softNmsSigma:a}}const Uo=Qt({nonMaxSuppression_:function(t,e,n,s=.5,r=Number.NEGATIVE_INFINITY){const a=Jt(t,"boxes","nonMaxSuppression"),i=Jt(e,"scores","nonMaxSuppression"),o=Vo(a,i,n,s,r);n=o.maxOutputSize,s=o.iouThreshold,r=o.scoreThreshold;const l={maxOutputSize:n,iouThreshold:s,scoreThreshold:r};return Ut.runKernelFunc(t=>t.nonMaxSuppression(a,i,n,s,r),{boxes:a,scores:i},null,"NonMaxSuppressionV3",l)}});function Go(t,e,n){const s=function(t,e,n){return function(t,e,n){let s=0,r=t.length,a=0,i=!1;for(;s<r;){a=s+(r-s>>>1);const o=n(e,t[a]);o>0?s=a+1:(r=a,i=!o)}return i?s:-s-1}(t,e,n||Ho)}(t,e,n),r=s<0?-(s+1):s;t.splice(r,0,e)}function Ho(t,e){return t>e?1:t<e?-1:0}function jo(t,e,n,s,r){return Xo(t,e,n,s,r,0).selectedIndices}function qo(t,e,n,s,r,a){return Xo(t,e,n,s,r,0,!1,a,!0)}function Ko(t,e,n,s,r,a){return Xo(t,e,n,s,r,a,!0)}function Xo(t,e,n,s,r,a,i=!1,o=!1,l=!1){const u=[];for(let t=0;t<e.length;t++)e[t]>r&&u.push({score:e[t],boxIndex:t,suppressBeginIndex:0});u.sort(Zo);const c=a>0?-.5/a:0,h=[],p=[];for(;h.length<n&&u.length>0;){const e=u.pop(),{score:n,boxIndex:a,suppressBeginIndex:i}=e;if(n<r)break;let o=!1;for(let n=h.length-1;n>=i;--n){const i=Yo(t,a,h[n]);if(i>=s){o=!0;break}if(e.score=e.score*Jo(s,c,i),e.score<=r)break}e.suppressBeginIndex=h.length,o||(e.score===n?(h.push(a),p.push(e.score)):e.score>r&&Go(u,e,Zo))}const d=h.length,f=n-d;o&&f>0&&(h.push(...new Array(f).fill(0)),p.push(...new Array(f).fill(0)));const m={selectedIndices:oi(h,"int32")};return i&&(m.selectedScores=oi(p,"float32")),l&&(m.validOutputs=Xr(d,"int32")),m}function Yo(t,e,n){const s=t.subarray(4*e,4*e+4),r=t.subarray(4*n,4*n+4),a=Math.min(s[0],s[2]),i=Math.min(s[1],s[3]),o=Math.max(s[0],s[2]),l=Math.max(s[1],s[3]),u=Math.min(r[0],r[2]),c=Math.min(r[1],r[3]),h=Math.max(r[0],r[2]),p=Math.max(r[1],r[3]),d=(o-a)*(l-i),f=(h-u)*(p-c);if(d<=0||f<=0)return 0;const m=Math.max(a,u),g=Math.max(i,c),y=Math.min(o,h),b=Math.min(l,p),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function Jo(t,e,n){const s=Math.exp(e*n*n);return n<=t?s:0}function Zo(t,e){return t.score-e.score||t.score===e.score&&e.boxIndex-t.boxIndex}const Qo=async function(t,e,n,s=.5,r=Number.NEGATIVE_INFINITY){const a=Jt(t,"boxes","nonMaxSuppressionAsync"),i=Jt(e,"scores","nonMaxSuppressionAsync"),o=Vo(a,i,n,s,r);n=o.maxOutputSize,s=o.iouThreshold,r=o.scoreThreshold;const l=await Promise.all([a.data(),i.data()]),u=jo(l[0],l[1],n,s,r);return a!==t&&a.dispose(),i!==e&&i.dispose(),u};const tl=Qt({nonMaxSuppressionWithScore_:function(t,e,n,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const i=Jt(t,"boxes","nonMaxSuppression"),o=Jt(e,"scores","nonMaxSuppression"),l=Vo(i,o,n,s,r,a),u={boxes:i,scores:o},c={maxOutputSize:n=l.maxOutputSize,iouThreshold:s=l.iouThreshold,scoreThreshold:r=l.scoreThreshold,softNmsSigma:a=l.softNmsSigma},h=Ut.runKernel("NonMaxSuppressionV5",u,c);return{selectedIndices:h[0],selectedScores:h[1]}}});const el=async function(t,e,n,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const i=Jt(t,"boxes","nonMaxSuppressionAsync"),o=Jt(e,"scores","nonMaxSuppressionAsync"),l=Vo(i,o,n,s,r,a);n=l.maxOutputSize,s=l.iouThreshold,r=l.scoreThreshold,a=l.softNmsSigma;const u=await Promise.all([i.data(),o.data()]),c=Ko(u[0],u[1],n,s,r,a);return i!==t&&i.dispose(),o!==e&&o.dispose(),c};const nl=Qt({nonMaxSuppressionPadded_:function(t,e,n,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const i=Jt(t,"boxes","nonMaxSuppression"),o=Jt(e,"scores","nonMaxSuppression"),l=Vo(i,o,n,s,r,null),u={boxes:i,scores:o},c={maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:a},h=Ut.runKernel("NonMaxSuppressionV4",u,c);return{selectedIndices:h[0],validOutputs:h[1]}}});const sl=async function(t,e,n,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const i=Jt(t,"boxes","nonMaxSuppressionAsync"),o=Jt(e,"scores","nonMaxSuppressionAsync"),l=Vo(i,o,n,s,r,null),u=l.maxOutputSize,c=l.iouThreshold,h=l.scoreThreshold,[p,d]=await Promise.all([i.data(),o.data()]),f=qo(p,d,u,c,h,a);return i!==t&&i.dispose(),o!==e&&o.dispose(),f};const rl=Qt({resizeBilinear_:function(t,e,n=!1){const s=Jt(t,"images","resizeBilinear");I(3===s.rank||4===s.rank,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${s.rank}.`),I(2===e.length,()=>"Error in resizeBilinear: new shape must 2D, but got shape "+e+".");let r=s,a=!1;3===s.rank&&(a=!0,r=rn(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[i,o]=e,l={images:r},u={alignCorners:n,size:e},c=Ut.runKernelFunc((t,e)=>(e([r]),t.resizeBilinear(r,i,o,n)),l,null,"ResizeBilinear",u);return a?rn(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const al=Qt({resizeNearestNeighbor_:function(t,e,n=!1){const s=Jt(t,"images","resizeNearestNeighbor");I(3===s.rank||4===s.rank,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${s.rank}.`),I(2===e.length,()=>"Error in resizeNearestNeighbor: new shape must 2D, but got shape "+e+"."),I("float32"===s.dtype||"int32"===s.dtype,()=>"`images` must have `int32` or `float32` as dtype");let r=s,a=!1;3===s.rank&&(a=!0,r=rn(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[i,o]=e,l={images:r},u={alignCorners:n,size:e},c=Ut.runKernelFunc((t,e)=>(e([r]),t.resizeNearestNeighbor(r,i,o,n)),l,null,"ResizeNearestNeighbor",u);return a?rn(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const il=Qt({bandPart_:function(t,e,n){I(e%1==0,()=>`bandPart(): numLower must be an integer, got ${e}.`),I(n%1==0,()=>`bandPart(): numUpper must be an integer, got ${n}.`);const s=Jt(t,"a","bandPart");I(s.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${s.rank}.`);const r=s.shape,[a,i]=s.shape.slice(-2);if(!(e<=a))throw new Error(`bandPart(): numLower (${e}) must not be greater than the number of rows (${a}).`);if(!(n<=i))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`);e<0&&(e=a),n<0&&(n=i);const o=rn(li(0,a,1,"int32"),[-1,1]),l=li(0,i,1,"int32"),u=ca(o,l),c=fa(Zr(u,Xr(+e,"int32")),Ur(u,Xr(-n,"int32"))),h=va([a,i],s.dtype);return rn(Bi(Ki(rn(s,[-1,a,i])).map(t=>Sr(c,t,h))),r)}});const ol=Qt({gramSchmidt_:function(t){let e;if(Array.isArray(t)){e=!1,I(null!=t&&t.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");const n=t[0].shape[0];for(let e=1;e<t.length;++e)I(t[e].shape[0]===n,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${t[e].shape[0]} vs. ${n})`)}else e=!0,t=Fi(t,t.shape[0],0).map(t=>zi(t,[0]));I(t.length<=t[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${t.length}) exceeds number of dimensions (${t[0].shape[0]}).`);const n=[],s=t;for(let e=0;e<t.length;++e)n.push(Ut.tidy(()=>{let t=s[e];if(e>0)for(let s=0;s<e;++s){const e=rs(ha(rs(n[s],t)),n[s]);t=ca(t,e)}return ss(t,mo(t,"euclidean"))}));return e?Bi(n,0):n}});function ll(t,e=!1){return Ut.tidy(()=>{I(2===t.shape.length,()=>`qr2d() requires a 2D Tensor, but got a ${t.shape.length}D Tensor.`);const n=t.shape[0],s=t.shape[1];let r=Or(n),a=We(t);const i=Ui([[1]],[1,1]);let o=We(i);const l=n>=s?s:n;for(let t=0;t<l;++t){const e=a,l=o,u=r;[o,a,r]=Ut.tidy(()=>{const e=Hs(a,[t,t],[n-t,1]),l=mo(e),u=Hs(a,[t,t],[1,1]),c=Sr(Vr(u,0),Ui([[-1]]),Ui([[1]])),h=ca(u,rs(c,l)),p=ss(e,h);o=1===p.shape[0]?We(i):Us([i,Hs(p,[1,0],[p.shape[0]-1,p.shape[1]])],0);const d=ia(ss(an(c,h),l)),f=Hs(a,[t,0],[n-t,s]),m=rs(d,o),g=ln(o);if(0===t)a=ca(f,an(m,an(g,f)));else{const e=ca(f,an(m,an(g,f)));a=Us([Hs(a,[0,0],[t,s]),e],0)}const y=ln(m),b=Hs(r,[0,t],[n,r.shape[1]-t]);if(0===t)r=ca(b,an(an(b,o),y));else{const e=ca(b,an(an(b,o),y));r=Us([Hs(r,[0,0],[n,t]),e],1)}return[o,a,r]}),Yn([e,l,u])}return!e&&n>s&&(r=Hs(r,[0,0],[n,s]),a=Hs(a,[0,0],[s,s])),[r,a]})}const ul=Qt({qr_:function(t,e=!1){if(I(t.rank>=2,()=>"qr() requires input tensor to have a rank >= 2, but got rank "+t.rank),2===t.rank)return ll(t,e);{const n=t.shape.slice(0,t.shape.length-2).reduce((t,e)=>t*e),s=Ki(rn(t,[n,t.shape[t.shape.length-2],t.shape[t.shape.length-1]]),0),r=[],a=[];return s.forEach(t=>{const[n,s]=ll(t,e);r.push(n),a.push(s)}),[rn(Bi(r,0),t.shape),rn(Bi(a,0),t.shape)]}}});var cl;(cl=t.Reduction||(t.Reduction={}))[cl.NONE=0]="NONE",cl[cl.MEAN=1]="MEAN",cl[cl.SUM=2]="SUM",cl[cl.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS";const hl=Qt({computeWeightedLoss_:function(e,n,s=t.Reduction.SUM_BY_NONZERO_WEIGHTS){const r=Jt(e,"losses","computeWeightedLoss");let a=null;null!=n&&(a=Jt(n,"weights","computeWeightedLoss"));const i=null==a?r:rs(r,a);if(s===t.Reduction.NONE)return i;if(s===t.Reduction.SUM)return ha(i);if(s===t.Reduction.MEAN){if(null==a)return ka(i);{const t=r.size/a.size,e=ss(ha(i),ha(a));return t>1?ss(e,Xr(t)):e}}if(s===t.Reduction.SUM_BY_NONZERO_WEIGHTS){if(null==a)return ss(ha(i),Xr(r.size));{const t=rs(a,Na(r.shape)),e=Pe(ha(Ra(t,Xr(0))),"float32");return ss(ha(i),e)}}throw Error("Unknown reduction: "+s)}});const pl=Qt({absoluteDifference_:function(e,n,s,r=t.Reduction.SUM_BY_NONZERO_WEIGHTS){const a=Jt(e,"labels","absoluteDifference"),i=Jt(n,"predictions","absoluteDifference");let o=null;null!=s&&(o=Jt(s,"weights","absoluteDifference")),E(a.shape,i.shape,"Error in absoluteDifference: ");const l=as(ca(a,i));return hl(l,o,r)}});const dl=Qt({cosineDistance_:function(e,n,s,r,a=t.Reduction.SUM_BY_NONZERO_WEIGHTS){const i=Jt(e,"labels","cosineDistance"),o=Jt(n,"predictions","cosineDistance");let l=null;null!=r&&(l=Jt(r,"weights","cosineDistance")),E(i.shape,o.shape,"Error in cosineDistance: ");const u=Xr(1),c=ca(u,ha(rs(i,o),s,!0));return hl(c,l,a)}});const fl=Qt({hingeLoss_:function(e,n,s,r=t.Reduction.SUM_BY_NONZERO_WEIGHTS){let a=Jt(e,"labels","hingeLoss");const i=Jt(n,"predictions","hingeLoss");let o=null;null!=s&&(o=Jt(s,"weights","hingeLoss")),E(a.shape,i.shape,"Error in hingeLoss: ");const l=Xr(1);a=ca(rs(Xr(2),a),l);const u=ci(ca(l,rs(a,i)));return hl(u,o,r)}});const ml=Qt({huberLoss_:function(e,n,s,r=1,a=t.Reduction.SUM_BY_NONZERO_WEIGHTS){const i=Jt(e,"labels","huberLoss"),o=Jt(n,"predictions","huberLoss");let l=null;null!=s&&(l=Jt(s,"weights","huberLoss")),E(i.shape,o.shape,"Error in huberLoss: ");const u=Xr(r),c=as(ca(o,i)),h=Sa(c,u),p=ca(c,h),d=es(rs(Xr(.5),Ea(h)),rs(u,p));return hl(d,l,a)}});const gl=Qt({logLoss_:function(e,n,s,r=1e-7,a=t.Reduction.SUM_BY_NONZERO_WEIGHTS){const i=Jt(e,"labels","logLoss"),o=Jt(n,"predictions","logLoss");let l=null;null!=s&&(l=Jt(s,"weights","logLoss")),E(i.shape,o.shape,"Error in logLoss: ");const u=Xr(1),c=Xr(r),h=ia(rs(i,ea(es(o,c)))),p=rs(ca(u,i),ea(es(ca(u,o),c))),d=ca(h,p);return hl(d,l,a)}});const yl=Qt({meanSquaredError_:function(e,n,s,r=t.Reduction.SUM_BY_NONZERO_WEIGHTS){const a=Jt(e,"labels","meanSquaredError"),i=Jt(n,"predictions","meanSquaredError");let o=null;null!=s&&(o=Jt(s,"weights","meanSquaredError")),E(a.shape,i.shape,"Error in meanSquaredError: ");const l=Li(a,i);return hl(l,o,r)}});const bl=Qt({sigmoidCrossEntropy_:function(e,n,s,r=0,a=t.Reduction.SUM_BY_NONZERO_WEIGHTS){let i=Jt(e,"multiClassLabels","sigmoidCrossEntropy");const o=Jt(n,"logits","sigmoidCrossEntropy");let l=null;if(null!=s&&(l=Jt(s,"weights","sigmoidCrossEntropy")),E(i.shape,o.shape,"Error in sigmoidCrossEntropy: "),r>0){const t=Xr(r),e=Xr(1),n=Xr(.5);i=es(rs(i,ca(e,t)),rs(n,t))}const u=function(t,e){const n=Jt(t,"labels","sigmoidCrossEntropyWithLogits"),s=Jt(e,"logits","sigmoidCrossEntropyWithLogits");E(n.shape,s.shape,"Error in sigmoidCrossEntropyWithLogits: ");const r=ci(s),a=rs(s,n),i=na(Rr(ia(as(s))));return es(ca(r,a),i)}(i,o);return hl(u,l,a)}});const xl=Qt({softmaxCrossEntropy_:function(e,n,s,r=0,a=t.Reduction.SUM_BY_NONZERO_WEIGHTS){let i=Jt(e,"onehotLabels","softmaxCrossEntropy");const o=Jt(n,"logits","softmaxCrossEntropy");let l=null;if(null!=s&&(l=Jt(s,"weights","softmaxCrossEntropy")),E(i.shape,o.shape,"Error in softmaxCrossEntropy: "),r>0){const t=Xr(r),e=Xr(1),n=Xr(i.shape[1]);i=es(rs(i,ca(e,t)),ss(t,n))}const u=function(t,e,n=-1){if(-1===n&&(n=e.rank-1),n!==e.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${e.rank} and dim was `+n);return ra((t,e,s)=>{const r=da(e,[n],!0),a=ca(Pe(e,"float32"),r);s([t,a]);const i=ia(rs(a,t));return{value:ha(i,[n]),gradFunc:(t,e)=>{const[s,r]=e,a=ps(t.shape,[n]);return[rs(rn(t,a),ca(Pe(s,"float32"),Rr(r))),rs(rn(t,a),ca(Rr(r),Pe(s,"float32")))]}}})(t,e)}(i,o);return hl(u,l,a)}}),wl={fft:$i,ifft:Ri,rfft:Oi,irfft:Di},vl={hammingWindow:Oo,hannWindow:Mo,frame:Lo,stft:zo},Nl={flipLeftRight:Po,resizeNearestNeighbor:al,resizeBilinear:rl,rotateWithOffset:Wo,cropAndResize:Bo,nonMaxSuppression:Uo,nonMaxSuppressionAsync:Qo,nonMaxSuppressionWithScore:tl,nonMaxSuppressionWithScoreAsync:el,nonMaxSuppressionPadded:nl,nonMaxSuppressionPaddedAsync:sl},kl={bandPart:il,gramSchmidt:ol,qr:ul},Cl={absoluteDifference:pl,computeWeightedLoss:hl,cosineDistance:dl,hingeLoss:fl,huberLoss:ml,logLoss:gl,meanSquaredError:yl,sigmoidCrossEntropy:bl,softmaxCrossEntropy:xl};class Sl extends Ln{minimize(t,e=!1,n){const{value:s,grads:r}=this.computeGradients(t,n);if(null!=n){const t=n.map(t=>({name:t.name,tensor:r[t.name]}));this.applyGradients(t)}else this.applyGradients(r);return Yn(r),e?s:(s.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(t,e){return sa(t,e)}dispose(){null!=this.iterations_&&Yn(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:Xr(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(t){throw new Error("setWeights() is not implemented for this optimizer class "+this.getClassName())}async extractIterations(t){return this.iterations_=(await t[0].tensor.data())[0],t.slice(1)}}Object.defineProperty(Sl,Symbol.hasInstance,{value:t=>null!=t.minimize&&null!=t.computeGradients&&null!=t.applyGradients});class Il extends Sl{constructor(t,e,n=null){super(),this.learningRate=t,this.rho=e,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=Ut.backend.epsilon())}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const s=Ut.registeredVariables[e];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:e+"/accum_grad",variable:Xn(()=>Ir(s).variable(!1))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:e+"/accum_var",variable:Xn(()=>Ir(s).variable(!1))});const r=Array.isArray(t)?t[n].tensor:t[e];if(null==r)return;const a=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;Xn(()=>{const t=es(rs(a,this.rho),rs(Ea(r),1-this.rho)),e=rs(ss(Mi(es(i,this.epsilon)),Mi(es(a,this.epsilon))),r),n=es(rs(i,this.rho),rs(Ea(e),1-this.rho));a.assign(t),i.assign(n);const o=es(rs(e,-this.learningRate),s);s.assign(o)})}),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(Yn(this.accumulatedGrads.map(t=>t.variable)),Yn(this.accumulatedUpdates.map(t=>t.variable)))}async getWeights(){const t=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(t.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){const e=(t=await this.extractIterations(t)).length/2;this.accumulatedGrads=t.slice(0,e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)})),this.accumulatedUpdates=t.slice(e,2*e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.rho,e.epsilon)}}Il.className="Adadelta",Bn(Il);class El extends Sl{constructor(t,e=.1){super(),this.learningRate=t,this.initialAccumulatorValue=e,this.accumulatedGrads=[]}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const s=Ut.registeredVariables[e];if(null==this.accumulatedGrads[n]){const t=!1;this.accumulatedGrads[n]={originalName:e+"/accumulator",variable:Xn(()=>Mr(s.shape,this.initialAccumulatorValue).variable(t))}}const r=Array.isArray(t)?t[n].tensor:t[e];if(null==r)return;const a=this.accumulatedGrads[n].variable;Xn(()=>{const t=es(a,Ea(r));a.assign(t);const e=es(rs(ss(r,Mi(es(t,Ut.backend.epsilon()))),-this.learningRate),s);s.assign(e)})}),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&Yn(this.accumulatedGrads.map(t=>t.variable))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t);this.accumulatedGrads=t.map(t=>({originalName:t.name,variable:t.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(t,e){return new t(e.learningRate,e.initialAccumulatorValue)}}El.className="Adagrad",Bn(El);class Tl extends Sl{constructor(t,e,n,s=null){super(),this.learningRate=t,this.beta1=e,this.beta2=n,this.epsilon=s,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],Xn(()=>{this.accBeta1=Xr(e).variable(),this.accBeta2=Xr(n).variable()}),null==s&&(this.epsilon=Ut.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map(t=>t.name):Object.keys(t);Xn(()=>{const n=ca(1,this.accBeta1),s=ca(1,this.accBeta2);e.forEach((e,r)=>{const a=Ut.registeredVariables[e];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:e+"/m",variable:Xn(()=>Ir(a).variable(!1))}),null==this.accumulatedSecondMoment[r]&&(this.accumulatedSecondMoment[r]={originalName:e+"/v",variable:Xn(()=>Ir(a).variable(!1))});const i=Array.isArray(t)?t[r].tensor:t[e];if(null==i)return;const o=this.accumulatedFirstMoment[r].variable,l=this.accumulatedSecondMoment[r].variable,u=es(rs(o,this.beta1),rs(i,1-this.beta1)),c=es(rs(l,this.beta2),rs(Ea(i),1-this.beta2)),h=ss(u,n),p=ss(c,s);o.assign(u),l.assign(c);const d=es(rs(ss(h,es(Mi(p),this.epsilon)),-this.learningRate),a);a.assign(d)}),this.accBeta1.assign(rs(this.accBeta1,this.beta1)),this.accBeta2.assign(rs(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&Yn(this.accumulatedFirstMoment.map(t=>t.variable)),null!=this.accumulatedSecondMoment&&Yn(this.accumulatedSecondMoment.map(t=>t.variable))}async getWeights(){const t=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(t.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t),Xn(()=>{this.accBeta1.assign(Va(this.beta1,this.iterations_+1)),this.accBeta2.assign(Va(this.beta2,this.iterations_+1))});const e=t.length/2;this.accumulatedFirstMoment=t.slice(0,e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)})),this.accumulatedSecondMoment=t.slice(e,2*e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)}}Tl.className="Adam",Bn(Tl);class Al extends Sl{constructor(t,e,n,s=null,r=0){super(),this.learningRate=t,this.beta1=e,this.beta2=n,this.epsilon=s,this.decay=r,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],Xn(()=>{this.iteration=Xr(0).variable(),this.accBeta1=Xr(e).variable()}),null==s&&(this.epsilon=Ut.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map(t=>t.name):Object.keys(t);Xn(()=>{const n=ca(1,this.accBeta1),s=ss(-this.learningRate,es(rs(this.iteration,this.decay),1));e.forEach((e,r)=>{const a=Ut.registeredVariables[e];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:e+"/m",variable:Ir(a).variable(!1)}),null==this.accumulatedWeightedInfNorm[r]&&(this.accumulatedWeightedInfNorm[r]={originalName:e+"/v",variable:Ir(a).variable(!1)});const i=Array.isArray(t)?t[r].tensor:t[e];if(null==i)return;const o=this.accumulatedFirstMoment[r].variable,l=this.accumulatedWeightedInfNorm[r].variable,u=es(rs(o,this.beta1),rs(i,1-this.beta1)),c=rs(l,this.beta2),h=as(i),p=Kr(c,h);o.assign(u),l.assign(p);const d=es(rs(ss(s,n),ss(u,es(p,this.epsilon))),a);a.assign(d)}),this.iteration.assign(es(this.iteration,1)),this.accBeta1.assign(rs(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&Yn(this.accumulatedFirstMoment.map(t=>t.variable)),null!=this.accumulatedWeightedInfNorm&&Yn(this.accumulatedWeightedInfNorm.map(t=>t.variable))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(t){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)}}Al.className="Adamax",Bn(Al);class $l extends Sl{constructor(t){super(),this.learningRate=t,this.setLearningRate(t)}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const s=Array.isArray(t)?t[n].tensor:t[e];if(null==s)return;const r=Ut.registeredVariables[e];Xn(()=>{const t=es(rs(this.c,s),r);r.assign(t)})}),this.incrementIterations()}setLearningRate(t){this.learningRate=t,null!=this.c&&this.c.dispose(),this.c=Jn(Xr(-t))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(t){if(0!==(t=await this.extractIterations(t)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(t,e){return new t(e.learningRate)}}$l.className="SGD",Bn($l);class Rl extends $l{constructor(t,e,n=!1){super(t),this.learningRate=t,this.momentum=e,this.useNesterov=n,this.accumulations=[],this.m=Xr(this.momentum)}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const s=Ut.registeredVariables[e];if(null==this.accumulations[n]){const t=!1;this.accumulations[n]={originalName:e+"/momentum",variable:Xn(()=>Ir(s).variable(t))}}const r=this.accumulations[n].variable,a=Array.isArray(t)?t[n].tensor:t[e];null!=a&&Xn(()=>{let t;const e=es(rs(this.m,r),a);t=this.useNesterov?es(rs(this.c,es(a,rs(e,this.m))),s):es(rs(this.c,e),s),r.assign(e),s.assign(t)})}),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&Yn(this.accumulations.map(t=>t.variable))}setMomentum(t){this.momentum=t}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t);this.accumulations=t.map(t=>({originalName:t.name,variable:t.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)}}Rl.className="Momentum",Bn(Rl);class Dl extends Sl{constructor(t,e=.9,n=0,s=null,r=!1){if(super(),this.learningRate=t,this.decay=e,this.momentum=n,this.epsilon=s,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=r,null==s&&(this.epsilon=Ut.backend.epsilon()),null==t)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(t){(Array.isArray(t)?t.map(t=>t.name):Object.keys(t)).forEach((e,n)=>{const s=Ut.registeredVariables[e];null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:e+"/rms",variable:Xn(()=>Ir(s).variable(!1))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:e+"/momentum",variable:Xn(()=>Ir(s).variable(!1))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:e+"/mg",variable:Xn(()=>Ir(s).variable(!1))});const r=Array.isArray(t)?t[n].tensor:t[e];if(null==r)return;const a=this.accumulatedMeanSquares[n].variable,i=this.accumulatedMoments[n].variable;Xn(()=>{const t=es(rs(a,this.decay),rs(Ea(r),1-this.decay));if(this.centered){const e=this.accumulatedMeanGrads[n].variable,o=es(rs(e,this.decay),rs(r,1-this.decay)),l=ss(rs(r,this.learningRate),Mi(ca(t,es(Ea(o),this.epsilon)))),u=es(rs(i,this.momentum),l);a.assign(t),e.assign(o),i.assign(u);const c=ca(s,u);s.assign(c)}else{const t=es(rs(a,this.decay),rs(Ea(r),1-this.decay)),e=es(rs(i,this.momentum),ss(rs(r,this.learningRate),Mi(es(t,this.epsilon))));a.assign(t),i.assign(e);const n=ca(s,e);s.assign(n)}})}),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&Yn(this.accumulatedMeanSquares.map(t=>t.variable)),null!=this.accumulatedMeanGrads&&this.centered&&Yn(this.accumulatedMeanGrads.map(t=>t.variable)),null!=this.accumulatedMoments&&Yn(this.accumulatedMoments.map(t=>t.variable))}async getWeights(){const t=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&t.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(t.map(t=>({name:t.originalName,tensor:t.variable})))}async setWeights(t){t=await this.extractIterations(t);const e=this.centered?t.length/3:t.length/2;this.accumulatedMeanSquares=t.slice(0,e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)})),this.accumulatedMoments=t.slice(e,2*e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)})),this.centered&&(this.accumulatedMeanGrads=t.slice(2*e,3*e).map(t=>({originalName:t.name,variable:t.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)}}Dl.className="RMSProp",Bn(Dl);class _l{static sgd(t){return new $l(t)}static momentum(t,e,n=!1){return new Rl(t,e,n)}static rmsprop(t,e=.9,n=0,s=null,r=!1){return new Dl(t,e,n,s,r)}static adam(t=.001,e=.9,n=.999,s=null){return new Tl(t,e,n,s)}static adadelta(t=.001,e=.95,n=null){return new Il(t,e,n)}static adamax(t=.002,e=.9,n=.999,s=null,r=0){return new Al(t,e,n,s,r)}static adagrad(t,e=.1){return new El(t,e)}}const Fl={sgd:_l.sgd,momentum:_l.momentum,adadelta:_l.adadelta,adagrad:_l.adagrad,rmsprop:_l.rmsprop,adamax:_l.adamax,adam:_l.adam},Ol="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:t=>t();function Ml(){return new Promise(t=>Ol(()=>t()))}function Ll(t,e,n){return[n*("number"==typeof t?t:t[0]),e*("number"==typeof t?t:t[1])]}function zl(t,e,n,s=!0){let r=[];if(s)r=r.concat(e.slice(0)),r.push(t[0]/n),r=r.concat(t.slice(1));else{r=r.concat(t[0]);const n=e.length;for(let s=0;s<n;++s)r=r.concat([t[s+1]/e[s],e[s]]);r=r.concat(t.slice(n+1))}return r}function Bl(t,e,n=!0){const s=[];if(n){s.push(e);for(let n=e+1;n<t;++n)n<=2*e?(s.push(n),s.push(n-(e+1))):s.push(n)}else{const n=[],r=[];for(let s=1;s<t;++s)s>=2*e+1||s%2==1?r.push(s):n.push(s);s.push(...n),s.push(0),s.push(...r)}return s}function Pl(t,e,n,s=!0){const r=[];s?r.push(t[0]/n):r.push(t[0]*n);for(let n=1;n<t.length;++n)n<=e.length?s?r.push(e[n-1]*t[n]):r.push(t[n]/e[n-1]):r.push(t[n]);return r}function Wl(t,e){const n=[0];for(let s=0;s<e;++s)n.push(t[s][0]);return n}function Vl(t,e,n){const s=t.slice(0,1);for(let r=0;r<n;++r)s.push(t[r+1]-e[r][0]-e[r][1]);return s}const Ul=1.0507009873554805;function Gl(...t){a().getBool("IS_TEST")||console.warn(...t)}function Hl(t,e){if(t.length!==e.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${t.length}, imag: ${e.length}.`);const n=new Float32Array(2*t.length);for(let s=0;s<n.length;s+=2)n[s]=t[s/2],n[s+1]=e[s/2];return n}function jl(t){const e=new Float32Array(t.length/2),n=new Float32Array(t.length/2);for(let s=0;s<t.length;s+=2)e[s/2]=t[s],n[s/2]=t[s+1];return{real:e,imag:n}}function ql(t){const e=Math.ceil(t.length/4),n=new Float32Array(e),s=new Float32Array(e);for(let e=0;e<t.length;e+=4)n[Math.floor(e/4)]=t[e],s[Math.floor(e/4)]=t[e+1];return{real:n,imag:s}}function Kl(t){const e=Math.floor(t.length/4),n=new Float32Array(e),s=new Float32Array(e);for(let e=2;e<t.length;e+=4)n[Math.floor(e/4)]=t[e],s[Math.floor(e/4)]=t[e+1];return{real:n,imag:s}}function Xl(t,e){return{real:t[2*e],imag:t[2*e+1]}}function Yl(t,e,n,s){t[2*s]=e,t[2*s+1]=n}function Jl(t,e){const n=new Float32Array(t/2),s=new Float32Array(t/2);for(let r=0;r<Math.ceil(t/2);r++){const a=(e?2:-2)*Math.PI*(r/t);n[r]=Math.cos(a),s[r]=Math.sin(a)}return{real:n,imag:s}}function Zl(t,e,n){const s=(n?2:-2)*Math.PI*(t/e);return{real:Math.cos(s),imag:Math.sin(s)}}function Ql(t,e,n){if("complex64"===e){if("complex64"===t.dtype)return t.clone();const e=va(t.shape),s=Pe(t,"float32"),r=n.complex(s,e);return e.dispose(),s.dispose(),r}if(!U(t.dtype,e))return Ut.makeTensorFromDataId(t.dataId,t.shape,e);if("complex64"===t.dtype){const s=n.real(t),r=Pe(s,e);return s.dispose(),r}if("int32"===e)return n.int(t);if("bool"===e){const e=Xr(0,t.dtype),s=n.notEqual(t,e);return e.dispose(),s}throw new Error(`Error in Cast: failed to cast ${t.dtype} to ${e}`)}function tu(t,e){return Ut.makeTensorFromDataId(t.dataId,e,t.dtype)}function eu(t,e,n){const s=(e-t)/(n-1),r=rt(n,"float32");r[0]=t;for(let t=1;t<r.length;t++)r[t]=r[t-1]+s;return oi(r,"float32")}var nu=Object.freeze({__proto__:null,slice_util:Mn,segment_util:Pr,castTensor:Ql,reshapeTensor:tu,linspaceImpl:eu,upcastType:_t,axesAreInnerMostDims:us,combineLocations:cs,computeOutAndReduceShapes:hs,expandShapeToKeepDim:ps,assertAxesAreInnerMostDims:ds,getAxesPermutation:fs,getUndoAxesPermutation:ms,getInnerMostAxes:gs,getBroadcastDims:vr,getReductionAxes:Nr,assertAndGetBroadcastShape:kr,assertParamsConsistent:Ws,computeOutShape:Vs,computeDilation2DInfo:Is,computePool2DInfo:Es,computePool3DInfo:Ts,computeConv2DInfo:As,computeConv3DInfo:$s,computeDefaultPad:Rs,tupleValuesAreOne:Ms,eitherStridesOrDilationsAreOne:Ls,convertConv2DDataFormat:zs,getFusedDyActivation:So,getFusedBiasGradient:Io,applyActivation:Eo,shouldFuse:To,PARALLELIZE_THRESHOLD:30,computeOptimalWindowSize:zr,getImageCenter:Ll,getReshaped:zl,getPermuted:Bl,getReshapedPermuted:Pl,getSliceBeginCoords:Wl,getSliceSize:Vl,prepareAndValidate:mn,validateUpdateShape:yn,validateInput:bn,calculateShapes:xn,SELU_SCALEALPHA:1.7580993408473768,SELU_SCALE:Ul,ERF_P:.3275911,ERF_A1:.254829592,ERF_A2:-.284496736,ERF_A3:1.421413741,ERF_A4:-1.453152027,ERF_A5:1.061405429,warn:Gl,log:function(...t){a().getBool("IS_TEST")||console.log(...t)},mergeRealAndImagArrays:Hl,splitRealAndImagArrays:jl,complexWithEvenIndex:ql,complexWithOddIndex:Kl,getComplexWithIndex:Xl,assignToTypedArray:Yl,exponents:Jl,exponent:Zl,prepareSplitSize:_i});function su(t,e,n){const s=new Array(t.rank).fill(0),r=t.shape.slice();return e.map(e=>{const a=[...r];a[n]=e;const i=Hs(t,s,a);return s[n]+=e,i})}function ru(t,e){const n=new Array(t.rank);for(let s=0;s<n.length;s++)n[s]=t.shape[s]*e[s];const s=Be(n,t.dtype);for(let e=0;e<s.values.length;++e){const n=s.indexToLoc(e),r=new Array(t.rank);for(let e=0;e<r.length;e++)r[e]=n[e]%t.shape[e];const a=t.locToIndex(r);s.values[e]=t.values[a]}return s.toTensor()}function au(t,e,n,s,r){const a=e[e.length-1],[i,o]=[t.length/a,a],l=B(n,i*s),u=B("int32",i*s);for(let e=0;e<i;e++){const n=e*o,r=t.subarray(n,n+o),a=[];for(let t=0;t<r.length;t++)a.push({value:r[t],index:t});a.sort((t,e)=>e.value-t.value);const i=e*s,c=l.subarray(i,i+s),h=u.subarray(i,i+s);for(let t=0;t<s;t++)c[t]=a[t].value,h[t]=a[t].index}const c=e.slice();return c[c.length-1]=s,[ne(l,c,n),ne(u,c,"int32")]}var iu=Object.freeze({__proto__:null,nonMaxSuppressionV3Impl:jo,nonMaxSuppressionV4Impl:qo,nonMaxSuppressionV5Impl:Ko,split:su,tile:ru,topkImpl:au,whereImpl:Yi});const ou={kernelName:"Abs",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>rs(t,Pi(Pe(n,"float32"),-1))}}},lu={kernelName:"Acos",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=Ea(Pe(n,"float32")),s=Mi(ca(Xr(1),e));return ia(ss(t,s))}}}},uu={kernelName:"Acosh",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=Mi(ca(Ea(Pe(n,"float32")),1));return ss(t,e)}}}},cu={kernelName:u,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,s]=e,r=kr(n.shape,s.shape);return{a:()=>{let e=t;const s=Nr(n.shape,r);return s.length>0&&(e=ha(e,s)),rn(e,n.shape)},b:()=>{let e=t;const n=Nr(s.shape,r);return n.length>0&&(e=ha(e,n)),rn(e,s.shape)}}}},hu={kernelName:"AddN",saveAllInputs:!0,gradFunc:(t,e)=>{const n={};return e.forEach((e,s)=>{n[s]=()=>t.clone()}),n}},pu={kernelName:"ArgMax",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Ir(n)}}},du={kernelName:"ArgMin",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>Ir(n)}}},fu={kernelName:"Asin",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ss(t,Mi(ca(Xr(1),Ea(Pe(n,"float32")))))}}},mu={kernelName:"Asinh",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=Mi(es(Xr(1),Ea(Pe(n,"float32"))));return ss(t,e)}}}},gu={kernelName:"Atan2",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,s]=e,r=kr(n.shape,s.shape);return{a:()=>{const e=es(Ea(n),Ea(s));let a=rs(t,ss(s,e));const i=Nr(n.shape,r);return i.length>0&&(a=ha(a,i)),rn(a,n.shape)},b:()=>{const e=es(Ea(n),Ea(s));let a=ia(rs(t,ss(n,e)));const i=Nr(s.shape,r);return i.length>0&&(a=ha(a,i)),rn(a,s.shape)}}}},yu={kernelName:"Atan",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ss(t,es(Ea(Pe(n,"float32")),1))}}},bu={kernelName:"Atanh",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ss(t,ca(Xr(1),Ea(Pe(n,"float32"))))}}};const xu=Qt({avgPool3dBackprop_:function(t,e,n,s,r=[1,1,1],a,i){const o=Jt(t,"dy","avgPool3dBackprop"),l=Jt(e,"input","avgPool3dBackprop");let u=o,c=l,h=!1;4===l.rank&&(h=!0,u=rn(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),c=rn(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]])),I(5===u.rank,()=>"Error in avgPool3dBackprop: dy must be rank 5 but got rank "+u.rank+"."),I(5===c.rank,()=>"Error in avgPool3dBackprop: input must be rank 5 but got rank "+c.rank+"."),I(Ls(s,r),()=>`Error in avgPool3dBackprop: Either strides or dilations must be 1. Got strides ${s} and dilations '${r}'`),null!=i&&I(D(a),()=>`Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`);const p={dy:u,input:c},d={filterSize:n,strides:s,dilations:r,pad:a,dimRoundingMode:i},f=Ut.runKernelFunc(t=>{const e=Ts(c.shape,n,s,r,a,i);return t.avgPool3dBackprop(u,c,e)},p,null,"AvgPool3DBackprop",d);return h?rn(f,[f.shape[1],f.shape[2],f.shape[3],f.shape[4]]):f}}),wu={kernelName:"AvgPool3D",inputsToSave:["x"],gradFunc:(t,e,n)=>{const[s]=e,{filterSize:r,strides:a,dilations:i,pad:o,dimRoundingMode:l}=n,u=null==i?[1,1,1]:i;return{x:()=>xu(t,s,r,a,u,o,l)}}};const vu=Qt({avgPoolBackprop_:function(t,e,n,s,r){const a=Jt(t,"dy","avgPoolBackprop"),i=Jt(e,"input","avgPoolBackprop");I(i.rank===a.rank,()=>`Rank of input (${i.rank}) does not match rank of dy (${a.rank})`);let o=i,l=a,u=!1;3===i.rank&&(u=!0,o=rn(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=rn(a,[1,a.shape[0],a.shape[1],a.shape[2]])),I(4===l.rank,()=>"Error in avgPoolBackprop: dy must be rank 4 but got rank "+l.rank+"."),I(4===o.rank,()=>"Error in avgPoolBackprop: input must be rank 4 but got rank "+o.rank+".");const c={dy:l,input:o},h={filterSize:n,strides:s,pad:r},p=Ut.runKernelFunc(t=>{const e=Es(o.shape,n,s,1,r);return t.avgPoolBackprop(l,o,e)},c,null,"AvgPoolBackprop",h);return u?rn(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),Nu={kernelName:"AvgPool",inputsToSave:["x"],gradFunc:(t,e,n)=>{const[s]=e,{filterSize:r,strides:a,pad:i}=n;return{x:()=>vu(t,s,r,a,i)}}},ku={kernelName:"BatchMatMul",inputsToSave:["a","b"],gradFunc:(t,e,n)=>{const[s,r]=e,{transposeA:a,transposeB:i}=n;return a||i?!a&&i?{a:()=>an(t,r,!1,!1),b:()=>an(t,s,!0,!1)}:a&&!i?{a:()=>an(r,t,!1,!0),b:()=>an(s,t,!1,!1)}:{a:()=>an(r,t,!0,!0),b:()=>an(t,s,!0,!0)}:{a:()=>an(t,r,!1,!0),b:()=>an(s,t,!0,!1)}}},Cu={kernelName:"BatchToSpaceND",gradFunc:(t,e,n)=>{const{blockShape:s,crops:r}=n;return{x:()=>Pa(t,s,r)}}},Su={kernelName:"BroadcastTo",gradFunc:(t,e,n)=>{const s=n,r=s.inputShape,a=s.shape,i=Array.from(a);for(let t=r.length-1;t>=0;t--)if(r[t]===a[t])i[t]=1;else if(1!==r[t])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${a}].`);const o=[];for(let t=0;t<i.length;t++)i[t]>1&&o.push(t);return{x:()=>ha(t,o,!0)}}},Iu={kernelName:"Cast",gradFunc:t=>({x:()=>t.clone()})},Eu={kernelName:"Ceil",gradFunc:t=>({x:()=>Ir(t)})},Tu={kernelName:"ClipByValue",inputsToSave:["x"],gradFunc:(t,e,n)=>{const[s]=e,{clipValueMin:r,clipValueMax:a}=n;return{x:()=>Sr(fa(Ur(s,r),Zr(s,a)),t,Ir(t))}}},Au={kernelName:"Concat",saveAllInputs:!0,gradFunc:(t,e,n)=>{const s=e.map(t=>t.shape),{axis:r}=n,a=L(r,e[0].shape)[0],i=s.map(t=>t[a]);return Fi(t,i,a).map(t=>()=>t)}},$u={kernelName:"Conv2D",inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const[s,r]=e,{dilations:a,strides:i,pad:o,dataFormat:l}=n;return I(Ms(a),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`),{x:()=>ur(s.shape,t,r,i,o,l),filter:()=>Co(s,t,r.shape,i,o,l)}}},Ru={kernelName:"Conv2DBackpropInput",inputsToSave:["dy","filter"],gradFunc:(t,e,n)=>{const[s,r]=e,{strides:a,pad:i,dataFormat:o,dimRoundingMode:l}=n;return{dy:()=>or(t,r,a,i,o,1,l),filter:()=>Co(t,s,r.shape,a,i,o,l)}}};const Du=Qt({conv3DBackpropFilter_:function(t,e,n,s,r){let a=t;4===t.rank&&(a=rn(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]));let i=e;4===i.rank&&(i=rn(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]])),I(5===a.rank,()=>"Error in conv3dDerFilter: input must be rank 5, but got shape "+a.shape+"."),I(5===i.rank,()=>"Error in conv3dDerFilter: dy must be rank 5, but got shape "+i.shape+"."),I(5===n.length,()=>"Error in conv3dDerFilter: filterShape must be length 5, but got "+n+"."),I(a.shape[4]===n[3],()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`),I(i.shape[4]===n[4],()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`);const o={x:a,y:i},l={strides:s,pad:r};return Ut.runKernelFunc(t=>{const e=$s(a.shape,n,s,1,r);return t.conv3dDerFilter(a,i,e)},o,null,"Conv3DBackpropFilterV2",l)}}),_u={kernelName:"Conv3D",inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const{dilations:s,strides:r,pad:a}=n;I(Ms(s),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);const[i,o]=e;return{x:()=>pr(i.shape,t,o,r,a),filter:()=>Du(i,t,o.shape,r,a)}}},Fu={kernelName:c,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>rs(ia(ki(Pe(n,"float32"))),t)}}},Ou={kernelName:"Cosh",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>rs(Ci(Pe(n,"float32")),t)}}},Mu={kernelName:"Cumsum",inputsToSave:["x"],gradFunc:(t,e,n)=>{const[s]=e,{axis:r,exclusive:a,reverse:i}=n;return{x:()=>{const e=fs([r],s.rank);let n=gr(t,r,a,!i);return null!=e&&(n=ln(n,e)),n}}}},Lu={kernelName:"DepthwiseConv2dNative",inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const{dilations:s,strides:r,pad:a,dimRoundingMode:i}=n,o=null==s?[1,1]:s;I(Ms(o),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`);const[l,u]=e;I(4===l.rank,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`),I(4===u.rank,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`),I(l.shape[3]===u.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`),I(Ls(r,o),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${o}'.`),null!=i&&I(D(a),()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`);const c=As(l.shape,u.shape,r,o,a,i,!0);return{x:()=>Ro(l.shape,t,u,c),filter:()=>$o(l,t,u.shape,c)}}},zu={kernelName:"Dilation2D",inputsToSave:["x","filter"],gradFunc:(t,e,n)=>{const[s,r]=e,a={x:s,filter:r,dy:t},i={x:s,filter:r,dy:t};return{x:()=>Ut.runKernel("Dilation2DBackpropInput",a,n),filter:()=>Ut.runKernel("Dilation2DBackpropFilter",i,n)}}},Bu={kernelName:h,inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,s]=e,r=kr(n.shape,s.shape);return{a:()=>{const e=ss(t,Pe(s,"float32")),a=Nr(n.shape,r);return a.length>0?rn(ha(e,a),n.shape):e},b:()=>{let e=rs(t,Pe(n,"float32"));const a=Nr(s.shape,r);a.length>0&&(e=rn(ha(e,a),s.shape));const i=Ea(s);return ia(ss(e,Pe(i,"float32")))}}}},Pu={kernelName:"Elu",outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e,s=e=>e.eluDer(t,n),r={dy:t,y:n};return{x:()=>Ut.runKernelFunc(s,r,null,"EluGrad")}}},Wu={kernelName:"Erf",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e,s=rs(Rr(ia(Ea(n))),2/Math.sqrt(Math.PI));return{x:()=>rs(t,s)}}},Vu={kernelName:"Exp",outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>rs(t,n)}}},Uu={kernelName:"Expm1",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>rs(t,Rr(n))}}},Gu={kernelName:"Floor",gradFunc:t=>({x:()=>Ir(t)})},Hu={kernelName:"FloorDiv",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,s]=e,r=kr(n.shape,s.shape);return{a:()=>{const e=ss(t,Pe(s,"float32")),a=Nr(n.shape,r);return a.length>0?rn(ha(e,a),n.shape):e},b:()=>{let e=rs(t,Pe(n,"float32"));const a=Nr(s.shape,r);a.length>0&&(e=rn(ha(e,a),s.shape));const i=Ea(s);return ia(ss(e,Pe(i,"float32")))}}}},ju={kernelName:"FusedBatchNorm",inputsToSave:["x","mean","variance","scale"],gradFunc:(t,e,n)=>{const{varianceEpsilon:s}=n,[r,a,i,o]=e,l=null==o?Xr(1):o,u=Nr(a.shape,r.shape),c=[];if(1===a.rank){for(let t=0;t<r.shape.length-1;++t)c.push(r.shape[t]);c.push(1)}const h=ca(r,a),p=rs(t,l),d=bi(es(i,Xr(s))),f=rs(rs(rs(d,d),d),Xr(-.5));return{x:()=>1===a.rank?rn(rs(rs(t,Fr(rn(d,[1,1,1,a.shape[0]]),c)),l),r.shape):rn(rs(rs(t,d),l),r.shape),mean:()=>{let t=rs(rs(d,Xr(-1)),p);return 1===a.rank&&(t=ha(t,u)),rn(t,a.shape)},variance:()=>{let t=rs(rs(f,h),p);return 1===a.rank&&(t=ha(t,u)),rn(t,a.shape)},scale:()=>{const e=rs(h,d);let n=rs(t,e);return 1===a.rank&&(n=ha(n,u)),rn(n,a.shape)},offset:()=>{let e=t;return 1===a.rank&&(e=ha(e,u)),rn(e,a.shape)}}}},qu={kernelName:"GatherV2",inputsToSave:["x","indices"],gradFunc:(t,e,n)=>{const[s,r]=e,{axis:a}=n,i=L(a,s.shape)[0];return{x:()=>{const e=s.shape,n=r.size,o=e.slice(0,i),l=o.length,u=e.slice(a,e.length).slice(1),c=u.length,h=Ku(0,l),p=Ku(l+1,l+1+c),d=Xu([o,[n],u]),f=rn(t,d),m=rn(r,[n]),g=Xu([[l],h,p]),y=ln(f,g);let b=qi(y,m,s.shape[i]);const x=ms(g);return b=ln(b,x),b},indices:()=>r}}};function Ku(t,e){const n=[];for(let s=t;s<e;++s)n.push(s);return n}function Xu(t){const e=[];for(let n=0;n<t.length;++n)for(let s=0;s<t[n].length;++s)e.push(t[n][s]);return e}const Yu={kernelName:"GreaterEqual",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,s]=e;return{a:()=>Ir(n),b:()=>Ir(s)}}},Ju={kernelName:"Identity",gradFunc:t=>({x:()=>Pe(t,"float32")})},Zu={kernelName:"IsFinite",gradFunc:t=>({x:()=>Ir(t)})},Qu={kernelName:"IsInf",gradFunc:t=>({x:()=>Ir(t)})},tc={kernelName:"IsNan",gradFunc:t=>({x:()=>Ir(t)})},ec={kernelName:"Log1p",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ss(t,es(n,1))}}},nc={kernelName:"Log",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ss(t,Pe(n,"float32"))}}},sc={kernelName:"LogSoftmax",inputsToSave:[],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[s]=e,{axis:r}=n;return{logits:()=>{const e=Rr(s);return ca(t,rs(ha(t,r,!0),e))}}}};const rc=Qt({localResponseNormalizationBackprop_:function(t,e,n,s=5,r=1,a=1,i=.5){const o={x:t,y:e,dy:n},l={depthRadius:s,bias:r,alpha:a,beta:i};return Ut.runKernelFunc(o=>o.LRNGrad(n,t,e,s,r,a,i),o,null,"LRNBackprop",l)}}),ac={kernelName:"LRN",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[s,r]=e,{depthRadius:a,bias:i,alpha:o,beta:l}=n;return{x:()=>rc(s,r,t,a,i,o,l)}}};function ic(t,e,n,s,r){return e.rank<n.rank&&(e=rn(e,ps(e.shape,s))),t.rank<n.rank&&(t=rn(t,ps(t.shape,s))),{x:()=>{const s=rs(t,Pe(Cr(n,e),t.dtype));return null==r?s:ln(s,r)}}}const oc={kernelName:"Max",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const s=n,{reductionIndices:r}=s,[a,i]=e,o=L(r,a.shape),l=fs(o,a.rank),u=ic(t,i,a,o,l);return{x:()=>{let t=u.x();return null!=l&&(t=ln(t)),t}}}},lc={kernelName:"Maximum",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,s]=e;return{a:()=>rs(t,Pe(Ur(n,s),"float32")),b:()=>rs(t,Pe(Jr(n,s),"float32"))}}};const uc=Qt({maxPool3dBackprop_:function(t,e,n,s,r,a=[1,1,1],i,o){const l=Jt(t,"dy","maxPool3dBackprop"),u=Jt(e,"input","maxPool3dBackprop"),c=Jt(n,"output","maxPool3dBackprop");let h=l,p=u,d=c,f=!1;4===u.rank&&(f=!0,h=rn(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),p=rn(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),d=rn(c,[1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]])),I(5===h.rank,()=>"Error in maxPool3dBackprop: dy must be rank 5 but got rank "+h.rank+"."),I(5===p.rank,()=>"Error in maxPool3dBackprop: input must be rank 5 but got rank "+p.rank+"."),I(5===d.rank,()=>"Error in maxPool3dBackprop: output must be rank 5 but got rank "+d.rank+"."),I(Ls(r,a),()=>`Error in maxPool3dBackprop: Either strides or dilations must be 1. Got strides ${r} and dilations '${a}'`),null!=o&&I(D(i),()=>`Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode ${o} but got pad ${i}.`);const m={dy:h,input:p,output:d},g={filterSize:s,strides:r,dilations:a,pad:i,dimRoundingMode:o},y=Ut.runKernelFunc(t=>{const e=Ts(p.shape,s,r,a,i,o);return t.maxPool3dBackprop(h,p,d,e)},m,null,"MaxPool3DBackprop",g);return f?rn(y,[y.shape[1],y.shape[2],y.shape[3],y.shape[4]]):y}}),cc={kernelName:"MaxPool3D",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[s,r]=e,{filterSize:a,strides:i,dilations:o,pad:l,dimRoundingMode:u}=n,c=null==o?[1,1,1]:o;return{x:()=>uc(t,s,r,a,i,c,l,u)}}};const hc=Qt({maxPoolBackprop_:function(t,e,n,s,r,a,i){const o=Jt(t,"dy","maxPoolBackprop"),l=Jt(e,"input","maxPoolBackprop"),u=Jt(n,"output","maxPoolBackprop");I(l.rank===o.rank,()=>`Rank of input (${l.rank}) does not match rank of dy (${o.rank})`),I(4===o.rank,()=>"Error in maxPoolBackprop: dy must be rank 4 but got rank "+o.rank+"."),I(4===l.rank,()=>"Error in maxPoolBackprop: input must be rank 4 but got rank "+l.rank+"."),null!=i&&I(D(a),()=>`Error in maxPoolBackprop: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`);const c={dy:o,input:l,output:u},h={filterSize:s,strides:r,pad:a,dimRoundingMode:i};return Ut.runKernelFunc(t=>{const e=Es(l.shape,s,r,1,a,i);return t.maxPoolBackprop(o,l,u,e)},c,null,"MaxPoolBackprop",h)}}),pc={kernelName:"PadV2",inputsToSave:["x"],gradFunc:(t,e,n)=>{const s=e[0],{paddings:r}=n,a=r.map(t=>t[0]);return{x:()=>Hs(t,a,s.shape)}}},dc={kernelName:"SpaceToBatchND",gradFunc:(t,e,n)=>{const{blockShape:s,paddings:r}=n;return{x:()=>Ks(t,s,r)}}},fc={kernelName:"SplitV",gradFunc:(t,e,n)=>{const{axis:s}=n;return{x:()=>Us(t,s)}}};const mc=[ou,lu,uu,cu,hu,pu,du,fu,mu,gu,yu,bu,wu,Nu,ku,Cu,Su,Iu,Eu,Tu,Au,Ru,$u,_u,Fu,Ou,Mu,Lu,zu,Bu,Pu,Wu,Vu,Uu,Hu,Gu,ju,qu,Yu,Ju,Zu,Qu,tc,ec,nc,sc,ac,oc,oc,lc,cc,{kernelName:"MaxPool",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[s,r]=e,{filterSize:a,strides:i,pad:o}=n;return{x:()=>hc(t,s,r,a,i,o)}}},{kernelName:"Min",inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const s=n,{axis:r}=s,[a,i]=e,o=L(r,a.shape),l=fs(o,a.rank),u=ic(t,i,a,o,l);return{x:()=>{let t=u.x();return null!=l&&(t=ln(t)),t}}}},{kernelName:"Minimum",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,s]=e;return{a:()=>rs(t,Pe(Zr(n,s),"float32")),b:()=>rs(t,Pe(Vr(n,s),"float32"))}}},{kernelName:"Mod",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,s]=e,r=kr(n.shape,s.shape);return{a:()=>{const e=Nr(n.shape,r);return e.length>0?rn(ha(t,e),n.shape):t},b:()=>{const e=rs(t,ia(Lr(ss(n,s)))),a=Nr(s.shape,r);return a.length>0?rn(ha(e,a),s.shape):e}}}},{kernelName:"Multiply",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,s]=e,r=kr(n.shape,s.shape);return{a:()=>{const e=rs(t,Pe(s,"float32")),a=Nr(n.shape,r);return a.length>0?rn(ha(e,a),n.shape):e},b:()=>{const e=rs(t,Pe(n,"float32")),a=Nr(s.shape,r);return a.length>0?rn(ha(e,a),s.shape):e}}}},{kernelName:"Negate",gradFunc:t=>({x:()=>ia(t)})},{kernelName:"OneHot",inputsToSave:["indices"],gradFunc:(t,e)=>{const n=e[0];return{indices:()=>va(n.shape,"float32")}}},{kernelName:"OnesLike",gradFunc:t=>({x:()=>Ir(t)})},pc,pc,{kernelName:"Pow",inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(t,e)=>{const[n,s,r]=e,a=n,i=s,o=kr(a.shape,i.shape);return{a:()=>{const e=Pe(i,"float32");let n=rs(t,rs(e,Va(a,ca(e,Xr(1)))));const s=Nr(a.shape,o);return s.length>0&&(n=ha(n,s)),rn(n,a.shape)},b:()=>{const e=Vr(a,0),n=Sr(e,ea(a),Ir(a));let s=rs(t,rs(r,n));const l=Nr(i.shape,o);return l.length>0&&(s=ha(s,l)),rn(s,i.shape)}}}},{kernelName:"Prelu",inputsToSave:["x","alpha"],gradFunc:(t,e)=>{const[n,s]=e,r=Vr(n,0);return{x:()=>Sr(r,t,rs(t,s)),alpha:()=>{let e=Sr(r,Ir(t),rs(t,n));const a=Nr(s.shape,t.shape);return a.length>0&&(e=ha(e,a)),rn(e,s.shape)}}}},{kernelName:"Reciprocal",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ss(t,ia(Ea(n)))}}},{kernelName:"Relu6",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e,s=rs(Zr(n,6),Pi(n));return{x:()=>rs(t,Pe(s,"float32"))}}},{kernelName:"Relu",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>rs(t,Pe(Pi(n),"float32"))}}},{kernelName:"Reshape",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>rn(t,n.shape)}}},{kernelName:"ResizeBilinear",inputsToSave:["images"],gradFunc:(t,e,n)=>{const[s]=e,r=e=>{const{alignCorners:r}=n;return e.resizeBilinearBackprop(t,s,r)},a={images:s};return{images:()=>Ut.runKernelFunc(r,a,null,"ResizeBilinearGrad",n)}}},{kernelName:"ResizeNearestNeighbor",inputsToSave:["images"],gradFunc:(t,e,n)=>{const[s]=e,r=e=>{const{alignCorners:r}=n;return e.resizeNearestNeighborBackprop(t,s,r)},a={images:s};return{images:()=>Ut.runKernelFunc(r,a,null,"ResizeNearestNeighborGrad",n)}}},{kernelName:"Reverse",gradFunc:(t,e,n)=>{const{dims:s}=n,r=L(s,t.shape);return{x:()=>pi(t,r)}}},{kernelName:"Round",gradFunc:t=>({x:()=>Ir(t)})},{kernelName:"Rsqrt",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ia(ss(t,rs(Va(n,1.5),2)))}}},{kernelName:"SelectV2",inputsToSave:["condition"],gradFunc:(t,e)=>{const[n]=e;return{condition:()=>Pe(Ir(n),"float32"),t:()=>rs(t,Pe(n,t.dtype)),e:()=>rs(t,Pe(ma(n),t.dtype))}}},{kernelName:"Selu",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=Vr(n,Xr(0)),s=Xr(1.7580993408473768),r=Xr(Ul),a=rs(t,r),i=rs(rs(t,s),Rr(Pe(n,"float32")));return Sr(e,a,i)}}}},{kernelName:"Sigmoid",outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>rs(t,rs(n,ca(Xr(1),n)))}}},{kernelName:"Sign",gradFunc:t=>({x:()=>Ir(t)})},{kernelName:p,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>rs(fr(Pe(n,"float32")),t)}}},{kernelName:"Sinh",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>rs(mr(Pe(n,"float32")),t)}}},{kernelName:"Slice",inputsToSave:["x"],gradFunc:(t,e,n)=>{const[s]=e,{begin:r,size:a}=n,i=s.shape,[o,l]=On(s,r,a),u=[];for(let e=0;e<t.rank;e++)u.push([o[e],i[e]-o[e]-l[e]]);return{x:()=>Oa(t,u)}}},{kernelName:"Softmax",outputsToSave:[!0],gradFunc:(t,e,n)=>{const[s]=e,{dim:r}=n,a=rs(t,s);return{logits:()=>ca(a,rs(ha(a,[r],!0),s))}}},{kernelName:"Softplus",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>rs(t,Gs(n))}}},dc,dc,fc,fc,{kernelName:"Sqrt",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ss(t,rs(Mi(Pe(n,"float32")),2))}}},{kernelName:"SquaredDifference",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,s]=e,r=Xr(2);return{a:()=>rs(t,rs(r,ca(n,s))),b:()=>rs(t,rs(r,ca(s,n)))}}},{kernelName:"Square",inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>rs(t,rs(Pe(n,"float32"),2))}}},{kernelName:"Step",gradFunc:t=>({x:()=>Ir(t)})},{kernelName:"Sub",inputsToSave:["a","b"],gradFunc:(t,e)=>{const[n,s]=e,r=kr(n.shape,s.shape);return{a:()=>{let e=t;const s=Nr(n.shape,r);return s.length>0&&(e=ha(e,s)),rn(e,n.shape)},b:()=>{let e=t;const n=Nr(s.shape,r);return n.length>0&&(e=ha(e,n)),rn(ia(e),s.shape)}}}},{kernelName:"Sum",inputsToSave:["x"],gradFunc:(t,e,n)=>{const[s]=e,r=s.shape.slice(),{axis:a}=n;L(a,s.shape).forEach(t=>{r[t]=1});const i=rn(t,r),o=rs(i,Na(s.shape,"float32"));return{x:()=>o}}},{kernelName:d,inputsToSave:["x"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ss(t,Ea(fr(n)))}}},{kernelName:"Tanh",outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>rs(ca(Xr(1),Ea(n)),t)}}},{kernelName:"Tile",inputsToSave:["x"],gradFunc:(t,e,n)=>{const[s]=e,{reps:r}=n;return{x:()=>{let e=Ir(s);if(1===s.rank)for(let n=0;n<r[0];++n)e=es(e,Hs(t,[n*s.shape[0]],[s.shape[0]]));else if(2===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)e=es(e,Hs(t,[n*s.shape[0],a*s.shape[1]],[s.shape[0],s.shape[1]]));else if(3===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let i=0;i<r[2];++i)e=es(e,Hs(t,[n*s.shape[0],a*s.shape[1],i*s.shape[2]],[s.shape[0],s.shape[1],s.shape[2]]));else{if(4!==s.rank)throw new Error("Gradient for tile operation is not implemented for rank-"+s.rank+" tensors yet.");for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let i=0;i<r[2];++i)for(let o=0;o<r[3];++o)e=es(e,Hs(t,[n*s.shape[0],a*s.shape[1],i*s.shape[2],o*s.shape[3]],[s.shape[0],s.shape[1],s.shape[2],s.shape[3]]))}return e}}}},{kernelName:"Transpose",gradFunc:(t,e,n)=>{const s=n,{perm:r}=s,a=ms(r);return{x:()=>ln(t,a)}}},{kernelName:"Unpack",gradFunc:(t,e,n)=>{const s=n,{axis:r}=s;return{value:()=>Bi(t,r)}}},{kernelName:"UnsortedSegmentSum",inputsToSave:["segmentIds"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>function(t,e){const n=Kr(e,Ir(e)),s=Wr(t,n);let r=Ur(e,Xr(0,"int32"));const a=s.rank-r.rank;for(let t=0;t<a;++t)r=Dr(r,t+1);r=fa(r,Na(s.shape,"bool"));const i=Ir(s);return Sr(r,s,i)}(t,n)}}},{kernelName:"ZerosLike",gradFunc:t=>({x:()=>Ir(t)})}];for(const t of mc)w(t);let gc;function yc(){return null==gc&&(gc=ts().epsilon()),gc}St.prototype.abs=function(){return this.throwIfDisposed(),as(this)},St.prototype.acos=function(){return this.throwIfDisposed(),is(this)},St.prototype.acosh=function(){return this.throwIfDisposed(),os(this)},St.prototype.addStrict=function(t){return this.throwIfDisposed(),ao(this,t)},St.prototype.add=function(t){return this.throwIfDisposed(),es(this,t)},St.prototype.all=function(t,e){return this.throwIfDisposed(),ys(this,t,e)},St.prototype.any=function(t,e){return this.throwIfDisposed(),bs(this,t,e)},St.prototype.argMax=function(t){return this.throwIfDisposed(),xs(this,t)},St.prototype.argMin=function(t){return this.throwIfDisposed(),ws(this,t)},St.prototype.asScalar=function(){return this.throwIfDisposed(),I(1===this.size,()=>"The array must have only 1 element."),rn(this,[])},St.prototype.asType=function(t){return this.throwIfDisposed(),Pe(this,t)},St.prototype.as1D=function(){return this.throwIfDisposed(),rn(this,[this.size])},St.prototype.as2D=function(t,e){return this.throwIfDisposed(),rn(this,[t,e])},St.prototype.as3D=function(t,e,n){return this.throwIfDisposed(),rn(this,[t,e,n])},St.prototype.as4D=function(t,e,n,s){return this.throwIfDisposed(),rn(this,[t,e,n,s])},St.prototype.as5D=function(t,e,n,s,r){return this.throwIfDisposed(),rn(this,[t,e,n,s,r])},St.prototype.asin=function(){return this.throwIfDisposed(),vs(this)},St.prototype.asinh=function(){return this.throwIfDisposed(),Ns(this)},St.prototype.atan=function(){return this.throwIfDisposed(),ks(this)},St.prototype.atan2=function(t){return this.throwIfDisposed(),Cs(this,t)},St.prototype.atanh=function(){return this.throwIfDisposed(),Ss(this)},St.prototype.avgPool=function(t,e,n,s){return this.throwIfDisposed(),Bs(this,t,e,n,s)},St.prototype.batchToSpaceND=function(t,e){return this.throwIfDisposed(),Ks(this,t,e)},St.prototype.batchNorm=function(t,e,n,s,r){return this.throwIfDisposed(),Ys(this,t,e,n,s,r)},St.prototype.broadcastTo=function(t){return this.throwIfDisposed(),tr(this,t)},St.prototype.cast=function(t){return this.throwIfDisposed(),Pe(this,t)},St.prototype.ceil=function(){return this.throwIfDisposed(),er(this)},St.prototype.clipByValue=function(t,e){return this.throwIfDisposed(),nr(this,t,e)},St.prototype.concat=function(t,e){return this.throwIfDisposed(),t instanceof St&&(t=[t]),Us([this,...t],e)},St.prototype.conv1d=function(t,e,n,s,r,a){return this.throwIfDisposed(),lr(this,t,e,n,s,r,a)},St.prototype.conv2dTranspose=function(t,e,n,s,r){return this.throwIfDisposed(),cr(this,t,e,n,s,r)},St.prototype.conv2d=function(t,e,n,s,r,a){return this.throwIfDisposed(),or(this,t,e,n,s,r,a)},St.prototype.cos=function(){return this.throwIfDisposed(),fr(this)},St.prototype.cosh=function(){return this.throwIfDisposed(),mr(this)},St.prototype.cumsum=function(t,e,n){return this.throwIfDisposed(),gr(this,t,e,n)},St.prototype.depthToSpace=function(t,e){return this.throwIfDisposed(),yr(this,t,e)},St.prototype.depthwiseConv2D=function(t,e,n,s,r,a){return jn("depthwiseConv2D is deprecated, use depthwiseConv2d instead"),this.throwIfDisposed(),br(this,t,e,n,s,r,a)},St.prototype.depthwiseConv2d=function(t,e,n,s,r,a){return this.throwIfDisposed(),br(this,t,e,n,s,r,a)},St.prototype.dilation2d=function(t,e,n,s,r){return this.throwIfDisposed(),wr(this,t,e,n,s,r)},St.prototype.divNoNan=function(t){return this.throwIfDisposed(),Er(this,t)},St.prototype.divStrict=function(t){return this.throwIfDisposed(),io(this,t)},St.prototype.div=function(t){return this.throwIfDisposed(),ss(this,t)},St.prototype.dot=function(t){return this.throwIfDisposed(),Tr(this,t)},St.prototype.elu=function(){return this.throwIfDisposed(),Ar(this)},St.prototype.equalStrict=function(t){return this.throwIfDisposed(),Qi(this,t)},St.prototype.equal=function(t){return this.throwIfDisposed(),Cr(this,t)},St.prototype.erf=function(){return this.throwIfDisposed(),$r(this)},St.prototype.exp=function(){return this.throwIfDisposed(),Rr(this)},St.prototype.expandDims=function(t){return this.throwIfDisposed(),Dr(this,t)},St.prototype.expm1=function(){return this.throwIfDisposed(),_r(this)},St.prototype.fft=function(){return this.throwIfDisposed(),$i(this)},St.prototype.flatten=function(){return this.throwIfDisposed(),rn(this,[this.size])},St.prototype.floor=function(){return this.throwIfDisposed(),Lr(this)},St.prototype.floorDiv=function(t){return this.throwIfDisposed(),ns(this,t)},St.prototype.gather=function(t,e){return this.throwIfDisposed(),Wr(this,t,e)},St.prototype.greaterEqualStrict=function(t){return this.throwIfDisposed(),to(this,t)},St.prototype.greaterEqual=function(t){return this.throwIfDisposed(),Ur(this,t)},St.prototype.greaterStrict=function(t){return this.throwIfDisposed(),eo(this,t)},St.prototype.greater=function(t){return this.throwIfDisposed(),Vr(this,t)},St.prototype.ifft=function(){return this.throwIfDisposed(),Ri(this)},St.prototype.irfft=function(){return this.throwIfDisposed(),Di(this)},St.prototype.isFinite=function(){return this.throwIfDisposed(),Hr(this)},St.prototype.isInf=function(){return this.throwIfDisposed(),jr(this)},St.prototype.isNaN=function(){return this.throwIfDisposed(),qr(this)},St.prototype.leakyRelu=function(t){return this.throwIfDisposed(),Yr(this,t)},St.prototype.lessEqualStrict=function(t){return this.throwIfDisposed(),no(this,t)},St.prototype.lessEqual=function(t){return this.throwIfDisposed(),Zr(this,t)},St.prototype.lessStrict=function(t){return this.throwIfDisposed(),so(this,t)},St.prototype.less=function(t){return this.throwIfDisposed(),Jr(this,t)},St.prototype.localResponseNormalization=function(t,e,n,s){return this.throwIfDisposed(),ta(this,t,e,n,s)},St.prototype.logSigmoid=function(){return this.throwIfDisposed(),la(this)},St.prototype.logSoftmax=function(t){return this.throwIfDisposed(),pa(this,t)},St.prototype.logSumExp=function(t,e){return this.throwIfDisposed(),da(this,t,e)},St.prototype.log=function(){return this.throwIfDisposed(),ea(this)},St.prototype.log1p=function(){return this.throwIfDisposed(),na(this)},St.prototype.logicalAnd=function(t){return this.throwIfDisposed(),fa(this,t)},St.prototype.logicalNot=function(){return this.throwIfDisposed(),ma(this)},St.prototype.logicalOr=function(t){return this.throwIfDisposed(),ga(this,t)},St.prototype.logicalXor=function(t){return this.throwIfDisposed(),ya(this,t)},St.prototype.matMul=function(t,e,n){return this.throwIfDisposed(),an(this,t,e,n)},St.prototype.maxPool=function(t,e,n,s){return this.throwIfDisposed(),ba(this,t,e,n,s)},St.prototype.max=function(t,e){return this.throwIfDisposed(),ua(this,t,e)},St.prototype.maximumStrict=function(t){return this.throwIfDisposed(),oo(this,t)},St.prototype.maximum=function(t){return this.throwIfDisposed(),Kr(this,t)},St.prototype.mean=function(t,e){return this.throwIfDisposed(),ka(this,t,e)},St.prototype.min=function(t,e){return this.throwIfDisposed(),Ca(this,t,e)},St.prototype.minimumStrict=function(t){return this.throwIfDisposed(),lo(this,t)},St.prototype.minimum=function(t){return this.throwIfDisposed(),Sa(this,t)},St.prototype.modStrict=function(t){return this.throwIfDisposed(),uo(this,t)},St.prototype.mod=function(t){return this.throwIfDisposed(),Ia(this,t)},St.prototype.mulStrict=function(t){return this.throwIfDisposed(),co(this,t)},St.prototype.mul=function(t){return this.throwIfDisposed(),rs(this,t)},St.prototype.neg=function(){return this.throwIfDisposed(),ia(this)},St.prototype.norm=function(t,e,n){return this.throwIfDisposed(),mo(this,t,e,n)},St.prototype.notEqualStrict=function(t){return this.throwIfDisposed(),ro(this,t)},St.prototype.notEqual=function(t){return this.throwIfDisposed(),Ra(this,t)},St.prototype.oneHot=function(t,e=1,n=0){return this.throwIfDisposed(),on(this,t,e,n)},St.prototype.onesLike=function(){return this.throwIfDisposed(),_a(this)},St.prototype.pad=function(t,e){return this.throwIfDisposed(),Oa(this,t,e)},St.prototype.pool=function(t,e,n,s,r){return this.throwIfDisposed(),Wa(this,t,e,n,s,r)},St.prototype.powStrict=function(t){return this.throwIfDisposed(),ho(this,t)},St.prototype.pow=function(t){return this.throwIfDisposed(),Va(this,t)},St.prototype.prelu=function(t){return this.throwIfDisposed(),Ua(this,t)},St.prototype.prod=function(t,e){return this.throwIfDisposed(),Ga(this,t,e)},St.prototype.reciprocal=function(){return this.throwIfDisposed(),ui(this)},St.prototype.relu=function(){return this.throwIfDisposed(),ci(this)},St.prototype.relu6=function(){return this.throwIfDisposed(),hi(this)},St.prototype.reshapeAs=function(t){return this.throwIfDisposed(),rn(this,t.shape)},St.prototype.reshape=function(t){return this.throwIfDisposed(),rn(this,t)},St.prototype.resizeBilinear=function(t,e){return this.throwIfDisposed(),rl(this,t,e)},St.prototype.resizeNearestNeighbor=function(t,e){return this.throwIfDisposed(),al(this,t,e)},St.prototype.reverse=function(t){return this.throwIfDisposed(),pi(this,t)},St.prototype.rfft=function(){return this.throwIfDisposed(),Oi(this)},St.prototype.round=function(){return this.throwIfDisposed(),yi(this)},St.prototype.rsqrt=function(){return this.throwIfDisposed(),bi(this)},St.prototype.selu=function(){return this.throwIfDisposed(),xi(this)},St.prototype.separableConv2d=function(t,e,n,s,r,a){return this.throwIfDisposed(),wi(this,t,e,n,s,r,a)},St.prototype.sigmoid=function(){return this.throwIfDisposed(),Gs(this)},St.prototype.sign=function(){return this.throwIfDisposed(),Ni(this)},St.prototype.sin=function(){return this.throwIfDisposed(),ki(this)},St.prototype.sinh=function(){return this.throwIfDisposed(),Ci(this)},St.prototype.slice=function(t,e){return this.throwIfDisposed(),Hs(this,t,e)},St.prototype.softmax=function(t){return this.throwIfDisposed(),Ai(this,t)},St.prototype.softplus=function(){return this.throwIfDisposed(),oa(this)},St.prototype.spaceToBatchND=function(t,e){return this.throwIfDisposed(),Pa(this,t,e)},St.prototype.split=function(t,e){return this.throwIfDisposed(),Fi(this,t,e)},St.prototype.sqrt=function(){return this.throwIfDisposed(),Mi(this)},St.prototype.square=function(){return this.throwIfDisposed(),Ea(this)},St.prototype.squaredDifference=function(t){return this.throwIfDisposed(),Li(this,t)},St.prototype.squaredDifferenceStrict=function(t){return this.throwIfDisposed(),po(this,t)},St.prototype.squeeze=function(t){return this.throwIfDisposed(),zi(this,t)},St.prototype.stack=function(t,e){this.throwIfDisposed();const n=t instanceof St?[this,t]:[this,...t];return Bi(n,e)},St.prototype.step=function(t){return this.throwIfDisposed(),Pi(this,t)},St.prototype.stridedSlice=function(t,e,n,s,r,a,i,o){return this.throwIfDisposed(),Wi(this,t,e,n,s,r,a,i,o)},St.prototype.subStrict=function(t){return this.throwIfDisposed(),fo(this,t)},St.prototype.sub=function(t){return this.throwIfDisposed(),ca(this,t)},St.prototype.sum=function(t,e){return this.throwIfDisposed(),ha(this,t,e)},St.prototype.tan=function(){return this.throwIfDisposed(),Vi(this)},St.prototype.tanh=function(){return this.throwIfDisposed(),js(this)},St.prototype.tile=function(t){return this.throwIfDisposed(),Fr(this,t)},St.prototype.toBool=function(){return this.throwIfDisposed(),Pe(this,"bool")},St.prototype.toFloat=function(){return this.throwIfDisposed(),Pe(this,"float32")},St.prototype.toInt=function(){return this.throwIfDisposed(),Pe(this,"int32")},St.prototype.topk=function(t,e){return this.throwIfDisposed(),Hi(this,t,e)},St.prototype.transpose=function(t){return this.throwIfDisposed(),ln(this,t)},St.prototype.unsortedSegmentSum=function(t,e){return this.throwIfDisposed(),qi(this,t,e)},St.prototype.unstack=function(t){return this.throwIfDisposed(),Ki(this,t)},St.prototype.where=function(t,e){return this.throwIfDisposed(),Sr(t,this,e)},St.prototype.zerosLike=function(){return this.throwIfDisposed(),Ir(this)};class bc extends Error{constructor(t){super(t),Object.setPrototypeOf(this,bc.prototype)}}class xc extends Error{constructor(t){super(t),Object.setPrototypeOf(this,xc.prototype)}}class wc extends Error{constructor(t){super(t),Object.setPrototypeOf(this,wc.prototype)}}class vc extends Error{constructor(t){super(t),Object.setPrototypeOf(this,vc.prototype)}}class Nc extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Nc.prototype)}}Error;function kc(t,e){if(Array.isArray(t)){let n=[];for(let s=0;s<e;s++)n=n.concat(t);return n}{const n=new Array(e);return n.fill(t),n}}function Cc(t,e){if(!t)throw new Nc(e)}function Sc(t,e){let n=0;for(const s of t)s===e&&n++;return n}function Ic(t){return 1===t.length?t[0]:t}function Ec(t){return Array.isArray(t)?t:[t]}function Tc(t){const e=t.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==e[0]?e:"private"+e}function Ac(t){return t.length<=1||-1===t.indexOf("_")?t:t.replace(/[_]+(\w|$)/g,(t,e)=>e.toUpperCase())}let $c={};function Rc(t){if(null==t)return null;const e={};return e.className=t.getClassName(),e.config=t.getConfig(),e}function Dc(t,e={},n={},s="object",r=!1){if("string"==typeof t){const r=t;let a;if(r in n)a=n[r];else if(r in $c)a=$c[r];else if(a=e[r],null==a)throw new wc(`Unknown ${s}: ${t}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=t;if(null==a.className||null==a.config)throw new wc(s+": Improper config format: "+JSON.stringify(a)+".\n'className' and 'config' must set.");const i=a.className;let o,l;if(i in n?[o,l]=n[i]:i in $c?[o,l]=$c.className:i in e&&([o,l]=e[i]),null==o)throw new wc(`Unknown ${s}: ${i}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const t={};for(const e of Object.keys($c))t[e]=$c[e];for(const e of Object.keys(n))t[e]=n[e];a.config.customObjects=t;const e=Object.assign({},$c);for(const t of Object.keys(n))$c[t]=n[t];!function t(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach(e=>t(e));else{const n=Object.keys(e);for(const s of n){const n=e[s];null!=n&&"object"==typeof n&&(Array.isArray(n)||"ndarray"!==n.type||"number"!=typeof n.value?t(n):e[s]=n.value)}}}(a.config);const s=l(o,a.config,n,r);return $c=Object.assign({},e),s}{const t=Object.assign({},$c);for(const t of Object.keys(n))$c[t]=n[t];const e=new o(a.config);return $c=Object.assign({},t),e}}}function _c(t,e){return-1*function(t,e){return t<e?-1:t>e?1:0}(t,e)}function Fc(t){if(null==t)return t;const e=[];for(const n of t)-1===e.indexOf(n)&&e.push(n);return e}function Oc(t){if(null==t)throw new wc("Invalid value in obj: "+JSON.stringify(t));for(const e in t)if(t.hasOwnProperty(e))return!1;return!0}function Mc(t,e,n){if(null!=n&&t.indexOf(n)<0)throw new wc(`${n} is not a valid ${e}.  Valid values are ${t} or null/undefined.`)}function Lc(t,e,n=0,s=1/0){return Cc(n>=0),Cc(s>=n),Array.isArray(t)&&t.length>=n&&t.length<=s&&t.every(t=>typeof t===e)}function zc(t,e){Array.isArray(t)?(I(t.length>0,()=>e+" is unexpectedly an empty array."),t.forEach((t,n)=>zc(t,`element ${n+1} of ${e}`))):I(Number.isInteger(t)&&t>0,()=>`Expected ${e} to be a positive integer, but got `+function t(e){return null===e?"null":Array.isArray(e)?"["+e.map(e=>t(e)).join(",")+"]":"string"==typeof e?`"${e}"`:""+e}(t)+".")}function Bc(t){return"relu"===t?"relu":"linear"===t?"linear":"elu"===t?"elu":null}function Pc(t,e){return Xn(()=>Mi(ha(rs(t,t),e,!0)))}class Wc extends Ln{getConfig(){return{}}}class Vc extends Wc{constructor(t){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=t.maxValue?t.maxValue:this.defaultMaxValue,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return Xn(()=>{const e=Pc(t,this.axis),n=nr(e,0,this.maxValue);return rs(t,ss(n,es(yc(),e)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}Vc.className="MaxNorm",Bn(Vc);class Uc extends Wc{constructor(t){super(),this.defaultAxis=0,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return Xn(()=>ss(t,es(yc(),Pc(t,this.axis))))}getConfig(){return{axis:this.axis}}}Uc.className="UnitNorm",Bn(Uc);class Gc extends Wc{apply(t){return ci(t)}}Gc.className="NonNeg",Bn(Gc);class Hc extends Wc{constructor(t){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=t.minValue?t.minValue:this.defaultMinValue,this.maxValue=null!=t.maxValue?t.maxValue:this.defaultMaxValue,this.rate=null!=t.rate?t.rate:this.defaultRate,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return Xn(()=>{const e=Pc(t,this.axis),n=es(rs(this.rate,nr(e,this.minValue,this.maxValue)),rs(1-this.rate,e));return rs(t,ss(n,es(yc(),e)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}Hc.className="MinMaxNorm",Bn(Hc);const jc={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function qc(t){return Rc(t)}function Kc(t,e={}){return Dc(t,zn.getMap().classNameMap,e,"constraint")}function Xc(t){if(null==t)return null;if("string"==typeof t){return Kc({className:t in jc?jc[t]:t,config:{}})}return t instanceof Wc?t:Kc(t)}var Yc=Object.freeze({__proto__:null,maxNorm:function(t){return new Vc(t)},unitNorm:function(t){return new Uc(t)},nonNeg:function(){return new Gc},minMaxNorm:function(t){return new Hc(t)}});const Jc=["channelsFirst","channelsLast"],Zc=["valid","same","causal"],Qc=["max","avg"],th=["sum","mul","concat","ave"],eh=new Map;function nh(t){Mc(Jc,"DataFormat",t)}function sh(t){Mc(Zc,"PaddingMode",t)}function rh(t){Mc(Qc,"PoolMode",t)}const ah=[];function ih(t,e){ah.push(t);try{const t=e();return ah.pop(),t}catch(t){throw ah.pop(),t}}function oh(t){if(!ch(t))throw new Error("Not a valid tensor name: '"+t+"'");return(0===ah.length?"":ah.join("/")+"/")+t}function lh(t){if(!ch(t))throw new Error("Not a valid tensor name: '"+t+"'");eh.has(t)||eh.set(t,0);const e=eh.get(t);if(eh.set(t,eh.get(t)+1),e>0){const n=`${t}_${e}`;return eh.set(n,1),n}return t}const uh=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function ch(t){return!!t.match(uh)}function hh(t,e,n){null==e&&(e=0),null==n&&(n=t.length);let s=1;for(let r=e;r<n;++r)s*=t[r];return s}function ph(t){return oi(t=Array.isArray(t)?new Float32Array(t):t)}function dh(t){return Ca(ph(t)).dataSync()[0]}function fh(t){return ua(ph(t)).dataSync()[0]}function mh(t,e){if(e<t)throw new wc(`end (${e}) < begin (${t}) is forbidden.`);const n=[];for(let s=t;s<e;++s)n.push(s);return n}function gh(t,e){return t.asType(e)}function yh(t,e=-1){const n=t.shape.slice();return e<0&&(e=n.length+e+1),n.splice(e,0,1),t.reshape(n)}function bh(t,e,n){return Xn(()=>{switch(t.rank){case 1:return Si(t,e,n);case 2:return Ii(t,[e,0],[n,t.shape[1]]);case 3:return Ei(t,[e,0,0],[n,t.shape[1],t.shape[2]]);case 4:return Ti(t,[e,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3]]);case 5:return Hs(t,[e,0,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3],t.shape[4]]);case 6:return Hs(t,[e,0,0,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3],t.shape[4],t.shape[5]]);default:throw new wc("sliceAlongFirstAxis() received an unsupported tensor rank: "+t.rank)}})}function xh(t,e,n){return Xn(()=>{switch(t.rank){case 1:return Si(t,e,n);case 2:return Ii(t,[0,e],[t.shape[0],n]);case 3:return Ei(t,[0,0,e],[t.shape[0],t.shape[1],n]);case 4:return Ti(t,[0,0,0,e],[t.shape[0],t.shape[1],t.shape[2],n]);default:throw new wc("sliceAlongLastAxis() received an unsupported tensor rank: "+t.rank)}})}function wh(t,e,n,s){return Xn(()=>{switch(t.rank){case 1:return Si(t,e,n);case 2:switch(s){case 1:return bh(t,e,n);case 2:return xh(t,e,n);default:throw new wc("The axis is not within the rank of the tensor "+s)}case 3:switch(s){case 1:return bh(t,e,n);case 2:return Ei(t,[0,e,0],[t.shape[0],n,t.shape[2]]);case 3:return xh(t,e,n);default:throw new wc("The axis is not within the rank of the tensor "+s)}case 4:switch(s){case 1:return bh(t,e,n);case 2:return Ti(t,[0,e,0,0],[t.shape[0],n,t.shape[2],t.shape[3]]);case 3:return Ti(t,[0,0,e,0],[t.shape[0],t.shape[1],n,t.shape[3]]);case 4:return xh(t,e,n);default:throw new wc("The axis is not within the rank of the tensor "+s)}default:throw new wc("sliceAlongLastAxis() received an unsupported tensor rank: "+t.rank)}})}function vh(t,e=-1){let n;return e<0&&(n=t[0].rank,e=0!==n?n:0),e===t[0].rank&&(e=-1),Us(t,e)}function Nh(t,e){switch(t.rank){case 1:return sr([t,e]);case 2:return rr([t,e],0);case 3:return ar([t,e],0);case 4:return ir([t,e],0);default:throw new wc("concatAlongFirstAxis() received an unsupported tensor rank: "+t.rank)}}function kh(t,e){if(Array.isArray(e)||(e=[e]),t.rank!==e.length)throw new wc(`The length of input n (${e.length}) does not match the number of dimensions in input x (${t.rank})`);return Fr(t,e)}function Ch(t,e=0,n=1,s,r){return ai(t,e,n,s,r)}function Sh(t,e,n,s){if(t.rank<2||e.rank<2)throw new vc(`dot requires both inputs to be rank >= 2 but got x shape = ${t.shape} and y shape = ${e.shape}`);if(e.rank>=3){if(t.shape.slice(-1)[0]!==e.shape.slice(-2)[0])throw new vc(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${t.shape} and  y shape = `+e.shape)}if(2===t.rank&&2===e.rank){return _o({a:t,b:e,transposeA:!1,transposeB:!1,bias:s?Th(t.rank,s,"channelsLast"):null,activation:n})}{const r=t.shape.slice(),a=r.pop();t=t.reshape([-1,a]);const i=e.shape.slice(),o=i.pop(),l=i.pop(),u=[...i,o],c=Array.from({length:e.rank},(t,n)=>0===n?e.rank-2:n<=e.rank-2?n-1:n);e=e.transpose(c).reshape([l,-1]);const h=[...r,...u];return _o({a:t,b:e,transposeA:!1,transposeB:!1,bias:s?Th(t.rank,s,"channelsLast"):null,activation:n}).reshape(h)}}function Ih(t,e,n){return Xn(()=>(e=Array.isArray(e)?oi(e,"int32"):e.toInt(),Wr(t,e,n)))}function Eh(t){return rs(t,t)}function Th(t,e,n){const s=e.shape;if(1!==e.rank&&e.rank!==t)throw new wc("Unexpected bias dimensions: "+e.rank+"; expected it to be 1 or "+t);if(5===t){if("channelsFirst"===n)return 1===s.length?e.reshape([1,s[0],1,1,1]):e.reshape([1,s[3],s[0],s[1],s[2]]);if("channelsLast"===n)return 1===s.length?e.reshape([1,1,1,1,s[0]]):e.reshape([1].concat(s))}else if(4===t){if("channelsFirst"===n)return 1===s.length?e.reshape([1,s[0],1,1]):e.reshape([1,s[2],s[0],s[1]]);if("channelsLast"===n)return 1===s.length?e.reshape([1,1,1,s[0]]):e.reshape([1].concat(s))}else if(3===t){if("channelsFirst"===n)return 1===s.length?e.reshape([1,s[0],1]):e.reshape([1,s[1],s[0]]);if("channelsLast"===n)return 1===s.length?e.reshape([1,1,s[0]]):e.reshape([1].concat(s))}else if(t<3)return e;throw new wc("Unsupported input rank by biasAdd: "+e.rank)}function Ah(t,e,n){return Xn(()=>(null==n&&(n="channelsLast"),nh(n),t.add(Th(t.rank,e,n))))}function $h(t,e,n,s){return Xn(()=>wo(t,e,n,s))}function Rh(t,e,n=!1){return n?t():e()}const Dh=["fanIn","fanOut","fanAvg"],_h=["normal","uniform","truncatedNormal"];class Fh extends Ln{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class Oh extends Fh{apply(t,e){return va(t,e)}}Oh.className="Zeros",Bn(Oh);class Mh extends Fh{apply(t,e){return Na(t,e)}}Mh.className="Ones",Bn(Mh);class Lh extends Fh{constructor(t){if(super(),"object"!=typeof t)throw new wc("Expected argument of type ConstantConfig but got "+t);if(void 0===t.value)throw new wc("config must have value set but got "+t);this.value=t.value}apply(t,e){return Xn(()=>rs(Xr(this.value),Na(t,e)))}getConfig(){return{value:this.value}}}Lh.className="Constant",Bn(Lh);class zh extends Fh{constructor(t){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=t.minval||this.DEFAULT_MINVAL,this.maxval=t.maxval||this.DEFAULT_MAXVAL,this.seed=t.seed}apply(t,e){return ii(t,this.minval,this.maxval,e)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}zh.className="RandomUniform",Bn(zh);class Bh extends Fh{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if("float32"!==(e=e||"float32")&&"int32"!==e)throw new vc(`randomNormal does not support dType ${e}.`);return Ch(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Bh.className="RandomNormal",Bn(Bh);class Ph extends Fh{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if("float32"!==(e=e||"float32")&&"int32"!==e)throw new vc(`truncatedNormal does not support dType ${e}.`);return ji(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Ph.className="TruncatedNormal",Bn(Ph);class Wh extends Fh{constructor(t){super(),this.gain=null!=t.gain?t.gain:1}apply(t,e){return Xn(()=>{if(2!==t.length||t[0]!==t[1])throw new wc("Identity matrix initializer can only be used for 2D square matrices.");return rs(this.gain,Or(t[0]))})}getConfig(){return{gain:this.gain}}}Wh.className="Identity",Bn(Wh);class Vh extends Fh{constructor(t){if(super(),t.scale<0)throw new wc("scale must be a positive float. Got: "+t.scale);var e;this.scale=null==t.scale?1:t.scale,this.mode=null==t.mode?"fanIn":t.mode,e=this.mode,Mc(Dh,"FanMode",e),this.distribution=null==t.distribution?"normal":t.distribution,function(t){Mc(_h,"Distribution",t)}(this.distribution),this.seed=t.seed}apply(t,e){const n=function(t,e="channelsLast"){let n,s;if(nh(e),2===t.length)n=t[0],s=t[1];else if(-1!==[3,4,5].indexOf(t.length)){if("channelsFirst"===e){const e=hh(t,2);n=t[1]*e,s=t[0]*e}else if("channelsLast"===e){const e=hh(t,0,t.length-2);n=t[t.length-2]*e,s=t[t.length-1]*e}}else{const e=hh(t);n=Math.sqrt(e),s=Math.sqrt(e)}return[n,s]}(t),s=n[0],r=n[1];let a=this.scale;if("fanIn"===this.mode?a/=Math.max(1,s):"fanOut"===this.mode?a/=Math.max(1,r):a/=Math.max(1,(s+r)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(e=e||"float32")&&"int32"!==e)throw new vc(`${this.getClassName()} does not support dType ${e}.`);return ji(t,0,n,e,this.seed)}{const n=Math.sqrt(3*a);return ii(t,-n,n,e)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}Vh.className="VarianceScaling",Bn(Vh);class Uh extends Vh{constructor(t){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return Vh.className}}Uh.className="GlorotUniform",Bn(Uh);class Gh extends Vh{constructor(t){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return Vh.className}}Gh.className="GlorotNormal",Bn(Gh);class Hh extends Vh{constructor(t){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return Vh.className}}Hh.className="HeNormal",Bn(Hh);class jh extends Vh{constructor(t){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return Vh.className}}jh.className="HeUniform",Bn(jh);class qh extends Vh{constructor(t){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==t?null:t.seed})}getClassName(){return Vh.className}}qh.className="LeCunNormal",Bn(qh);class Kh extends Vh{constructor(t){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==t?null:t.seed})}getClassName(){return Vh.className}}Kh.className="LeCunNormal",Bn(Kh);class Xh extends Fh{constructor(t){if(super(),this.DEFAULT_GAIN=1,this.gain=null==t.gain?this.DEFAULT_GAIN:t.gain,this.seed=t.seed,null!=this.seed)throw new vc("Random seed is not implemented for Orthogonal Initializer yet.")}apply(t,e){return Xn(()=>{if(t.length<2)throw new vc("Shape must be at least 2D.");t[0]*t[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${t[0]*t[1]}) elements: Slowness may result.`);const e=Ch(t[0]>t[1]?[t[1],t[0]]:t,0,1,"float32");let n=kl.gramSchmidt(e);return t[0]>t[1]&&(n=n.transpose()),rs(this.gain,n)})}getConfig(){return{gain:this.gain,seed:this.seed}}}Xh.className="Orthogonal",Bn(Xh);const Yh={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function Jh(t,e={}){return Dc(t,zn.getMap().classNameMap,e,"initializer")}function Zh(t){return Rc(t)}function Qh(t){if("string"==typeof t){const e=t in Yh?Yh[t]:t;if("GlorotNormal"===e)return new Gh;if("GlorotUniform"===e)return new Uh;if("HeNormal"===e)return new Hh;if("HeUniform"===e)return new jh;if("LeCunNormal"===e)return new qh;if("LeCunUniform"===e)return new Kh;{const t={};return t.className=e,t.config={},Jh(t)}}return t instanceof Fh?t:Jh(t)}var tp=Object.freeze({__proto__:null,zeros:function(){return new Oh},ones:function(){return new Mh},constant:function(t){return new Lh(t)},randomUniform:function(t){return new zh(t)},randomNormal:function(t){return new Bh(t)},truncatedNormal:function(t){return new Ph(t)},identity:function(t){return new Wh(t)},varianceScaling:function(t){return new Vh(t)},glorotUniform:function(t){return new Uh(t)},glorotNormal:function(t){return new Gh(t)},heNormal:function(t){return new Hh(t)},heUniform:function(t){return new jh(t)},leCunNormal:function(t){return new qh(t)},leCunUniform:function(t){return new Kh(t)},orthogonal:function(t){return new Xh(t)}});let ep=0;function np(){return ep++}const sp={};function rp(t=""){return t in sp||(sp[t]=0),sp[t]+=1,t+sp[t].toString()}function ap(t){return Array.isArray(t)&&Array.isArray(t[0])}function ip(t){return 0===t.length?[]:Array.isArray(t[0])?t:[t]}function op(t){let e;if(Array.isArray(t)){if(1!==t.length)throw new wc("Expected Tensor length to be 1; got "+t.length);e=t[0]}else e=t;return e}function lp(t){if(Array.isArray(t)&&Array.isArray(t[0])){if(1===t.length)return(t=t)[0];throw new wc("Expected exactly 1 Shape; got "+t.length)}return t}function up(t){let e=0;for(const n of t)0===n.shape.length?e+=1:e+=n.shape.reduce((t,e)=>t*e);return e}class cp{constructor(t,e="float32",n="Variable",s=!0,r=null){this.dtype=null==e?"float32":e,this.shape=t.shape,this.id=np(),n=null==n?"Variable":n,this.originalName=oh(n),this.name=lh(this.originalName),this.trainable_=s,this.constraint=r,this.val=Xi(t,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(t){return this.assertNotDisposed(),function(t,e){if(t.shape.toString()!==e.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(t.shape)+" vs. "+JSON.stringify(e.shape))}(this.val,t),this.val.id!==t.id&&(this.val.assign(t),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(t){this.trainable_=t,this.val.trainable=t}}function hp(t){return t.map(t=>t.read())}function pp(t){t.forEach(t=>{t[0].write(t[1])})}class dp{constructor(t){this.dtype=t.dtype,this.shape=t.shape,null!=t.shape?this.ndim=t.shape.length:this.ndim=t.ndim,this.maxNDim=t.maxNDim,this.minNDim=t.minNDim,this.axes=t.axes||{}}}class fp{constructor(t,e,n,s,r,a,i){this.dtype=t,this.shape=e,this.sourceLayer=n,this.inputs=s,this.callArgs=r,this.outputTensorIndex=i,this.id=np(),null!=a&&(this.originalName=oh(a),this.name=lh(this.originalName)),this.rank=e.length}}let mp=0;class gp{constructor(t,e){this.callArgs=e,this.id=mp++,this.outboundLayer=t.outboundLayer,this.inboundLayers=t.inboundLayers,this.nodeIndices=t.nodeIndices,this.tensorIndices=t.tensorIndices,this.inputTensors=t.inputTensors,this.outputTensors=t.outputTensors,this.inputMasks=t.inputMasks,this.outputMasks=t.outputMasks,this.inputShapes=t.inputShapes,this.outputShapes=t.outputShapes;for(const e of t.inboundLayers)null!=e&&e.outboundNodes.push(this);t.outboundLayer.inboundNodes.push(this)}getConfig(){const t=[];for(const e of this.inboundLayers)null!=e?t.push(e.name):t.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:t,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let yp=0;class bp extends Ln{constructor(t={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=yp++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let e=t.name;if(!e){const t=this.getClassName();e=Tc(t)+"_"+rp(t)}if(this.name=e,this.trainable_=null==t.trainable||t.trainable,null!=t.inputShape||null!=t.batchInputShape){let e;if(null!=t.batchInputShape)e=t.batchInputShape;else if(null!=t.inputShape){let n=null;null!=t.batchSize&&(n=t.batchSize),e=[n].concat(t.inputShape)}this.batchInputShape=e;let n=t.dtype;null==n&&(n=t.inputDType),null==n&&(n="float32"),this.dtype=n}null!=t.weights?this.initialWeights=t.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(t,e){return t.name+"_ib-"+e.toString()}getNodeAtIndex(t,e){if(0===this.inboundNodes.length)throw new xc(`The layer has never been called and thus has no defined ${e}.`);if(this.inboundNodes.length<=t)throw new wc(`Asked to get ${e} at node ${t}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[t]}getInputAt(t){return Ic(this.getNodeAtIndex(t,"input").inputTensors)}getOutputAt(t){return Ic(this.getNodeAtIndex(t,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new bc("Layer "+this.name+' has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use `getInputAt(nodeIndex)` instead.');if(0===this.inboundNodes.length)throw new bc("Layer "+this.name+" is not connected, no input to return.");return Ic(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new bc("Layer "+this.name+" has no inbound nodes.");if(this.inboundNodes.length>1)throw new bc("Layer "+this.name+' has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use `getOutputAt(nodeIndex)` instead.');return Ic(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(t=>t())}get updates(){return this._updates}get built(){return this._built}set built(t){this._built=t}get trainable(){return this.trainable_}set trainable(t){this._trainableWeights.forEach(e=>e.trainable=t),this.trainable_=t}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(t=>t.trainable):[]}set trainableWeights(t){this._trainableWeights=t}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(t=>!t.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(t){this._nonTrainableWeights=t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(t){if(t=Ec(t),null==this.inputSpec||0===this.inputSpec.length)return;const e=Ec(this.inputSpec);if(t.length!==e.length)throw new wc(`Layer ${this.name} expects ${e.length} inputs, but it received ${t.length} input tensors. Input received: `+t);for(let n=0;n<t.length;n++){const s=t[n],r=e[n];if(null==r)continue;const a=s.rank;if(null!=r.ndim&&a!==r.ndim)throw new wc(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${r.ndim}, found ndim=${a}`);if(null!=r.maxNDim&&a>r.maxNDim)throw new wc(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${r.maxNDim}, found ndim=${a}`);if(null!=r.minNDim&&a<r.minNDim)throw new wc(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${r.minNDim}, found ndim=${a}.`);if(null!=r.dtype&&s.dtype!==r.dtype)throw new wc(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${r.dtype}, found dtype=${s.dtype}.`);if(r.axes){const t=s.shape;for(const e in r.axes){const s=Number(e),a=r.axes[e],i=s>=0?t[s]:t[t.length+s];if(null!=a&&-1===[a,null].indexOf(i))throw new wc(`Input ${n} is incompatible with layer ${this.name}: expected axis ${s} of input shape to have value ${a} but got shape ${t}.`)}}if(null!=r.shape)for(let t=0;t<r.shape.length;++t){const e=r.shape[t],a=s.shape[t];if(null!=e&&null!=a&&e!==a)throw new wc(`Input ${n} is incompatible with layer ${this.name}: expected shape=${r.shape}, found shape=${s.shape}.`)}}}call(t,e){return t}invokeCallHook(t,e){null!=this._callHook&&this._callHook(t,e)}setCallHook(t){this._callHook=t}clearCallHook(){this._callHook=null}apply(t,e){e=e||{},this.assertNotDisposed();const n=Ec(t);let s=!0;for(const t of n)if(!(t instanceof fp)){s=!1;break}let r=!0;for(const t of n)if(t instanceof fp){r=!1;break}if(s===r)throw new wc("Arguments to apply() must be all SymbolicTensors or all Tensors");return ih(this.name,()=>{if(!this.built){this.assertInputCompatibility(t);const e=[];for(const n of Ec(t))e.push(n.shape);this.build(Ic(e)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&r&&(this._refCount=1)}if(this.assertInputCompatibility(t),r){let s=this.call(t,e);const r=Ec(s),a=[];for(let t of r)-1!==n.indexOf(t)&&(t=t.clone()),a.push(t);if(s=Ic(a),null!=this.activityRegularizer)throw new vc("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}{const n=function(t){t=Ec(t);const e=[];for(const n of t)e.push(n.shape);return Ic(e)}(t),s=this.computeOutputShape(n);let r;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(t)?n[0]:n),r=null!=s&&s.length>0&&Array.isArray(s[0])?s.map((n,s)=>new fp(a,n,this,Ec(t),e,this.name,s)):new fp(a,s,this,Ec(t),e,this.name),this.addInboundNode(t,r,null,null,n,s,e),this._refCount++,null!=this.activityRegularizer)throw new vc("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}})}warnOnIncompatibleInputShape(t){if(null!=this.batchInputShape)if(t.length!==this.batchInputShape.length)console.warn("The rank of the input tensor provided (shape: "+JSON.stringify(t)+") does not match that of the "+`batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer `+this.name);else{let e=!1;this.batchInputShape.forEach((n,s)=>{null!=n&&null!=t[s]&&t[s]!==n&&(e=!0)}),e&&console.warn(`The shape of the input tensor (${JSON.stringify(t)}) does not match the expectation of layer ${this.name}: `+JSON.stringify(this.batchInputShape))}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new bc(`The layer ${this.name} has never been called and thus has no defined output shape.`);const t=[];for(const e of this.inboundNodes){const n=JSON.stringify(e.outputShapes);-1===t.indexOf(n)&&t.push(n)}if(1===t.length){const t=this.inboundNodes[0].outputShapes;return Array.isArray(t)&&Array.isArray(t[0])&&1===t.length?t[0]:t}throw new bc(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new xc(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return up(this.weights)}build(t){this.built=!0}getWeights(t=!1){return hp(t?this.trainableWeights:this.weights)}setWeights(t){Xn(()=>{const e=this.weights;if(e.length!==t.length)throw new wc(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${t.length}, but the layer was expecting ${e.length} weights. Provided weights: ${t}...`);if(0===e.length)return;const n=[],s=hp(e);for(let r=0;r<s.length;++r){const a=s[r],i=e[r],o=t[r];if(!R(a.shape,o.shape))throw new wc(`Layer weight shape ${a.shape} not compatible with provided weight shape `+o.shape);n.push([i,o])}pp(n)})}addWeight(t,e,n,s,r,a,i){if(-1!==this._addedWeightNames.indexOf(t))throw new wc(`Duplicate weight name ${t} for layer ${this.name}`);this._addedWeightNames.push(t),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(s=Qh("zeros"));const o=s.apply(e,n),l=new cp(o,n,t,a,i);return o.dispose(),null!=r&&this.addLoss(()=>r.apply(l.read())),null==a&&(a=!0),a?this._trainableWeights.push(l):this._nonTrainableWeights.push(l),l}setFastWeightInitDuringBuild(t){this.fastWeightInitDuringBuild=t}addLoss(t){null==t||Array.isArray(t)&&0===t.length||(t=Ec(t),void 0!==this._losses&&null!==this._losses&&this.losses.push(...t))}computeOutputShape(t){return t}computeMask(t,e){if(!this.supportsMasking){if(null!=e){if(!Array.isArray(e))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);e.forEach(t=>{if(null!=t)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)})}return null}return e}addInboundNode(t,e,n,s,r,a,i=null){const o=Ec(t);e=Ec(e),n=Ec(n),s=Ec(s),r=ip(r),a=ip(a);const l=[],u=[],c=[];for(const t of o)l.push(t.sourceLayer),u.push(t.nodeIndex),c.push(t.tensorIndex);new gp({outboundLayer:this,inboundLayers:l,nodeIndices:u,tensorIndices:c,inputTensors:o,outputTensors:e,inputMasks:n,outputMasks:s,inputShapes:r,outputShapes:a},i);for(let t=0;t<e.length;t++)e[t].sourceLayer=this,e[t].nodeIndex=this.inboundNodes.length-1,e[t].tensorIndex=t}getConfig(){const t={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(t.batchInputShape=this.batchInputShape),null!=this.dtype&&(t.dtype=this.dtype),t}disposeWeights(){return this.weights.forEach(t=>t.dispose()),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let t=0;return 0==--this._refCount&&(t=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:t}}}class xp extends bp{constructor(t){if(super({dtype:t.dtype,name:null!=t.name?t.name:rp("input").toString()}),null==t.batchSize&&(t.batchSize=null),null==t.sparse&&(t.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=t.sparse,null!=t.inputShape&&null!=t.batchInputShape)throw new wc("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let e=t.batchInputShape;if(null==e){if(null==t.inputShape)throw new wc("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");e=[t.batchSize].concat(t.inputShape)}else if(null!=t.batchSize)throw new wc("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=t.dtype||"float32";this.batchInputShape=e,this.dtype=n,this.inputSpec=[{shape:e}];const s=new fp(this.dtype,this.batchInputShape,this,[],{},this.name);s.nodeIndex=0,s.tensorIndex=0,new gp({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[s],outputTensors:[s],inputMasks:[null],outputMasks:[null],inputShapes:[e],outputShapes:[e]})}apply(t,e){throw new wc("Cannot pass any input to an InputLayer's apply() method. InputLayer name: "+this.name)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}function wp(t){if(null==t.batchShape&&null==t.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=t.batchShape&&null!=t.shape)throw new wc("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let e=t.batchShape;null!=t.shape&&null==e&&(e=[null].concat(t.shape));let n=t.dtype;return null==n&&(n="float32"),new xp({batchInputShape:e,name:t.name,dtype:n,sparse:t.sparse}).inboundNodes[0].outputTensors[0]}async function vp(t){if(null==t)return;const e=[],n=[],s=[];for(const r in t){const a=t[r];if("number"!=typeof a){const t=a;e.push(t.data()),n.push(r),s.push(t)}}if(e.length>0){const r=await Promise.all(e);for(let e=0;e<r.length;++e)t[n[e]]=r[e][0];Yn(s)}}function Np(t){if(null!=t)for(const e in t){const n=t[e];"number"!=typeof n&&n.dispose()}}var kp;xp.className="InputLayer",Bn(xp),function(t){t[t.SILENT=0]="SILENT",t[t.VERBOSE=1]="VERBOSE"}(kp||(kp={}));class Cp{constructor(){this.validationData=null}setParams(t){this.params=t}async onEpochBegin(t,e){}async onEpochEnd(t,e){}async onBatchBegin(t,e){}async onBatchEnd(t,e){}async onTrainBegin(t){}async onTrainEnd(t){}setModel(t){}}class Sp{constructor(t,e=10){null==t&&(t=[]),this.callbacks=t,this.queueLength=e}append(t){this.callbacks.push(t)}setParams(t){for(const e of this.callbacks)e.setParams(t)}setModel(t){for(const e of this.callbacks)e.setModel(t)}async onEpochBegin(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onEpochBegin(t,e)}async onEpochEnd(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onEpochEnd(t,e)}async onBatchBegin(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onBatchBegin(t,e)}async onBatchEnd(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onBatchEnd(t,e)}async onTrainBegin(t){null==t&&(t={});for(const e of this.callbacks)await e.onTrainBegin(t)}async onTrainEnd(t){null==t&&(t={});for(const e of this.callbacks)await e.onTrainEnd(t)}}class Ip extends Cp{constructor(){super()}async onEpochBegin(t){this.seen=0,this.totals={}}async onBatchEnd(t,e){null==e&&(e={});const n=null==e.size?0:e.size;this.seen+=n;for(const t in e){const s=e[t];if("number"==typeof s)this.totals.hasOwnProperty(t)||(this.totals[t]=0),this.totals[t]=this.totals[t]+s*n;else{let e;t in this.totals?e=this.totals[t]:this.totals[t]=0;const r=Xn(()=>es(this.totals[t],rs(s,n)));this.totals[t]=r,null!=e&&e.dispose()}}}async onEpochEnd(t,e){if(null!=e)for(const t of this.params.metrics)null!=this.totals[t]&&("number"==typeof this.totals[t]?e[t]=this.totals[t]/this.seen:Xn(()=>{const n=rs(ss(1,this.seen),this.totals[t]);e[t]=n,this.totals[t].dispose(),Jn(e[t])}))}}class Ep extends Cp{async onTrainBegin(t){this.epoch=[],this.history={}}async onEpochEnd(t,e){null==e&&(e={}),this.epoch.push(t);for(const t in e)null==this.history[t]&&(this.history[t]=[]),this.history[t].push(e[t])}async syncData(){const t=[],e=[],n=[];for(const s in this.history){const r=this.history[s];for(let a=0;a<r.length;++a)if("number"!=typeof r[a]){const i=r[a];t.push(i.data()),e.push(s),n.push(a)}}const s=await Promise.all(t);for(let t=0;t<s.length;++t){this.history[e[t]][n[t]].dispose(),this.history[e[t]][n[t]]=s[t][0]}}}class Tp extends Cp{constructor(t,e){if(super(),this.currentEpoch=0,this.yieldEvery=e||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=t.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");X(this.yieldEvery)&&(this.maybeWait=function(t,e){let n,s=it();return(...r)=>{const a=it();return a-s<e||(s=a,n=t(...r)),n}}(this.maybeWait.bind(this),this.yieldEvery)),this.trainBegin=t.onTrainBegin,this.trainEnd=t.onTrainEnd,this.epochBegin=t.onEpochBegin,this.epochEnd=t.onEpochEnd,this.batchBegin=t.onBatchBegin,this.batchEnd=t.onBatchEnd,this.yield=t.onYield}async maybeWait(t,e,n){const s=[];null!=this.yield&&(await vp(n),s.push(this.yield(t,e,n))),s.push(Ml()),await Promise.all(s)}async onEpochBegin(t,e){this.currentEpoch=t,null!=this.epochBegin&&(await vp(e),await this.epochBegin(t,e))}async onEpochEnd(t,e){const n=[];null!=this.epochEnd&&(await vp(e),n.push(this.epochEnd(t,e))),"epoch"===this.yieldEvery&&n.push(Ml()),await Promise.all(n)}async onBatchBegin(t,e){null!=this.batchBegin&&(await vp(e),await this.batchBegin(t,e))}async onBatchEnd(t,e){const n=[];null!=this.batchEnd&&(await vp(e),n.push(this.batchEnd(t,e))),"batch"===this.yieldEvery?n.push(Ml()):X(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,t,e)),await Promise.all(n)}async onTrainBegin(t){null!=this.trainBegin&&(await vp(t),await this.trainBegin(t))}async onTrainEnd(t){null!=this.trainEnd&&(await vp(t),await this.trainEnd(t))}}function Ap(t,e){if(null==t&&(t={}),t instanceof Cp)return[t];if(Array.isArray(t)&&t[0]instanceof Cp)return t;return Ec(t).map(t=>new Tp(t,e))}class $p{constructor(){}static registerCallbackConstructor(t,e){I(t>=0&&Number.isInteger(t),()=>"Verbosity level is expected to be an integer >= 0, but got "+t),$p.checkForDuplicate(e),null==$p.constructors[t]&&($p.constructors[t]=[]),$p.constructors[t].push(e)}static checkForDuplicate(t){for(const e in $p.constructors){$p.constructors[+e].forEach(e=>{if(e===t)throw new wc("Duplicate callback constructor.")})}}static clear(){$p.constructors={}}static createCallbacks(t){const e=[];for(const n in $p.constructors){const s=+n;t>=s&&e.push(...$p.constructors[s])}return e.map(t=>new t)}}function Rp(t,e,n,s,r,a,i,o,l){const u=new Ep,c=[new Ip,...$p.createCallbacks(e)];null!=t&&c.push(...t),c.push(u);const h=new Sp(c);return h.setParams({epochs:n,initialEpoch:s,samples:r,steps:a,batchSize:i,verbose:e,doValidation:o,metrics:l}),{callbackList:h,history:u}}function Dp(t,e={},n=!1){return Dc(t,zn.getMap().classNameMap,e,"layer",n)}function _p(t,e){return Xn(()=>{"float32"!==t.dtype&&(t=t.asType("float32"));const n=ha(Eh(t),e,!0),s=Mr(n.shape,yc()),r=Mi(Kr(n,s));return ss(t,r)})}function Fp(t,e){return Xn(()=>ka(Eh(ca(e,t)),-1))}function Op(t,e){return Xn(()=>ka(as(ca(e,t)),-1))}function Mp(t,e){return Xn(()=>{const n=ca(t,e),s=nr(as(t),yc(),Number.MAX_VALUE),r=as(ss(n,s));return rs(100,ka(r,-1))})}function Lp(t,e){return Xn(()=>{const n=nr(e,yc(),Number.MAX_VALUE),s=ea(es(1,n)),r=nr(t,yc(),Number.MAX_VALUE),a=ea(es(1,r));return ka(Eh(ca(s,a)),-1)})}function zp(t,e,n=!1){return Xn(()=>{if(n)e=Ai(e);else{const t=ha(e,e.shape.length-1,!0);e=ss(e,t)}return e=nr(e,yc(),1-yc()),ia(ha(rs(t.toFloat(),ea(e)),e.shape.length-1))})}function Bp(t,e,n=!1){return Xn(()=>{const s=Lr(function(t){const e=[hh(t.shape)];return t.reshape(e)}(t)).toInt(),r=(e=nr(e,yc(),1-yc())).shape;return zp(on(s,r[r.length-1]).reshape(r),e,n)})}function Pp(t,e){return Xn(()=>{let n;return n=nr(e,yc(),1-yc()),n=ea(ss(n,ca(1,n))),ka(function(t,e){if(!R(t.shape,e.shape))throw new wc(`logits and labels must have the same shape, but got shapes ${JSON.stringify(t.shape)} and ${JSON.stringify(e.shape)}`);return Xn(()=>{const n=e.relu(),s=e.abs().neg();return n.sub(e.mul(t)).add(s.exp().log1p())})}(t,n),-1)})}function Wp(t,e){return Xn(()=>{const n=nr(t,yc(),1),s=nr(e,yc(),1);return ha(rs(t,ea(ss(n,s))),-1)})}function Vp(t,e){return Xn(()=>{const n=_p(t,-1),s=_p(e,-1),r=rs(n,s);return ia(ha(r,-1))})}$p.constructors={};const Up={meanSquaredError:Fp,meanAbsoluteError:Op,meanAbsolutePercentageError:Mp,meanSquaredLogarithmicError:Lp,squaredHinge:function(t,e){return Xn(()=>{const n=Kr(0,ca(1,rs(t,e)));return ka(Eh(n),-1)})},hinge:function(t,e){return Xn(()=>{const n=Kr(0,ca(1,rs(t,e)));return ka(n,-1)})},categoricalHinge:function(t,e){return Xn(()=>{const n=ha(rs(t,e),-1),s=ua(rs(ca(1,t),e),-1);return Kr(0,es(1,ca(s,n)))})},logcosh:function(t,e){return Xn(()=>{const n=Math.log(2),s=ca(e,t),r=ca(es(s,oa(rs(-2,s))),n);return ka(r,-1)})},categoricalCrossentropy:zp,sparseCategoricalCrossentropy:Bp,binaryCrossentropy:Pp,kullbackLeiblerDivergence:Wp,poisson:function(t,e){return Xn(()=>{const n=ea(es(yc(),e));return ka(ca(e,rs(t,n)),-1)})},cosineProximity:Vp};function Gp(t){if("string"==typeof t){if(t in Up)return Up[t];let e="Unknown loss "+t;throw t.toLowerCase().includes("softmaxcrossentropy")&&(e=`Unknown loss ${t}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new wc(e)}return t}function Hp(t,e){return Xn(()=>{const n=rs(.5,_a(e)),s=gh(Vr(e,n),t.dtype);return ka(Cr(t,s),-1)})}function jp(t,e){return Xn(()=>gh(Cr(xs(t,-1),xs(e,-1)),"float32"))}function qp(t,e){return Xn(()=>fa(t.equal(1),e.equal(1)).sum().cast("float32"))}function Kp(t,e){return Xn(()=>{const n=qp(t,e),s=function(t,e){return Xn(()=>fa(t.equal(0),e.equal(1)).sum().cast("float32"))}(t,e),r=n.add(s);return Sr(Vr(r,0),n.div(r),0).cast("float32")})}function Xp(t,e){return Xn(()=>{const n=qp(t,e),s=function(t,e){return Xn(()=>fa(t.equal(1),e.equal(0)).sum().cast("float32"))}(t,e),r=n.add(s);return Sr(Vr(r,0),n.div(r),0).cast("float32")})}function Yp(t,e){return Pp(t,e)}function Jp(t,e){return t.rank===e.rank&&(t=t.squeeze([t.rank-1])),(e=e.argMax(-1)).dtype!==t.dtype&&(e=e.asType(t.dtype)),Cr(t,e).asType("float32")}const Zp=zp,Qp=Bp,td={binaryAccuracy:Hp,categoricalAccuracy:jp,precision:Kp,categoricalCrossentropy:Zp,sparseCategoricalCrossentropy:Qp,mse:Fp,MSE:Fp,mae:Op,MAE:Op,mape:Mp,MAPE:Mp,cosine:Vp};function ed(t){if("string"==typeof t&&t in td)return td[t];if("string"!=typeof t&&null!=t)return t;throw new wc("Unknown metric "+t)}function nd(t){if(Cc(null!==t,"Unknown LossOrMetricFn "+t),"string"==typeof t)return t;{let e;for(const n of Object.keys(Up))if(Up[n]===t){e=n;break}if(void 0!==e)return e;for(const n of Object.keys(td))if(td[n]===t){e=n;break}return void 0!==e?e:t.name}}function sd(t,e,n=!1){if(null==t||"object"!=typeof t||Object.getPrototypeOf(t)!==Object.prototype||!function t(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const n=Object.keys(e);for(const s of n){if("string"!=typeof s)return!1;if(!t(e[s]))return!1}return!0}if(Array.isArray(e)){for(const n of e)if(!t(n))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}(t))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(t);n.length>1048576&&console.warn(`User-defined metadata of model "${e}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function rd(t,e,n,s=console.log){const r=function(t){let e=!0;const n=[],s=[];for(const e in t.nodesByDepth)n.push(t.nodesByDepth[e]);for(const t of n){if(t.length>1||1===t.length&&t[0].inboundLayers.length>1){e=!1;break}s.push(...t)}if(e)for(const n of t.layers){let t=!1;for(const r of n.inboundNodes)if(-1!==s.indexOf(r)){if(t){e=!1;break}t=!0}if(!e)break}return e}(t),a=["Layer (type)","Output shape","Param #"];let i;if(r?(e=e||65,n=n||[.45,.85,1]):(e=e||98,n=n||[.33,.55,.67,1]),n[n.length-1]<=1&&(n=n.map(t=>Math.floor(e*t))),!r){a.push("Receives inputs"),i=[];for(const e in t.nodesByDepth)i.push(...t.nodesByDepth[e])}s("_".repeat(e)),ad(a,n,s),s("=".repeat(e));const o=t.layers;for(let t=0;t<o.length;++t)r?id(o[t],n,s):od(o[t],n,i,s),s((t===o.length-1?"=":"_").repeat(e));t.checkTrainableWeightsConsistency();const l=function(t){let e;e=null!=t.collectedTrainableWeights?up(t.collectedTrainableWeights):up(t.trainableWeights);return e}(t),u=up(t.nonTrainableWeights);s("Total params: "+(l+u)),s("Trainable params: "+l),s("Non-trainable params: "+u),s("_".repeat(e))}function ad(t,e,n=console.log){let s="";for(let n=0;n<t.length;++n)n>0&&(s=s.slice(0,s.length-1)+" "),s+=t[n],s=s.slice(0,e[n]),s+=" ".repeat(e[n]-s.length);n(s)}function id(t,e,n){let s;try{s=JSON.stringify(t.outputShape)}catch(t){s="multiple"}ad([`${t.name} (${t.getClassName()})`,s,t.countParams().toString()],e,n)}function od(t,e,n,s){let r;try{r=JSON.stringify(t.outputShape)}catch(t){r="multiple"}const a=[];for(const e of t.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(e)))for(let t=0;t<e.inboundLayers.length;++t){const n=e.inboundLayers[t].name,s=e.nodeIndices[t],r=e.tensorIndices[t];a.push(`${n}[${s}][${r}]`)}const i=t.name,o=t.getClassName(),l=0===a.length?"":a[0];ad([`${i} (${o})`,r,t.countParams().toString(),l],e,s);for(let t=1;t<a.length;++t)ad(["","","",a[t]],e,s)}function ld(t,e,n){return("inboundNodes"===t||"outputLayers"===t||"inputLayers"===t)&&0===e&&"string"==typeof n}function ud(t,e){if(null===t)return null;if("string"==typeof t)return Ac(t);if("number"==typeof t||"boolean"==typeof t)return t;if(t instanceof Array){const n=[],s=t.length;for(let r=0;r<s;++r){const s=t[r];ld(e,r,s)?n.push(s):n.push(ud(s,e))}return n}{const e={};for(const n of Object.keys(t)){const s=t[n];if("name"===n&&"string"==typeof s)e[n]=s;else{const t=Ac(n);e[t]=ud(s,t)}}return e}}class cd{constructor(t){if(this.id2Value={},this.id2Mask={},this.name2Id={},t instanceof cd)for(const e in t.id2Value)this.id2Value[e]=t.id2Value[e],e in t.id2Mask&&(this.id2Mask[e]=t.id2Mask[e]);else{if(null==t)return;for(const e of t)this.add(e.key,e.value)}}add(t,e,n){if(null!=this.id2Value[t.id])throw new wc(`Duplicate key: name=${t.name}, id=${t.id}`);return this.id2Value[t.id]=function(t,e){if(null==t.dtype||t.dtype===e.dtype)return e;try{return Pe(e,t.dtype)}catch(n){throw new wc(`The dtype of the feed (${e.dtype}) can not be cast to the dtype of the key '${t.name}' (${t.dtype}).`)}}(t,e),this.name2Id[t.name]=t.id,null!=n&&(this.id2Mask[t.id]=n),this}addFeed(t){this.add(t.key,t.value)}hasKey(t){return null!=this.id2Value[t.id]}names(){return Object.keys(this.name2Id)}getValue(t){if(t instanceof fp){if(null==this.id2Value[t.id])throw new wc("Nonexistent key: "+t.name);return this.id2Value[t.id]}{const e=this.name2Id[t];if(null==e)throw new wc("Feed dict has no SymbolicTensor name: "+t);return this.id2Value[e]}}getMask(t){if(t instanceof fp){if(null==this.id2Value[t.id])throw new wc("Nonexistent key: "+t.name);return this.id2Mask[t.id]}{const e=this.name2Id[t];if(null==e)throw new wc("Feed dict has no SymbolicTensor name: "+t);return this.id2Mask[e]}}disposeMasks(){null!=this.id2Mask&&Yn(this.id2Mask)}}const hd={},pd={};function dd(t,e,n,s){const r=null!=n&&n.training,a=Array.isArray(t),i=a?t:[t],o=i.map(t=>t.name),l=[],u=e.names();for(const t of o)-1!==u.indexOf(t)?l.push(e.getValue(t)):l.push(null);null!=s&&(s.maxNumTensors=-1/0,s.minNumTensors=1/0);const c=o.join(",")+"|"+e.names().join(",");let h,p;if(null==hd[c]){const t=function(t,e){I(null!=t&&t.length>0,()=>"Expected at least one fetch, got none");let n=[],s={};if(1===t.length){const r=md(t[0],e);n=r.sorted,s=r.recipientMap}else{const r=new Set;for(const a of t){const{sorted:t,recipientMap:i}=md(a,e);for(const e of t)r.has(e.name)||(n.push(e),r.add(e.name));for(const t in i)null==s[t]&&(s[t]=new Set),i[t].forEach(e=>s[t].add(e))}}return{sorted:n,recipientCounts:fd(s)}}(i,e);h=t.sorted,p=t.recipientCounts,hd[c]=h,pd[c]=p}h=hd[c],p={},r||Object.assign(p,pd[c]);const d=new cd(e);for(let t=0;t<h.length;++t){if(null!=s){const t=Kn().numTensors;t>s.maxNumTensors&&(s.maxNumTensors=t),t<s.minNumTensors&&(s.minNumTensors=t)}const a=h[t],i=a.sourceLayer;if(i instanceof xp)continue;const u=[],c=[],f=[];let m=!1;for(const t of a.inputs){const n=d.getValue(t),s=d.getMask(t);u.push(n),c.push(s),null!=s&&(m=!0),r||(p[t.name]--,0!==p[t.name]||e.hasKey(t)||-1!==o.indexOf(t.name)||n.isDisposed||!0===t.sourceLayer.stateful||f.push(n))}m&&((n=n||{}).mask=c[0]);const g=Ec(i.apply(u,n));let y=null;i.supportsMasking&&(y=i.computeMask(u,c));const b=gd(a),x=Array.isArray(b)?b:[b];for(let t=0;t<x.length;++t){d.hasKey(x[t])||d.add(x[t],g[t],Array.isArray(y)?y[0]:y);const e=o.indexOf(x[t].name);-1!==e&&(l[e]=g[t])}r||Yn(f)}return d.disposeMasks(),a?l:l[0]}function fd(t){const e={};for(const n in t)e[n]=t[n].size;return e}function md(t,e){const n=new Set,s=[],r={};for(const t of e.names())n.add(t);const a=[],i=[];for(a.push(t);a.length>0;){const t=a[a.length-1];if(n.has(t.name)){a.pop();continue}const e=i[i.length-1]===a.length-1;if(0===t.inputs.length||e)a.pop(),s.push(t),n.add(t.name),e&&i.pop();else{i.push(a.length-1);for(const e of t.inputs)null==r[e.name]&&(r[e.name]=new Set),r[e.name].add(t.name),n.has(e.name)||a.push(e)}}return{sorted:s,recipientMap:r}}function gd(t){let e;if(1===t.sourceLayer.inboundNodes.length)e=t.sourceLayer.output;else{let n=null;for(let e=0;e<t.sourceLayer.inboundNodes.length;++e)for(const s of t.sourceLayer.inboundNodes[e].outputTensors)if(s.id===t.id){n=e;break}e=t.sourceLayer.getOutputAt(n)}return e}class yd extends bp{constructor(t){if(super({}),this.containerNodes=new Set,this.name=t.name,null==this.name){const t=this.getClassName().toLowerCase();this.name=rp(t)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(t.inputs)?this.inputs=t.inputs.slice():this.inputs=[t.inputs],Array.isArray(t.outputs)?this.outputs=t.outputs.slice():this.outputs=[t.outputs],Fc(this.inputs).length!==this.inputs.length)throw new wc("The list of inputs passed to the model is redundant. All inputs should only appear once. Found: "+this.inputs.map(t=>t.name));Fc(this.outputs).length!==this.outputs.length&&console.warn("The list of outputs passed to the model is redundant. All outputs should only appear once. Found: "+this.outputs.map(t=>t.name)),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const t of this.outputs){const e=t.sourceLayer,n=t.nodeIndex,s=t.tensorIndex;this.outputLayers.push(e),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(s)}for(const t of this.inputs){const e=t.sourceLayer,n=t.nodeIndex,s=t.tensorIndex;Cc(0===n,"input layer has >1 nodes"),Cc(0===s,"input layer has >1 tensors"),this.inputLayers.push(e),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(s)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e];if(!(n instanceof xp))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${t.inputs}. Input ${e} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const t of this.outputLayers)this.outputNames.push(t.name);this.internalInputShapes=this.inputs.map(t=>t.shape),this.internalOutputShapes=this.outputs.map(t=>t.shape);const e={},n={},s={},r={},a={},i=[],o=(t,e,n,s,r,l)=>{null!=s&&null!=r&&null!=l||(s=t.sourceLayer,r=t.nodeIndex,l=t.tensorIndex);const u=s.inboundNodes[r];if(-1!==n.indexOf(u))throw new xc(`The tensor ${t.name} at layer "${s.name}" is part of a cycle.`);if(-1!==e.indexOf(u))return;this.containerNodes.add(yd.nodeKey(s,r)),s.id in a||(a[s.id]=Object.keys(a).length),-1===n.indexOf(u)&&n.push(u);const c=u.inboundLayers.length;for(let t=0;t<c;t++){const s=u.inputTensors[t],r=u.inboundLayers[t],a=u.nodeIndices[t],i=u.tensorIndices[t];o(s,e,n,r,a,i)}for(e.push(u);n.indexOf(u)>=0;)n.splice(n.indexOf(u),1);i.push(u)},l=[],u=[];for(const t of this.outputs)o(t,l,u);const c=i.slice().reverse();for(const t of c){n[t.id]=t,t.id in e||(e[t.id]=0);let a=e[t.id];const i=null==s[t.outboundLayer.id]?0:s[t.outboundLayer.id];a=Math.max(a,i),s[t.outboundLayer.id]=a,r[t.outboundLayer.id]=t.outboundLayer,e[t.id]=a;for(let s=0;s<t.inboundLayers.length;s++){const r=t.inboundLayers[s],i=t.nodeIndices[s],o=r.inboundNodes[i],l=null==e[o.id]?0:e[o.id];e[o.id]=Math.max(a+1,l),n[o.id]=o}}const h={};for(const t in e){const s=e[t];s in h||(h[s]=[]),h[s].push(n[t])}const p={};for(const t in s){const e=s[t];e in p||(p[e]=[]),p[e].push(r[t])}let d=Object.keys(p).map(t=>parseInt(t,10)).sort(_c);this.layers=[];for(const t of d){const e=p[t];e.sort((t,e)=>{const n=a[t.id],s=a[e.id];return n<s?-1:n>s?1:0});for(const t of e)t instanceof yd&&this.internalContainerRefs.push(t),this.layers.push(t)}this.layersByDepth=p,d=Object.keys(h).map(t=>parseInt(t,10)).sort(_c);const f=this.inputs.slice(),m=[];for(const t of d)for(const e of h[t]){const t=e.outboundLayer;if(null!=t){for(const n of e.inputTensors)if(-1===f.indexOf(n))throw new xc("Graph disconnected: cannot obtain value for tensor "+n+` at layer "${t.name}". The following previous layers were accessed without issue: `+m);for(const t of e.outputTensors)f.push(t);m.push(t.name)}}this.nodesByDepth=h;const g=this.layers.map(t=>t.name);for(const t of g){const e=g.filter(e=>e===t).length;if(1!==e)throw new xc(`The name "${t}" is used ${e} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new gp({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(t=>null),outputMasks:this.outputs.map(t=>null),inputShapes:this.inputs.map(t=>t.shape),outputShapes:this.outputs.map(t=>t.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const t={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const e of this.layers)t.numDisposedVariables+=e.dispose().numDisposedVariables;for(const e of this.internalContainerRefs)t.numDisposedVariables+=e.dispose().numDisposedVariables}return t.refCountAfterDispose=this._refCount,t}get trainable(){return this.trainable_}set trainable(t){this.layers.forEach(e=>{e._trainableWeights.forEach(e=>e.trainable=t)}),this.trainable_=t}get trainableWeights(){if(this._trainableWeights.length>0)throw new wc("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let t=[];for(const e of this.layers)t=t.concat(e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.layers)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const t of this.layers)e.push(...t.trainableWeights);return e.concat(t)}return t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(t,e=!0){const n={};let s=0;for(const t of this.layers)for(const e of t.weights){if(null!=n[e.originalName])throw new wc("Duplicate weight name: "+e.originalName);n[e.originalName]=e,s++}const r=[];for(const s in t){let a=s;if(null==n[s]){const t=s.split("/");a=t.slice(0,-2).concat([t[t.length-1]]).join("/")}if(null!=n[a])r.push([n[a],t[s]]);else if(e)throw new wc("Provided weight data has no target variable: "+s);delete n[a]}if(e){const t=[];for(const e in n)t.push(e);if(t.length>0)throw new wc(`${t.length} of ${s} weights are not set: `+t)}pp(r)}updatedConfig(){const t=this.getConfig(),e={};return e.className=this.getClassName(),e.config=t,e.kerasVersion="tfjs-layers 2.5.0",e.backend="TensorFlow.js",e}toJSON(t,e=!0){const n=function t(e,n){if(null==e)return null;if("string"==typeof e)return Tc(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const s=[],r=e.length;for(let a=0;a<r;++a){const r=e[a];ld(n,a,r)?s.push(r):s.push(t(r,n))}return s}{const n={};for(const s of Object.keys(e)){const r=e[s],a=Tc(s);n[a]="name"!==s&&"className"!==s||"string"!=typeof r?t(r,s):r}return n}}(this.updatedConfig());return e?JSON.stringify(n):n}call(t,e){return Xn(()=>{t=Ec(t);const n=new cd;for(let e=0;e<this.inputs.length;++e)n.add(this.inputs[e],t[e]);return dd(this.outputs,n,e)})}computeMask(t,e){return Xn(()=>{let n;return t=Ec(t),n=null==e?kc(null,t.length):Ec(e),this.runInternalGraph(t,n)[1]})}computeOutputShape(t){const e=ip(t);if(e.length!==this.inputLayers.length)throw new wc(`Invalid inputShape argument ${t}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let t=0;t<e.length;t++){const s=this.inputLayers[t],r=e[t];n[s.name+"_0_0"]=r}const s=Object.keys(this.nodesByDepth).map(t=>parseInt(t,10)).sort(_c);if(s.length>1)for(const t of s){const e=this.nodesByDepth[t];for(const t of e){const e=t.outboundLayer;if(-1!==this.inputLayers.map(t=>t.id).indexOf(e.id))continue;const s=[];for(let e=0;e<t.inboundLayers.length;e++){const r=t.inboundLayers[e],a=t.nodeIndices[e],i=t.tensorIndices[e],o=n[`${r.name}_${a}_${i}`];s.push(o)}const r=ip(e.computeOutputShape(Ic(s))),a=e.inboundNodes.indexOf(t);for(let t=0;t<r.length;t++){n[`${e.name}_${a}_${t}`]=r[t]}}}const r=[],a=[];for(let t=0;t<this.outputLayers.length;t++){const e=this.outputLayers[t],n=this.outputLayersNodeIndices[t],s=this.outputLayersTensorIndices[t],r=`${e.name}_${n}_${s}`;a.push(r)}for(let t=0;t<a.length;t++){const e=a[t];Cc(e in n),r.push(n[e])}return Ic(r)}runInternalGraph(t,e){null==e&&(e=kc(null,t.length));const n={};for(let s=0;s<this.inputs.length;++s){const r=this.inputs[s],a=t[s],i=e[s];n[r.id]=[a,i]}const s=Object.keys(this.nodesByDepth).map(t=>parseInt(t,10)).sort(_c);for(const t of s){const e=this.nodesByDepth[t];for(const t of e){const e=t.outboundLayer,s=t.inputTensors,r=t.outputTensors,a=new Array;for(const t of s)t.id in n&&a.push(n[t.id]);if(a.length===s.length){let s,i,o,l,u={};if(null!=t.callArgs&&(u=t.callArgs),1===a.length){const[t,n]=a[0];null==u.mask&&(u.mask=n),o=Ec(e.call(t,u)),l=Ec(e.computeMask(t,n)),s=[t],i=[n]}else s=a.map(t=>t[0]),i=a.map(t=>t[1]),null==u.mask&&(u.mask=i),o=Ec(e.call(s,u)),l=Ec(e.computeMask(s,i));if(e.activityRegularizer)throw new vc("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let t=0;t<r.length;++t){const e=r[t],s=o[t],a=l[t];n[e.id]=[s,a]}}}}const r=[],a=[],i=[];for(const t of this.outputs){Cc(t.id in n,`Could not compute output ${t.name} : ${t.id}`);const[e,s]=n[t.id];i.push(e.shape),r.push(e),a.push(s)}return[r,a,i]}buildNodeConversionMap(t){const e={};let n;for(const t of this.layers){n=t instanceof yd?1:0;for(let s=0;s<t.inboundNodes.length;s++){const r=yd.nodeKey(t,s);this.containerNodes.has(r)&&(e[r]=n,n+=1)}}return e}getLayer(t,e){if(null!=e){if(this.layers.length<=e)throw new wc(`Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`);return this.layers[e]}if(null==t)throw new wc("Provide either a layer name or layer index");for(const e of this.layers)if(e.name===t)return e;throw new wc("No such layer: "+t)}calculateLosses(){return Xn(()=>{const t=[];for(const e of this.layers)for(let n=0;n<e.inboundNodes.length;++n){const s=yd.nodeKey(e,n);this.containerNodes.has(s)&&t.push(...e.calculateLosses())}return t})}getConfig(){const t={name:this.name},e=this.buildNodeConversionMap(this.layers),n=[];for(const t of this.layers){const s=t.getClassName(),r=t.getConfig(),a=[];for(let n=0;n<t.inboundNodes.length;n++){const s=t.inboundNodes[n],r=yd.nodeKey(t,n);let i={};if(this.containerNodes.has(r)){if(s.callArgs)try{JSON.stringify(s.callArgs),i=s.callArgs}catch(e){console.warn(`Layer ${t.name} was passed non-serializable keyword arguments: `+s.callArgs+". They will not be included in the serialized model (and thus will be missing at deserialization time)."),i={}}if(s.inboundLayers.length>0){const t=[];for(let n=0;n<s.inboundLayers.length;n++){const r=s.inboundLayers[n],a=s.nodeIndices[n],o=s.tensorIndices[n];let l=e[yd.nodeKey(r,a)];null==l&&(l=0),t.push([r.name,l,o,i])}a.push(t)}}}const i={};i.name=t.name,i.className=s,i.config=r,i.inboundNodes=a,n.push(i)}t.layers=n;const s=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t],r=this.inputLayersNodeIndices[t],a=yd.nodeKey(n,r);if(!this.containerNodes.has(a))continue;let i=e[a];null==i&&(i=0);const o=this.inputLayersTensorIndices[t];s.push([n.name,i,o])}t.inputLayers=s;const r=[];for(let t=0;t<this.outputLayers.length;t++){const n=this.outputLayers[t],s=this.outputLayersNodeIndices[t],a=yd.nodeKey(n,s);if(!this.containerNodes.has(a))continue;let i=e[a];null==i&&(i=0);const o=this.outputLayersTensorIndices[t];r.push([n.name,i,o])}return t.outputLayers=r,t}static fromConfig(t,e,n={},s=!1){const r={},a={};function i(t,e){t.name in a?a[t.name].push(e):a[t.name]=[e]}function o(t,e){const n=[];let s;for(const a of e){const o=a[0],l=a[1],u=a[2];if(s=null==a[3]?{}:a[3],!(o in r))return void i(t,e);const c=r[o];if(c.inboundNodes.length<=l)return void i(t,e);const h=c.inboundNodes[l];n.push(h.outputTensors[u])}n.length>0&&t.apply(Ic(n),s)}function l(t){const n=t.name,a=Dp(t,null!=e.customObjects?e.customObjects:{});a.setFastWeightInitDuringBuild(s),r[n]=a,t.inboundNodes.forEach(t=>{if(!(t instanceof Array))throw new wc("Corrupted configuration, expected array for nodeData: "+t);i(a,t)})}const u=e.name,c=e.layers;for(const t of c)l(t);for(;!Oc(a);)for(const t of c){const e=r[t.name];if(e.name in a){const t=a[e.name];delete a[e.name];for(const n of t)o(e,n)}}const h=[],p=[],d=e.inputLayers;for(const t of d){const e=t[0],n=t[1],s=t[2];Cc(e in r);const a=r[e].inboundNodes[n].outputTensors;h.push(a[s])}const f=e.outputLayers;for(const t of f){const e=t[0],n=t[1],s=t[2];Cc(e in r);const a=r[e].inboundNodes[n].outputTensors;p.push(a[s])}return new t({inputs:h,outputs:p,name:u})}get stateful(){if(this._stateful)throw new wc("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const t of this.layers)if(t.stateful)return!0;return!1}resetStates(){Xn(()=>{this.layers.forEach(t=>{t.stateful&&t.resetStates()})})}}function bd(t,e,n){const s=e.length;if(null==t||Array.isArray(t)&&0===t.length)return e.map(t=>null);if(1===s)return Array.isArray(t)&&1===t.length?t:"object"==typeof t&&e[0]in t?[t[e[0]]]:[t];if(Array.isArray(t)){if(t.length!==s)throw new Error(`Provided ${n} is an array of ${t.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);return t}if("object"==typeof t&&Object.keys(t).length>0&&"object"==typeof t[Object.keys(t)[0]]){const n=[];return e.forEach(e=>{e in t?n.push(t[e]):n.push(null)}),n}throw new Error(`The model has multiple (${s}) outputs, so ${n} must be either an array with ${s} elements or an object with ${e} keys. Provided ${n} not understood: ${JSON.stringify(t)}`)}function xd(t,e){return bd(t,e,"classWeight")}async function wd(t,e,n,s){if(null!=e||null!=s)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const e=Xn(()=>{if(1===t.shape.length)return t.clone();if(2===t.shape.length){if(t.shape[1]>1){const e=1;return t.argMax(e)}if(1===t.shape[1])return t.reshape([t.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${t.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${t.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)}),s=Array.from(await e.data());Yn(e);const r=[];return s.forEach(t=>{if(null==n[t])throw new Error(`classWeight must contain all classes in the training data. The class ${t} exists in the data but not in classWeight`);r.push(n[t])}),oi(r,"float32")}return null}function vd(t,e){return rs(t,e)}function Nd(t,e){let n,s;const r=e;n=r.xs,s=r.ys,I(null!=n&&null!=s,()=>"A Dataset iterator for fitDataset() is expected to generate objects of the form `{xs: xVal, ys: yVal}`, where the two values may be `tf.Tensor`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates "+e);const a=kd("input",t.inputNames,n),i=kd("output",t.outputNames,s),o=a[0].shape[0];I(a.length===t.inputs.length,()=>`LayersModel has ${t.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: `+JSON.stringify(t.inputNames)+")"),I(i.length===t.outputs.length,()=>`LayersModel has ${t.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: `+JSON.stringify(t.outputNames)+")");for(let e=0;e<a.length;e++)I(a[e].shape[0]===o,()=>`Batch size mismatch: input ${t.inputNames[e]} has ${a[e].shape[0]}; expected  ${o} based on input ${t.inputNames[0]}.`);for(let e=0;e<i.length;e++)I(i[e].shape[0]===o,()=>`Batch size mismatch: output ${t.outputNames[e]} has ${i[e].shape[0]}; expected  ${o} based on input ${t.inputNames[0]}.`);return{xs:a,ys:i}}function kd(t,e,n){if(n instanceof St)return[n];if(Array.isArray(n))return I(n.length===e.length,()=>`Received an array of ${n.length} Tensors, but expected ${e.length} to match the ${t} keys ${e}.`),n;{const s=[];for(const r of e){if(null==n[r])throw new wc(`The feature data generated by the dataset lacks the required ${t} key '${r}'.`);s.push(n[r])}return s}}async function Cd(t,e,n){const s=null!=n.batchesPerEpoch;if(I(null!=t.optimizer,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),I(null!=n,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),I(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),()=>"For fitDataset(), config.epochs is expected to be a positive integer, but got "+n.epochs),I(!s||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),()=>"For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got "+n.batchesPerEpoch),I(null==n.validationSplit,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),t.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");t.isTraining=!0;try{const r=null!=n.validationData;let a,i;if(r)if(Sd(n.validationData))I(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),()=>"For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got "+n.validationBatches);else{const t=function(t){if(3===t.length)throw new vc("Validation with sample weights is not implemented yet.");return{xs:t[0],ys:t[1]}}(n.validationData);a=t.xs,i=t.ys}const o=t.makeTrainFunction(),l=t.getDedupedMetricsNames();let u;u=r?l.slice().concat(l.map(t=>"val_"+t)):l.slice();const c=Ap(n.callbacks,n.yieldEvery),h=null==n.verbose?1:n.verbose,{callbackList:p,history:d}=Rp(c,h,n.epochs,null,null,function(t,e){let n=null;null!=e.batchesPerEpoch?n=e.batchesPerEpoch:Number.isFinite(t.size)&&(n=t.size);return n}(e,n),null,r,u);p.setModel(t),t.history=d,await p.onTrainBegin(),t.stopTraining_=!1;let f=null==n.initialEpoch?0:n.initialEpoch,m=await e.iterator();for(;f<n.epochs;){const u={};await p.onEpochBegin(f);let c=0,h=0;for(s||(m=await e.iterator());!s||c<n.batchesPerEpoch;){const e=await m.next();if(s&&e.done){console.warn("You provided `batchesPerEpoch` as "+n.batchesPerEpoch+", but your dataset iterator ran out of data after "+c+" batches; interrupting training. Make sure that your dataset can generate at least `batchesPerEpoch * epochs` batches (in this case, "+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=e.value){const{xs:s,ys:r}=Nd(t,e.value),a={};a.batch=h,a.size=s[0].shape[0],await p.onBatchBegin(h,a);const i=[];if(null!=n.classWeight){const e=xd(n.classWeight,t.outputNames);for(let t=0;t<e.length;++t)i.push(await wd(r[t],null,e[t]))}const u=s.concat(r).concat(i),d=o(u);Yn(u);for(let t=0;t<l.length;++t){const e=l[t],n=d[t];a[e]=n,Jn(n)}await p.onBatchEnd(h,a),Np(a),h++,c++}if(s?c>=n.batchesPerEpoch:e.done){if(r){let e;e=Sd(n.validationData)?Ec(await t.evaluateDataset(n.validationData,{batches:n.validationBatches})):Ec(t.evaluate(a,i,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<t.metricsNames.length;++n)u["val_"+t.metricsNames[n]]=e[n]}break}if(t.stopTraining_)break}if(await p.onEpochEnd(f,u),f++,t.stopTraining_)break}return await p.onTrainEnd(),await t.history.syncData(),t.history}finally{t.isTraining=!1}}function Sd(t){return"function"==typeof t.iterator}function Id(t){I(t>0&&Number.isInteger(t),()=>"batchSize is required to be a positive integer, but got "+t)}function Ed(t,e,n){return null==t?[null]:Array.isArray(t)?t.map(t=>bh(t,e,n-e)):bh(t,e,n-e)}function Td(t,e){return Xn(()=>null==t?null:Array.isArray(t)?t.map(t=>Td(t,e)):Ih(t,"int32"===e.dtype?e:e.toInt()))}function Ad(t,e){const n=[];let s=0,r=null;for(;s<t;)r=s+e,r>=t&&(r=t),n.push([s,r]),s=r;return n}async function $d(t,e,n,s={}){if(t.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let r,a,i,o,l,u,c;t.isTraining=!0;try{const h=null==s.batchSize?32:s.batchSize;Id(h);const p=!1,d=await t.standardizeUserData(e,n,s.sampleWeight,s.classWeight,p,h);r=d[0],a=d[1],c=d[2];let f,m=!1;if(null!=s.validationData&&s.validationData.length>0){if(m=!0,2!==s.validationData.length)throw 3===s.validationData.length?new vc("validationData including sample weights is not supported yet."):new wc("When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; "+s.validationData+" is invalid.");i=s.validationData[0],o=s.validationData[1];const e=!0,n=await t.standardizeUserData(i,o,null,null,e,h);l=n[0],u=n[1],f=l.concat(u)}else if(null!=s.validationSplit&&s.validationSplit>0&&s.validationSplit<1){m=!0;const t=Math.floor(r[0].shape[0]*(1-s.validationSplit)),e=r[0].shape[0];l=Ed(r,t,e),r=Ed(r,0,t),u=Ed(a,t,e),a=Ed(a,0,t),f=l.concat(u)}else null!=s.validationSteps&&(m=!0);const g=r.concat(a).concat(c);t.checkTrainableWeightsConsistency();const y=t.makeTrainFunction(),b=t.getDedupedMetricsNames();let x,w;m?(t.makeTestFunction(),x=t.testFunction,w=b.slice().concat(b.map(t=>"val_"+t))):(x=null,f=[],w=b.slice());const v=Ap(s.callbacks,s.yieldEvery);return await async function(t,e,n,s,r,a,i,o,l,u,c,h,p,d,f){null==r&&(r=32),null==a&&(a=1),null==c&&(c=!0),null==p&&(p=0);let m=!1;if(null!=l&&null!=u&&(m=!0),null!=f&&(m=!0,null==d))throw new wc("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const g=t.checkNumSamples(n,r,d,"steps_per_epoch");let y;null!=g&&(y=mh(0,g)),null==i&&(i=1);const{callbackList:b,history:x}=Rp(o,i,a,p,g,d,r,m,h);b.setModel(t),t.history=x,await b.onTrainBegin(),t.stopTraining_=!1;for(let i=p;i<a;++i){await b.onEpochBegin(i);const a={};if(null!=d)throw new vc("stepsPerEpoch mode is not implemented yet.");{if("batch"===c)throw new vc("batch shuffling is not implemneted yet");c&&N(y);const i=oi(y),o=Ad(g,r);for(let c=0;c<o.length;++c){const h={};if(await b.onBatchBegin(c,h),Xn(()=>{const p=o[c][0],d=o[c][1],f=bh(i,p,d-p);h.batch=c,h.size=d-p;const g=Td(n,f),y=e(g);for(let t=0;t<s.length;++t){const e=s[t],n=y[t];h[e]=n,Jn(n)}if(c===o.length-1&&m){const e=t.testLoop(l,u,r);for(let t=0;t<s.length;++t){const n=s[t],r=e[t];Jn(r),a["val_"+n]=r}}}),await b.onBatchEnd(c,h),Np(h),t.stopTraining_)break}i.dispose()}if(await b.onEpochEnd(i,a),t.stopTraining_)break}return await b.onTrainEnd(),await t.history.syncData(),t.history}(t,y,g,b,h,s.epochs,s.verbose,v,x,f,s.shuffle,w,s.initialEpoch,null,null)}finally{t.isTraining=!1,Dd(r,e),Dd(a,n),Dd(l,i),Dd(u,o),null!=c&&Yn(c)}}function Rd(t){const e=[];t instanceof St&&(t=[t]);for(let n=0;n<t.length;++n){const s=t[n];if(1===s.rank)e.push(yh(s,1));else{if(0===s.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");e.push(s)}}return e}function Dd(t,e){if(null==t)return;const n=[];if(e instanceof St)n.push(e.id);else if(Array.isArray(e))e.forEach(t=>n.push(t.id));else if(null!=e)for(const t in e){const s=e[t];n.push(s.id)}const s=[];if(t instanceof St)-1===n.indexOf(t.id)&&s.push(t);else if(Array.isArray(t))t.forEach(t=>{-1===n.indexOf(t.id)&&s.push(t)});else if(null!=t)for(const e in t){const r=t[e];-1===n.indexOf(r.id)&&s.push(r)}s.forEach(t=>{t.isDisposed||t.dispose()})}function _d(t){return Array.isArray(t)}function Fd(t){return!function(t){return t instanceof St}(t)&&!_d(t)}function Od(t,e,n,s=!0,r=""){if(null==e||0===e.length){if(null!=t){let e=!1;if(_d(t)&&t.length>0)e=!0;else if(Fd(t)){for(const n in t)if(t.hasOwnProperty(n)){e=!0;break}}else e=!0;if(e)throw new wc(`Error when checking model ${r} expected no data, but got `+t)}return[]}if(null==t)return e.map(t=>null);let a;if(Fd(t)){t=t,a=[];for(const n of e){if(null==t[n])throw new wc(`No data provided for "${n}". Need data for each key in: `+e);a.push(t[n])}}else if(_d(t)){if((t=t).length!==e.length)throw new wc(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${e.length} Tensor(s), but instead got the following list of Tensor(s): `+t);a=t}else{if(t=t,e.length>1)throw new wc(`The model ${r} expects ${e.length} Tensor(s), but only received one Tensor. Found: Tensor with shape `+t.shape);a=[t]}if(a=Rd(a),null!=n)for(let t=0;t<e.length;++t){if(null==n[t])continue;const i=a[t];if(i.shape.length!==n[t].length)throw new wc(`Error when checking ${r}: expected ${e[t]} to have ${n[t].length} dimension(s). but got array with shape `+i.shape);for(let a=0;a<n[t].length;++a){if(0===a&&!s)continue;const o=i.shape[a],l=n[t][a];if(null!=l&&l>=0&&o!==l)throw new wc(`Error when checking ${r}: expected ${e[t]} to have shape [${n[t]}], but got array with shape [${i.shape}].`)}}return a}function Md(t,e,n,s=!0,r=""){let a;if(Array.isArray(t)){if(t.length!==e.length)throw new wc(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${e.length} Tensor(s), but instead got ${t.length} Tensors(s).`);a=t}else{if(e.length>1)throw new wc(`The model expects ${e.length} ${r} Tensors, but only received one Tensor. Found: array with shape `+JSON.stringify(t.shape)+".");a=[t]}if(null!=n)for(let t=0;t<e.length;++t){if(null==n[t])continue;const i=a[t];if(i.shape.length!==n[t].length)throw new wc(`Error when checking ${r}: expected ${e[t]} to have ${n[t].length} dimension(s), but got array with shape `+JSON.stringify(i.shape));for(let a=0;a<n[t].length;++a){if(0===a&&!s)continue;const o=i.shape[a],l=n[t][a];if(null!=l&&l!==o)throw new wc(`Error when checking ${r}: expected ${e[t]} to have shape ${JSON.stringify(n[t])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}class Ld extends yd{constructor(t){super(t),this.isTraining=!1}summary(t,e,n=console.log){if(!this.built)throw new wc("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");rd(this,t,e,n)}compile(t){if(null==t.loss&&(t.loss=[]),this.loss=t.loss,"string"==typeof t.optimizer)this.optimizer_=function(t){const e={Adagrad:()=>Fl.adagrad(.01),Adadelta:()=>Fl.adadelta(1,.95,yc()),Adam:()=>Fl.adam(.001,.9,.999,yc()),Adamax:()=>Fl.adamax(.002,.9,.999,yc(),0),RMSProp:()=>Fl.rmsprop(.001,.9,0,yc()),SGD:()=>Fl.sgd(.01)};if(e.adagrad=e.Adagrad,e.adadelta=e.Adadelta,e.adam=e.Adam,e.adamax=e.Adamax,e.rmsprop=e.RMSProp,e.sgd=e.SGD,t in e)return e[t]();throw new wc("Unknown Optimizer "+t)}(t.optimizer),this.isOptimizerOwned=!0;else{if(!(t.optimizer instanceof Sl))throw new wc("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=t.optimizer,this.isOptimizerOwned=!1}let e=[];if(Array.isArray(t.loss)||"string"==typeof t.loss||"function"==typeof t.loss)if(Array.isArray(t.loss)){if(t.loss.length!==this.outputs.length)throw new wc(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${t.loss}.`);const n=t.loss;e=n.map(t=>Gp(t))}else{const n=Gp(t.loss);this.outputs.forEach(t=>{e.push(n)})}else{t.loss=t.loss;for(const e in t.loss)if(-1===this.outputNames.indexOf(e))throw new wc(`Unknown entry in loss dictionary: "${e}". Only expected the following keys: `+this.outputNames);for(const n of this.outputNames)null==t.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),e.push(Gp(t.loss[n]))}this.lossFunctions=e,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let t=0;t<this.outputs.length;++t){const e=this.internalOutputShapes[t],n=this.outputNames[t];this.feedOutputNames.push(n),this.feedOutputShapes.push(e),this.feedLossFns.push(this.lossFunctions[t])}const n=[];this.metrics=t.metrics,this.metricsNames=["loss"],this.metricsTensors=[],ih("loss",()=>{for(let t=0;t<this.outputs.length;++t){if(-1!==n.indexOf(t))continue;const e=this.lossFunctions[t];this.outputs.length>1&&(this.metricsTensors.push([e,t]),this.metricsNames.push(this.outputNames[t]+"_loss"))}});const s=function(t,e){if(null==t||Array.isArray(t)&&0===t.length)return e.map(t=>[]);let n;if("string"==typeof t||"function"==typeof t)n=[t];else{if(!Array.isArray(t)&&"object"!=typeof t)throw new TypeError("Type of metrics argument not understood. Expected an string,function, Array, or Object, found: "+t);n=t}if(Array.isArray(n))return e.map(t=>n);{const t=[];for(const s of e){let e=n.hasOwnProperty(s)?n[s]:[];Array.isArray(e)||(e=[e]),t.push(e)}return t}}(t.metrics,this.outputNames),r=(t,e,n)=>{this.outputNames.length>1&&(e=this.outputNames[t]+"_"+e),this.metricsNames.push(e),this.metricsTensors.push([n,t])};ih("metric",()=>{for(let t=0;t<this.outputs.length;++t){if(-1!==n.indexOf(t))continue;(e=>{let n,s,a;for(const i of e){if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const e=this.internalOutputShapes[t];let r;1===e[e.length-1]||this.lossFunctions[t]===Pp?-1!==["accuracy","acc"].indexOf(i)?s=Hp:-1!==["crossentropy","ce"].indexOf(i)&&(s=Yp):this.lossFunctions[t]===Bp?-1!==["accuracy","acc"].indexOf(i)?s=Jp:-1!==["crossentropy","ce"].indexOf(i)&&(s=Qp):-1!==["accuracy","acc"].indexOf(i)?s=jp:-1!==["crossentropy","ce"].indexOf(i)&&(s=Zp),-1!==["accuracy","acc"].indexOf(i)?r="acc":-1!==["crossentropy","ce"].indexOf(i)&&(r="ce"),a=s,n=""+r}else{const t=ed(i);a=t,n=""+nd(i)}let e;ih(n,()=>{e=a}),r(t,n,e)}})(s[t])}}),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(t,e,n={}){const s=null==n.batchSize?32:n.batchSize;Id(s);const r=this.standardizeUserDataXY(t,e,!0,s);try{const a=r[0].concat(r[1]);this.makeTestFunction();const i=this.testFunction;return Ic(this.testLoop(i,a,s,n.verbose,n.steps))}finally{Dd(r[0],t),Dd(r[1],e)}}async evaluateDataset(t,e){return this.makeTestFunction(),async function(t,e,n){const s=null!=(n=n||{}).batches,r=t.testFunction;let a=[];if(n.verbose>0)throw new vc("Verbose mode is not implemented yet.");I(!s||n.batches>0&&Number.isInteger(n.batches),()=>"Test loop expects `batches` to be a positive integer, but received "+JSON.stringify(n.batches));const i="function"==typeof e.next?e:await e.iterator();let o=0,l=0;for(;!s||l<n.batches;){const e=await i.next();if(a=Xn(()=>{if(e.value){const{xs:n,ys:s}=Nd(t,e.value),i=n.concat(s),u=Xn(()=>r(i));if(Yn(i),0===l)for(let t=0;t<u.length;++t)a.push(Xr(0));const c=i[0].shape[0];for(let t=0;t<u.length;++t){const e=u[t],n=a[t];a[t]=Xn(()=>es(a[t],rs(c,e))),l>0&&Yn(n)}Yn(u),o+=c,++l}return a}),e.done){s&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let t=0;t<a.length;++t){const e=a[t];a[t]=ss(a[t],o),Yn(e)}return Ic(a)}(this,t,e)}checkNumSamples(t,e,n,s="steps"){let r;if(null!=n){if(r=null,null!=e)throw new wc(`If ${s} is set, batchSize must be null or undefined.Got batchSize = `+e)}else{if(null==t)throw new wc("Either the input data should have a defined shape, or "+s+" shoud be specified.");r=Array.isArray(t)?t[0].shape[0]:t.shape[0]}return r}execute(t,e){if(Array.isArray(e)&&0===e.length)throw new wc("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(e),s=n?e:[e],r=this.retrieveSymbolicTensors(s),a=new cd;if(t instanceof St&&(t=[t]),Array.isArray(t)){if(t.length!==this.inputs.length)throw new wc(`The number of inputs provided (${t.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let e=0;e<this.inputs.length;++e)a.add(this.inputs[e],t[e])}else for(const e of this.inputs){const n=t[e.name];if(null==n)throw new wc("No value is provided for the model's input "+e.name);a.add(e,n)}const i=dd(r,a);return n?i:i[0]}retrieveSymbolicTensors(t){const e=kc(null,t.length);let n=t.length;for(const s of this.layers){const r=Array.isArray(s.output)?s.output:[s.output],a=r.map(t=>t.name);for(let s=0;s<t.length;++s){const i=a.indexOf(t[s]);if(-1!==i&&(e[s]=r[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw e.forEach((e,s)=>{null==e&&n.push(t[s])}),new wc("Cannot find SymbolicTensors for output name(s): "+JSON.stringify(n))}return e}predictLoop(t,e=32,n=!1){return Xn(()=>{const s=this.checkNumSamples(t);if(n)throw new vc("Verbose predictLoop() is not implemented yet.");const r=Ad(s,e),a=this.outputs.map(t=>[]);for(let e=0;e<r.length;++e){Xn(()=>{const n=r[e][0],s=r[e][1],a=Ed(t,n,s),i=[];if(Array.isArray(a))for(let t=0;t<a.length;++t)i.push({key:this.inputs[t],value:a[t]});else i.push({key:this.inputs[0],value:a});const o=new cd(i);return dd(this.outputs,o)}).forEach((t,e)=>a[e].push(t))}return Ic(a.map(t=>Us(t,0)))})}predict(t,e={}){const n=Rd(t);Md(n,this.inputNames,this.feedInputShapes,!1);try{const s=null==e.batchSize?32:e.batchSize;return Id(s),this.predictLoop(n,s)}finally{Dd(n,t)}}predictOnBatch(t){Md(t,this.inputNames,this.feedInputShapes,!0);const e=(Array.isArray(t)?t[0]:t).shape[0];return this.predictLoop(t,e)}standardizeUserDataXY(t,e,n=!0,s){if(null==this.optimizer_)throw new xc("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const r=[];for(let t=0;t<this.feedOutputShapes.length;++t){const e=this.feedOutputShapes[t];this.feedLossFns[t]===Bp?r.push(e.slice(0,e.length-1).concat([1])):r.push(e)}if(function(t,e,n){const s=Fc(t.map(t=>t.shape[0]));s.sort();const r=Fc(e.map(t=>t.shape[0]));if(r.sort(),s.length>1)throw new wc("All input Tensors (x) should have the same number of samples. Got array shapes: "+JSON.stringify(t.map(t=>t.shape)));if(r.length>1)throw new wc("All target Tensors (y) should have the same number of samples. Got array shapes: "+JSON.stringify(e.map(t=>t.shape)));if(s.length>0&&r.length>0&&!R(s,r))throw new wc(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${r[0]} target sample(s).`)}(t=Od(t,this.feedInputNames,this.feedInputShapes,!1,"input"),e=Od(e,this.feedOutputNames,r,!1,"target")),function(t,e,n){const s=[Fp,Pp,zp];for(let r=0;r<t.length;++r){const a=t[r],i=e[r],o=n[r];if(null!=i){if(i===zp&&1===a.shape[a.shape.length-1])throw new wc(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==s.indexOf(i)){const t=a.shape.slice(1),e=o.slice(1);for(let n=0;n<t.length;++n){const s=t[n],r=e[n];if(null!=r&&s!==r)throw new wc(`A target Tensor with shape ${a.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(e,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=s&&s>0&&t[0].shape[0]%s!=0)throw new wc(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${s}. Found: ${t[0].shape[0]} sample(s).`);return[t,e]}async standardizeUserData(t,e,n,s,r=!0,a){const[i,o]=this.standardizeUserDataXY(t,e,r,a);if(null!=n)throw new Error("sample weight is not supported yet.");let l=null;if(null!=s){const t=xd(s,this.outputNames);l=[];for(let e=0;e<t.length;++e)l.push(await wd(o[e],null,t[e]))}return[i,o,l]}testLoop(t,e,n,s=0,r){return Xn(()=>{const a=this.checkNumSamples(e,n,r,"steps"),i=[];if(s>0)throw new vc("Verbose mode is not implemented yet.");if(null!=r)throw new vc("steps mode in testLoop() is not implemented yet");{const s=Ad(a,n),r=oi(mh(0,a));for(let n=0;n<s.length;++n){const a=s[n][0],o=s[n][1],l=bh(r,a,o-a),u=Td(e,l),c=t(u);if(0===n)for(let t=0;t<c.length;++t)i.push(Xr(0));for(let t=0;t<c.length;++t){const e=c[t];i[t]=es(i[t],rs(o-a,e))}}for(let t=0;t<i.length;++t)i[t]=ss(i[t],a)}return i})}getDedupedMetricsNames(){const t=this.metricsNames,e=[];for(let n=0;n<t.length;++n){const s=t[n];let r=s;if(Sc(t,s)>1){r+="_"+Sc(t.slice(0,n),s)}e.push(r)}return e}makeTrainFunction(){return t=>{const e=[],n=t.slice(0,this.inputs.length),s=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),r=t.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],i=this.collectedTrainableWeights.map(t=>t.read());return[this.optimizer_.minimize(()=>{const t=[];for(let e=0;e<this.inputs.length;++e)t.push({key:this.inputs[e],value:n[e]});const i=new cd(t),o=dd(this.outputs,i,{training:!0});let l;for(let t=0;t<this.lossFunctions.length;++t){let n=(0,this.lossFunctions[t])(s[t],o[t]);null!=r[t]&&(n=vd(n,r[t]));const a=ka(n);e.push(a),l=0===t?n:es(l,n)}for(let t=0;t<this.metricsTensors.length;++t){let n;if(this.outputs.length>1&&t<this.outputs.length)n=e[t];else{const e=this.metricsTensors[t][0],r=this.metricsTensors[t][1];n=ka(e(s[r],o[r]))}Jn(n),a.push(n)}return l=ka(l),this.calculateLosses().forEach(t=>{l=es(l,t)}),l},!0,i)].concat(a)}}makeTestFunction(){this.testFunction=t=>Xn(()=>{const e=[];let n;const s=t.slice(0,this.inputs.length),r=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let t=0;t<this.inputs.length;++t)a.push({key:this.inputs[t],value:s[t]});const i=new cd(a),o=dd(this.outputs,i);for(let t=0;t<this.lossFunctions.length;++t){const s=this.lossFunctions[t],a=ka(s(r[t],o[t]));n=0===t?a:es(n,a),e.push(n)}for(let t=0;t<this.metricsTensors.length;++t){const n=this.metricsTensors[t][0],s=this.metricsTensors[t][1],a=ka(n(r[s],o[s]));e.push(a)}return e})}async fit(t,e,n={}){return $d(this,t,e,n)}async fitDataset(t,e){return Cd(this,t,e)}async trainOnBatch(t,e){const n=await this.standardizeUserData(t,e),s=n[0],r=n[1],a=this.makeTrainFunction()(s.concat(r)),i=[];for(const t of a){const e=await t.data();i.push(e[0])}return Yn(a),Ic(i)}getNamedWeights(t){const e=[],n=null!=t&&t.trainableOnly,s=n?this.trainableWeights:this.weights,r=this.getWeights(n);for(let t=0;t<s.length;++t)n&&!s[t].trainable||e.push({name:s[t].originalName,tensor:r[t]});return e}set stopTraining(t){this.stopTraining_=t}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(t){this.optimizer_!==t&&(this.optimizer_=t,this.isOptimizerOwned=!1)}dispose(){const t=super.dispose();if(0===t.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const e=Kn().numTensors;this.optimizer_.dispose(),t.numDisposedVariables+=e-Kn().numTensors}return t}getLossIdentifiers(){let t;if("string"==typeof this.loss)t=Tc(this.loss);else if(Array.isArray(this.loss)){for(const t of this.loss)if("string"!=typeof t)throw new Error("Serialization of non-string loss is not supported.");t=this.loss.map(t=>Tc(t))}else{const e=Object.keys(this.loss);t={};const n=this.loss;for(const s of e){if("string"!=typeof n[s])throw new Error("Serialization of non-string loss is not supported.");t[s]=Tc(n[s])}}return t}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[Tc(nd(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map(t=>Tc(nd(t)));{const t={};for(const e in this.metrics)t[e]=Tc(nd(this.metrics[e]));return t}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(t){if(null!=t.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=t.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=t.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const e=Dp(ud(t.optimizer_config));let n,s;if("string"==typeof t.loss)n=Ac(t.loss);else if(Array.isArray(t.loss))n=t.loss.map(t=>Ac(t));else if(null!=t.loss){n={};for(const e in t.loss)n[e]=Ac(t.loss[e])}if(Array.isArray(t.metrics))s=t.metrics.map(t=>Ac(t));else if(null!=t.metrics){s={};for(const e in t.metrics)s[e]=Ac(t.metrics[e])}this.compile({loss:n,metrics:s,optimizer:e})}async save(t,e){if("string"==typeof t){const e=fe(t);if(0===e.length)throw new wc(`Cannot find any save handlers for URL '${t}'`);if(e.length>1)throw new wc(`Found more than one (${e.length}) save handlers for URL '${t}'`);t=e[0]}if(null==t.save)throw new wc("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await re(this.getNamedWeights(e)),s={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v2.5.0",convertedBy:null};if(null!=e&&e.includeOptimizer&&null!=this.optimizer){s.trainingConfig=this.getTrainingConfig();const t="optimizer",{data:e,specs:r}=await re(await this.optimizer.getWeights(),t);n.specs.push(...r),n.data=ue([n.data,e])}if(null!=this.userDefinedMetadata){const t=!0;sd(this.userDefinedMetadata,this.name,t),s.userDefinedMetadata=this.userDefinedMetadata}return s.weightData=n.data,s.weightSpecs=n.specs,t.save(s)}setUserDefinedMetadata(t){sd(t,this.name),this.userDefinedMetadata=t}getUserDefinedMetadata(){return this.userDefinedMetadata}}Ld.className="Model",Bn(Ld);class zd extends Ld{}async function Bd(t,e){if(null==e&&(e={}),"string"==typeof t){const n=me(t,e);if(0===n.length)n.push(tn(t,e));else if(n.length>1)throw new wc(`Found more than one (${n.length}) load handlers for URL '${t}'`);t=n[0]}return async function(t,e,n){null==n&&(n={});if(null==t.load)throw new wc("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const s=await t.load();let r=s.modelTopology;null!=r.model_config&&(r=r.model_config);const a=null==n.strict||n.strict,i=null!=s.weightData&&null!=s.weightSpecs&&a,o=Dp(ud(r),e,i),l=s.trainingConfig;null!=l&&o.loadTrainingConfig(l);null!=s.userDefinedMetadata&&o.setUserDefinedMetadata(s.userDefinedMetadata);if(null!=s.weightData){if(null==s.weightSpecs)throw new wc("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");const{modelWeights:t,optimizerWeights:e}=function(t,e){const n=ae(t,e),s={},r=[];return e.forEach(t=>{"optimizer"===t.group?r.push({name:t.name,tensor:n[t.name]}):s[t.name]=n[t.name]}),{modelWeights:s,optimizerWeights:r}}(s.weightData,s.weightSpecs);o.loadWeights(t,a),null!=o.optimizer&&e.length>0&&await o.optimizer.setWeights(e),Yn(t),Yn(e.map(t=>t.tensor))}return o}(t,void 0,e)}zd.className="Functional",Bn(zd);class Pd extends Ld{constructor(t){if(super({inputs:[],outputs:[]}),t=t||{},this.trainable=!0,this.built=!1,this.name=null!=t.name?t.name:rp("sequential_"),null!=t.layers)for(const e of t.layers)this.add(e)}checkShape(t){if(t.inboundNodes[0].outputTensors[0].shape.some(t=>t<0))throw new wc("Negative dimension size caused by adding layer "+t.name+" with input shape ["+t.inboundNodes[0].inputTensors[0].shape+"]")}add(t){const e=t instanceof Pd||t instanceof Ld;let n;if(e){if(n=t,1!==n.outputs.length)throw new wc("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new wc("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===t.inboundNodes.length){if(null==t.batchInputShape)throw new wc("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const e=wp({batchShape:t.batchInputShape,dtype:t.dtype,name:t.name+"_input"});t.apply(e)}if(e)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==t.inboundNodes.length)throw new wc(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${t.name} which has ${t.inboundNodes.length} pre-existing inbound connections.`);if(1!==t.inboundNodes[0].outputTensors.length)throw new wc("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[t.inboundNodes[0].outputTensors[0]],this.inputs=function t(e,n,s){if((null==n||null!=s&&s>0)&&(n=e.sourceLayer,s=e.nodeIndex),0===n.inboundNodes.length)return[e];{const e=n.inboundNodes[s];if(0===e.inboundLayers.length)return e.inputTensors;{const n=[];for(let s=0;s<e.inboundLayers.length;s++){const r=t(e.inputTensors[s],e.inboundLayers[s],e.nodeIndices[s]);for(const t of r)-1===n.indexOf(t)&&n.push(t)}return n}}}(this.outputs[0])}this.inboundNodes=[],new gp({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:kc(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(t=>t.shape),outputShapes:this.outputs[0].shape})}else{const e=t.apply(this.outputs[0]);if(Array.isArray(e))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(t),this.outputs=[e],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(t),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const t=this.layers.length-1;this.layers[t].outboundNodes=[],this.outputs=[this.layers[t].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(t,e){return null==this.model&&this.build(),this.model.call(t,e)}build(t){if(lp(t),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new Ld({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(t,e,n=console.log){this.built||this.build(),super.summary(t,e,n)}setWeights(t){null==this.model&&this.build(),this.model.setWeights(t)}evaluate(t,e,n={}){if(!this.built)throw new xc("The model needs to be compiled before being used.");return this.model.evaluate(t,e,n)}async evaluateDataset(t,e){if(!this.built)throw new xc("The model needs to be compiled before being used.");return this.model.evaluateDataset(t,e)}predict(t,e={}){return null==this.model&&this.build(),this.model.predict(t,e)}predictOnBatch(t){return null==this.model&&this.build(),this.model.predictOnBatch(t)}compile(t){this.build(),this.model.compile(t),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(t){this.model.optimizer=t}async fit(t,e,n={}){if(!this.built)throw new xc("The model needs to be compiled before being used.");return this.model.fit(t,e,n)}async fitDataset(t,e){if(!this.built)throw new xc("The model needs to be compiled before being used.");return this.model.fitDataset(t,e)}async trainOnBatch(t,e){return this.model.trainOnBatch(t,e)}static fromConfig(t,e,n={},s=!1){let r,a={};if(e instanceof Array){if(null==e[0].className||"Merge"===e[0].className)throw new wc("Legacy serialization format not supported yet.");r=e}else I(null!=e.layers,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),r=e.layers,delete e.layers,a=e;const i=new t(a);if(!(i instanceof Pd))throw new vc("Sequential.fromConfig called on non-Sequential input: "+i);for(const t of r){const e=Dp(t,void 0,s);s&&e.setFastWeightInitDuringBuild(!0),i.add(e)}return i}set stopTraining(t){if(null==this.model)throw new wc("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=t}get stopTraining(){if(null==this.model)throw new wc("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const t=[];for(const e of this.layers){const n={};n.className=e.getClassName(),n.config=e.getConfig(),t.push(n)}return{name:this.name,layers:t}}}function Wd(t){return wp(t)}Pd.className="Sequential",Bn(Pd);class Vd extends Ln{getConfig(){return{}}}class Ud extends Vd{apply(t,e=1){return function(t,e=1){if(1!==e)throw new vc(`Support for alpha values other than 1 (${e}) is not implemented yet.`);return Ar(t)}(t,e)}}Ud.className="elu",Bn(Ud);class Gd extends Vd{apply(t){return xi(t)}}Gd.className="selu",Bn(Gd);class Hd extends Vd{apply(t){return ci(t)}}Hd.className="relu",Bn(Hd);class jd extends Vd{apply(t){return Xn(()=>Sa(6,ci(t)))}}jd.className="relu6",Bn(jd);class qd extends Vd{apply(t){return t}}qd.className="linear",Bn(qd);class Kd extends Vd{apply(t){return Gs(t)}}Kd.className="sigmoid",Bn(Kd);class Xd extends Vd{apply(t){return function(t){return Xn(()=>{const e=es(.5,rs(.2,t));return nr(e,0,1)})}(t)}}Xd.className="hardSigmoid",Bn(Xd);class Yd extends Vd{apply(t){return oa(t)}}Yd.className="softplus",Bn(Yd);class Jd extends Vd{apply(t){return function(t){return Xn(()=>ss(t,as(t).add(1)))}(t)}}Jd.className="softsign",Bn(Jd);class Zd extends Vd{apply(t){return js(t)}}Zd.className="tanh",Bn(Zd);class Qd extends Vd{apply(t,e=-1){return Ai(t,e)}}Qd.className="softmax",Bn(Qd);class tf extends Vd{apply(t,e=-1){return pa(t,e)}}tf.className="logSoftmax",Bn(tf);class ef extends Vd{apply(t,e=1){return Xn(()=>Gs(t.mul(e)).mul(t))}}function nf(t){return t.getClassName()}function sf(t,e={}){return Dc(t,zn.getMap().classNameMap,e,"activation")}function rf(t){if(null==t){const t={className:"linear",config:{}};return sf(t)}if("string"==typeof t){const e={};return e.className=t,e.config={},sf(e)}return t instanceof Vd?t:sf(t)}function af(t){if(null!=t&&"object"!=typeof t)throw new Error("Argument to L1L2 regularizer's constructor is expected to be an object, but received: "+t)}ef.className="swish",Bn(ef);class of extends Ln{}class lf extends of{constructor(t){super(),af(t),this.l1=null==t||null==t.l1?.01:t.l1,this.l2=null==t||null==t.l2?.01:t.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(t){return Xn(()=>{let e=va([1]);return this.hasL1&&(e=es(e,ha(rs(this.l1,as(t))))),this.hasL2&&(e=es(e,ha(rs(this.l2,Eh(t))))),e.asScalar()})}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(t,e){return new t({l1:e.l1,l2:e.l2})}}lf.className="L1L2",Bn(lf);const uf={l1l2:"L1L2"};function cf(t){return Rc(t)}function hf(t,e={}){return Dc(t,zn.getMap().classNameMap,e,"regularizer")}function pf(t){if(null==t)return null;if("string"==typeof t){return hf({className:t in uf?uf[t]:t,config:{}})}return t instanceof of?t:hf(t)}class df extends bp{constructor(t){super(null==t?{}:t),this.supportsMasking=!0,null!=t&&(this.maxValue=t.maxValue)}call(t,e){t=op(t);let n=ci(t);return null!=this.maxValue&&(n=nr(n,0,this.maxValue)),n}computeOutputShape(t){return t}getConfig(){const t={maxValue:this.maxValue},e=super.getConfig();return Object.assign(t,e),t}}df.className="ReLU",Bn(df);class ff extends bp{constructor(t){super(null==t?{}:t),this.DEFAULT_ALPHA=.3,null==t&&(t={}),this.alpha=null==t.alpha?this.DEFAULT_ALPHA:t.alpha}call(t,e){const n=op(t);return Yr(n,this.alpha)}computeOutputShape(t){return t}getConfig(){const t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}}ff.className="LeakyReLU",Bn(ff);class mf extends bp{constructor(t){if(super(null==t?{}:t),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==t&&(t={}),this.supportsMasking=!0,this.alphaInitializer=Qh(t.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=pf(t.alphaRegularizer),this.alphaConstraint=Xc(t.alphaConstraint),null==t.sharedAxes)this.sharedAxes=null;else if(Array.isArray(t.sharedAxes))this.sharedAxes=t.sharedAxes;else{if("number"!=typeof t.sharedAxes)throw new wc("Expected sharedAxes to be a number or an array of numbers, but got "+t.sharedAxes);this.sharedAxes=[t.sharedAxes]}}build(t){const e=(t=lp(t)).slice(1);if(null!=this.sharedAxes)for(const t of this.sharedAxes)e[t-1]=1;this.alpha=this.addWeight("alpha",e,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let e=1;e<t.length;++e)n[e]=t[e];this.inputSpec=[new dp({ndim:t.length,axes:n})],this.built=!0}call(t,e){return t=op(t),Ua(t,this.alpha.read())}getConfig(){const t={alphaInitializer:Zh(this.alphaInitializer),alphaRegularizer:cf(this.alphaRegularizer),alphaConstraint:qc(this.alphaConstraint),sharedAxes:this.sharedAxes},e=super.getConfig();return Object.assign(t,e),t}}mf.className="PReLU",Bn(mf);class gf extends bp{constructor(t){if(super(null==t?{}:t),this.DEFAULT_ALPHA=1,null==t&&(t={}),null!=t.alpha&&t.alpha!==this.DEFAULT_ALPHA)throw new vc(`Non-default alpha value (${t.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==t.alpha?this.DEFAULT_ALPHA:t.alpha}call(t,e){const n=op(t);return Ar(n)}computeOutputShape(t){return t}getConfig(){const t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}}gf.className="ELU",Bn(gf);class yf extends bp{constructor(t){super(null==t?{}:t),this.DEFAULT_THETA=1,null==t&&(t={}),this.theta=null==t.theta?this.DEFAULT_THETA:t.theta}call(t,e){const n=op(t);return n.mul(gh(n.greater(this.theta),"float32"))}computeOutputShape(t){return t}getConfig(){const t={theta:this.theta},e=super.getConfig();return Object.assign(t,e),t}}yf.className="ThresholdedReLU",Bn(yf);class bf extends bp{constructor(t){super(null==t?{}:t),this.DEFAULT_AXIS=1,null==t&&(t={}),this.softmax=(new Qd).apply,this.axis=null==t.axis?this.DEFAULT_AXIS:t.axis}call(t,e){const n=op(t);return this.softmax(n,this.axis)}computeOutputShape(t){return t}getConfig(){const t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}}function xf(t,e,n){if("number"==typeof t)return kc(t,e);if(t.length!==e)throw new wc(`The ${n} argument must be an integer or tuple of ${e} integers. Received: ${t.length} elements.`);for(let r=0;r<e;++r){const a=t[r];if((s=a)!==parseInt(s.toString(),10))throw new wc(`The ${n} argument must be an integer or tuple of ${e} integers. Received: ${JSON.stringify(t)} including a non-integer number `+a)}return t;var s}function wf(t,e,n,s,r=1){if(null==t)return t;let a;return a="same"===n?t:t-(e+(e-1)*(r-1))+1,Math.floor((a+s-1)/s)}function vf(t,e,n,s){if(null==t)return null;if("valid"===s)t=t*e+fh([n-e,0]);else{if("same"!==s)throw new wc(`Unsupport padding mode: ${s}.`);t*=e}return t}function Nf(t,e){return Xn(()=>(nh(e),"channelsFirst"===e?ln(t,[0,2,3,1]):t))}function kf(t,e){return Xn(()=>(nh(e),"channelsFirst"===e?ln(t,[0,2,3,4,1]):t))}function Cf(t,e,n,s=1,r="valid",a,i=1){return Xn(()=>{if(null==a&&(a="channelsLast"),nh(a),3!==t.shape.length)throw new wc("The input of a conv1dWithBias operation should be 3, but is "+t.shape.length+" instead.");if(3!==e.shape.length)throw new wc("The kernel for a conv1dWithBias operation should be 3, but is "+e.shape.length+" instead");if(null!=n&&1!==n.shape.length)throw new wc("The bias for a conv1dWithBias operation should be 1, but is "+e.shape.length+" instead");if("channelsFirst"===a&&(t=ln(t,[0,2,1])),"causal"===r)throw new vc("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=lr(t,e,s,"same"===r?"same":"valid","NWC",i);return null!=n&&(o=Ah(o,n)),o})}function Sf(t,e,n,s=[1,1],r="valid",a,i,o=null){return Xn(()=>{if(null==a&&(a="channelsLast"),nh(a),3!==t.rank&&4!==t.rank)throw new wc(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${t.rank}.`);if(3!==e.rank&&4!==e.rank)throw new wc(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${t.rank}.`);let l=Nf(t,a);if("causal"===r)throw new vc("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=Ao({x:l,filter:e,strides:s,pad:"same"===r?"same":"valid",dilations:i,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===a&&(l=ln(l,[0,3,1,2])),l})}function If(t,e,n,s=[1,1,1],r="valid",a,i){return Xn(()=>{if(null==a&&(a="channelsLast"),nh(a),4!==t.rank&&5!==t.rank)throw new wc("conv3dWithBias expects input to be of rank 4 or 5, but received "+t.rank+".");if(4!==e.rank&&5!==e.rank)throw new wc("conv3dWithBias expects kernel to be of rank 4 or 5, but received "+t.rank+".");let o=kf(t,a);if("causal"===r)throw new vc("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=hr(o,e,s,"same"===r?"same":"valid","NDHWC",i),null!=n&&(o=Ah(o,n)),"channelsFirst"===a&&(o=ln(o,[0,4,1,2,3])),o})}bf.className="Softmax",Bn(bf);class Ef extends bp{constructor(t,e){if(super(e),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",Ef.verifyArgs(e),this.rank=t,zc(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new vc(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=xf(e.kernelSize,t,"kernelSize"),this.strides=xf(null==e.strides?1:e.strides,t,"strides"),this.padding=null==e.padding?"valid":e.padding,sh(this.padding),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,nh(this.dataFormat),this.activation=rf(e.activation),this.useBias=null==e.useBias||e.useBias,this.biasInitializer=Qh(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=Xc(e.biasConstraint),this.biasRegularizer=pf(e.biasRegularizer),this.activityRegularizer=pf(e.activityRegularizer),this.dilationRate=xf(null==e.dilationRate?1:e.dilationRate,t,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new wc("dilationRate must be a number or an array of a single number for 1D convolution, but received "+JSON.stringify(this.dilationRate));if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new wc("dilationRate must be a number or array of two numbers for 2D convolution, but received "+JSON.stringify(this.dilationRate))}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new wc("dilationRate must be a number or array of three numbers for 3D convolution, but received "+JSON.stringify(this.dilationRate))}static verifyArgs(t){if(Cc("kernelSize"in t,"required key 'kernelSize' not in config"),"number"!=typeof t.kernelSize&&!Lc(t.kernelSize,"number",1,3))throw new wc(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(t.kernelSize)}.`)}getConfig(){const t={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:nf(this.activation),useBias:this.useBias,biasInitializer:Zh(this.biasInitializer),biasRegularizer:cf(this.biasRegularizer),activityRegularizer:cf(this.activityRegularizer),biasConstraint:qc(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}class Tf extends Ef{constructor(t,e){super(t,e),this.kernel=null,Tf.verifyArgs(e),this.filters=e.filters,zc(this.filters,"filters"),this.kernelInitializer=Qh(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=Xc(e.kernelConstraint),this.kernelRegularizer=pf(e.kernelRegularizer)}build(t){t=lp(t);const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new wc("The channel dimension of the input should be defined. Found "+t[e]);const n=t[e],s=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[e]:n}}],this.built=!0}call(t,e){return Xn(()=>{let e;t=op(t);const n=null==this.bias?null:this.bias.read(),s=Bc(this.activation.getClassName());if(null!=s&&2===this.rank)e=Sf(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,s);else{if(1===this.rank)e=Cf(t,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)e=Sf(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new vc("convolutions greater than 3D are not implemented yet.");e=If(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(e=this.activation.apply(e))}return e})}computeOutputShape(t){t=lp(t);const e=[],n="channelsLast"===this.dataFormat?t.slice(1,t.length-1):t.slice(2);for(let t=0;t<n.length;++t){const s=wf(n[t],this.kernelSize[t],this.padding,this.strides[t],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[t]);e.push(s)}let s=[t[0]];return"channelsLast"===this.dataFormat?(s=s.concat(e),s.push(this.filters)):(s.push(this.filters),s=s.concat(e)),s}getConfig(){const t={filters:this.filters,kernelInitializer:Zh(this.kernelInitializer),kernelRegularizer:cf(this.kernelRegularizer),kernelConstraint:qc(this.kernelConstraint)},e=super.getConfig();return Object.assign(t,e),t}static verifyArgs(t){if(!("filters"in t)||"number"!=typeof t.filters||t.filters<1)throw new wc("Convolution layer expected config.filters to be a 'number' > 0 but got "+JSON.stringify(t.filters))}}class Af extends Tf{constructor(t){super(2,t),Af.verifyArgs(t)}getConfig(){const t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&!Lc(t.kernelSize,"number",1,2))throw new wc(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(t.kernelSize)}.`)}}Af.className="Conv2D",Bn(Af);class $f extends Tf{constructor(t){super(3,t),$f.verifyArgs(t)}getConfig(){const t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&(!Array.isArray(t.kernelSize)||1!==t.kernelSize.length&&3!==t.kernelSize.length))throw new wc(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(t.kernelSize)}.`)}}$f.className="Conv3D",Bn($f);class Rf extends Af{constructor(t){if(super(t),this.inputSpec=[new dp({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new wc("Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode "+this.padding)}build(t){if(4!==(t=lp(t)).length)throw new wc("Input should have rank 4; Received input shape: "+JSON.stringify(t));const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new wc("The channel dimension of the inputs should be defined. Found `None`.");const n=t[e],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new dp({ndim:4,axes:{[e]:n}})],this.built=!0}call(t,e){return Xn(()=>{let e=op(t);if(4!==e.shape.length)throw new wc("Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-"+e.shape.length);const n=e.shape,s=n[0];let r,a;"channelsFirst"===this.dataFormat?(r=2,a=3):(r=1,a=2);const i=n[r],o=n[a],l=this.kernelSize[0],u=this.kernelSize[1],c=this.strides[0],h=this.strides[1],p=[s,vf(i,c,l,this.padding),vf(o,h,u,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(e=ln(e,[0,2,3,1]));let d=cr(e,this.kernel.read(),p,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(d=ln(d,[0,3,1,2])),null!=this.bias&&(d=Ah(d,this.bias.read(),this.dataFormat)),null!=this.activation&&(d=this.activation.apply(d)),d})}computeOutputShape(t){const e=(t=lp(t)).slice();let n,s,r;"channelsFirst"===this.dataFormat?(n=1,s=2,r=3):(n=3,s=1,r=2);const a=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],l=this.strides[1];return e[n]=this.filters,e[s]=vf(e[s],o,a,this.padding),e[r]=vf(e[r],l,i,this.padding),e}getConfig(){const t=super.getConfig();return delete t.dilationRate,t}}Rf.className="Conv2DTranspose",Bn(Rf);class Df extends Tf{constructor(t,e){if(super(t,e),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==e.filters)throw new wc("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=e.kernelInitializer||null!=e.kernelRegularizer||null!=e.kernelConstraint)throw new wc("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=e.padding&&"same"!==e.padding&&"valid"!==e.padding)throw new wc(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received `+JSON.stringify(e.padding));this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=Qh(e.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=pf(e.depthwiseRegularizer),this.depthwiseConstraint=Xc(e.depthwiseConstraint),this.pointwiseInitializer=Qh(e.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=pf(e.pointwiseRegularizer),this.pointwiseConstraint=Xc(e.pointwiseConstraint)}build(t){if((t=lp(t)).length<this.rank+2)throw new wc(`Inputs to SeparableConv${this.rank}D should have rank `+(this.rank+2)+", but received input shape: "+JSON.stringify(t));const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e]||t[e]<0)throw new wc("The channel dimension of the inputs should be defined, but found "+JSON.stringify(t[e]));const n=t[e],s=this.kernelSize.concat([n,this.depthMultiplier]),r=[];for(let t=0;t<this.rank;++t)r.push(1);r.push(n*this.depthMultiplier,this.filters);this.depthwiseKernel=this.addWeight("depthwise_kernel",s,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",r,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,!0,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.inputSpec=[new dp({ndim:this.rank+2,axes:{[e]:n}})],this.built=!0}call(t,e){return Xn(()=>{let e;if(t=op(t),1===this.rank)throw new vc("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(t=ln(t,[0,2,3,1])),e=wi(t,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(e=Ah(e,this.bias.read(),this.dataFormat)),null!=this.activation&&(e=this.activation.apply(e)),"channelsFirst"===this.dataFormat&&(e=ln(e,[0,3,1,2])),e})}getConfig(){const t=super.getConfig();return delete t.rank,delete t.kernelInitializer,delete t.kernelRegularizer,delete t.kernelConstraint,t.depthwiseInitializer=Zh(this.depthwiseInitializer),t.pointwiseInitializer=Zh(this.pointwiseInitializer),t.depthwiseRegularizer=cf(this.depthwiseRegularizer),t.pointwiseRegularizer=cf(this.pointwiseRegularizer),t.depthwiseConstraint=qc(this.depthwiseConstraint),t.pointwiseConstraint=qc(this.pointwiseConstraint),t}}Df.className="SeparableConv";class _f extends Df{constructor(t){super(2,t)}}_f.className="SeparableConv2D",Bn(_f);class Ff extends Tf{constructor(t){super(1,t),Ff.verifyArgs(t),this.inputSpec=[{ndim:3}]}getConfig(){const t=super.getConfig();return delete t.rank,delete t.dataFormat,t}static verifyArgs(t){if("number"!=typeof t.kernelSize&&!Lc(t.kernelSize,"number",1,1))throw new wc(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(t.kernelSize)}.`)}}Ff.className="Conv1D",Bn(Ff);class Of extends bp{constructor(t){super(t),"number"==typeof t.cropping?this.cropping=[[t.cropping,t.cropping],[t.cropping,t.cropping]]:"number"==typeof t.cropping[0]?this.cropping=[[t.cropping[0],t.cropping[0]],[t.cropping[1],t.cropping[1]]]:this.cropping=t.cropping,this.dataFormat=void 0===t.dataFormat?"channelsLast":t.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(t){return"channelsFirst"===this.dataFormat?[t[0],t[1],t[2]-this.cropping[0][0]-this.cropping[0][1],t[3]-this.cropping[1][0]-this.cropping[1][1]]:[t[0],t[1]-this.cropping[0][0]-this.cropping[0][1],t[2]-this.cropping[1][0]-this.cropping[1][1],t[3]]}call(t,e){return Xn(()=>{if(t=op(t),"channelsLast"===this.dataFormat){const e=wh(t,this.cropping[0][0],t.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return wh(e,this.cropping[1][0],t.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const e=wh(t,this.cropping[0][0],t.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return wh(e,this.cropping[1][0],t.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){const t={cropping:this.cropping,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}Of.className="Cropping2D",Bn(Of);class Mf extends bp{constructor(t){super(t),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==t.size?this.DEFAULT_SIZE:t.size,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat}computeOutputShape(t){if("channelsFirst"===this.dataFormat){const e=null==t[2]?null:this.size[0]*t[2],n=null==t[3]?null:this.size[1]*t[3];return[t[0],t[1],e,n]}{const e=null==t[1]?null:this.size[0]*t[1],n=null==t[2]?null:this.size[1]*t[2];return[t[0],e,n,t[3]]}}call(t,e){return Xn(()=>{let e=op(t);const n=e.shape;if("channelsFirst"===this.dataFormat){e=ln(e,[0,2,3,1]);const t=this.size[0]*n[2],s=this.size[1]*n[3],r=e.resizeNearestNeighbor([t,s]);return ln(r,[0,3,1,2])}{const t=this.size[0]*n[1],s=this.size[1]*n[2];return e.resizeNearestNeighbor([t,s])}})}getConfig(){const t={size:this.size,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}Mf.className="UpSampling2D",Bn(Mf);class Lf extends Ef{constructor(t){super(2,t),this.depthwiseKernel=null,this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=Qh(t.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=Xc(t.depthwiseConstraint),this.depthwiseRegularizer=pf(t.depthwiseRegularizer)}build(t){if((t=lp(t)).length<4)throw new wc(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(t)}.`);const e="channelsFirst"===this.dataFormat?1:3;if(null==t[e]||t[e]<0)throw new wc(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${t[e]}).`);const n=t[e],s=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",s,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return Xn(()=>{let e=function(t,e,n=[1,1],s="valid",r,a){return Xn(()=>{null==r&&(r="channelsLast"),nh(r);let i=Nf(t,r);if(4!==t.rank)throw new wc("Input for depthwiseConv2d is required to be 4-D, but is instead "+t.rank+"-D");if(4!==e.rank)throw new wc("depthwiseKernel is required to be 4-D, but is instead "+e.rank+"-D");return i=br(i,e,n,"same"===s?"same":"valid","NHWC",a),"channelsFirst"===r&&(i=ln(i,[0,3,1,2])),i})}(t=op(t),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(e=Ah(e,this.bias.read(),this.dataFormat)),null!=this.activation&&(e=this.activation.apply(e)),e})}computeOutputShape(t){t=lp(t);const e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2],s="channelsFirst"===this.dataFormat?t[1]*this.depthMultiplier:t[3]*this.depthMultiplier,r=wf(e,this.kernelSize[0],this.padding,this.strides[0]),a=wf(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[t[0],s,r,a]:[t[0],r,a,s]}getConfig(){const t=super.getConfig();return t.depthMultiplier=this.depthMultiplier,t.depthwiseInitializer=Zh(this.depthwiseInitializer),t.depthwiseRegularizer=cf(this.depthwiseRegularizer),t.depthwiseConstraint=qc(this.depthwiseRegularizer),t}}function zf(t,e,n,s){if(Array.isArray(t)){if(null!=e||null!=n)throw new wc("When inputs is an array, neither initialState or constants should be provided");null!=s&&(n=t.slice(t.length-s,t.length),t=t.slice(0,t.length-s)),t.length>1&&(e=t.slice(1,t.length)),t=t[0]}function r(t){return null==t||Array.isArray(t)?t:[t]}return{inputs:t,initialState:e=r(e),constants:n=r(n)}}function Bf(t,e,n,s=!1,r,a,i=!1,o=!1){return Xn(()=>{const l=e.shape.length;if(l<3)throw new wc(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(mh(2,l));if(e=ln(e,u),null!=a)throw new vc("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=r&&((r=r.asType("bool").asType("float32")).rank===l-1&&(r=Dr(r,-1)),r=ln(r,u)),s&&(e=pi(e,0),null!=r&&(r=pi(r,0)));const c=[];let h,p=n;const d=e.shape[0],f=Ki(e);let m,g;null!=r&&(m=Ki(r));for(let e=0;e<d;++e){const n=f[e],s=Xn(()=>t(n,p));if(null==r)h=s[0],p=s[1];else{const t=Xn(()=>{const t=m[e],n=_a(t).sub(t);return{output:s[0].mul(t).add(p[0].mul(n)),newStates:p.map((e,r)=>s[1][r].mul(t).add(e.mul(n)))}});h=t.output,p=t.newStates}o&&c.push(h)}if(o){g=Bi(c,1)}return[h,g,p]})}Lf.className="DepthwiseConv2D",Bn(Lf);class Pf extends bp{constructor(t){let e;if(super(t),null==t.cell)throw new wc("cell property is missing for the constructor of RNN.");if(e=Array.isArray(t.cell)?new Kf({cells:t.cell}):t.cell,null==e.stateSize)throw new wc("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=e,this.returnSequences=null!=t.returnSequences&&t.returnSequences,this.returnState=null!=t.returnState&&t.returnState,this.goBackwards=null!=t.goBackwards&&t.goBackwards,this._stateful=null!=t.stateful&&t.stateful,this.unroll=null!=t.unroll&&t.unroll,this.supportsMasking=!0,this.inputSpec=[new dp({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(null==this.states_){return mh(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map(t=>null)}return this.states_}setStates(t){this.states_=t}computeOutputShape(t){ap(t)&&(t=t[0]),t=t;let e=this.cell.stateSize;Array.isArray(e)||(e=[e]);const n=e[0];let s;if(s=this.returnSequences?[t[0],t[1],n]:[t[0],n],this.returnState){const n=[];for(const s of e)n.push([t[0],s]);return[s].concat(n)}return s}computeMask(t,e){return Xn(()=>{Array.isArray(e)&&(e=e[0]);const t=this.returnSequences?e:null;if(this.returnState){const e=this.states.map(t=>null);return[t].concat(e)}return t})}get states(){if(null==this.states_){const t=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,e=[];for(let n=0;n<t;++n)e.push(null);return e}return this.states_}set states(t){this.states_=t}build(t){if(null!=this.numConstants)throw new vc("Constants support is not implemented in RNN yet.");ap(t)&&(t=t[0]),t=t;const e=this.stateful?t[0]:null,n=t.slice(2);this.inputSpec[0]=new dp({shape:[e,null,...n]});const s=[t[0]].concat(t.slice(2));let r;if(this.cell.build(s),r=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!R(this.stateSpec.map(t=>t.shape[t.shape.length-1]),r))throw new wc(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is `+this.cell.stateSize)}else this.stateSpec=r.map(t=>new dp({shape:[null,t]}));this.stateful&&this.resetStates()}resetStates(t,e=!1){Xn(()=>{if(!this.stateful)throw new bc("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new wc("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(t=>va([n,t])):this.states_=[va([n,this.cell.stateSize])];else if(null==t)Yn(this.states_),null!=this.keptStates&&(Yn(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(t=>va([n,t])):this.states_[0]=va([n,this.cell.stateSize]);else{if(Array.isArray(t)||(t=[t]),t.length!==this.states_.length)throw new wc(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: `+t);!0===e?this.keptStates.push(this.states_.slice()):Yn(this.states_);for(let e=0;e<this.states_.length;++e){const s=t[e],r=Array.isArray(this.cell.stateSize)?this.cell.stateSize[e]:this.cell.stateSize,a=[n,r];if(!R(s.shape,a))throw new wc(`State ${e} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${s.shape}`);this.states_[e]=s}}this.states_=this.states_.map(t=>Jn(t.clone()))})}apply(t,e){let n=null==e?null:e.initialState,s=null==e?null:e.constants;null==e&&(e={});const r=zf(t,n,s,this.numConstants);t=r.inputs,n=r.initialState,s=r.constants;let a=[],i=[];if(null!=n){e.initialState=n,a=a.concat(n),this.stateSpec=[];for(const t of n)this.stateSpec.push(new dp({shape:t.shape}));i=i.concat(this.stateSpec)}if(null!=s&&(e.constants=s,a=a.concat(s),this.numConstants=s.length),a[0]instanceof fp){const n=[t].concat(a),s=this.inputSpec.concat(i),r=this.inputSpec;this.inputSpec=s;const o=super.apply(n,e);return this.inputSpec=r,o}return super.apply(t,e)}call(t,e){return Xn(()=>{const n=null==e?null:e.mask,s=null==e?null:e.training;let r=null==e?null:e.initialState;t=op(t),null==r&&(r=this.stateful?this.states_:this.getInitialState(t));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(r.length!==a)throw new wc(`RNN Layer has ${a} state(s) but was passed `+r.length+" initial state(s).");this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const i={training:s},o=Bf((t,e)=>{const n=this.cell.call([t].concat(e),i);return[n[0],n.slice(1)]},t,r,this.goBackwards,n,null,this.unroll,this.returnSequences),l=o[0],u=o[1],c=o[2];this.stateful&&this.resetStates(c,s);const h=this.returnSequences?u:l;return this.returnState?[h].concat(c):h})}getInitialState(t){return Xn(()=>{let e=va(t.shape);return e=ha(e,[1,2]),e=yh(e),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(t=>t>1?kh(e,[1,t]):e):this.cell.stateSize>1?[kh(e,[1,this.cell.stateSize])]:[e]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(t)}getConfig(){const t=super.getConfig(),e={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(e.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===Pf.className&&(e.cell={className:this.cell.getClassName(),config:n}),Object.assign({},n,t,e)}static fromConfig(t,e,n={}){const s=Dp(e.cell,n);return new t(Object.assign(e,{cell:s}))}}Pf.className="RNN",Bn(Pf);class Wf extends bp{}class Vf extends Wf{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,zc(this.units,"units"),this.activation=rf(null==t.activation?this.DEFAULT_ACTIVATION:t.activation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=Qh(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Qh(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Qh(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=pf(t.kernelRegularizer),this.recurrentRegularizer=pf(t.recurrentRegularizer),this.biasRegularizer=pf(t.biasRegularizer),this.kernelConstraint=Xc(t.kernelConstraint),this.recurrentConstraint=Xc(t.recurrentConstraint),this.biasConstraint=Xc(t.biasConstraint),this.dropout=dh([1,fh([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=dh([1,fh([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){t=lp(t),this.kernel=this.addWeight("kernel",[t[t.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return Xn(()=>{if(2!==(t=t).length)throw new wc(`SimpleRNNCell expects 2 input Tensors, got ${t.length}.`);let n=t[1];t=t[0];const s=null!=e.training&&e.training;let r;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Xf({ones:()=>_a(t),rate:this.dropout,training:s})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Xf({ones:()=>_a(n),rate:this.recurrentDropout,training:s}));const a=this.dropoutMask,i=this.recurrentDropoutMask;r=Sh(null!=a?rs(t,a):t,this.kernel.read()),null!=this.bias&&(r=Ah(r,this.bias.read())),null!=i&&(n=rs(n,i));let o=es(r,Sh(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]})}getConfig(){const t=super.getConfig(),e={units:this.units,activation:nf(this.activation),useBias:this.useBias,kernelInitializer:Zh(this.kernelInitializer),recurrentInitializer:Zh(this.recurrentInitializer),biasInitializer:Zh(this.biasInitializer),kernelRegularizer:cf(this.kernelRegularizer),recurrentRegularizer:cf(this.recurrentRegularizer),biasRegularizer:cf(this.biasRegularizer),activityRegularizer:cf(this.activityRegularizer),kernelConstraint:qc(this.kernelConstraint),recurrentConstraint:qc(this.recurrentConstraint),biasConstraint:qc(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},t,e)}}Vf.className="SimpleRNNCell",Bn(Vf);class Uf extends Pf{constructor(t){t.cell=new Vf(t),super(t)}call(t,e){return Xn(()=>{null!=this.cell.dropoutMask&&(Yn(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Yn(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,s=null==e?null:e.training,r=null==e?null:e.initialState;return super.call(t,{mask:n,training:s,initialState:r})})}static fromConfig(t,e){return new t(e)}}Uf.className="SimpleRNN",Bn(Uf);class Gf extends Wf{constructor(t){if(super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",t.resetAfter)throw new wc("GRUCell does not support reset_after parameter set to true.");this.units=t.units,zc(this.units,"units"),this.activation=rf(void 0===t.activation?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=rf(void 0===t.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=Qh(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Qh(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Qh(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=pf(t.kernelRegularizer),this.recurrentRegularizer=pf(t.recurrentRegularizer),this.biasRegularizer=pf(t.biasRegularizer),this.kernelConstraint=Xc(t.kernelConstraint),this.recurrentConstraint=Xc(t.recurrentConstraint),this.biasConstraint=Xc(t.biasConstraint),this.dropout=dh([1,fh([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=dh([1,fh([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.implementation=t.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){const e=(t=lp(t))[t.length-1];this.kernel=this.addWeight("kernel",[e,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return Xn(()=>{if(2!==(t=t).length)throw new wc("GRUCell expects 2 input Tensors (inputs, h, c), got "+t.length+".");const n=null!=e.training&&e.training;let s=t[1];t=t[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Xf({ones:()=>_a(t),rate:this.dropout,training:n,count:3})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Xf({ones:()=>_a(s),rate:this.recurrentDropout,training:n,count:3}));const r=this.dropoutMask,a=this.recurrentDropoutMask;let i,o,l;0<this.dropout&&this.dropout<1&&(t=rs(t,r[0]));let u=Sh(t,this.kernel.read());this.useBias&&(u=Ah(u,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(s=rs(s,a[0]));const c=this.recurrentKernel.read(),[h,p]=Fi(c,[2*this.units,this.units],c.rank-1),d=Sh(s,h),[f,m,g]=Fi(u,3,u.rank-1),[y,b]=Fi(d,2,d.rank-1);i=this.recurrentActivation.apply(es(f,y)),o=this.recurrentActivation.apply(es(m,b));const x=Sh(rs(o,s),p);l=this.activation.apply(es(g,x));const w=es(rs(i,s),rs(es(1,ia(i)),l));return[w,w]})}getConfig(){const t=super.getConfig(),e={units:this.units,activation:nf(this.activation),recurrentActivation:nf(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Zh(this.kernelInitializer),recurrentInitializer:Zh(this.recurrentInitializer),biasInitializer:Zh(this.biasInitializer),kernelRegularizer:cf(this.kernelRegularizer),recurrentRegularizer:cf(this.recurrentRegularizer),biasRegularizer:cf(this.biasRegularizer),activityRegularizer:cf(this.activityRegularizer),kernelConstraint:qc(this.kernelConstraint),recurrentConstraint:qc(this.recurrentConstraint),biasConstraint:qc(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},t,e)}}Gf.className="GRUCell",Bn(Gf);class Hf extends Pf{constructor(t){0===t.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new Gf(t),super(t)}call(t,e){return Xn(()=>{null!=this.cell.dropoutMask&&(Yn(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Yn(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,s=null==e?null:e.training,r=null==e?null:e.initialState;return super.call(t,{mask:n,training:s,initialState:r})})}static fromConfig(t,e){return 0===e.implmentation&&(e.implementation=1),new t(e)}}Hf.className="GRU",Bn(Hf);class jf extends Wf{constructor(t){super(t),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=t.units,zc(this.units,"units"),this.activation=rf(void 0===t.activation?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=rf(void 0===t.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=Qh(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Qh(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Qh(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=t.unitForgetBias,this.kernelRegularizer=pf(t.kernelRegularizer),this.recurrentRegularizer=pf(t.recurrentRegularizer),this.biasRegularizer=pf(t.biasRegularizer),this.kernelConstraint=Xc(t.kernelConstraint),this.recurrentConstraint=Xc(t.recurrentConstraint),this.biasConstraint=Xc(t.biasConstraint),this.dropout=dh([1,fh([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=dh([1,fh([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.implementation=t.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){var e;const n=(t=lp(t))[t.length-1];let s;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const t=this.biasInitializer,n=this.units;s=new((e=class extends Fh{apply(e,s){const r=t.apply([n]),a=(new Mh).apply([n]),i=t.apply([2*n]);return Nh(Nh(r,a),i)}}).className="CustomInit",e)}else s=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,s,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(t,e){return Xn(()=>{const n=null!=e.training&&e.training;if(3!==(t=t).length)throw new wc("LSTMCell expects 3 input Tensors (inputs, h, c), got "+t.length+".");let s=t[1];const r=t[2];t=t[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Xf({ones:()=>_a(t),rate:this.dropout,training:n,count:4})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Xf({ones:()=>_a(s),rate:this.recurrentDropout,training:n,count:4}));const a=this.dropoutMask,i=this.recurrentDropoutMask;let o,l,u,c;0<this.dropout&&this.dropout<1&&(t=rs(t,a[0]));let h=Sh(t,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(s=rs(s,i[0])),h=es(h,Sh(s,this.recurrentKernel.read())),this.useBias&&(h=Ah(h,this.bias.read()));const[p,d,f,m]=Fi(h,4,h.rank-1);o=this.recurrentActivation.apply(p),l=this.recurrentActivation.apply(d),u=es(rs(l,r),rs(o,this.activation.apply(f))),c=this.recurrentActivation.apply(m);const g=rs(c,this.activation.apply(u));return[g,g,u]})}getConfig(){const t=super.getConfig(),e={units:this.units,activation:nf(this.activation),recurrentActivation:nf(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Zh(this.kernelInitializer),recurrentInitializer:Zh(this.recurrentInitializer),biasInitializer:Zh(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:cf(this.kernelRegularizer),recurrentRegularizer:cf(this.recurrentRegularizer),biasRegularizer:cf(this.biasRegularizer),activityRegularizer:cf(this.activityRegularizer),kernelConstraint:qc(this.kernelConstraint),recurrentConstraint:qc(this.recurrentConstraint),biasConstraint:qc(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},t,e)}}jf.className="LSTMCell",Bn(jf);class qf extends Pf{constructor(t){0===t.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),t.cell=new jf(t),super(t)}call(t,e){return Xn(()=>{null!=this.cell.dropoutMask&&(Yn(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Yn(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,s=null==e?null:e.training,r=null==e?null:e.initialState;return super.call(t,{mask:n,training:s,initialState:r})})}static fromConfig(t,e){return 0===e.implmentation&&(e.implementation=1),new t(e)}}qf.className="LSTM",Bn(qf);class Kf extends Wf{constructor(t){super(t),this.cells=t.cells}get stateSize(){const t=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?t.push(...e.stateSize):t.push(e.stateSize);return t}call(t,e){return Xn(()=>{let n=(t=t).slice(1);const s=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?s.push(n.splice(0,t.stateSize.length)):s.push(n.splice(0,1));s.reverse();const r=[];let a;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];n=s[i],a=0===i?[t[0]].concat(n):[a[0]].concat(n),a=o.call(a,e),r.push(a.slice(1))}n=[];for(const t of r.slice().reverse())n.push(...t);return[a[0]].concat(n)})}build(t){let e;ap(t)&&(t=t[0]),t=t,this.cells.forEach((n,s)=>{ih("RNNCell_"+s,()=>{n.build(t),e=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,t=[t[0],e]})}),this.built=!0}getConfig(){const t=super.getConfig(),e={cells:this.cells.map(t=>({className:t.getClassName(),config:t.getConfig()}))};return Object.assign({},t,e)}static fromConfig(t,e,n={}){const s=[];for(const t of e.cells)s.push(Dp(t,n));return new t({cells:s})}get trainableWeights(){if(!this.trainable)return[];const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.cells)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e.concat(t)}return t}getWeights(){const t=[];for(const e of this.cells)t.push(...e.weights);return hp(t)}setWeights(t){const e=[];for(const n of this.cells){const s=n.weights.length,r=t.splice(s);for(let t=0;t<n.weights.length;++t)e.push([n.weights[t],r[t]])}pp(e)}}function Xf(t){const{ones:e,rate:n,training:s=!1,count:r=1}=t,a=()=>$h(e(),n),i=()=>Rh(a,e,s);return!r||r<=1?Jn(i().clone()):Array(r).fill(void 0).map(i).map(t=>Jn(t.clone()))}Kf.className="StackedRNNCells",Bn(Kf);var Yf=function(t,e){var n={};for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&e.indexOf(s)<0&&(n[s]=t[s]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(s=Object.getOwnPropertySymbols(t);r<s.length;r++)e.indexOf(s[r])<0&&Object.prototype.propertyIsEnumerable.call(t,s[r])&&(n[s[r]]=t[s[r]])}return n};class Jf extends Pf{constructor(t){if(t.unroll)throw new vc("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(t.cell))throw new vc("It is not possible at the moment to stack convolutional cells.");super(t),this.inputSpec=[new dp({ndim:5})]}call(t,e){return Xn(()=>{if(null!=this.cell.dropoutMask&&(Yn(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Yn(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),e&&e.constants)throw new wc("ConvRNN2D cell does not support constants");const n=null==e?null:e.mask,s=null==e?null:e.training,r=null==e?null:e.initialState;return super.call(t,{mask:n,training:s,initialState:r})})}computeOutputShape(t){let e=this.computeSingleOutputShape(t);return this.returnSequences||(e=[e[0],...e.slice(2)]),this.returnState&&(e=[e,...Array(2).fill([t[0],...e.slice(-3)])]),e}getInitialState(t){return Xn(()=>{const{stateSize:e}=this.cell,n=t.shape,s=this.computeSingleOutputShape(n),r=va([s[0],...s.slice(2)]);return Array.isArray(e)?Array(e.length).fill(r):[r]})}resetStates(t,e=!1){Xn(()=>{if(!this.stateful)throw new bc("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,s=this.computeSingleOutputShape(n),r=[s[0],...s.slice(2)];if(null==n[0])throw new wc("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>va(r)):this.states_=[va(r)];else if(null==t)Yn(this.states_),null!=this.keptStates&&(Yn(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>va(r)):this.states_[0]=va(r);else{if(Array.isArray(t)||(t=[t]),t.length!==this.states_.length)throw new wc(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: `+t);e?this.keptStates.push(this.states_.slice()):Yn(this.states_);for(let e=0;e<this.states_.length;++e){const n=t[e],s=r;if(!R(n.shape,s))throw new wc(`State ${e} is incompatible with layer ${this.name}: expected shape=${s}, received shape=${n.shape}`);this.states_[e]=n}}this.states_=this.states_.map(t=>Jn(t.clone()))})}computeSingleOutputShape(t){const{dataFormat:e,filters:n,kernelSize:s,padding:r,strides:a,dilationRate:i}=this.cell,o="channelsFirst"===e,l=t[o?3:2],u=t[o?4:3],c=wf(l,s[0],r,a[0],i[0]),h=wf(u,s[1],r,a[1],i[1]);return[...t.slice(0,2),...o?[n,c,h]:[c,h,n]]}}Jf.className="ConvRNN2D";class Zf extends jf{constructor(t){const{filters:e,kernelSize:n,strides:s,padding:r,dataFormat:a,dilationRate:i}=t;super(Object.assign({},t,{units:e})),this.filters=e,zc(this.filters,"filters"),this.kernelSize=xf(n,2,"kernelSize"),this.kernelSize.forEach(t=>zc(t,"kernelSize")),this.strides=xf(s||1,2,"strides"),this.strides.forEach(t=>zc(t,"strides")),this.padding=r||"valid",sh(this.padding),this.dataFormat=a||"channelsLast",nh(this.dataFormat),this.dilationRate=xf(i||1,2,"dilationRate"),this.dilationRate.forEach(t=>zc(t,"dilationRate"))}build(t){var e;t=lp(t);const n="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[n])throw new wc("The channel dimension of the input should be defined. Found "+t[n]);const s=t[n],r=this.kernelSize.concat([s,4*this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const a=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",a,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let t;if(this.unitForgetBias){const n=this.biasInitializer,s=this.filters;t=new((e=class extends Fh{apply(t,e){return vh([n.apply([s]),Na([s]),n.apply([2*s])])}}).className="CustomInit",e)}else t=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,t,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(t,e){return Xn(()=>{if(3!==t.length)throw new wc("ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got "+t.length+".");const n=e.training||!1,s=t[0],r=t[1],a=t[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Xf({ones:()=>_a(s),rate:this.dropout,training:n,count:4}));const i=this.dropoutMask,o=(t,e,n)=>e&&e[n]?rs(e[n],t):t;let l=o(s,i,0),u=o(s,i,1),c=o(s,i,2),h=o(s,i,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Xf({ones:()=>_a(r),rate:this.recurrentDropout,training:n,count:4}));const p=this.recurrentDropoutMask;let d=o(r,p,0),f=o(r,p,1),m=o(r,p,2),g=o(r,p,3);const[y,b,x,w]=Fi(this.kernel.read(),4,3),[v,N,k,C]=this.useBias?Fi(this.bias.read(),4):[null,null,null,null];l=this.inputConv(l,y,v,this.padding),u=this.inputConv(u,b,N,this.padding),c=this.inputConv(c,x,k,this.padding),h=this.inputConv(h,w,C,this.padding);const[S,I,E,T]=Fi(this.recurrentKernel.read(),4,3);d=this.recurrentConv(d,S),f=this.recurrentConv(f,I),m=this.recurrentConv(m,E),g=this.recurrentConv(g,T);const A=this.recurrentActivation.apply(es(l,d)),$=this.recurrentActivation.apply(es(u,f)),R=es(rs($,a),rs(A,this.activation.apply(es(c,m)))),D=rs(this.recurrentActivation.apply(es(h,g)),this.activation.apply(R));return[D,D,R]})}getConfig(){const t=super.getConfig(),{units:e}=t,n=Yf(t,["units"]),s={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign({},n,s)}inputConv(t,e,n,s){const r=or(t,e,this.strides,s||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?Ah(r,n,this.dataFormat):r}recurrentConv(t,e){return or(t,e,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}Zf.className="ConvLSTM2DCell",Bn(Zf);class Qf extends Jf{constructor(t){const e=new Zf(t);super(Object.assign({},t,{cell:e}))}static fromConfig(t,e){return new t(e)}}Qf.className="ConvLSTM2D",Bn(Qf);class tm extends bp{constructor(t){super(t),this.rate=Math.max(Math.min(t.rate,1),0),this.noiseShape=t.noiseShape,this.seed=t.seed,this.supportsMasking=!0}getNoiseShape(t){if(null==this.noiseShape)return this.noiseShape;const e=t.shape,n=[];for(let t=0;t<this.noiseShape.length;++t)n.push(null==this.noiseShape[t]?e[t]:this.noiseShape[t]);return n}call(t,e){return Xn(()=>{this.invokeCallHook(t,e);const n=op(t);if(0<this.rate&&this.rate<1){const t=null!=e.training&&e.training,s=this.getNoiseShape(n);return Rh(()=>$h(n,this.rate,s,this.seed),()=>n,t)}return t})}getConfig(){const t={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},e=super.getConfig();return Object.assign(t,e),t}dispose(){return super.dispose()}}tm.className="Dropout",Bn(tm);class em extends tm{constructor(t){super(t),this.inputSpec=[{ndim:3}]}getNoiseShape(t){const e=t.shape;return[e[0],1,e[2]]}}em.className="SpatialDropout1D",Bn(em);class nm extends bp{constructor(t){if(super(t),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==t.batchInputShape&&null==t.inputShape&&null!=t.inputDim){let e=null;null!=t.batchSize&&(e=t.batchSize),this.batchInputShape=[e,t.inputDim]}this.units=t.units,zc(this.units,"units"),this.activation=rf(t.activation),null!=t.useBias&&(this.useBias=t.useBias),this.kernelInitializer=Qh(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=Qh(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=Xc(t.kernelConstraint),this.biasConstraint=Xc(t.biasConstraint),this.kernelRegularizer=pf(t.kernelRegularizer),this.biasRegularizer=pf(t.biasRegularizer),this.activityRegularizer=pf(t.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(t){const e=(t=lp(t))[t.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[e,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:e}}],this.built=!0}computeOutputShape(t){const e=(t=lp(t)).slice();return e[e.length-1]=this.units,e}call(t,e){return Xn(()=>{this.invokeCallHook(t,e);const n=op(t),s=Bc(this.activation.getClassName());let r;return null!=s?r=Sh(n,this.kernel.read(),s,this.bias?this.bias.read():null):(r=Sh(n,this.kernel.read()),null!=this.bias&&(r=Ah(r,this.bias.read())),null!=this.activation&&(r=this.activation.apply(r))),r})}getConfig(){const t={units:this.units,activation:nf(this.activation),useBias:this.useBias,kernelInitializer:Zh(this.kernelInitializer),biasInitializer:Zh(this.biasInitializer),kernelRegularizer:cf(this.kernelRegularizer),biasRegularizer:cf(this.biasRegularizer),activityRegularizer:cf(this.activityRegularizer),kernelConstraint:qc(this.kernelConstraint),biasConstraint:qc(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}nm.className="Dense",Bn(nm);class sm extends bp{constructor(t){super(t=t||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=t.dataFormat}computeOutputShape(t){t=lp(t);for(const e of t.slice(1))if(null==e)throw new wc(`The shape of the input to "Flatten" is not fully defined (got ${t.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[t[0],hh(t,1)]}call(t,e){return Xn(()=>{this.invokeCallHook(t,e);let n=op(t);if("channelsFirst"===this.dataFormat&&n.rank>1){const t=[0];for(let e=2;e<n.rank;++e)t.push(e);t.push(1),n=n.transpose(t)}return function(t){if(t.rank<=1)throw new wc(`batchFlatten requires a minimum rank of 2. Got rank: ${t.rank}.`);const e=[t.shape[0],hh(t.shape,1)];return t.reshape(e)}(n)})}getConfig(){const t={};null!=this.dataFormat&&(t.dataFormat=this.dataFormat);const e=super.getConfig();return Object.assign(t,e),t}}sm.className="Flatten",Bn(sm);class rm extends bp{constructor(t){super(t),this.supportsMasking=!0,this.activation=rf(t.activation)}call(t,e){return Xn(()=>{this.invokeCallHook(t,e);const n=op(t);return this.activation.apply(n)})}getConfig(){const t={activation:nf(this.activation)},e=super.getConfig();return Object.assign(t,e),t}}rm.className="Activation",Bn(rm);class am extends bp{constructor(t){super(t),this.n=t.n,this.inputSpec=[{ndim:2}]}computeOutputShape(t){return[t[0],this.n,t[1]]}call(t,e){return Xn(()=>{return t=op(t),e=t,n=this.n,Xn(()=>{if(2!==e.shape.length)throw new wc(`repeat() expects a rank-2 tensor, but received a rank-${e.shape.length} tensor.`);return kh(yh(e,1),[1,n,1])});var e,n})}getConfig(){const t={n:this.n},e=super.getConfig();return Object.assign(t,e),t}}am.className="RepeatVector",Bn(am);class im extends bp{constructor(t){super(t),this.targetShape=t.targetShape;for(let t=0;t<this.targetShape.length;++t)this.isUnknown(this.targetShape[t])&&(this.targetShape[t]=null)}isUnknown(t){return t<0||null==t}fixUnknownDimension(t,e){const n="Total size of new array must be unchanged.",s=e.slice();let r=1,a=null;for(let t=0;t<s.length;++t){const e=s[t];if(this.isUnknown(e)){if(null!==a)throw new wc("Can only specifiy one unknown dimension.");a=t}else r*=e}const i=hh(t);if(null!==a){if(0===r||i%r!=0)throw new wc(n);s[a]=i/r}else if(i!==r)throw new wc(n);return s}computeOutputShape(t){let e=!1;for(let n=0;n<t.length;++n)if(this.isUnknown(t[n])){e=!0;break}return e?t.slice(0,1).concat(this.targetShape):t.slice(0,1).concat(this.fixUnknownDimension(t.slice(1),this.targetShape))}call(t,e){return Xn(()=>{this.invokeCallHook(t,e);const n=op(t),s=n.shape,r=s.slice(0,1).concat(this.fixUnknownDimension(s.slice(1),this.targetShape));return n.reshape(r)})}getConfig(){const t={targetShape:this.targetShape},e=super.getConfig();return Object.assign(t,e),t}}im.className="Reshape",Bn(im);class om extends bp{constructor(t){if(super(t),null==t.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(t.dims))throw new Error("Permute constructor requires `dims` to be an Array, but received "+t.dims+" instead.");const e=mh(1,t.dims.length+1);if(!R(t.dims.slice().sort(),e))throw new Error("Invalid permutation `dims`: "+JSON.stringify(t.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=t.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new dp({ndim:this.dims.length+1})]}computeOutputShape(t){const e=(t=lp(t)).slice();return this.dims.forEach((n,s)=>{e[s+1]=t[n]}),e}call(t,e){return ln(op(t),this.dimsIncludingBatch)}getConfig(){const t={dims:this.dims},e=super.getConfig();return Object.assign(t,e),t}}om.className="Permute",Bn(om);class lm extends bp{constructor(t){super(null==t?{}:t),this.supportsMasking=!0,this.maskValue=null!=t?null==t.maskValue?0:t.maskValue:0}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={maskValue:this.maskValue};return Object.assign(e,t),e}computeMask(t,e){const n=op(t);return bs(Ra(n,this.maskValue),-1)}call(t,e){return Xn(()=>{this.invokeCallHook(t,e);const n=op(t),s=bs(Ra(n,this.maskValue),-1,!0);return n.mul(s.asType(n.dtype))})}}lm.className="Masking",Bn(lm);class um extends bp{constructor(t){if(super(t),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==t.batchInputShape&&null==t.inputShape){let e=null;null!=t.batchSize&&(e=t.batchSize),null==t.inputLength?this.batchInputShape=[e,null]:this.batchInputShape=[e].concat(Ec(t.inputLength))}this.inputDim=t.inputDim,zc(this.inputDim,"inputDim"),this.outputDim=t.outputDim,zc(this.outputDim,"outputDim"),this.embeddingsInitializer=Qh(t.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=pf(t.embeddingsRegularizer),this.activityRegularizer=pf(t.activityRegularizer),this.embeddingsConstraint=Xc(t.embeddingsConstraint),this.maskZero=t.maskZero,this.supportsMasking=t.maskZero,this.inputLength=t.inputLength}build(t){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(t){}computeMask(t,e){return Xn(()=>this.maskZero?(t=op(t),Ra(t,Ir(t))):null)}computeOutputShape(t){if(t=lp(t),null==this.inputLength)return[...t,this.outputDim];const e=Ec(this.inputLength);if(e.length!==t.length-1)throw new wc(`"inputLength" is ${this.inputLength}, but received input shape has shape `+t);{let n=0;for(let s=0;s<e.length;++s){const r=e[s],a=t[s+1];if(null!=r&&null!=a&&r!==a)throw new wc(`"inputLength" is ${this.inputLength}, but received input shape has shape `+t);null==r&&(e[n]=a),n++}}return[t[0],...e,this.outputDim]}call(t,e){return Xn(()=>{this.invokeCallHook(t,e);let n=op(t);return"int32"!==n.dtype&&(n=gh(n,"int32")),Ih(this.embeddings.read(),n.as1D()).reshape(lp(this.computeOutputShape(n.shape)))})}getConfig(){const t={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:Zh(this.embeddingsInitializer),embeddingsRegularizer:cf(this.embeddingsRegularizer),activityRegularizer:cf(this.activityRegularizer),embeddingsConstraint:qc(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},e=super.getConfig();return Object.assign(t,e),t}}um.className="Embedding",Bn(um);class cm extends bp{constructor(t){super(t||{}),this.supportsMasking=!0}mergeFunction(t){throw new vc}computeElementwiseOpOutputShape(t,e){if(null==t||null==e)return null;if(t.length<e.length)return this.computeElementwiseOpOutputShape(e,t);if(0===e.length)return t;const n=t.slice(0,t.length-e.length);for(let s=0;s<e.length;++s){const r=t[t.length-e.length+s],a=e[s];if(null==r||null==a||r<0||a<0)n.push(null);else if(1===r)n.push(a);else if(1===a)n.push(r);else{if(r!==a)throw new wc("Operands could not be broadcast together with shapes "+JSON.stringify(t)+" "+JSON.stringify(e));n.push(r)}}return n}build(t){if(Array.isArray(t)&&!Array.isArray(t[0])&&(t=[lp(t)]),(t=t).length<2)throw new wc(`A merge layer should be called on an Array of at least 2 inputs. Got ${t.length} input(s).`);let e=[];for(const n of t)null!=n&&null!==n[0]&&e.push(n[0]);if(e=Fc(e),e.length>1)throw new wc(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(t)}.`);let n=null==t[0]?null:t[0].slice(1);for(let e=1;e<t.length;++e){const s=null==t[e]?null:t[e].slice(1);n=this.computeElementwiseOpOutputShape(n,s)}const s=t.map(t=>t.length);-1===t.indexOf(null)&&1===Fc(s).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(t,e){return Xn(()=>{if(t=t,this.reshapeRequired){const e=[],n=t.map(t=>t.rank);if(-1===n.indexOf(null)){const s=fh(n);for(let n of t){const t=n.rank;for(let e=0;e<s-t;++e)n=yh(n,1);e.push(n)}return this.mergeFunction(e)}{let n=!1;for(const s of t){const t=s.rank;if(null==t){const t=s.shape,r=t[0],a=t.slice(1).concat([r]);let i=s.reshape([r].concat(hh(t.slice(1))));i=ln(i,[1,0]),i=i.reshape(a),e.push(i),n=!0}else if(t>1){const r=mh(1,t).concat([0]);e.push(ln(s,r)),n=!0}else e.push(s)}let s=this.mergeFunction(e);const r=s.rank;if(n)if(null==r){const t=s.shape,e=t[t.length-1],n=[e].concat(t.slice(0,t.length-1));s=ln(s.reshape([-1,e]),[1,0]).reshape(n)}else if(r>1){const t=[r-1].concat(mh(0,r-1));s=ln(s,t)}return s}}return this.mergeFunction(t)})}computeOutputShape(t){let e;e=null==(t=t)[0]?null:t[0].slice(1);for(let n=1;n<t.length;++n){const s=null==t[n]?null:t[n].slice(1);e=this.computeElementwiseOpOutputShape(e,s)}let n=[];for(const e of t)null!=e&&null!==e[0]&&n.push(e[0]);return n=Fc(n),e=1===n.length?n.concat(e):[null].concat(e),e}computeMask(t,e){return Xn(()=>{if(null==e)return null;if(!Array.isArray(e))throw new wc("`mask` should be an Array");if(!Array.isArray(t))throw new wc("`inputs` should be an Array");if(e.length!==t.length)throw new wc(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${t.length} vs ${e.length})`);if(e.every(t=>null==t))return null;let n=(e=e.map(t=>null==t?t:Dr(t,0)))[0];for(let t=1;t<e.length-1;++t)n=fa(n,e[t]);return n})}}class hm extends cm{constructor(t){super(t)}mergeFunction(t){return Xn(()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=es(e,t[n]);return e})}}hm.className="Add",Bn(hm);class pm extends cm{constructor(t){super(t)}mergeFunction(t){return Xn(()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=rs(e,t[n]);return e})}}pm.className="Multiply",Bn(pm);class dm extends cm{constructor(t){super(t)}mergeFunction(t){return Xn(()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=es(e,t[n]);return rs(1/t.length,e)})}}dm.className="Average",Bn(dm);class fm extends cm{constructor(t){super(t)}mergeFunction(t){return Xn(()=>{let e=t[0];for(let n=1;n<t.length;++n)e=Kr(e,t[n]);return e})}}fm.className="Maximum",Bn(fm);class mm extends cm{constructor(t){super(t)}mergeFunction(t){return Xn(()=>{let e=t[0];for(let n=1;n<t.length;++n)e=Sa(e,t[n]);return e})}}mm.className="Minimum",Bn(mm);class gm extends cm{constructor(t){super(t),this.DEFAULT_AXIS=-1,null==t&&(t={}),this.axis=null==t.axis?this.DEFAULT_AXIS:t.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){if(!Array.isArray(t)||!Array.isArray(t[0])||1===t.length)throw new wc("A `Concatenate` layer should be called on a list of at least 2 inputs");t=t;let e=!0;for(const n of t)if(null!=n){e=!1;break}if(e)return;const n=[];for(let e=0;e<t.length;++e){const s=t[e].slice();s.splice(this.axis,1);let r=!1;for(const t of n)if(R(t,s)){r=!0;break}r||n.push(s)}if(n.length>1)throw new wc("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(t))}mergeFunction(t){return Xn(()=>vh(t,this.axis))}computeOutputShape(t){if(!Array.isArray(t)||!Array.isArray(t[0]))throw new wc("A `Concatenate` layer should be called on a list of inputs.");const e=t,n=e[0].slice(),s=this.axis<0?n.length+this.axis:this.axis;for(const t of e.slice(1)){if(null==n[s]||null==t[s]){n[s]=null;break}n[s]+=t[s]}return n}computeMask(t,e){if(null==e)return null;if(!Array.isArray(e))throw new wc("`mask` should be an array for Concatenate");if(!Array.isArray(t))throw new wc("`inputs` should be an array for Concatenate");if(e.length!==t.length)throw new wc(`Mismatch in the length of mask (${e.length}) and the legnth of inputs (${t.length})`);return Xn(()=>{let n=!0;if(e.forEach(t=>{null==t||(n=!1)}),n)return null;const s=[];for(let n=0;n<t.length;++n)null==e[n]?s.push(_a(t[n]).asType("bool")):e[n].rank<t[n].rank?s.push(Dr(e[n],-1)):s.push(e[n]);const r=Us(s,this.axis);return ys(r,-1,!1)})}getConfig(){const t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}}function ym(t,e){for(;t<0;)t+=e;return t}gm.className="Concatenate",Bn(gm);class bm extends cm{constructor(t){super(t),this.axes=t.axes,this.normalize=null!=t.normalize&&t.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){I(Array.isArray(t)&&2===t.length&&Array.isArray(t[0])&&Array.isArray(t[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const e=t[0],n=t[1];if(e.length>3||n.length>3)throw new vc("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(e,n);if(e[s[0]]!==n[s[1]])throw new wc(`Dimension incompatibility: ${e[s[0]]} !== ${n[s[1]]}`)}mergeFunction(t){if(2!==t.length)throw new wc(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${t.length} input(s).`);let e,n=t[0],s=t[1];return e=Array.isArray(this.axes)?this.axes.map((e,n)=>ym(e,t[n].shape.length)):[ym(this.axes,n.shape.length),ym(this.axes,s.shape.length)],this.normalize&&(n=_p(n,e[0]),s=_p(s,e[1])),function(t,e,n){if(t.shape.length>3||e.shape.length>3)throw new vc("batchDot is not implemented for tensors of 4D or higher rank yet");if(I(t.shape.length>=2,()=>"batchDot requires the rank of x to be >= 2, but got "+t.shape.length),I(t.shape.length>=2,()=>"batchDot requires the rank of y to be >= 2, but got "+e.shape.length),"number"==typeof n&&(n=[n,n]),"complex64"===t.dtype||"complex64"===e.dtype)throw new vc("batchDot is not implemented for complex64-type Tensors yet.");const s=t.shape.length,r=e.shape.length;null==n&&(n=[s-1,r-2]);const a=n;return Xn(()=>{let n,i;if(s>r){n=s-r;const t=[];for(let e=0;e<n;++e)t.push(1);e=e.reshape(e.shape.concat(t))}else if(r>s){n=r-s;const e=[];for(let t=0;t<n;++t)e.push(1);t=t.reshape(t.shape.concat(e))}else n=0;if(2===t.shape.length&&2===e.shape.length)i=a[0]===a[1]?t.mul(e).sum(a[0]):t.transpose([1,0]).mul(e).sum(a[1]);else{const n=a[0]!==t.shape.length-1,s=a[1]===e.shape.length-1;i=t.matMul(e,n,s)}if(n>0){let t;t=s>r?s+r-3:s-1;const e=[];for(let s=t;s<t+n;++s)e.push(s);i=i.squeeze(e)}return 1===i.shape.length&&(i=i.expandDims(1)),i})}(n,s,e)}interpretAxes(t,e){let n;return n=Array.isArray(this.axes)?this.axes:[ym(this.axes,t.length),ym(this.axes,e.length)],n}computeOutputShape(t){I(Array.isArray(t)&&2===t.length&&Array.isArray(t[0])&&Array.isArray(t[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const e=t[0].slice(),n=t[1].slice();if(e.length>3||n.length>3)throw new vc("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(e,n);e.splice(s[0],1),n.splice(s[1],1),n.splice(0,1);const r=e.concat(n);return 1===r.length&&r.push(1),r}computeMask(t,e){return null}getConfig(){const t={axes:this.axes,normalize:this.normalize},e=super.getConfig();return Object.assign(t,e),t}}bm.className="Dot",Bn(bm);class xm extends bp{constructor(t){super(t),this.supportsMasking=!0,this.stddev=t.stddev}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={stddev:this.stddev};return Object.assign(e,t),e}call(t,e){return Xn(()=>{this.invokeCallHook(t,e);const n=op(t);return Rh(()=>Ch(n.shape,0,this.stddev).add(n),()=>n,e.training||!1)})}}xm.className="GaussianNoise",Bn(xm);class wm extends bp{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return Xn(()=>{this.invokeCallHook(t,e);const n=op(t);if(this.rate>0&&this.rate<1){return Rh(()=>{const t=Math.sqrt(this.rate/(1-this.rate));return n.mul(Ch(n.shape,1,t))},()=>n,e.training||!1)}return n})}}wm.className="GaussianDropout",Bn(wm);class vm extends bp{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate,this.noiseShape=t.noiseShape}_getNoiseShape(t){return this.noiseShape||op(t).shape}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return Xn(()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(t);return Rh(()=>{const e=op(t),s=-1.7580993408473766;let r=Ur(ii(n),this.rate);r=gh(r,"float32");const a=((1-this.rate)*(1+this.rate*s**2))**-.5,i=-a*s*this.rate;return e.mul(r).add(r.add(-1).mul(s)).mul(a).add(i)},()=>op(t),e.training||!1)}return t})}}function Nm(t,e,n,s,r,a=.001){let i;if(2===t.rank)i=Js(t,e,n,s,r,a);else if(3===t.rank)i=Zs(t,e,n,s,r,a);else{if(4!==t.rank)throw new vc(`batchNormalization is not implemented for array of rank ${t.rank} yet`);i=Qs(t,e,n,s,r,a)}return i}function km(t,e,n,s,r=.001){return R(s.slice().sort(),mh(0,t.rank-1))?function(t,e,n,s,r=.001){return Xn(()=>{const a=Ta(t,s),i=a.mean,o=a.variance;return[Nm(t,i,o,n,e,r),i,o]})}(t,e,n,s,r):function(t,e,n,s,r=.001){return Xn(()=>{const a=Ta(t,s),i=a.mean,o=a.variance,l=[];for(const e of mh(0,t.rank))-1!==s.indexOf(e)?l.push(1):l.push(t.shape[e]);const u=i.reshape(l),c=o.reshape(l),h=null==e?null:e.reshape(l),p=null==n?null:n.reshape(l);return[Nm(t,u,c,p,h,r),i,o]})}(t,e,n,s,r)}vm.className="AlphaDropout",Bn(vm);class Cm extends bp{constructor(t){null==t&&(t={}),super(t),this.supportsMasking=!0,this.axis=null==t.axis?-1:t.axis,this.momentum=null==t.momentum?.99:t.momentum,this.epsilon=null==t.epsilon?.001:t.epsilon,this.center=null==t.center||t.center,this.scale=null==t.scale||t.scale,this.betaInitializer=Qh(t.betaInitializer||"zeros"),this.gammaInitializer=Qh(t.gammaInitializer||"ones"),this.movingMeanInitializer=Qh(t.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=Qh(t.movingVarianceInitializer||"ones"),this.betaConstraint=Xc(t.betaConstraint),this.gammaConstraint=Xc(t.gammaConstraint),this.betaRegularizer=pf(t.betaRegularizer),this.gammaRegularizer=pf(t.gammaRegularizer)}build(t){t=lp(t);const e=this.axis>=0?this.axis:this.axis+t.length,n=t[e];if(null==n)throw new wc(`Axis ${e} of input tensor should have a defined dimension but the layer received an input with shape `+JSON.stringify(t)+".");this.inputSpec=[new dp({ndim:t.length,axes:{[e]:n}})];const s=[n];this.scale&&(this.gamma=this.addWeight("gamma",s,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",s,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",s,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",s,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(t,e){return Xn(()=>{const n=null!=e.training&&e.training,s=op(t),r=s.shape,a=r.length,i=mh(0,a),o=this.axis>=0?this.axis:this.axis+a;i.splice(o,1);const l=kc(1,a);l[o]=r[o];const u=i.slice();u.sort();const c=!R(u,mh(0,a).slice(0,a-1));if(!n)return(()=>{if(c){const t=this.movingMean.read().reshape(l),e=this.movingVariance.read().reshape(l),n=this.center?this.beta.read().reshape(l):null,r=this.scale?this.gamma.read().reshape(l):null;return Nm(s,t,e,n,r,this.epsilon)}return Nm(s,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[h,p,d]=km(s,this.gamma.read(),this.beta.read(),i,this.epsilon),f=(t,e,n)=>{Xn(()=>{const s=1-n,r=t.read(),a=r.sub(e).mul(s);t.write(r.sub(a))})};return(()=>{f(this.movingMean,p,this.momentum),f(this.movingVariance,d,this.momentum)})(),h})}getConfig(){const t={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Zh(this.betaInitializer),gammaInitializer:Zh(this.gammaInitializer),movingMeanInitializer:Zh(this.movingMeanInitializer),movingVarianceInitializer:Zh(this.movingVarianceInitializer),betaRegularizer:cf(this.betaRegularizer),gammaRegularizer:cf(this.gammaRegularizer),betaConstraint:qc(this.betaConstraint),gammaConstraint:qc(this.gammaConstraint)},e=super.getConfig();return Object.assign(t,e),t}}Cm.className="BatchNormalization",Bn(Cm);class Sm extends bp{constructor(t){if(null==t&&(t={}),super(t),this.axis=null==t.axis?-1:t.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error("Expected axis to be an integer, but received "+this.axis)}else{if(!Array.isArray(this.axis))throw new Error("Expected axis to be an integer or an array of integers, but received "+JSON.stringify(this.axis));for(const t of this.axis)if(!Number.isInteger(t))throw new Error("Expected axis to be an array of integers, but received "+JSON.stringify(this.axis))}this.epsilon=null==t.epsilon?.001:t.epsilon,this.center=null==t.center||t.center,this.scale=null==t.scale||t.scale,this.betaInitializer=Qh(t.betaInitializer||"zeros"),this.gammaInitializer=Qh(t.gammaInitializer||"ones"),this.betaRegularizer=pf(t.betaRegularizer),this.gammaRegularizer=pf(t.gammaRegularizer),this.supportsMasking=!0}build(t){const e=(t=lp(t)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let t=0;t<this.axis.length;++t)this.axis[t]<0&&(this.axis[t]+=e);for(const t of this.axis)if(t<0||t>=e)throw new Error("Invalid axis: "+t);if(this.axis.length!==Fc(this.axis).length)throw new Error("Found duplicate axes in: "+this.axis);const n=this.axis.map(e=>t[e]);this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,!0):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,!0):this.beta=null,this.built=!0}call(t,e){const n=op(t),s=n.shape,r=s.length;return Xn(()=>{let{mean:t,variance:e}=Ta(n,this.axis,!0);const a=kc(1,r);for(const t of this.axis)a[t]=s[t];const i=t=>null!=t&&t.shape.length!==r&&this.axis!==[r-1]?t.reshape(a):t;let o=i(this.gamma.read()),l=i(this.beta.read());const u=[],c=[];for(let t=0;t<r;++t)-1!==this.axis.indexOf(t)?(u.push(s[t]),c.push(1)):(u.push(1),c.push(s[t]));return t=t.tile(u),e=e.tile(u),o=o.tile(c),l=l.tile(c),Nm(n,t,e,l,o,this.epsilon)})}getConfig(){const t={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Zh(this.betaInitializer),gammaInitializer:Zh(this.gammaInitializer),betaRegularizer:cf(this.betaRegularizer),gammaRegularizer:cf(this.gammaRegularizer)},e=super.getConfig();return Object.assign(t,e),t}}Sm.className="LayerNormalization",Bn(Sm);class Im extends bp{constructor(t){if(null==t&&(t={}),super(t),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,null==t.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof t.padding)this.padding=[[t.padding,t.padding],[t.padding,t.padding]];else{if(t.padding=t.padding,2!==t.padding.length)throw new wc(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${t.padding.length} array.`);let e,n;if("number"==typeof t.padding[0])e=[t.padding[0],t.padding[0]],n=[t.padding[1],t.padding[1]];else{if(t.padding=t.padding,2!==t.padding[0].length)throw new wc(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${t.padding[0].length} array.`);if(e=t.padding[0],2!==t.padding[1].length)throw new wc(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${t.padding[1].length} array.`);n=t.padding[1]}this.padding=[e,n]}this.inputSpec=[new dp({ndim:4})]}computeOutputShape(t){let e,n;return t=lp(t),"channelsFirst"===this.dataFormat?(e=null!=t[2]&&t[2]>=0?t[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=t[3]&&t[3]>=0?t[3]+this.padding[1][0]+this.padding[1][1]:null,[t[0],t[1],e,n]):(e=null!=t[1]&&t[1]>=0?t[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=t[2]&&t[2]>=0?t[2]+this.padding[1][0]+this.padding[1][1]:null,[t[0],e,n,t[3]])}call(t,e){return Xn(()=>{return e=op(t),n=this.padding,s=this.dataFormat,Xn(()=>{if(4!==e.rank)throw new wc("temporalPadding expects input tensor to be 4-D, but received a "+e.rank+"-D tensor.");if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new wc("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==s&&(s="channelsLast"),"channelsLast"!==s&&"channelsFirst"!==s)throw new wc(`Unknown data format: ${s}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let t;return t="channelsFirst"===s?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],Oa(e,t)});var e,n,s})}getConfig(){const t={padding:this.padding,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}function Em(t,e,n,s,r,a){return Xn(()=>{let i;nh(r),rh(a),sh(s),null==n&&(n=[1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),t=Nf(t,r);const o="same"===s?"same":"valid";return i="max"===a?ba(t,e,n,o):Bs(t,e,n,o),"channelsFirst"===r&&(i=ln(i,[0,3,1,2])),i})}function Tm(t,e,n,s,r,a){return Xn(()=>{let i;nh(r),rh(a),sh(s),null==n&&(n=[1,1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),t=kf(t,r);const o="same"===s?"same":"valid";return i="max"===a?xa(t,e,n,o):Ps(t,e,n,o),"channelsFirst"===r&&(i=ln(i,[0,4,1,2,3])),i})}Im.className="ZeroPadding2D",Bn(Im);class Am extends bp{constructor(t){if(null==t.poolSize&&(t.poolSize=2),super(t),"number"==typeof t.poolSize)this.poolSize=[t.poolSize];else{if(!Array.isArray(t.poolSize)||1!==t.poolSize.length||"number"!=typeof t.poolSize[0])throw new wc("poolSize for 1D convolutional layer must be a number or an Array of a single number, but received "+JSON.stringify(t.poolSize));this.poolSize=t.poolSize}if(zc(this.poolSize,"poolSize"),null==t.strides)this.strides=this.poolSize;else if("number"==typeof t.strides)this.strides=[t.strides];else{if(!Array.isArray(t.strides)||1!==t.strides.length||"number"!=typeof t.strides[0])throw new wc("strides for 1D convolutional layer must be a number or an Array of a single number, but received "+JSON.stringify(t.strides));this.strides=t.strides}zc(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,sh(this.padding),this.inputSpec=[new dp({ndim:3})]}computeOutputShape(t){const e=wf((t=lp(t))[1],this.poolSize[0],this.padding,this.strides[0]);return[t[0],e,t[2]]}call(t,e){return Xn(()=>{this.invokeCallHook(t,e),t=yh(op(t),2);const n=this.poolingFunction(op(t),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return zi(n,[2])})}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides},e=super.getConfig();return Object.assign(t,e),t}}class $m extends Am{constructor(t){super(t)}poolingFunction(t,e,n,s,r){return nh(r),sh(s),Em(t,e,n,s,r,"max")}}$m.className="MaxPooling1D",Bn($m);class Rm extends Am{constructor(t){super(t)}poolingFunction(t,e,n,s,r){return nh(r),sh(s),Em(t,e,n,s,r,"avg")}}Rm.className="AveragePooling1D",Bn(Rm);class Dm extends bp{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(2!==t.strides.length)throw new wc("If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length "+t.strides.length+".");this.strides=t.strides}else this.strides=[t.strides,t.strides];zc(this.poolSize,"poolSize"),zc(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,nh(this.dataFormat),sh(this.padding),this.inputSpec=[new dp({ndim:4})]}computeOutputShape(t){t=lp(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2];return e=wf(e,this.poolSize[0],this.padding,this.strides[0]),n=wf(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,n]:[t[0],e,n,t[3]]}call(t,e){return Xn(()=>(this.invokeCallHook(t,e),this.poolingFunction(op(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class _m extends Dm{constructor(t){super(t)}poolingFunction(t,e,n,s,r){return nh(r),sh(s),Em(t,e,n,s,r,"max")}}_m.className="MaxPooling2D",Bn(_m);class Fm extends Dm{constructor(t){super(t)}poolingFunction(t,e,n,s,r){return nh(r),sh(s),Em(t,e,n,s,r,"avg")}}Fm.className="AveragePooling2D",Bn(Fm);class Om extends bp{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(3!==t.strides.length)throw new wc("If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length "+t.strides.length+".");this.strides=t.strides}else this.strides=[t.strides,t.strides,t.strides];zc(this.poolSize,"poolSize"),zc(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,nh(this.dataFormat),sh(this.padding),this.inputSpec=[new dp({ndim:5})]}computeOutputShape(t){t=lp(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],n="channelsFirst"===this.dataFormat?t[3]:t[2],s="channelsFirst"===this.dataFormat?t[4]:t[3];return e=wf(e,this.poolSize[0],this.padding,this.strides[0]),n=wf(n,this.poolSize[1],this.padding,this.strides[1]),s=wf(s,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,n,s]:[t[0],e,n,s,t[4]]}call(t,e){return Xn(()=>(this.invokeCallHook(t,e),this.poolingFunction(op(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class Mm extends Om{constructor(t){super(t)}poolingFunction(t,e,n,s,r){return nh(r),sh(s),Tm(t,e,n,s,r,"max")}}Mm.className="MaxPooling3D",Bn(Mm);class Lm extends Om{constructor(t){super(t)}poolingFunction(t,e,n,s,r){return nh(r),sh(s),Tm(t,e,n,s,r,"avg")}}Lm.className="AveragePooling3D",Bn(Lm);class zm extends bp{constructor(t){super(t),this.inputSpec=[new dp({ndim:3})]}computeOutputShape(t){return[t[0],t[2]]}call(t,e){throw new vc}}class Bm extends zm{constructor(t){super(t||{})}call(t,e){return Xn(()=>{const e=op(t);return ka(e,1)})}}Bm.className="GlobalAveragePooling1D",Bn(Bm);class Pm extends zm{constructor(t){super(t||{})}call(t,e){return Xn(()=>{const e=op(t);return ua(e,1)})}}Pm.className="GlobalMaxPooling1D",Bn(Pm);class Wm extends bp{constructor(t){super(t),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,nh(this.dataFormat),this.inputSpec=[new dp({ndim:4})]}computeOutputShape(t){return t=t,"channelsLast"===this.dataFormat?[t[0],t[3]]:[t[0],t[1]]}call(t,e){throw new vc}getConfig(){const t={dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class Vm extends Wm{call(t,e){return Xn(()=>{const e=op(t);return"channelsLast"===this.dataFormat?ka(e,[1,2]):ka(e,[2,3])})}}Vm.className="GlobalAveragePooling2D",Bn(Vm);class Um extends Wm{call(t,e){return Xn(()=>{const e=op(t);return"channelsLast"===this.dataFormat?ua(e,[1,2]):ua(e,[2,3])})}}Um.className="GlobalMaxPooling2D",Bn(Um);class Gm extends bp{constructor(t){super(t),this.layer=t.layer}build(t){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(t){null!=this.layer&&(this.layer.trainable=t)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(t){this.layer.setWeights(t)}getConfig(){const t={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},e=super.getConfig();return Object.assign(t,e),t}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(t)}static fromConfig(t,e,n={}){const s=Dp(e.layer,n);delete e.layer;const r={layer:s};return Object.assign(r,e),new t(r)}}class Hm extends Gm{constructor(t){super(t),this.supportsMasking=!0}build(t){if((t=lp(t)).length<3)throw new wc("TimeDistributed layer expects an input shape >= 3D, but received input shape "+JSON.stringify(t));this.inputSpec=[{shape:t}];const e=[t[0]].concat(t.slice(2));this.layer.built||(this.layer.build(e),this.layer.built=!0),super.build(t)}computeOutputShape(t){const e=[(t=lp(t))[0]].concat(t.slice(2)),n=this.layer.computeOutputShape(e),s=t[1];return[n[0],s].concat(n.slice(1))}call(t,e){return Xn(()=>Bf((t,n)=>[op(this.layer.call(t,e)),[]],t=op(t),[],!1,null,null,!1,!0)[1])}}Hm.className="TimeDistributed",Bn(Hm);class jm extends Gm{constructor(t){super(t);const e=t.layer.getConfig(),n={};n.className=t.layer.getClassName(),n.config=e,this.forwardLayer=Dp(n),e.goBackwards=!0!==e.goBackwards;const s={};var r;if(s.className=t.layer.getClassName(),s.config=e,this.backwardLayer=Dp(s),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===t.mergeMode?"concat":t.mergeMode,r=this.mergeMode,Mc(th,"BidirectionalMergeMode",r),t.weights)throw new vc("weights support is not implemented for Bidirectional layer yet.");this._stateful=t.layer.stateful,this.returnSequences=t.layer.returnSequences,this.returnState=t.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=t.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(t){this._trainable=t,null!=this.forwardLayer&&(this.forwardLayer.trainable=t),null!=this.backwardLayer&&(this.backwardLayer.trainable=t)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(t){const e=t.length,n=Math.floor(e/2);this.forwardLayer.setWeights(t.slice(0,n)),this.backwardLayer.setWeights(t.slice(n))}computeOutputShape(t){let e,n,s,r=this.forwardLayer.computeOutputShape(t);return Array.isArray(r)&&Array.isArray(r[0])||(r=[r]),r=r,this.returnState?(s=r.slice(1),e=r[0]):e=r[0],e=e,"concat"===this.mergeMode?(e[e.length-1]*=2,n=[e]):n=null==this.mergeMode?[e,e.slice()]:[e],this.returnState?null==this.mergeMode?n.concat(s).concat(s.slice()):[e].concat(s).concat(s.slice()):Ic(n)}apply(t,e){let n=null==e?null:e.initialState,s=null==e?null:e.constants;null==e&&(e={});const r=zf(t,n,s,this.numConstants);if(t=r.inputs,n=r.initialState,s=r.constants,Array.isArray(t)&&(n=t.slice(1),t=t[0]),(null==n||0===n.length)&&null==s)return super.apply(t,e);const a=[],i=[];if(null!=n){const t=n.length;if(t%2>0)throw new wc("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");e.initialState=n,a.push(...n);const s=n.map(t=>new dp({shape:t.shape}));this.forwardLayer.stateSpec=s.slice(0,t/2),this.backwardLayer.stateSpec=s.slice(t/2),i.push(...s)}if(null!=s)throw new vc("Support for constants in Bidirectional layers is not implemented yet.");const o=a[0]instanceof fp;for(const t of a)if(t instanceof fp!==o)throw new wc("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[t].concat(a),s=this.inputSpec.concat(i),r=this.inputSpec;this.inputSpec=s;const o=super.apply(n,e);return this.inputSpec=r,o}return super.apply(t,e)}call(t,e){return Xn(()=>{const n=e.initialState;let s,r,a,i;if(null==n)s=this.forwardLayer.call(t,e),r=this.backwardLayer.call(t,e);else{const a=n.slice(0,n.length/2),i=n.slice(n.length/2);s=this.forwardLayer.call(t,Object.assign(e,{initialState:a})),r=this.backwardLayer.call(t,Object.assign(e,{initialState:i}))}return this.returnState&&(Array.isArray(s)&&(a=s.slice(1).concat(r.slice(1))),s=s[0],r=r[0]),this.returnSequences&&(r=pi(r,1)),"concat"===this.mergeMode?i=vh([s,r]):"sum"===this.mergeMode?i=es(s,r):"ave"===this.mergeMode?i=rs(.5,es(s,r)):"mul"===this.mergeMode?i=rs(s,r):null==this.mergeMode&&(i=[s,r]),this.returnState?null==this.mergeMode?i.concat(a):[i].concat(a):i})}resetStates(t){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(t){ih(this.forwardLayer.name,()=>{this.forwardLayer.build(t)}),ih(this.backwardLayer.name,()=>{this.backwardLayer.build(t)}),this.built=!0}computeMask(t,e){let n;if(Array.isArray(e)&&(e=e[0]),n=this.returnSequences?null==this.mergeMode?[e,e]:e:null==this.mergeMode?[null,null]:null,this.returnState){const t=this.forwardLayer.states.map(t=>null);return Array.isArray(n)?n.concat(t).concat(t):[n].concat(t).concat(t)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(t),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(t)}getConfig(){const t={mergeMode:this.mergeMode},e=super.getConfig();return Object.assign(t,e),t}static fromConfig(t,e){const n=Dp(e.layer);if(delete e.layer,null!=e.numConstants)throw new vc("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const s=e;return s.layer=n,new t(s)}}function qm(t){return new Rm(t)}function Km(t){return new Fm(t)}function Xm(t){return new Lm(t)}function Ym(t){return new Pm(t)}function Jm(t){return new Um(t)}function Zm(t){return new $m(t)}function Qm(t){return new _m(t)}jm.className="Bidirectional",Bn(jm);const tg=Ym,eg=Jm,ng=Zm,sg=Qm;var rg=Object.freeze({__proto__:null,inputLayer:function(t){return new xp(t)},elu:function(t){return new gf(t)},reLU:function(t){return new df(t)},leakyReLU:function(t){return new ff(t)},prelu:function(t){return new mf(t)},softmax:function(t){return new bf(t)},thresholdedReLU:function(t){return new yf(t)},conv1d:function(t){return new Ff(t)},conv2d:function(t){return new Af(t)},conv2dTranspose:function(t){return new Rf(t)},conv3d:function(t){return new $f(t)},separableConv2d:function(t){return new _f(t)},cropping2D:function(t){return new Of(t)},upSampling2d:function(t){return new Mf(t)},depthwiseConv2d:function(t){return new Lf(t)},activation:function(t){return new rm(t)},dense:function(t){return new nm(t)},dropout:function(t){return new tm(t)},spatialDropout1d:function(t){return new em(t)},flatten:function(t){return new sm(t)},repeatVector:function(t){return new am(t)},reshape:function(t){return new im(t)},permute:function(t){return new om(t)},embedding:function(t){return new um(t)},add:function(t){return new hm(t)},average:function(t){return new dm(t)},concatenate:function(t){return new gm(t)},maximum:function(t){return new fm(t)},minimum:function(t){return new mm(t)},multiply:function(t){return new pm(t)},dot:function(t){return new bm(t)},batchNormalization:function(t){return new Cm(t)},layerNormalization:function(t){return new Sm(t)},zeroPadding2d:function(t){return new Im(t)},averagePooling1d:qm,avgPool1d:function(t){return qm(t)},avgPooling1d:function(t){return qm(t)},averagePooling2d:Km,avgPool2d:function(t){return Km(t)},avgPooling2d:function(t){return Km(t)},averagePooling3d:Xm,avgPool3d:function(t){return Xm(t)},avgPooling3d:function(t){return Xm(t)},globalAveragePooling1d:function(t){return new Bm(t)},globalAveragePooling2d:function(t){return new Vm(t)},globalMaxPooling1d:Ym,globalMaxPooling2d:Jm,maxPooling1d:Zm,maxPooling2d:Qm,maxPooling3d:function(t){return new Mm(t)},gru:function(t){return new Hf(t)},gruCell:function(t){return new Gf(t)},lstm:function(t){return new qf(t)},lstmCell:function(t){return new jf(t)},simpleRNN:function(t){return new Uf(t)},simpleRNNCell:function(t){return new Vf(t)},convLstm2d:function(t){return new Qf(t)},convLstm2dCell:function(t){return new Zf(t)},rnn:function(t){return new Pf(t)},stackedRNNCells:function(t){return new Kf(t)},bidirectional:function(t){return new jm(t)},timeDistributed:function(t){return new Hm(t)},globalMaxPool1d:tg,globalMaxPool2d:eg,maxPool1d:ng,maxPool2d:sg,Layer:bp,RNN:Pf,RNNCell:Wf,input:Wd,gaussianNoise:function(t){return new xm(t)},gaussianDropout:function(t){return new wm(t)},alphaDropout:function(t){return new vm(t)},masking:function(t){return new lm(t)}});var ag=Object.freeze({__proto__:null,binaryAccuracy:function(t,e){return Hp(t,e)},binaryCrossentropy:function(t,e){return Yp(t,e)},sparseCategoricalAccuracy:function(t,e){return Jp(t,e)},categoricalAccuracy:function(t,e){return jp(t,e)},categoricalCrossentropy:function(t,e){return Zp(t,e)},precision:function(t,e){return Kp(t,e)},recall:function(t,e){return Xp(t,e)},cosineProximity:function(t,e){return Vp(t,e)},meanAbsoluteError:function(t,e){return Op(t,e)},meanAbsolutePercentageError:function(t,e){return Mp(t,e)},MAPE:function(t,e){return Mp(t,e)},mape:function(t,e){return Mp(t,e)},meanSquaredError:function(t,e){return Fp(t,e)},MSE:function(t,e){return Fp(t,e)},mse:function(t,e){return Fp(t,e)}}),ig=Object.freeze({__proto__:null,modelFromJSON:async function(t,e){"modelTopology"in t||(t={modelTopology:t});let n=(t=t).modelTopology;null!=n.model_config&&(n=n.model_config);const s=Dp(ud(n),e);if(null!=t.weightsManifest){const e=await Ke(t.weightsManifest,t.pathPrefix,s.weights.map(t=>t.originalName)),n={};for(const t of s.weights)n[t.originalName]=e[t.originalName];s.loadWeights(n),Yn(e)}return s}});var og=Object.freeze({__proto__:null,l1l2:function(t){return new lf(t)},l1:function(t){return af(e=t),new lf({l1:null!=e?e.l1:null,l2:0});var e},l2:function(t){return af(e=t),new lf({l2:null!=e?e.l2:null,l1:0});var e}});class lg extends Cp{constructor(){super(...arguments),this.model=null}setModel(t){if(!(t instanceof Ld))throw new Error("model must be a LayersModel, not some other Container");this.model=t}}function ug(t,e){return t<e}function cg(t,e){return t>e}class hg extends lg{constructor(t){if(super(),null==t&&(t={}),t.restoreBestWeights)throw new vc("restoreBestWeights = True is not implemented in EarlyStopping yet.");this.monitor=t.monitor||"val_loss",this.minDelta=Math.abs(t.minDelta||0),this.patience=t.patience||0,this.verbose=t.verbose||0,this.mode=t.mode||"auto",this.baseline=t.baseline,-1===["auto","min","max"].indexOf(this.mode)&&(console.warn(`EarlyStopping mode '${this.mode}' is invalid. Falling back to mode 'auto'.`),this.mode="auto"),"min"===this.mode?this.monitorFunc=ug:"max"===this.mode||-1!==this.monitor.indexOf("acc")?this.monitorFunc=cg:this.monitorFunc=ug,this.monitorFunc===ug&&(this.minDelta*=-1)}async onTrainBegin(t){this.wait=0,this.stoppedEpoch=0,null!=this.baseline?this.best=this.baseline:this.best=this.monitorFunc===ug?1/0:-1/0}async onEpochEnd(t,e){await vp(e);const n=this.getMonitorValue(e);null!=n&&(this.monitorFunc(n-this.minDelta,this.best)?(this.best=n,this.wait=0):(this.wait++,this.wait>=this.patience&&(this.stoppedEpoch=t,this.model.stopTraining=!0)))}async onTrainEnd(t){this.stoppedEpoch>0&&this.verbose&&console.log(`Epoch ${this.stoppedEpoch}: early stopping.`)}getMonitorValue(t){null==t&&(t={});const e=t[this.monitor];return null==e&&console.warn(`Metric for EarlyStopping ${this.monitor} is not available. Available metrics are: `+Object.keys(t)),e}}const pg={earlyStopping:function(t){return new hg(t)}};var dg,fg;!function(t){t[t.DT_INVALID=0]="DT_INVALID",t[t.DT_FLOAT=1]="DT_FLOAT",t[t.DT_DOUBLE=2]="DT_DOUBLE",t[t.DT_INT32=3]="DT_INT32",t[t.DT_UINT8=4]="DT_UINT8",t[t.DT_INT16=5]="DT_INT16",t[t.DT_INT8=6]="DT_INT8",t[t.DT_STRING=7]="DT_STRING",t[t.DT_COMPLEX64=8]="DT_COMPLEX64",t[t.DT_INT64=9]="DT_INT64",t[t.DT_BOOL=10]="DT_BOOL",t[t.DT_QINT8=11]="DT_QINT8",t[t.DT_QUINT8=12]="DT_QUINT8",t[t.DT_QINT32=13]="DT_QINT32",t[t.DT_BFLOAT16=14]="DT_BFLOAT16",t[t.DT_FLOAT_REF=101]="DT_FLOAT_REF",t[t.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",t[t.DT_INT32_REF=103]="DT_INT32_REF",t[t.DT_UINT8_REF=104]="DT_UINT8_REF",t[t.DT_INT16_REF=105]="DT_INT16_REF",t[t.DT_INT8_REF=106]="DT_INT8_REF",t[t.DT_STRING_REF=107]="DT_STRING_REF",t[t.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",t[t.DT_INT64_REF=109]="DT_INT64_REF",t[t.DT_BOOL_REF=110]="DT_BOOL_REF",t[t.DT_QINT8_REF=111]="DT_QINT8_REF",t[t.DT_QUINT8_REF=112]="DT_QUINT8_REF",t[t.DT_QINT32_REF=113]="DT_QINT32_REF",t[t.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF"}(dg||(dg={})),function(t){let e;!function(t){t[t.LEGACY=0]="LEGACY",t[t.V1=1]="V1",t[t.V2=2]="V2"}(e=t.CheckpointFormatVersion||(t.CheckpointFormatVersion={}))}(fg||(fg={}));const mg={};function gg(t){return mg[t]}function yg(t,e,n,s){const r=e.inputParams[t];if(r&&void 0!==r.inputIndexStart){const t=r.inputIndexStart,a=0===r.inputIndexEnd?void 0:void 0===r.inputIndexEnd?t+1:r.inputIndexEnd;if("tensor"===r.type)return bg(e.inputNames[r.inputIndexStart],n,s);if("tensors"===r.type){return e.inputNames.slice(t,a).map(t=>bg(t,n,s))}const i=bg(e.inputNames.slice(t)[0],n,s),o=i.dataSync();return"number"===r.type?o[0]:nt(i.shape,o)}const a=e.attrParams[t];return a&&a.value}function bg(t,e,n){const[s,r]=vg(t),a=n.currentContextIds.find(t=>!!e[wg(s,t)]);return void 0!==a?e[wg(s,a)][r]:void 0}function xg(t,e){const[n,s]=vg(t);return[wg(n,e&&e.currentContextId),s]}function wg(t,e){return e?`${t}-${e}`:t}function vg(t){const e=t.split(":");return 1===e.length?[t,0]:[e[0],Number(e[e.length-1])]}function Ng(t,e,n){let s=yg("pad",t,e,n);if("explicit"===s){s=yg("explicitPaddings",t,e,n);const r=[[0,0],[0,0],[0,0],[0,0]];for(let t=0;t<4;t++)r[t][0]=s[2*t],r[t][1]=s[2*t+1];return r}return s}function kg(t){return t.kept?t:We(t)}var Cg=Object.freeze({__proto__:null,json:[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var Sg=Object.freeze({__proto__:null,json:[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"clip_value_min",name:"clipValueMin",type:"number"},{tfName:"clip_value_max",name:"clipValueMax",type:"number"}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"clipValueMin",name:"clipValueMin",type:"number",defaultValue:0},{tfName:"clipValueMax",name:"clipValueMax",type:"number",defaultValue:6}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var Ig=Object.freeze({__proto__:null,json:[{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}]});var Eg=Object.freeze({__proto__:null,json:[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}]});var Tg=Object.freeze({__proto__:null,json:[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}]});var Ag=Object.freeze({__proto__:null,json:[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var $g=Object.freeze({__proto__:null,json:[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]}]});var Rg=Object.freeze({__proto__:null,json:[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}]});var Dg=Object.freeze({__proto__:null,json:[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}]});var _g=Object.freeze({__proto__:null,json:[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var Fg=Object.freeze({__proto__:null,json:[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]});var Og=Object.freeze({__proto__:null,json:[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}]});var Mg=Object.freeze({__proto__:null,json:[{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}]});var Lg=Object.freeze({__proto__:null,json:[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool",notSupported:!0}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}]});var zg=Object.freeze({__proto__:null,json:[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}]});var Bg=Object.freeze({__proto__:null,json:[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]}]});class Pg{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const t=[].concat(...[Cg,Sg,Ig,Eg,Tg,Ag,$g,_g,Dg,Rg,Fg,Og,Mg,Lg,zg,Bg].map(t=>t.json));this.opMappers=t.reduce((t,e)=>(t[e.tfOpName]=e,t),{})}transformGraph(t,e={}){const n=t.node,s=[],r=[],a=n.reduce((t,e)=>(t[e.name]=this.mapNode(e),e.op.startsWith("Placeholder")&&s.push(t[e.name]),"Const"===e.op&&r.push(t[e.name]),t),{});let i=[];const o=[];let l={},u={};null!=e&&(l=this.mapSignatureEntries(e.inputs),u=this.mapSignatureEntries(e.outputs));const c=Object.keys(a);c.forEach(t=>{const e=a[t];e.inputNames.forEach(t=>{const[n]=xg(t);e.inputs.push(a[n]),a[n].children.push(e)})}),0===Object.keys(u).length?c.forEach(t=>{const e=a[t];0===e.children.length&&o.push(e)}):Object.keys(u).forEach(t=>{const[e]=xg(t),n=a[e];null!=n&&(n.signatureKey=u[t],o.push(n))}),Object.keys(l).length>0?Object.keys(l).forEach(t=>{const[e]=xg(t),n=a[e];n&&(n.signatureKey=l[t],i.push(n))}):i=s;let h={};return null!=t.library&&null!=t.library.function&&(h=t.library.function.reduce((t,e)=>(t[e.signature.name]=this.mapFunction(e),t),{})),{nodes:a,inputs:i,outputs:o,weights:r,placeholders:s,signature:e,functions:h}}mapSignatureEntries(t){return Object.keys(t||{}).reduce((e,n)=>(e[t[n].name]=n,e),{})}mapNode(t){const e=gg(t.op)||this.opMappers[t.op]||{};null==t.attr&&(t.attr={});const n={name:t.name,op:t.op,category:e.category,inputNames:(t.input||[]).map(t=>t.startsWith("^")?t.substr(1):t),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:t.attr};return null!=e.inputs&&(n.inputParams=e.inputs.reduce((t,e)=>(t[e.name]={type:e.type,inputIndexStart:e.start,inputIndexEnd:e.end},t),{})),null!=e.attrs&&(n.attrParams=e.attrs.reduce((e,n)=>{const s=n.type;let r=void 0;switch(n.type){case"string":r=Vg(t.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Vg(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":r=Zg(t.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Zg(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":r=Gg(t.attr,n.tfName,n.defaultValue||0),void 0===r&&n.tfDeprecatedName&&(r=Gg(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":r=Jg(t.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Jg(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":r=Ug(t.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Ug(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":r=ty(t.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=ty(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":r=Yg(t.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Yg(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":r=Qg(t.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Qg(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":r=qg(t.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=qg(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":r=Kg(t.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Kg(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":r=jg(t.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=jg(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${t.op}`)}return e[n.name]={value:r,type:s},e},{})),n}mapFunction(t){const e=t.nodeDef,n=[];let s={};null!=e&&(s=e.reduce((t,e)=>(t[e.name]=this.mapNode(e),"Const"===e.op&&n.push(t[e.name]),t),{}));const r=[],a=[];t.signature.inputArg.forEach(t=>{const[e]=xg(t.name),n={name:e,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:Hg(t.type),type:"dtype"}},children:[]};n.signatureKey=t.name,r.push(n),s[e]=n}),Object.keys(s).forEach(t=>{const e=s[t];e.inputNames.forEach(t=>{const[n]=xg(t);e.inputs.push(s[n]),s[n].children.push(e)})});const i=t.ret;t.signature.outputArg.forEach(t=>{const[e,n]=xg(i[t.name]),r=s[e];null!=r&&(r.defaultOutput=n,a.push(r))});const o=this.mapArgsToSignature(t);return{nodes:s,inputs:r,outputs:a,weights:n,placeholders:[],signature:o}}mapArgsToSignature(t){return{methodName:t.signature.name,inputs:t.signature.inputArg.reduce((t,e)=>(t[e.name]=this.mapArgToTensorInfo(e),t),{}),outputs:t.signature.outputArg.reduce((e,n)=>(e[n.name]=this.mapArgToTensorInfo(n,t.ret),e),{})}}mapArgToTensorInfo(t,e){let n=t.name;return null!=e&&(n=e[n]),{name:n,dtype:t.type}}}function Wg(t,e){const n=Array.isArray(t)?String.fromCharCode.apply(null,t):function(t){const e=a().global;if(void 0!==e.atob)return e.atob(t);if("undefined"!=typeof Buffer)return new Buffer(t,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(t);return e?n:n.toLowerCase()}function Vg(t,e,n,s=!1){const r=t[e];return null!=r?Wg(r.s,s):n}function Ug(t,e,n){const s=t[e];return s?s.b:n}function Gg(t,e,n){const s=t[e]||{},r=null!=s.i?s.i:null!=s.f?s.f:n;return"number"==typeof r?r:parseInt(r,10)}function Hg(t){switch("string"==typeof t&&(t=dg[t]),t){case dg.DT_FLOAT:return"float32";case dg.DT_INT32:case dg.DT_INT64:case dg.DT_INT8:case dg.DT_UINT8:return"int32";case dg.DT_BOOL:return"bool";case dg.DT_DOUBLE:return"float32";case dg.DT_STRING:return"string";default:return null}}function jg(t,e,n){const s=t[e];return s&&s.func?s.func.name:n}function qg(t,e,n){const s=t[e];return s&&s.type?Hg(s.type):n}function Kg(t,e,n){const s=t[e];return s&&s.list&&s.list.type?s.list.type.map(t=>Hg(t)):n}function Xg(t){if(!t.unknownRank)return null!=t.dim?t.dim.map(t=>"number"==typeof t.size?t.size:parseInt(t.size,10)):[]}function Yg(t,e,n){const s=t[e];return s&&s.shape?Xg(s.shape):n}function Jg(t,e,n){const s=t[e];return s?((s.list.f&&s.list.f.length?s.list.f:s.list.i)||[]).map(t=>"number"==typeof t?t:parseInt(t,10)):n}function Zg(t,e,n,s=!1){const r=t[e];return r&&r.list&&r.list.s?r.list.s.map(t=>Wg(t,s)):n}function Qg(t,e,n){const s=t[e];return s&&s.list&&s.list.shape?s.list.shape.map(t=>Xg(t)):n}function ty(t,e,n){const s=t[e];return s&&s.list&&s.list.b?s.list.b:n}class ey{constructor(t,e,n){this.node=t,this.tensorMap=e,this.context=n,this.inputs=[],this.attrs={},this.inputs=t.inputNames.map(t=>this.getInput(t)),null!=t.rawAttrs&&(this.attrs=Object.keys(t.rawAttrs).reduce((t,e)=>(t[e]=this.getAttr(e),t),{}))}getInput(t){return bg(t,this.tensorMap,this.context)}getAttr(t,e){const n=this.node.rawAttrs[t];if(null!=n.tensor)return bg(t,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return Gg(this.node.rawAttrs,t,e);if(null!=n.s)return Vg(this.node.rawAttrs,t,e);if(null!=n.b)return Ug(this.node.rawAttrs,t,e);if(null!=n.shape)return Yg(this.node.rawAttrs,t,e);if(null!=n.type)return qg(this.node.rawAttrs,t,e);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return Jg(this.node.rawAttrs,t,e);if(null!=n.list.s)return Zg(this.node.rawAttrs,t,e);if(null!=n.list.shape)return Qg(this.node.rawAttrs,t,e);if(null!=n.list.b)return ty(this.node.rawAttrs,t,e);if(null!=n.list.type)return Kg(this.node.rawAttrs,t,e)}return e}}function ny(t,e,n=""){I(function(t,e){if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(-1!==t[n]&&-1!==e[n]&&t[n]!==e[n])return!1;return!0}(t,e),()=>n+` Shapes ${t} and ${e} must match`)}class sy{constructor(t,e,n,s,r,a,i){this.name=t,this.dtype=e,this.maxSize=n,this.elementShape=s,this.identicalElementShapes=r,this.dynamicSize=a,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=Xr(0),Jn(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(t){this.tensors.forEach(e=>{null!=t&&t.has(e.tensor.id)||e.tensor.dispose()}),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||t>=this.size())throw new Error(`Tried to read from index ${t}, but array size is: ${this.size()}`);const e=this.tensors[t];if(e.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${t} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(e.cleared=!0),e.read=!0,e.tensor}readMany(t){return t.map(t=>this.read(t))}write(t,e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||!this.dynamicSize&&t>=this.maxSize)throw new Error(`Tried to write to index ${t}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[t]||{};if(e.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t},\n          because the value dtype is ${e.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=e.shape),ny(this.elementShape,e.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${t}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been written.`);n.tensor=e,Jn(e),n.written=!0,this.tensors[t]=n}writeMany(t,e){if(t.length!==e.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${t.length} is not the same as tensors size: ${e.length}.`);t.forEach((t,n)=>this.write(t,e[n]))}gather(t,e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${e}`);if(t)t=t.slice(0,this.size());else{t=[];for(let e=0;e<this.size();e++)t.push(e)}if(0===t.length)return ne([],[0].concat(this.elementShape));const n=this.readMany(t);return ny(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),Bi(n,0)}concat(t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${t}`);if(0===this.size())return ne([],[0].concat(this.elementShape));const e=[];for(let t=0;t<this.size();t++)e.push(t);const n=this.readMany(e);return ny(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),Us(n,0)}scatter(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const n=Math.max(...t);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(t,Ki(e,0))}split(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);let n=0;const s=t.map(t=>(n+=t,n));if(n!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${e.shape}`);if(!this.dynamicSize&&t.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${t.length}), and the TensorArray is not marked as dynamically resizeable`);const r=0===n?0:e.size/n,a=[];Xn(()=>{e=rn(e,[1,n,r]);for(let n=0;n<t.length;++n){const i=[0,0===n?0:s[n-1],0],o=[1,t[n],r];a[n]=rn(Hs(e,i,o),this.elementShape)}return a});const i=[];for(let e=0;e<t.length;e++)i[e]=e;this.writeMany(i,a)}}class ry{constructor(t,e,n,s=-1){this.tensors=t,this.elementShape=e,this.elementDtype=n,null!=t&&t.forEach(t=>{if(n!==t.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${t.dtype}`);ny(e,t.shape,"TensorList shape mismatch: "),Jn(t)}),this.idTensor=Xr(0),this.maxNumElements=s,Jn(this.idTensor)}get id(){return this.idTensor.id}copy(){return new ry([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(t){this.tensors.forEach(e=>{null!=t&&t.has(e.id)||e.dispose()}),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(t,e,n=-1){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);return ny(t,this.elementShape,"TensorList shape mismatch: "),Xn(()=>{const e=this.tensors.map(e=>rn(e,t));return Bi(e,0)})}popBack(t,e){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=this.tensors.pop();return ny(n.shape,t,"TensorList shape mismatch: "),rn(n,t)}pushBack(t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(ny(t.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");Jn(t),this.tensors.push(t)}resize(t){if(t<0)throw new Error("TensorListResize expects size to be non-negative. Got: "+t);if(-1!==this.maxNumElements&&t>this.maxNumElements)throw new Error(`TensorListResize input size ${t} is greater maxNumElement ${this.maxNumElements}.`);this.tensors.length=t}getItem(t,e,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(t<0||t>this.tensors.length)throw new Error(`Trying to access element ${t} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[t])throw new Error(`element at index ${t} is null.`);return ny(this.tensors[t].shape,e,"TensorList shape mismatch: "),this.tensors[t]}setItem(t,e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(t<0||-1!==this.maxNumElements&&t>=this.maxNumElements)throw new Error(`Trying to set element ${t} in a list with max ${this.maxNumElements} elements.`);ny(this.elementShape,e.shape,"TensorList shape mismatch: "),Jn(e),this.tensors[t]=e}gather(t,e,n){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);return ny(this.elementShape,n,"TensorList shape mismatch: "),0===(t=t.slice(0,this.size())).length?ne([],[0].concat(this.elementShape)):Xn(()=>{const e=t.map(t=>rn(this.tensors[t],n));return Bi(e,0)})}concat(t,e){if(t&&t!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${t}`);return ny(this.elementShape,e,"TensorList shape mismatch: "),0===this.size()?ne([],[0].concat(this.elementShape)):Xn(()=>{const t=this.tensors.map(t=>rn(t,e));return Us(t,0)})}}const ay=async(t,e,n)=>{switch(t.op){case"If":case"StatelessIf":{const s=yg("thenBranch",t,e,n),r=yg("elseBranch",t,e,n),a=yg("cond",t,e,n),i=yg("args",t,e,n);return(await a.data())[0]?n.functionMap[s].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap):n.functionMap[r].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const s=yg("body",t,e,n),r=yg("cond",t,e,n),a=yg("args",t,e,n),i=await n.functionMap[r].executeFunctionAsync(a,n.tensorArrayMap,n.tensorListMap),o=a.map(t=>t.id);let l=await i[0].data();i.forEach(t=>{t.kept||-1!==o.indexOf(t.id)||t.dispose()});let u=a;for(;l[0];){const t=u;u=await n.functionMap[s].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);const e=u.map(t=>t.id);t.forEach(t=>{t.kept||-1!==o.indexOf(t.id)||-1!==e.indexOf(t.id)||t.dispose()});const a=await n.functionMap[r].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);l=await a[0].data(),a.forEach(t=>{t.kept||-1!==o.indexOf(t.id)||-1!==e.indexOf(t.id)||t.dispose()})}return u}case"LoopCond":return[kg(yg("pred",t,e,n))];case"Switch":{const s=yg("pred",t,e,n);let r=yg("data",t,e,n);return r.kept||(r=kg(r)),(await s.data())[0]?[void 0,r]:[r,void 0]}case"Merge":{const s=t.inputNames.find(t=>void 0!==bg(t,e,n));if(s){return[kg(bg(s,e,n))]}return}case"Enter":{const s=yg("frameName",t,e,n),r=yg("tensor",t,e,n);return n.enterFrame(s),[kg(r)]}case"Exit":{const s=yg("tensor",t,e,n);return n.exitFrame(),[kg(s)]}case"NextIteration":{const s=yg("tensor",t,e,n);return n.nextIteration(),[kg(s)]}case"TensorArrayV3":{const s=yg("size",t,e,n),r=yg("dtype",t,e,n),a=yg("elementShape",t,e,n),i=yg("dynamicSize",t,e,n),o=yg("clearAfterRead",t,e,n),l=yg("identicalElementShapes",t,e,n),u=yg("name",t,e,n),c=new sy(u,r,s,a,l,i,o);return n.addTensorArray(c),[c.idTensor,Xr(1)]}case"TensorArrayWriteV3":{const s=yg("tensorArrayId",t,e,n),r=yg("index",t,e,n),a=yg("tensor",t,e,n),i=n.getTensorArray(s.id);return i.write(r,a),[i.idTensor]}case"TensorArrayReadV3":{const s=yg("tensorArrayId",t,e,n),r=yg("index",t,e,n);return[n.getTensorArray(s.id).read(r)]}case"TensorArrayGatherV3":{const s=yg("tensorArrayId",t,e,n),r=yg("indices",t,e,n),a=yg("dtype",t,e,n);return[n.getTensorArray(s.id).gather(r,a)]}case"TensorArrayScatterV3":{const s=yg("tensorArrayId",t,e,n),r=yg("indices",t,e,n),a=yg("tensor",t,e,n),i=n.getTensorArray(s.id);return i.scatter(r,a),[i.idTensor]}case"TensorArrayConcatV3":{const s=yg("tensorArrayId",t,e,n),r=n.getTensorArray(s.id),a=yg("dtype",t,e,n);return[r.concat(a)]}case"TensorArraySplitV3":{const s=yg("tensorArrayId",t,e,n),r=yg("tensor",t,e,n),a=yg("lengths",t,e,n),i=n.getTensorArray(s.id);return i.split(a,r),[i.idTensor]}case"TensorArraySizeV3":{const s=yg("tensorArrayId",t,e,n);return[Xr(n.getTensorArray(s.id).size(),"int32")]}case"TensorArrayCloseV3":{const s=yg("tensorArrayId",t,e,n),r=n.getTensorArray(s.id);return r.clearAndClose(),[r.idTensor]}case"TensorListSetItem":{const s=yg("tensorListId",t,e,n),r=yg("index",t,e,n),a=yg("tensor",t,e,n),i=n.getTensorList(s.id);return i.setItem(r,a),[i.idTensor]}case"TensorListGetItem":{const s=yg("tensorListId",t,e,n),r=yg("index",t,e,n),a=yg("elementShape",t,e,n),i=yg("elementDType",t,e,n);return[n.getTensorList(s.id).getItem(r,a,i)]}case"TensorListScatterV2":case"TensorListScatter":{const s=yg("indices",t,e,n),r=function(t,e,n,s){if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const r=Math.max(...e);if(null!=s&&-1!==s&&r>=s)throw new Error(`Max index must be < array size (${r}  vs. ${s})`);const a=new ry([],n,t.dtype,s),i=Ki(t,0);return e.forEach((t,e)=>{a.setItem(t,i[e])}),a}(yg("tensor",t,e,n),s,yg("elementShape",t,e,n),yg("numElements",t,e,n));return n.addTensorList(r),[r.idTensor]}case"TensorListReserve":{const s=function(t,e,n){return new ry([],t,e,n)}(yg("elementShape",t,e,n),yg("elementDType",t,e,n),yg("numElements",t,e,n));return n.addTensorList(s),[s.idTensor]}case"TensorListGather":{const s=yg("tensorListId",t,e,n),r=yg("indices",t,e,n),a=yg("elementShape",t,e,n),i=yg("elementDType",t,e,n);return[n.getTensorList(s.id).gather(r,i,a)]}case"TensorListStack":{const s=yg("tensorListId",t,e,n),r=yg("elementShape",t,e,n),a=yg("elementDType",t,e,n),i=yg("numElements",t,e,n);return[n.getTensorList(s.id).stack(r,a,i)]}case"TensorListFromTensor":{const s=function(t,e,n){const s=t.dtype;if(t.shape.length<1)throw new Error("Tensor must be at least a vector, but saw shape: "+t.shape);if(t.dtype!==n)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${n}`);ny(t.shape.slice(1),e,"TensorList shape mismatch: ");const r=Ki(t);return new ry(r,e,s)}(yg("tensor",t,e,n),yg("elementShape",t,e,n),yg("elementDType",t,e,n));return n.addTensorList(s),[s.idTensor]}case"TensorListConcat":{const s=yg("tensorListId",t,e,n),r=n.getTensorList(s.id),a=yg("dtype",t,e,n),i=yg("elementShape",t,e,n);return[r.concat(a,i)]}case"TensorListPushBack":{const s=yg("tensorListId",t,e,n),r=yg("tensor",t,e,n),a=n.getTensorList(s.id);return a.pushBack(r),[a.idTensor]}case"TensorListPopBack":{const s=yg("tensorListId",t,e,n),r=yg("elementShape",t,e,n),a=yg("elementDType",t,e,n);return[n.getTensorList(s.id).popBack(r,a)]}case"TensorListSplit":{const s=yg("tensor",t,e,n),r=yg("elementShape",t,e,n),a=function(t,e,n){let s=0;const r=e.map(t=>(s+=t,s));if(s!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${s}, and tensor's shape is: ${t.shape}`);const a=0===s?0:t.size/s,i=Xn(()=>{const i=[];t=rn(t,[1,s,a]);for(let s=0;s<e.length;++s){const o=[0,0===s?0:r[s-1],0],l=[1,e[s],a];i[s]=rn(Hs(t,o,l),n)}return t.dispose(),i}),o=new ry([],n,t.dtype,e.length);for(let t=0;t<i.length;t++)o.setItem(t,i[t]);return o}(s,yg("lengths",t,e,n),r);return n.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${t.op} is not implemented`)}};function iy(t,e,n){const[s,r]=yg("fusedOps",t,e,n),a="biasadd"===s,i="prelu"===r,o="fusedbatchnorm"===s,l=yg("numArgs",t,e,n);if(a){if(i&&2!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(o)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.");const u=yg("strides",t,e,n),c=Ng(t,e,n),h=yg("dataFormat",t,e,n).toUpperCase(),p=yg("dilations",t,e,n),[d,f]=yg("args",t,e,n);return{stride:u,pad:c,dataFormat:h,dilations:p,biasArg:d,preluArg:f,activationFunc:r}}function oy(t,e,n){return{boxes:yg("boxes",t,e,n),scores:yg("scores",t,e,n),maxOutputSize:yg("maxOutputSize",t,e,n),iouThreshold:yg("iouThreshold",t,e,n),scoreThreshold:yg("scoreThreshold",t,e,n),softNmsSigma:yg("softNmsSigma",t,e,n)}}function ly(t,e,n){const s=((t,e,n)=>{switch(t.category){case"arithmetic":return Xn(()=>((t,e,n)=>{switch(t.op){case"BiasAdd":case"AddV2":case"Add":return[es(yg("a",t,e,n),yg("b",t,e,n))];case"AddN":return[ls(yg("tensors",t,e,n))];case"FloorMod":case"Mod":return[Ia(yg("a",t,e,n),yg("b",t,e,n))];case"Mul":return[rs(yg("a",t,e,n),yg("b",t,e,n))];case"RealDiv":case"Div":return[ss(yg("a",t,e,n),yg("b",t,e,n))];case"DivNoNan":return[Er(yg("a",t,e,n),yg("b",t,e,n))];case"FloorDiv":return[ns(yg("a",t,e,n),yg("b",t,e,n))];case"Sub":return[ca(yg("a",t,e,n),yg("b",t,e,n))];case"Minimum":return[Sa(yg("a",t,e,n),yg("b",t,e,n))];case"Maximum":return[Kr(yg("a",t,e,n),yg("b",t,e,n))];case"Pow":return[Va(yg("a",t,e,n),yg("b",t,e,n))];case"SquaredDifference":return[Li(yg("a",t,e,n),yg("b",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"basic_math":return Xn(()=>((t,e,n)=>{switch(t.op){case"Abs":case"ComplexAbs":return[as(yg("x",t,e,n))];case"Acos":return[is(yg("x",t,e,n))];case"Acosh":return[os(yg("x",t,e,n))];case"Asin":return[vs(yg("x",t,e,n))];case"Asinh":return[Ns(yg("x",t,e,n))];case"Atan":return[ks(yg("x",t,e,n))];case"Atan2":return[Cs(yg("x",t,e,n),yg("y",t,e,n))];case"Atanh":return[Ss(yg("x",t,e,n))];case"Ceil":return[er(yg("x",t,e,n))];case"Complex":return[te(yg("real",t,e,n),yg("imag",t,e,n))];case"Cos":return[fr(yg("x",t,e,n))];case"Cosh":return[mr(yg("x",t,e,n))];case"Elu":return[Ar(yg("x",t,e,n))];case"Erf":return[$r(yg("x",t,e,n))];case"Exp":return[Rr(yg("x",t,e,n))];case"Expm1":return[_r(yg("x",t,e,n))];case"Floor":return[Lr(yg("x",t,e,n))];case"Log":return[ea(yg("x",t,e,n))];case"Log1p":return[na(yg("x",t,e,n))];case"Imag":return[Gr(yg("x",t,e,n))];case"Neg":return[ia(yg("x",t,e,n))];case"Reciprocal":return[ui(yg("x",t,e,n))];case"Real":return[Da(yg("x",t,e,n))];case"Relu":return[ci(yg("x",t,e,n))];case"Round":return[yi(yg("x",t,e,n))];case"Selu":return[xi(yg("x",t,e,n))];case"Sigmoid":return[Gs(yg("x",t,e,n))];case"Sin":return[ki(yg("x",t,e,n))];case"Sign":return[Ni(yg("x",t,e,n))];case"Sinh":return[Ci(yg("x",t,e,n))];case"Softplus":return[oa(yg("x",t,e,n))];case"Sqrt":return[Mi(yg("x",t,e,n))];case"Square":return[Ea(yg("x",t,e,n))];case"Tanh":return[js(yg("x",t,e,n))];case"Tan":return[Vi(yg("x",t,e,n))];case"Relu6":case"ClipByValue":return[nr(yg("x",t,e,n),yg("clipValueMin",t,e,n),yg("clipValueMax",t,e,n))];case"Rsqrt":return[bi(bg(t.inputNames[0],e,n))];case"Prod":return[Ga(yg("x",t,e,n),yg("axes",t,e,n))];case"LeakyRelu":return[Yr(yg("x",t,e,n),yg("alpha",t,e,n))];case"Prelu":return[Ua(yg("x",t,e,n),yg("alpha",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"control":return ay(t,e,n);case"convolution":return Xn(()=>((t,e,n)=>{switch(t.op){case"Conv1D":{const s=yg("stride",t,e,n),r=yg("pad",t,e,n),a=yg("dataFormat",t,e,n).toUpperCase(),i=yg("dilation",t,e,n);return[lr(yg("x",t,e,n),yg("filter",t,e,n),s,r,a,i)]}case"Conv2D":{const s=yg("strides",t,e,n),r=Ng(t,e,n),a=yg("dataFormat",t,e,n).toUpperCase(),i=yg("dilations",t,e,n);return[or(yg("x",t,e,n),yg("filter",t,e,n),[s[1],s[2]],r,a,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:s,pad:r,dataFormat:a,dilations:i,biasArg:o,preluArg:l,activationFunc:u}=iy(t,e,n);return[Ao({x:yg("x",t,e,n),filter:yg("filter",t,e,n),strides:[s[1],s[2]],pad:r,dataFormat:a,dilations:[i[1],i[2]],bias:o,activation:u,preluActivationWeights:l})]}case"FusedDepthwiseConv2dNative":{const{stride:s,pad:r,dataFormat:a,dilations:i,biasArg:o,preluArg:l,activationFunc:u}=iy(t,e,n);return[Do({x:yg("x",t,e,n),filter:yg("filter",t,e,n),strides:[s[1],s[2]],pad:r,dataFormat:a,dilations:[i[1],i[2]],bias:o,activation:u,preluActivationWeights:l})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const s=yg("outputShape",t,e,n),r=yg("strides",t,e,n),a=Ng(t,e,n);return[cr(yg("x",t,e,n),yg("filter",t,e,n),s,[r[1],r[2]],a)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const s=yg("strides",t,e,n),r=Ng(t,e,n),a=yg("dilations",t,e,n),i=yg("dataFormat",t,e,n).toUpperCase();return[br(yg("input",t,e,n),yg("filter",t,e,n),[s[1],s[2]],r,i,[a[1],a[2]])]}case"Conv3D":{const s=yg("strides",t,e,n),r=yg("pad",t,e,n),a=yg("dataFormat",t,e,n).toUpperCase(),i=yg("dilations",t,e,n);return[hr(yg("x",t,e,n),yg("filter",t,e,n),[s[1],s[2],s[3]],r,a,[i[1],i[2],i[3]])]}case"AvgPool":{const s=yg("strides",t,e,n),r=yg("pad",t,e,n),a=yg("kernelSize",t,e,n);return[Bs(yg("x",t,e,n),[a[1],a[2]],[s[1],s[2]],r)]}case"MaxPool":{const s=yg("strides",t,e,n),r=yg("pad",t,e,n),a=yg("kernelSize",t,e,n);return[ba(yg("x",t,e,n),[a[1],a[2]],[s[1],s[2]],r)]}case"MaxPoolWithArgmax":{const s=yg("strides",t,e,n),r=yg("pad",t,e,n),a=yg("kernelSize",t,e,n),i=yg("includeBatchInIndex",t,e,n),{result:o,indexes:l}=wa(yg("x",t,e,n),[a[1],a[2]],[s[1],s[2]],r,i);return[o,l]}case"AvgPool3D":{const s=yg("strides",t,e,n),r=yg("pad",t,e,n),a=yg("kernelSize",t,e,n);return[Ps(yg("x",t,e,n),[a[1],a[2],a[3]],[s[1],s[2],s[3]],r)]}case"MaxPool3D":{const s=yg("strides",t,e,n),r=yg("pad",t,e,n),a=yg("kernelSize",t,e,n);return[xa(yg("x",t,e,n),[a[1],a[2],a[3]],[s[1],s[2],s[3]],r)]}case"Dilation2D":{const s=yg("strides",t,e,n),r=yg("pad",t,e,n),a=yg("dilations",t,e,n),i=s[1],o=s[2],l=a[1],u=a[2];return[wr(yg("x",t,e,n),yg("filter",t,e,n),[i,o],r,[l,u],"NHWC")]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"creation":return Xn(()=>((t,e,n)=>{switch(t.op){case"Fill":{const s=yg("shape",t,e,n),r=yg("dtype",t,e,n);return[Mr(s,yg("value",t,e,n),r)]}case"LinSpace":return[Qr(yg("start",t,e,n),yg("stop",t,e,n),yg("num",t,e,n))];case"Multinomial":{const s=yg("logits",t,e,n),r=yg("numSamples",t,e,n),a=yg("seed",t,e,n);return[$a(s,r,a)]}case"OneHot":{const s=yg("indices",t,e,n),r=yg("depth",t,e,n),a=yg("onValue",t,e,n),i=yg("offValue",t,e,n);return[on(s,r,a,i)]}case"Ones":return[Na(yg("shape",t,e,n),yg("dtype",t,e,n))];case"OnesLike":return[_a(yg("x",t,e,n))];case"RandomUniform":return[ii(yg("shape",t,e,n),yg("minval",t,e,n),yg("maxval",t,e,n),yg("dtype",t,e,n))];case"Range":return[li(yg("start",t,e,n),yg("stop",t,e,n),yg("step",t,e,n),yg("dtype",t,e,n))];case"TruncatedNormal":{const s=yg("shape",t,e,n),r=yg("mean",t,e,n),a=yg("stdDev",t,e,n),i=yg("seed",t,e,n);return[ji(s,r,a,yg("dtype",t,e,n),i)]}case"Zeros":return[va(yg("shape",t,e,n),yg("dtype",t,e,n))];case"ZerosLike":return[Ir(yg("x",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"dynamic":return(async(t,e,n)=>{switch(t.op){case"NonMaxSuppressionV5":{const{boxes:s,scores:r,maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:l}=oy(t,e,n),u=await Nl.nonMaxSuppressionWithScoreAsync(s,r,a,i,o,l);return[u.selectedIndices,u.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:s,scores:r,maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=oy(t,e,n),l=yg("padToMaxOutputSize",t,e,n),u=await Nl.nonMaxSuppressionPaddedAsync(s,r,a,i,o,l);return[u.selectedIndices,u.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:s,scores:r,maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=oy(t,e,n);return[await Nl.nonMaxSuppressionAsync(s,r,a,i,o)]}case"Where":{const s=Pe(yg("condition",t,e,n),"bool"),r=[await Ji(s)];return s.dispose(),r}case"ListDiff":return vi(yg("x",t,e,n),yg("y",t,e,n));default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n);case"evaluation":return Xn(()=>((t,e,n)=>{switch(t.op){case"TopKV2":{const s=yg("x",t,e,n),r=yg("k",t,e,n),a=yg("sorted",t,e,n),i=Hi(s,r,a);return[i.values,i.indices]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"image":return Xn(()=>((t,e,n)=>{switch(t.op){case"ResizeBilinear":{const s=yg("images",t,e,n),r=yg("size",t,e,n),a=yg("alignCorners",t,e,n);return[Nl.resizeBilinear(s,[r[0],r[1]],a)]}case"ResizeNearestNeighbor":{const s=yg("images",t,e,n),r=yg("size",t,e,n),a=yg("alignCorners",t,e,n);return[Nl.resizeNearestNeighbor(s,[r[0],r[1]],a)]}case"CropAndResize":{const s=yg("image",t,e,n),r=yg("boxes",t,e,n),a=yg("boxInd",t,e,n),i=yg("cropSize",t,e,n),o=yg("method",t,e,n),l=yg("extrapolationValue",t,e,n);return[Nl.cropAndResize(s,r,a,i,o,l)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"graph":return Xn(()=>((t,e,n)=>{switch(t.op){case"Const":return e[t.name];case"PlaceholderWithDefault":const s=yg("default",t,e,n);return[bg(t.name,e,n)||s];case"Placeholder":return[bg(t.name,e,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":return[kg(yg("x",t,e,n))];case"IdentityN":return yg("x",t,e,n).map(t=>kg(t));case"Snapshot":return[kg(yg("x",t,e,n))];case"Shape":return[oi(yg("x",t,e,n).shape,"int32")];case"ShapeN":return yg("x",t,e,n).map(t=>oi(t.shape));case"Size":return[Xr(yg("x",t,e,n).size,"int32")];case"Rank":return[Xr(yg("x",t,e,n).rank,"int32")];case"NoOp":return[Xr(1)];case"Print":const r=yg("x",t,e,n),a=yg("data",t,e,n),i=yg("message",t,e,n),o=yg("summarize",t,e,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let t=0;t<a.length;t++)console.log(Array.prototype.slice.call(a[t].dataSync()).slice(0,o));return[r];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"logical":return Xn(()=>((t,e,n)=>{switch(t.op){case"Equal":return[Cr(yg("a",t,e,n),yg("b",t,e,n))];case"NotEqual":return[Ra(yg("a",t,e,n),yg("b",t,e,n))];case"Greater":return[Vr(yg("a",t,e,n),yg("b",t,e,n))];case"GreaterEqual":return[Ur(yg("a",t,e,n),yg("b",t,e,n))];case"Less":return[Jr(yg("a",t,e,n),yg("b",t,e,n))];case"LessEqual":return[Zr(yg("a",t,e,n),yg("b",t,e,n))];case"LogicalAnd":return[fa(yg("a",t,e,n),yg("b",t,e,n))];case"LogicalNot":return[ma(yg("a",t,e,n))];case"LogicalOr":return[ga(yg("a",t,e,n),yg("b",t,e,n))];case"Select":case"SelectV2":return[Sr(yg("condition",t,e,n),yg("a",t,e,n),yg("b",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"matrices":return Xn(()=>((t,e,n)=>{switch(t.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[an(yg("a",t,e,n),yg("b",t,e,n),yg("transposeA",t,e,n),yg("transposeB",t,e,n))];case"Transpose":return[ln(yg("x",t,e,n),yg("perm",t,e,n))];case"_FusedMatMul":const[s,r]=yg("fusedOps",t,e,n),a="biasadd"===s,i="prelu"===r,o=yg("numArgs",t,e,n);if(a){if(i&&2!==o)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==o)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[l,u]=yg("args",t,e,n);return[_o({a:yg("a",t,e,n),b:yg("b",t,e,n),transposeA:yg("transposeA",t,e,n),transposeB:yg("transposeB",t,e,n),bias:l,activation:r,preluActivationWeights:u})];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"normalization":return Xn(()=>((t,e,n)=>{switch(t.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[Ys(yg("x",t,e,n),yg("mean",t,e,n),yg("variance",t,e,n),yg("offset",t,e,n),yg("scale",t,e,n),yg("epsilon",t,e,n))];case"LRN":return[ta(yg("x",t,e,n),yg("radius",t,e,n),yg("bias",t,e,n),yg("alpha",t,e,n),yg("beta",t,e,n))];case"Softmax":return[Ai(yg("x",t,e,n))];case"LogSoftmax":return[pa(yg("x",t,e,n))];case"SparseToDense":return[bo(yg("sparseIndices",t,e,n),yg("outputShape",t,e,n),yg("sparseValues",t,e,n),yg("defaultValue",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"reduction":return Xn(()=>((t,e,n)=>{switch(t.op){case"Max":{const s=yg("axis",t,e,n),r=yg("keepDims",t,e,n);return[ua(yg("x",t,e,n),s,r)]}case"Mean":{const s=yg("axis",t,e,n),r=yg("keepDims",t,e,n);return[ka(yg("x",t,e,n),s,r)]}case"Min":{const s=yg("axis",t,e,n),r=yg("keepDims",t,e,n);return[Ca(yg("x",t,e,n),s,r)]}case"Sum":{const s=yg("axis",t,e,n),r=yg("keepDims",t,e,n);return[ha(yg("x",t,e,n),s,r)]}case"All":{const s=yg("axis",t,e,n),r=yg("keepDims",t,e,n);return[ys(yg("x",t,e,n),s,r)]}case"Any":{const s=yg("axis",t,e,n),r=yg("keepDims",t,e,n);return[bs(yg("x",t,e,n),s,r)]}case"ArgMax":{const s=yg("axis",t,e,n);return[xs(yg("x",t,e,n),s)]}case"ArgMin":{const s=yg("axis",t,e,n);return[ws(yg("x",t,e,n),s)]}case"Prod":{const s=yg("axis",t,e,n),r=yg("keepDims",t,e,n);return[Ga(yg("x",t,e,n),s,r)]}case"Cumsum":{const s=yg("axis",t,e,n),r=yg("exclusive",t,e,n),a=yg("reverse",t,e,n);return[gr(yg("x",t,e,n),s,r,a)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"slice_join":return Xn(()=>((t,e,n)=>{switch(t.op){case"ConcatV2":case"Concat":{const s=yg("n",t,e,n),r=yg("axis",t,e,n);let a=yg("tensors",t,e,n);return a=a.slice(0,s),[Us(a,r)]}case"GatherV2":case"Gather":{const s=yg("axis",t,e,n),r=yg("x",t,e,n),a=yg("indices",t,e,n);return[Wr(r,Pe(a,"int32"),s)]}case"ReverseV2":case"Reverse":{const s=yg("axis",t,e,n),r=yg("x",t,e,n);return[pi(r,s)]}case"Slice":{const s=yg("begin",t,e,n),r=yg("size",t,e,n);return[Hs(yg("x",t,e,n),s,r)]}case"StridedSlice":{const s=yg("begin",t,e,n),r=yg("end",t,e,n),a=yg("strides",t,e,n),i=yg("beginMask",t,e,n),o=yg("endMask",t,e,n),l=yg("ellipsisMask",t,e,n),u=yg("newAxisMask",t,e,n),c=yg("shrinkAxisMask",t,e,n),h=yg("x",t,e,n);return[Wi(h,s,r,a,i,o,l,u,c)]}case"Pack":return Xn(()=>{const s=yg("axis",t,e,n),r=yg("tensors",t,e,n),a=r[0].shape,i=zi(r[0]).shape,o=r.map(t=>{const e=R(t.shape,a);if(!e&&!R(zi(t).shape,i))throw new Error("the input tensors shape does not match");return e?t:rn(t,a)});return[Bi(o,s)]});case"Unpack":{const s=yg("axis",t,e,n),r=yg("tensor",t,e,n);return Ki(r,s)}case"Tile":{const s=yg("reps",t,e,n);return[Fr(yg("x",t,e,n),s)]}case"Split":case"SplitV":{const s=yg("axis",t,e,n),r=yg("numOrSizeSplits",t,e,n),a=yg("x",t,e,n);return Fi(a,r,s)}case"ScatterNd":{const s=yg("indices",t,e,n),r=yg("values",t,e,n),a=yg("shape",t,e,n);return[yo(s,r,a)]}case"GatherNd":{const s=yg("x",t,e,n),r=yg("indices",t,e,n);return[xo(s,r)]}case"SparseToDense":{const s=yg("sparseIndices",t,e,n),r=yg("outputShape",t,e,n),a=yg("sparseValues",t,e,n),i=yg("defaultValue",t,e,n);return[bo(s,a,r,a.dtype===i.dtype?i:Pe(i,a.dtype))]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"spectral":return Xn(()=>((t,e,n)=>{switch(t.op){case"FFT":return[$i(yg("x",t,e,n))];case"IFFT":return[Ri(yg("x",t,e,n))];case"RFFT":return[Oi(yg("x",t,e,n))];case"IRFFT":return[Di(yg("x",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"transformation":return Xn(()=>((t,e,n)=>{switch(t.op){case"Cast":return[Pe(yg("x",t,e,n),yg("dtype",t,e,n))];case"ExpandDims":{const s=yg("axis",t,e,n);return[Dr(yg("x",t,e,n),s)]}case"Squeeze":{const s=yg("axis",t,e,n);return[zi(yg("x",t,e,n),s)]}case"Reshape":return[rn(yg("x",t,e,n),yg("shape",t,e,n))];case"PadV2":case"Pad":return[Oa(yg("x",t,e,n),yg("padding",t,e,n),yg("constantValue",t,e,n))];case"SpaceToBatchND":{const s=yg("blockShape",t,e,n),r=yg("paddings",t,e,n);return[Pa(yg("x",t,e,n),s,r)]}case"BatchToSpaceND":{const s=yg("blockShape",t,e,n),r=yg("crops",t,e,n);return[Ks(yg("x",t,e,n),s,r)]}case"DepthToSpace":{const s=yg("blockSize",t,e,n),r=yg("dataFormat",t,e,n).toUpperCase();return[yr(yg("x",t,e,n),s,r)]}case"BroadcastTo":return[tr(yg("x",t,e,n),yg("shape",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n));case"custom":const s=gg(t.op);if(s&&s.customExecutor)return s.customExecutor(new ey(t,e,n));throw TypeError(`Custom op ${t.op} is not registered.`);default:throw TypeError(`Unknown op '${t.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(t,e,n);return s instanceof Promise?s.then(t=>[].concat(t)):[].concat(s)}class uy{constructor(t={},e={},n={},s={}){this.weightMap=t,this.tensorArrayMap=e,this.tensorListMap=n,this.functionMap=s,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(t,e){return{id:t,frameName:e,iterationId:0}}set currentContext(t){this.contexts!==t&&(this.contexts=t,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const t=[];for(let e=0;e<this.contexts.length-1;e++){const n=this.contexts.slice(0,this.contexts.length-e);t.push(this.contextIdforContexts(n))}t.push(""),this._currentContextIds=t}contextIdforContexts(t){return t?t.map(t=>0===t.id&&0===t.iterationId?"":`${t.frameName}-${t.iterationId}`).join("/"):""}enterFrame(t){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,t)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const t=Object.assign({},this.contexts[this.contexts.length-1]);t.iterationId+=1,t.id=this.lastId,this.contexts.splice(-1,1,t),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(t){return this.weightMap[t]}addTensorArray(t){this.tensorArrayMap[t.id]=t}getTensorArray(t){return this.tensorArrayMap[t]}addTensorList(t){this.tensorListMap[t.id]=t}getTensorList(t){return this.tensorListMap[t]}dispose(t){for(const e in this.tensorArrayMap)this.tensorArrayMap[e].clearAndClose(t);for(const e in this.tensorListMap)this.tensorListMap[e].clearAndClose(t)}}function cy(t,e,n){const s=new Set,r=[];let a=null,i=null;const o=new Set,l=Object.keys(t).map(t=>vg(t)[0]),u=[...e];for(;u.length>0;){const t=u.pop();(dy(t)||fy(t))&&null==a&&(a=t,i=a.children.map(t=>t.name).filter(t=>s.has(t))),s.add(t.name),null==n[t.name]&&(-1===l.indexOf(t.name)&&(0!==t.inputs.length?t.inputs.forEach(t=>{o.has(t.name)||(o.add(t.name),u.push(t))}):r.push(t.name)))}return{inputs:t,outputs:e,usedNodes:s,missingInputs:r,dynamicNode:a,syncInputs:i}}const hy=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],py=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"];function dy(t){return hy.indexOf(t.op)>=0}function fy(t){return py.indexOf(t.op)>=0}class my{constructor(t,e){this.graph=t,this.parent=e,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this._outputs=t.outputs,this._inputs=t.inputs,this._signature=t.signature,this._functions=t.functions,null!=t.functions&&Object.keys(t.functions).forEach(e=>{this._functionExecutorMap[e]=new my(t.functions[e],this)})}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(t){const e=Object.keys(t).map(e=>t[e].map(t=>t.id));this._weightIds=[].concat(...e),this._weightMap=t}get inputs(){return this._inputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get outputs(){return this._outputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get inputNodes(){return this._inputs.map(t=>t.signatureKey||t.name)}get outputNodes(){return this._outputs.map(t=>{const e=t.signatureKey||t.name;return t.defaultOutput?`${e}:${t.defaultOutput}`:e})}get functions(){return Object.keys(this._functions).reduce((t,e)=>(t[e]=this._functions[e].signature,t),{})}getCompilationKey(t,e){const n=t.map(t=>t.name).sort(),s=e.map(t=>t.name).sort();return n.join(this.SEPERATOR)+"--"+s.join(this.SEPERATOR)}compile(t,e){const n=cy(t,e,this.weightMap),{missingInputs:s,dynamicNode:r,syncInputs:a}=n;if(null!=r)throw new Error(`This execution contains the node '${r.name}', which has the dynamic op '${r.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(s.length>0){const n=e.map(t=>t.name),r=Object.keys(t);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${r}]. Missing the following inputs: [${s}]`)}return function(t,e,n){const{usedNodes:s,inputs:r}=n,a=[];Object.keys(r).map(t=>vg(t)[0]).map(e=>t.nodes[e]).forEach(t=>{s.has(t.name)&&a.push(t)}),t.weights.forEach(t=>{s.has(t.name)&&a.push(t)});const i=new Set,o=[];for(;a.length>0;){const t=a.pop();i.add(t.name),e[t.name]||o.push(t),t.children.forEach(t=>{!i.has(t.name)&&s.has(t.name)&&t.inputs.every(t=>i.has(t.name))&&a.push(t)})}return o}(this.graph,this.weightMap,n)}execute(t,e){t=this.mapInputs(t);const n=Object.keys(t).sort();this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e);const s=n.map(t=>this.graph.nodes[vg(t)[0]]),r=e.map(t=>vg(t)[0]),a=r.map(t=>this.graph.nodes[t]),i=this.getCompilationKey(s,a);let o=this.compiledMap.get(i);null==o&&(o=this.compile(t,a),this.compiledMap.set(i,o));const l={},u={};return Xn(()=>{const n=new uy(this.weightMap,l,u,this.functionExecutorMap),s=Object.assign({},this.weightMap);Object.keys(t).forEach(e=>{const[n,r]=vg(e),a=[];a[r]=t[e],s[n]=a});const a=this.getFrozenTensorIds(s),i={};for(let t=0;t<o.length;t++){const e=o[t];if(!s[e.name]){const t=ly(e,s,n);if(t instanceof Promise)throw new Error(`The execution of the op '${e.op}' returned a promise. Please use model.executeAsync() instead.`);s[e.name]=t,this.checkTensorForDisposal(e.name,e,s,n,a,r,i)}}return null==this.parent&&n.dispose(a),e.map(t=>bg(t,s,n))})}getFrozenTensorIds(t){const e=[].concat.apply([],Object.keys(t).map(e=>t[e]).map(t=>t.map(t=>t.id)));return new Set(e)}checkTensorForDisposal(t,e,n,s,r,a,i){"control"!==e.category&&-1===a.indexOf(t)&&(n[t].forEach(t=>{null!=t&&(i[t.id]=(i[t.id]||0)+e.children.length)}),e.inputs.forEach(t=>{if("control"!==t.category){const e=function(t,e,n){return e[wg(t,n.currentContextId)]}(t.name,n,s);null!=e&&e.forEach(t=>{if(t&&!r.has(t.id)){const e=i[t.id];1===e?(t.dispose(),delete i[t.id]):null!=e&&i[t.id]--}})}}))}async executeAsync(t,e){return this._executeAsync(t,e)}async _executeAsync(t,e,n=!1,s={},r={}){n||(t=this.mapInputs(t),this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e));const a=new uy(this.weightMap,s,r,this.functionExecutorMap),i=await this.executeWithControlFlow(t,a,e,n),o=e.map(t=>bg(t,i,a)),l=o.map(t=>t.id),u=Object.keys(t).map(e=>t[e].id),c=new Set([...l,...u,...this.weightIds]);return Object.keys(i).forEach(t=>{i[t].forEach(t=>{!t||t.isDisposed||c.has(t.id)||t.dispose()})}),null==this.parent&&a.dispose(c),o}async executeFunctionAsync(t,e,n){const s=t.reduce((t,e,n)=>(t[this.inputs[n].name]=e,t),{});return this._executeAsync(s,this.outputNodes,!0,e,n)}async executeWithControlFlow(t,e,n,s){const r=Object.keys(t),a=r.map(t=>this.graph.nodes[vg(t)[0]]),i=n.map(t=>vg(t)[0]),o=i.map(t=>this.graph.nodes[t]),{usedNodes:l,missingInputs:u,dynamicNode:c,syncInputs:h}=cy(t,o,this.weightMap),p=[...a,...this.graph.weights].map(t=>({node:t,contexts:e.currentContext})),d=Object.assign({},this.weightMap);Object.keys(t).forEach(e=>{const[n,s]=vg(e),r=[];r[s]=t[e],d[n]=r});const f={},m=this.getFrozenTensorIds(d),g={};for(;p.length>0;){const t=this.processStack(a,p,e,d,g,m,i,f,l);await Promise.all(t)}null!=c||s||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const y=o.filter(t=>!dy(t)&&!bg(t.name,d,e)).map(t=>t.name);if(y.length>0){let t="";throw null!=c&&(t=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${h}]`),new Error(`Cannot compute the outputs [${y}] from the provided inputs [${r}]. Consider providing the following inputs: [${u}]. ${t}`)}return d}processStack(t,e,n,s,r,a,i,o,l){const u=[];for(;e.length>0;){const c=e.pop();n.currentContext=c.contexts;let h="";if("Enter"===c.node.op&&yg("isConstant",c.node,s,n)&&([h]=xg(c.node.name,n)),-1===t.indexOf(c.node)){const t=ly(c.node,s,n);h||([h]=xg(c.node.name,n));const p=n.currentContext;t instanceof Promise?u.push(t.then(t=>(s[h]=t,n.currentContext=p,this.checkTensorForDisposal(h,c.node,s,n,a,i,o),this.processChildNodes(c.node,e,n,s,r,l),t))):(s[h]=t,this.checkTensorForDisposal(h,c.node,s,n,a,i,o),this.processChildNodes(c.node,e,n,s,r,l))}else this.processChildNodes(c.node,e,n,s,r,l)}return u}processChildNodes(t,e,n,s,r,a){t.children.forEach(t=>{const[i]=xg(t.name,n);!r[i]&&a.has(t.name)&&("Merge"===t.op?t.inputNames.some(t=>!!bg(t,s,n))&&(r[i]=!0,e.push({contexts:n.currentContext,node:t})):t.inputNames.every(t=>!!bg(t,s,n))&&(r[i]=!0,e.push({contexts:n.currentContext,node:t})))})}dispose(){Object.keys(this.weightMap).forEach(t=>this.weightMap[t].forEach(t=>t.dispose()))}checkInputShapeAndType(t){Object.keys(t).forEach(e=>{const n=t[e],[s]=vg(e),r=this.graph.nodes[s];if(r.attrParams.shape&&r.attrParams.shape.value){const t=r.attrParams.shape.value;I(t.length===n.shape.length&&n.shape.every((e,n)=>-1===t[n]||t[n]===e),()=>`The shape of dict['${r.name}'] provided in model.execute(dict) must be [${t}], but was [${n.shape}]`)}r.attrParams.dtype&&r.attrParams.dtype.value&&I(n.dtype===r.attrParams.dtype.value,()=>`The dtype of dict['${r.name}'] provided in model.execute(dict) must be ${r.attrParams.dtype.value}, but was ${n.dtype}`)})}mapInputs(t){const e={};for(const n in t)if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]){e[this._signature.inputs[n].name]=t[n]}else e[n]=t[n];return e}checkInputs(t){const e=Object.keys(t).filter(t=>{const[e]=vg(t);return null==this.graph.nodes[e]});if(e.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${e}] that are not part of graph`)}mapOutputs(t){return t.map(t=>{if(null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[t]){return this._signature.outputs[t].name}return t},{})}checkOutputs(t){t.forEach(t=>{const[e]=vg(t);if(!this.graph.nodes[e])throw new Error(`The output '${t}' is not found in the graph`)})}}class gy{constructor(t,e={}){this.modelUrl=t,this.loadOptions=e,this.version="n/a",null==e&&(this.loadOptions={})}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}findIOHandler(){const t=this.modelUrl;if(null!=t.load)this.handler=t;else if(null!=this.loadOptions.requestInit)this.handler=tn(t,this.loadOptions);else{const e=me(t,this.loadOptions);if(0===e.length)e.push(tn(t,this.loadOptions));else if(e.length>1)throw new Error(`Found more than one (${e.length}) load handlers for URL '${[t]}'`);this.handler=e[0]}}async load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const t=await this.handler.load();return this.loadSync(t)}loadSync(t){this.artifacts=t;const e=this.artifacts.modelTopology;let n={};null!=this.artifacts.userDefinedMetadata&&(n=this.artifacts.userDefinedMetadata.signature),this.version=`${e.versions.producer}.${e.versions.minConsumer}`;const s=ae(this.artifacts.weightData,this.artifacts.weightSpecs);return this.executor=new my(Pg.Instance.transformGraph(e,n)),this.executor.weightMap=this.convertTensorMapToTensorsMap(s),!0}async save(t,e){if("string"==typeof t){const e=fe(t);if(0===e.length)throw new Error(`Cannot find any save handlers for URL '${t}'`);if(e.length>1)throw new Error(`Found more than one (${e.length}) save handlers for URL '${t}'`);t=e[0]}if(null==t.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return t.save(this.artifacts)}predict(t,e){return this.execute(t,this.outputNodes)}normalizeInputs(t){if(!(t instanceof St||Array.isArray(t)))return t;if((t=Array.isArray(t)?t:[t]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${t.length} input tensors.`);return this.inputNodes.reduce((e,n,s)=>(e[n]=t[s],e),{})}normalizeOutputs(t){return t=t||this.outputNodes,Array.isArray(t)?t:[t]}execute(t,e){t=this.normalizeInputs(t),e=this.normalizeOutputs(e);const n=this.executor.execute(t,e);return n.length>1?n:n[0]}async executeAsync(t,e){t=this.normalizeInputs(t),e=this.normalizeOutputs(e);const n=await this.executor.executeAsync(t,e);return n.length>1?n:n[0]}convertTensorMapToTensorsMap(t){return Object.keys(t).reduce((e,n)=>(e[n]=[t[n]],e),{})}dispose(){this.executor.dispose()}}function yy(t,e,n=new Map,s=new Set){if(null==t)return null;if(s.has(t))throw new Error("Circular references are not supported.");if(n.has(t))return n.get(t);const r=e(t);if(r.recurse&&null!==r.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(r.recurse){if(vy(t)){const r=Array.isArray(t)?[]:{};s.add(t);for(const a in t){const i=yy(t[a],e,n,s);r[a]=i}return s.delete(t),r}throw new Error("Can't recurse into non-iterable type: "+t)}return n.set(t,r.value),r.value}function by(t,e=xy){return function t(e,n,s=new Set){const r=e[0];if(s.has(r))throw new Error("Circular references are not supported.");const a=n(e);if(a.recurse&&null!==a.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(a.recurse){if(vy(r)){const a=Array.isArray(r)?[]:{};s.add(r);for(const i in r){const r=e.map(t=>t[i]),o=t(r,n,s);a[i]=o}return s.delete(r),a}throw new Error("Can't recurse into non-iterable type: "+r)}return a.value}(t,e)}function xy(t){return null===t?null:vy(t[0])?{value:null,recurse:!0}:{value:t,recurse:!1}}async function wy(t,e){const n=new Map;yy(t,e,n);for(const t of Array.from(n.keys())){const e=n.get(t);if(e instanceof Promise){const s=await e;n.set(t,s)}}return yy(t,e,n)}function vy(t){return null!=t&&!ArrayBuffer.isView(t)&&(Array.isArray(t)||"object"==typeof t&&!(t instanceof St))}function Ny(t){return function(t,e){return yy(t,e)}(t,ky)}function ky(t){return t instanceof St?{value:t.clone(),recurse:!1}:vy(t)?{value:null,recurse:!0}:{value:t,recurse:!1}}class Cy{constructor(t){if(this.capacity=t,this.begin=0,this.end=0,null==t)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(t<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(t),this.doubledCapacity=2*t}wrap(t){for(;t<0;)t+=this.doubledCapacity;return t%this.doubledCapacity}get(t){if(t<0)throw new RangeError("Can't get item at a negative index.");return this.data[t%this.capacity]}set(t,e){if(t<0)throw new RangeError("Can't set item at a negative index.");this.data[t%this.capacity]=e}length(){let t=this.end-this.begin;return t<0&&(t=this.doubledCapacity+t),t}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,t),this.end=this.wrap(this.end+1)}pushAll(t){for(const e of t)this.push(e)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const t=this.get(this.end);return this.set(this.end,void 0),t}unshift(t){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,t)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),t}shuffleExcise(t){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.wrap(this.begin+t),n=this.get(e);return this.set(e,this.pop()),n}}class Sy extends Cy{constructor(){super(Sy.INITIAL_CAPACITY)}isFull(){return!1}push(t){super.isFull()&&this.expand(),super.push(t)}unshift(t){super.isFull()&&this.expand(),super.unshift(t)}expand(){const t=2*this.capacity,e=new Array(t),n=this.length();for(let t=0;t<n;t++)e[t]=this.get(this.wrap(this.begin+t));this.data=e,this.capacity=t,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}function Iy(t){return new $y(t)}function Ey(t){return new Ry(t)}function Ty(t,e){return new Vy(t,e)}Sy.INITIAL_CAPACITY=32;class Ay{async toArray(){const t=[];let e=await this.next();for(;!e.done;)t.push(e.value),e=await this.next();return t}async toArrayForTest(){const t=this.prefetch(100),e=[];let n=await t.next();for(;!n.done;)e.push(n.value),n=await t.next();return e}async resolveFully(){let t=await this.next();for(;!t.done;)t=await this.next()}async resolveWhile(t){let e=await this.next(),n=t(e.value);for(;!e.done&&n;)e=await this.next(),n=t(e.value)}handleErrors(t){return new zy(this,t)}filter(t){return new My(this,t)}map(t){return new Ly(this,t)}mapAsync(t){return new By(this,t)}serialMapAsync(t){return new By(this,t).serial()}flatmap(t){return new Wy(this,t)}async forEachAsync(t){return this.map(t).resolveFully()}async serialForEach(t){return this.serialMapAsync(t).resolveWhile(t=>!0===t)}rowMajorBatch(t,e=!0){return new Oy(this,t,e)}columnMajorBatch(t,e=!0,n=xy){return this.rowMajorBatch(t,e).map(t=>by(t,n))}concatenate(t,e){return new Vy(Iy([this,t]),e)}take(t){return t<0||null==t?this:new Fy(this,t)}skip(t){return t<0||null==t?this:new _y(this,t)}prefetch(t){return new Hy(this,t)}shuffle(t,e){return new jy(this,t,e)}serial(){return new Dy(this)}}class $y extends Ay{constructor(t){super(),this.items=t,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const t=this.items[this.trav];return this.trav++,{value:Ny(t),done:!1}}}class Ry extends Ay{constructor(t){super(),this.nextFn=t}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(t){throw t.message="Error thrown while iterating through a dataset: "+t.message,t}}}class Dy extends Ay{constructor(t){super(),this.upstream=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> Serial"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){return this.upstream.next()}}class _y extends Ay{constructor(t,e){super(),this.upstream=t,this.maxCount=e,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> Skip"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const t=await this.upstream.next();if(t.done)return t;Yn(t.value)}return this.upstream.next()}}class Fy extends Ay{constructor(t,e){super(),this.upstream=t,this.maxCount=e,this.count=0}summary(){return this.upstream.summary()+" -> Take"}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class Oy extends Ay{constructor(t,e,n=!0){super(),this.upstream=t,this.batchSize=e,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> RowMajorBatch"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){const t=[];for(;t.length<this.batchSize;){const e=await this.upstream.next();if(e.done)return this.enableSmallLastBatch&&t.length>0?{value:t,done:!1}:{value:null,done:!0};t.push(e.value)}return{value:t,done:!1}}}class My extends Ay{constructor(t,e){super(),this.upstream=t,this.predicate=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> Filter"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;){const t=await this.upstream.next();if(t.done||this.predicate(t.value))return t;Yn(t.value)}}}class Ly extends Ay{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return this.upstream.summary()+" -> Map"}async next(){const t=await this.upstream.next();if(t.done)return{value:null,done:!0};const e=zt(t.value),n=this.transform(t.value),s=zt(n);for(const t of e)Lt(t,s)||t.dispose();return{value:n,done:!1}}}class zy extends Ay{constructor(t,e){super(),this.upstream=t,this.handler=e,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return this.upstream.summary()+" -> handleErrors"}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(t){if(!this.handler(t))return{value:null,done:!0}}}}class By extends Ay{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return this.upstream.summary()+" -> AsyncMap"}async next(){const t=await this.upstream.next();if(t.done)return{value:null,done:!0};const e=zt(t.value),n=await this.transform(t.value),s=zt(n);for(const t of e)Lt(t,s)||t.dispose();return{value:n,done:!1}}}class Py extends Ay{constructor(){super(),this.outputQueue=new Sy,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class Wy extends Py{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return this.upstream.summary()+" -> Flatmap"}async pump(){const t=await this.upstream.next();if(t.done)return!1;const e=zt(t.value),n=this.transform(t.value),s=zt(n);this.outputQueue.pushAll(n);for(const t of e)Lt(t,s)||t.dispose();return!0}}class Vy extends Ay{constructor(t,e){super(),this.baseErrorHandler=e,this.lastRead=null,this.iterator=null,this.moreIterators=t}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(t){if(await t,null==this.iterator){const t=await this.moreIterators.next();if(t.done)return{value:null,done:!0};this.iterator=t.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const e=await this.iterator.next();return e.done?(this.iterator=null,this.readFromChain(t)):e}}var Uy;!function(t){t[t.FAIL=0]="FAIL",t[t.SHORTEST=1]="SHORTEST",t[t.LONGEST=2]="LONGEST"}(Uy||(Uy={}));class Gy extends Ay{constructor(t,e=Uy.FAIL){super(),this.iterators=t,this.mismatchMode=e,this.count=0,this.currentPromise=null}summary(){return"{TODO: fill in upstream of zip summaries} -> Zip"}async nextState(t){await t;let e=0,n=0;const s=await wy(this.iterators,(function(t){if(t instanceof Ay){return{value:t.next().then(t=>(e++,t.done&&n++,t.value)),recurse:!1}}return{value:null,recurse:!0}}));if(e===n)return{value:null,done:!0};if(n>0)switch(this.mismatchMode){case Uy.FAIL:throw new Error(`Zipped streams should have the same length. Mismatched at element ${this.count}.`);case Uy.SHORTEST:return{value:null,done:!0};case Uy.LONGEST:}return this.count++,{value:s,done:!1}}async next(){return this.currentPromise=this.nextState(this.currentPromise),this.currentPromise}}class Hy extends Ay{constructor(t,e){super(),this.upstream=t,this.bufferSize=e,this.buffer=new Cy(e)}summary(){return this.upstream.summary()+" -> Prefetch"}refill(){for(;!this.buffer.isFull();){const t=this.upstream.next();this.buffer.push(t)}}next(){return this.refill(),this.buffer.shift()}}class jy extends Hy{constructor(t,e,n){super(t,e),this.upstream=t,this.windowSize=e,this.upstreamExhausted=!1,this.random=ti(n||it().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}randomInt(t){return Math.floor(this.random()*t)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const t=this.chooseIndex(),e=await this.buffer.shuffleExcise(t);if(!e.done)return this.refill(),e;this.upstreamExhausted=!0}return{value:null,done:!0}}}class qy{constructor(){this.size=null}batch(t,e=!0){const n=this;let s;return I(t>0,()=>"batchSize needs to be positive, but it is\n      "+t),s=this.size===1/0||null==this.size?this.size:e?Math.ceil(this.size/t):Math.floor(this.size/t),Ky(async()=>(await n.iterator()).columnMajorBatch(t,e,Xy),s)}concatenate(t){const e=this;let n;return n=this.size===1/0||t.size===1/0?1/0:null!=this.size&&null!=t.size?this.size+t.size:null,Ky(async()=>(await e.iterator()).concatenate(await t.iterator()),n)}filter(t){const e=this;let n;return n=this.size===1/0?1/0:null,Ky(async()=>(await e.iterator()).filter(e=>Xn(()=>t(e))),n)}async forEachAsync(t){return(await this.iterator()).forEachAsync(t)}map(t){const e=this;return Ky(async()=>(await e.iterator()).map(e=>Xn(()=>t(e))),this.size)}mapAsync(t){const e=this;return Ky(async()=>(await e.iterator()).mapAsync(t),this.size)}prefetch(t){if(null==t)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const e=this;return Ky(async()=>(await e.iterator()).prefetch(t),this.size)}repeat(t){const e=this;let n;return n=null!=this.size&&t>0?this.size*t:0===t?0:null!=this.size&&(void 0===t||t<0)?1/0:null,Ky(async()=>Ty(Ey(async()=>({value:await e.iterator(),done:!1})).take(t)),n)}skip(t){const e=this;let n;return n=null!=this.size&&t>=0&&this.size>=t?this.size-t:null!=this.size&&(this.size<t||void 0===t||t<0)?0:null,Ky(async()=>(await e.iterator()).skip(t),n)}shuffle(t,e,n=!0){if(null==t||t<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const s=this,r=ti(e||it().toString());return Ky(async()=>{let e=r.int32();return n&&(e+=r.int32()),(await s.iterator()).shuffle(t,e.toString())},this.size)}take(t){const e=this;let n;return n=null!=this.size&&this.size>t?t:null!=this.size&&this.size<=t?this.size:null,Ky(async()=>(await e.iterator()).take(t),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function Ky(t,e=null){return new class extends qy{constructor(){super(...arguments),this.size=e}async iterator(){return t()}}}function Xy(t){if(null===t)return null;const e=t[0];if(null==(n=e)||null===(s=n)||"object"!=typeof s&&"function"!=typeof s||Array.isArray(n)||"object"==typeof n&&n instanceof St||G(n)){return{value:function(t){if(0===t.length)throw new Error("Can't make a batch of zero elements.");return t[0]instanceof St?Bi(t):ne(t)}(t),recurse:!1}}var n,s;return{value:null,recurse:!0}}qy.MAX_BUFFER_SIZE=1e4;class Yy extends qy{constructor(t){super(),this.input=t}async iterator(){return(await this.input.iterator()).decodeUTF8().split("\n").map(t=>(t.endsWith("\r")&&(t=t.slice(0,-1)),t))}}const Jy=Symbol("out"),Zy=Symbol("field"),Qy=Symbol("quote"),tb=Symbol("quoteafterquote"),eb=Symbol("quoteinquote");class nb extends qy{constructor(t,e){super(),this.input=t,this.hasHeader=!0,this.fullColumnNames=null,this.columnNamesValidated=!1,this.columnConfigs=null,this.configuredColumnsOnly=!1,this.delimiter=",",this.delimWhitespace=!1,this.base=new Yy(t),e||(e={}),this.hasHeader=!1!==e.hasHeader,this.fullColumnNames=e.columnNames,this.columnConfigs=e.columnConfigs,this.configuredColumnsOnly=e.configuredColumnsOnly,e.delimWhitespace?(I(null==e.delimiter,()=>"Delimiter should not be provided when delimWhitespace is true."),this.delimWhitespace=!0,this.delimiter=" "):this.delimiter=e.delimiter?e.delimiter:","}async columnNames(){return this.columnNamesValidated||await this.setColumnNames(),this.configuredColumnsOnly?Object.keys(this.columnConfigs):this.fullColumnNames}async setColumnNames(){const t=await this.maybeReadHeaderLine();if(!this.fullColumnNames&&!t)throw new Error("Column names must be provided if there is no header line.");this.fullColumnNames&&t&&I(t.length===this.fullColumnNames.length,()=>"The length of provided columnNames ("+this.fullColumnNames.length.toString()+") does not match the length of the header line read from file ("+t.length.toString()+")."),this.fullColumnNames||(this.fullColumnNames=t);const e=this.fullColumnNames.reduce((t,e)=>(t[e]=t[e]+1||1,t),{}),n=Object.keys(e).filter(t=>e[t]>1);if(I(0===n.length,()=>"Duplicate column names found: "+n.toString()),this.columnConfigs)for(const t of Object.keys(this.columnConfigs)){if(-1===this.fullColumnNames.indexOf(t))throw new Error('The key "'+t+'" provided in columnConfigs does not match any of the column names ('+this.fullColumnNames.toString()+").")}this.columnNamesValidated=!0}async maybeReadHeaderLine(){if(this.hasHeader){const t=await this.base.iterator(),e=await t.next();if(e.done)throw new Error("No data was found for CSV parsing.");const n=e.value;return this.parseRow(n,!1)}return null}async iterator(){this.columnNamesValidated||await this.setColumnNames();let t=await this.base.iterator();return this.hasHeader&&(t=t.skip(1)),t.map(t=>this.makeDataElement(t))}makeDataElement(t){const e=this.parseRow(t),n={},s={};for(let r=0;r<this.fullColumnNames.length;r++){const a=this.fullColumnNames[r],i=this.columnConfigs?this.columnConfigs[a]:null;if(!this.configuredColumnsOnly||i){const o=e[r];let l=null;if(""===o)if(i&&void 0!==i.default)l=i.default;else{if(i&&(i.required||i.isLabel))throw new Error(`Required column ${a} is empty in this line: ${t}`);l=void 0}else{const t=Number(o);if(isNaN(t))l=i&&"bool"===i.dtype?this.getBoolean(o):o;else if(i&&i.dtype)switch(i.dtype){case"float32":l=t;break;case"int32":l=Math.floor(t);break;case"bool":l=this.getBoolean(o);break;default:l=t}else l=t}i&&i.isLabel?s[a]=l:n[a]=l}}return 0===Object.keys(s).length?n:{xs:n,ys:s}}getBoolean(t){return"1"===t||"true"===t.toLowerCase()?1:0}parseRow(t,e=!0){const n=[];let s=0;const r=t.length;let a=Jy;for(let e=0;e<r;e++)switch(a){case Jy:switch(t.charAt(e)){case'"':s=e+1,a=Qy;break;case this.delimiter:if(s=e+1," "===this.delimiter&&this.delimWhitespace)break;n.push(""),a=Jy;break;default:a=Zy,s=e}break;case Zy:switch(t.charAt(e)){case this.delimiter:n.push(t.substring(s,e)),a=Jy,s=e+1}break;case Qy:switch(t.charAt(e)){case'"':a=tb}break;case tb:switch(t.charAt(e)){case this.delimiter:n.push(t.substring(s,e-1)),a=Jy,s=e+1;break;case'"':a=Qy;break;default:a=eb}break;case eb:switch(t.charAt(e)){case'"':a=Qy}}if(a===tb?n.push(t.substring(s,r-1)):n.push(t.substring(s)),e&&n.length!==this.fullColumnNames.length)throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${n}`);return n}}class sb extends Ay{constructor(t){super(),this.microphoneConfig=t,this.isClosed=!1,this.fftSize=t.fftSize||1024;const e=Math.log2(this.fftSize);if(this.fftSize<0||e<4||e>14||!Number.isInteger(e))throw new Error("Invalid fftSize: it must be a power of 2 between 2 to 4 and 2 to 14, but got "+this.fftSize);if(this.numFrames=t.numFramesPerSpectrogram||43,this.sampleRateHz=t.sampleRateHz,this.columnTruncateLength=t.columnTruncateLength||this.fftSize,this.audioTrackConstraints=t.audioTrackConstraints,this.smoothingTimeConstant=t.smoothingTimeConstant||0,this.includeSpectrogram=!1!==t.includeSpectrogram,this.includeWaveform=!0===t.includeWaveform,!this.includeSpectrogram&&!this.includeWaveform)throw new Error("Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned.")}summary(){return"microphone"}static async create(t={}){if(a().get("IS_NODE"))throw new Error("microphone API is only supported in browser environment.");const e=new sb(t);return await e.start(),e}async start(){try{this.stream=await navigator.mediaDevices.getUserMedia({audio:null==this.audioTrackConstraints||this.audioTrackConstraints,video:!1})}catch(t){throw new Error("Error thrown while initializing video stream: "+t.message)}if(!this.stream)throw new Error("Could not obtain audio from microphone.");const t=window.AudioContext||window.webkitAudioContext;if(this.audioContext=new t,this.sampleRateHz){if(this.audioContext.sampleRate!==this.sampleRateHz)throw new Error(`Mismatch in sampling rate: Expected: ${this.sampleRateHz}; Actual: `+this.audioContext.sampleRate)}else this.sampleRateHz=this.audioContext.sampleRate;const e=this.audioContext.createMediaStreamSource(this.stream);this.analyser=this.audioContext.createAnalyser(),this.analyser.fftSize=2*this.fftSize,this.analyser.smoothingTimeConstant=this.smoothingTimeConstant,e.connect(this.analyser),this.freqData=new Float32Array(this.fftSize),this.timeData=new Float32Array(this.fftSize)}async next(){if(this.isClosed)return{value:null,done:!0};let t,e;const n=await this.getAudioData();if(this.includeSpectrogram){const e=this.flattenQueue(n.freqDataQueue);t=this.getTensorFromAudioDataArray(e,[this.numFrames,this.columnTruncateLength,1])}if(this.includeWaveform){const t=this.flattenQueue(n.timeDataQueue);e=this.getTensorFromAudioDataArray(t,[this.numFrames*this.fftSize,1])}return{value:{spectrogram:t,waveform:e},done:!1}}async capture(){return(await this.next()).value}async getAudioData(){const t=[],e=[];let n=0;return new Promise(s=>{const r=setInterval(()=>{this.includeSpectrogram&&(this.analyser.getFloatFrequencyData(this.freqData),this.freqData[0]===-1/0&&s({freqDataQueue:t,timeDataQueue:e}),t.push(this.freqData.slice(0,this.columnTruncateLength))),this.includeWaveform&&(this.analyser.getFloatTimeDomainData(this.timeData),e.push(this.timeData.slice())),++n===this.numFrames&&(clearInterval(r),s({freqDataQueue:t,timeDataQueue:e}))},this.fftSize/this.sampleRateHz*1e3)})}stop(){this.isClosed||(this.isClosed=!0,this.analyser.disconnect(),this.audioContext.close(),null!=this.stream&&this.stream.getTracks().length>0&&this.stream.getTracks()[0].stop())}toArray(){throw new Error("Can not convert infinite audio stream to array.")}getSampleRate(){return this.sampleRateHz}flattenQueue(t){const e=t[0].length,n=new Float32Array(t.length*e);return t.forEach((t,s)=>n.set(t,s*e)),n}getTensorFromAudioDataArray(t,e){const n=new Float32Array($(e));return n.set(t,n.length-t.length),ne(n,e)}}class rb extends Ay{constructor(t,e){if(super(),this.webcamVideoElement=t,this.webcamConfig=e,this.isClosed=!0,this.resize=!1,this.needToResize())if(this.resize=!0,this.cropSize=[this.webcamConfig.resizeHeight,this.webcamConfig.resizeWidth],this.cropBoxInd=oi([0],"int32"),this.webcamConfig.centerCrop){const t=1*this.webcamConfig.resizeWidth/this.webcamVideoElement.width,e=1*this.webcamConfig.resizeHeight/this.webcamVideoElement.height,n=(1-t)/2,s=(1-e)/2,r=n+t,a=e+s;this.cropBox=Ui([s,n,a,r],[1,4])}else this.cropBox=Ui([0,0,1,1],[1,4])}summary(){return"webcam"}static async create(t,e={}){if(a().get("IS_NODE"))throw new Error("tf.data.webcam is only supported in browser environment.");if(!t){if(t=document.createElement("video"),!e.resizeWidth||!e.resizeHeight)throw new Error("Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element.");t.width=e.resizeWidth,t.height=e.resizeHeight}const n=new rb(t,e);return await n.start(),n}async start(){this.webcamConfig.facingMode&&I("user"===this.webcamConfig.facingMode||"environment"===this.webcamConfig.facingMode,()=>`Invalid webcam facing mode: ${this.webcamConfig.facingMode}. Please provide 'user' or 'environment'`);try{this.stream=await navigator.mediaDevices.getUserMedia({video:{deviceId:this.webcamConfig.deviceId,facingMode:this.webcamConfig.facingMode?this.webcamConfig.facingMode:"user",width:this.webcamVideoElement.width,height:this.webcamVideoElement.height}})}catch(t){throw t.message="Error thrown while initializing video stream: "+t.message,t}if(!this.stream)throw new Error("Could not obtain video from webcam.");try{this.webcamVideoElement.srcObject=this.stream}catch(t){console.log(t),this.webcamVideoElement.src=window.URL.createObjectURL(this.stream)}return this.webcamVideoElement.play(),this.isClosed=!1,new Promise(t=>{this.webcamVideoElement.onloadedmetadata=()=>{t()}})}async next(){if(this.isClosed)return{value:null,done:!0};let t;try{t=dn(this.webcamVideoElement)}catch(t){throw new Error("Error thrown converting video to pixels: "+JSON.stringify(t))}if(!this.resize)return{value:t,done:!1};try{return{value:this.cropAndResizeFrame(t),done:!1}}catch(t){throw new Error("Error thrown cropping the video: "+t.message)}finally{t.dispose()}}needToResize(){return!(!this.webcamConfig.resizeWidth||!this.webcamConfig.resizeHeight||this.webcamVideoElement.width===this.webcamConfig.resizeWidth&&this.webcamVideoElement.height===this.webcamConfig.resizeHeight)}cropAndResizeFrame(t){return Xn(()=>{const e=t.toFloat().expandDims(0);let n;n=Nl.cropAndResize(e,this.cropBox,this.cropBoxInd,this.cropSize,"bilinear");const s=n.shape;return n.reshape(s.slice(1))})}async capture(){return(await this.next()).value}stop(){this.stream.getTracks().forEach(t=>t.stop());try{this.webcamVideoElement.srcObject=null}catch(t){console.log(t),this.webcamVideoElement.src=null}this.isClosed=!0}toArray(){throw new Error("Can not convert infinite video stream to array.")}}class ab{}class ib extends Ay{split(t){return new ob(this,t)}}class ob extends ib{constructor(t,e){super(),this.upstream=t,this.impl=new lb(t,e)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class lb extends Py{constructor(t,e){super(),this.upstream=t,this.separator=e,this.carryover=""}summary(){return`${this.upstream.summary()} -> Split('${this.separator}')`}async pump(){const t=await this.upstream.next();if(t.done)return""!==this.carryover&&(this.outputQueue.push(this.carryover),this.carryover="",!0);const e=t.value.split(this.separator);e[0]=this.carryover+e[0];for(const t of e.slice(0,-1))this.outputQueue.push(t);return this.carryover=e[e.length-1],!0}}class ub extends Ay{decodeUTF8(){return new cb(this)}}class cb extends ib{constructor(t){super(),this.upstream=t,this.impl=new hb(t)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class hb extends Py{constructor(t){if(super(),this.upstream=t,a().get("IS_BROWSER"))this.decoder=new TextDecoder("utf-8");else{const{StringDecoder:t}=require("string_decoder");this.decoder=new t("utf8")}}summary(){return this.upstream.summary()+" -> Utf8"}async pump(){const t=await this.upstream.next();let e,n;return!t.done&&(e=t.value,n=a().get("IS_BROWSER")?this.decoder.decode(e,{stream:!0}):this.decoder.write(Buffer.from(e.buffer)),this.outputQueue.push(n),!0)}}class pb extends ub{constructor(t,e={}){super(),this.file=t,this.options=e,I(t instanceof Uint8Array||!!a().get("IS_BROWSER")&&(t instanceof File||t instanceof Blob),()=>"FileChunkIterator only supports File, Blob and Uint8Array right now."),this.offset=e.offset||0,this.chunkSize=e.chunkSize||1048576}summary(){return"FileChunks "+this.file}async next(){if(this.offset>=(this.file instanceof Uint8Array?this.file.byteLength:this.file.size))return{value:null,done:!0};const t=new Promise((t,e)=>{const n=this.offset+this.chunkSize;if(this.file instanceof Uint8Array)t(new Uint8Array(this.file.slice(this.offset,n)));else{const s=new FileReader;s.onload=n=>{let r=s.result;if(r instanceof ArrayBuffer&&(r=new Uint8Array(r)),!(r instanceof Uint8Array))return e(new TypeError("FileReader returned unknown type."));t(r)},s.onabort=t=>e(new Error("Aborted")),s.onerror=t=>e(new Error(t.type));const r=this.file.slice(this.offset,n);s.readAsArrayBuffer(r)}this.offset=n});return{value:await t,done:!1}}}const db=t=>({method:t.method,headers:t.headers,body:t.body,mode:t.mode,credentials:t.credentials,cache:t.cache,redirect:t.redirect,referrer:t.referrer,integrity:t.integrity});function fb(t){return"string"==typeof t&&"file://"===t.substr(0,7)}class mb extends ab{constructor(t,e={}){super(),this.input=t,this.options=e}async iterator(){if(fb(this.input)&&a().get("IS_NODE")){const t=require("fs");this.input=t.readFileSync(this.input.substr(7))}return new pb(this.input,this.options)}}class gb extends ab{constructor(t,e={}){super(),this.url=t,this.fileOptions=e}async iterator(){return fb(this.url)?new mb(this.url,this.fileOptions).iterator():async function(t,e={}){let n,s;"string"==typeof t?n=t:(n=t.url,s=db(t));const r=await lt(n,s);if(r.ok){const t=new Uint8Array(await r.arrayBuffer());return new pb(t,e)}throw new Error(r.statusText)}(this.url,this.fileOptions)}}var yb=Object.freeze({__proto__:null,array:function(t){return Ky(async()=>Iy(t),t.length)},Dataset:qy,zip:function(t){if(!vy(t))throw new Error("The argument to zip() must be an object or array.");let e;if(Array.isArray(t))for(let n=0;n<t.length;n++)e=null==e?t[n].size:Math.min(e,t[n].size);else if(t instanceof Object)for(const n in t)e=null==e?t[n].size:Math.min(e,t[n].size);return Ky(async()=>function(t,e=Uy.FAIL){return new Gy(t,e)}(await wy(t,t=>{if(t instanceof qy)return{value:t.iterator(),recurse:!1};if(vy(t))return{value:null,recurse:!0};throw new Error("Leaves of the structure passed to zip() must be Datasets, not primitives.")}),Uy.SHORTEST),e)},CSVDataset:nb,TextLineDataset:Yy,csv:function(t,e={}){return new nb(new gb(t),e)},func:function(t){const e=Ey(t);return Ky(async()=>e)},generator:function(t){return Ky(async()=>{const e=await t();return Ey(()=>e.next())})},microphone:async function(t){return sb.create(t)},webcam:async function(t,e){return rb.create(t,e)},FileDataSource:mb,URLDataSource:gb,version_data:"2.5.0"});function bb(t,e){Array.isArray(t)||(t=[t]),t.forEach(t=>{null!=t&&I("complex64"!==t.dtype,()=>e+" does not support complex64 tensors in the CPU backend.")})}const xb=jo,wb=su,vb=ru,Nb=au,kb=Yi;function Cb(t,e,n,s){if("linear"===n)return t.linear(e);if("relu"===n)return t.relu(e);if("elu"===n)return Ar(e);if("relu6"===n)return t.relu6(e);if("prelu"===n)return t.prelu(e,s);throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}class Sb extends n{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new e(this,qn())}write(t,e,n){this.firstUse&&(this.firstUse=!1,a().get("IS_NODE")&&Gl("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const s={};return this.data.set(s,{values:t,dtype:n,refCount:1}),s}makeTensorInfo(t,e,n){return{dataId:this.write(n,t,e),shape:t,dtype:e}}incRef(t){this.data.get(t).refCount++}decRef(t){if(this.data.has(t)){this.data.get(t).refCount--}}move(t,e,n,s){this.data.set(t,{values:e,dtype:s,refCount:1})}numDataIds(){return this.data.numDataIds()}async read(t){return this.readSync(t)}readSync(t){const{dtype:e,complexTensorInfos:n}=this.data.get(t);if("complex64"===e){return Hl(this.readSync(n.real.dataId),this.readSync(n.imag.dataId))}return this.data.get(t).values}bufferSync(t){const e=this.readSync(t.dataId);let n=e;if("string"===t.dtype)try{n=e.map(t=>ct(t))}catch(t){throw new Error("Failed to decode encoded string bytes into utf-8")}return Be(t.shape,t.dtype,n)}makeOutput(t,e,n){const s=this.write(t,e,n);return qn().makeTensorFromDataId(s,e,n,this)}disposeData(t){if(this.data.has(t)){const{complexTensorInfos:e}=this.data.get(t);null!=e&&(this.disposeData(e.real.dataId),this.disposeData(e.imag.dataId)),this.data.delete(t)}}disposeIntermediateTensorInfo(t){const e=t.dataId;if(this.data.has(e)){const t=this.data.get(e);t.refCount--,t.refCount<1&&this.disposeData(e)}}async time(t){const e=it();return t(),{kernelMs:it()-e}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}stridedSlice(t,e,n,s){bb(t,"stridedSlice");const r=kn(e,n,s);if(r.some(t=>0===t))return ne([],r);const a=Be(r,t.dtype),i=this.bufferSync(t);for(let t=0;t<a.size;t++){const n=a.indexToLoc(t),r=new Array(n.length);for(let t=0;t<r.length;t++)r[t]=n[t]*s[t]+e[t];a.set(i.get(...r),...n)}return a.toTensor()}diag(t){const e=this.readSync(t.dataId),n=Be([t.size,t.size],t.dtype),s=n.values;for(let n=0;n<e.length;n++)s[n*t.size+n]=e[n];return n.toTensor()}unstack(t,e){const n=t.shape[e],s=new Array(t.rank-1);let r=0;for(let n=0;n<t.rank;n++)n!==e&&(s[r++]=t.shape[n]);const a=new Array(t.rank).fill(0),i=t.shape.slice();i[e]=1;const o=new Array(n);for(let n=0;n<o.length;n++)a[e]=n,o[n]=Hs(t,a,i).reshape(s);return o}reverse(t,e){bb(t,"reverse");const n=Be(t.shape,t.dtype),s=this.bufferSync(t);for(let r=0;r<n.size;r++){const a=n.indexToLoc(r),i=a.slice();e.forEach(e=>i[e]=t.shape[e]-1-i[e]),n.set(s.get(...i),...a)}return n.toTensor()}neg(t){return bb(t,"neg"),rs(Xr(-1),t)}addN(t){bb(t,"addN");const e=t.map(t=>this.readSync(t.dataId)),n=Be(t[0].shape,t[0].dtype),s=n.values;for(let n=0;n<t.length;n++){const t=e[n];for(let e=0;e<s.length;e++)s[e]+=t[e]}return n.toTensor()}softmax(t,e){const n=L([e],t.shape),s=ua(t,n),r=ps(s.shape,n),a=ca(t,s.reshape(r)),i=Rr(a),o=this.sum(i,n).reshape(r);return ss(i,o)}pow(t,e){return bb([t,e],"pow"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>Math.pow(t,e))}batchMatMul(t,e,n,s){bb([t,e],"matMul");const r=n?t.shape[1]:t.shape[2],a=n?t.shape[2]:t.shape[1],i=s?e.shape[1]:e.shape[2],o=t.shape[0],l=this.readSync(t.dataId),u=this.readSync(e.dataId),[c,h,p]=n?[t.strides[0],1,t.strides[1]]:[t.strides[0],t.strides[1],1],[d,f,m]=s?[1,e.strides[1],e.strides[0]]:[e.strides[1],1,e.strides[0]],g=a*i,y=Be([o,a,i],t.dtype),b=y.values,x=this.blockSize;for(let t=0;t<o;t++)for(let e=0;e<a;e+=x)for(let n=0;n<i;n+=x)for(let s=0;s<r;s+=x){const o=Math.min(e+x,a),y=Math.min(n+x,i),w=Math.min(s+x,r);for(let r=e;r<o;r++)for(let e=n;e<y;e++){let n=0;for(let a=s;a<w;a++)n+=l[t*c+r*h+a*p]*u[a*d+e*f+t*m];b[t*g+(r*i+e)]+=n}}return y.toTensor()}fusedBatchMatMul({a:t,b:e,transposeA:n,transposeB:s,bias:r,activation:a,preluActivationWeights:i}){let o=this.batchMatMul(t,e,n,s);return r&&(o=es(o,r)),a&&(o=Cb(this,o,a,i)),o}floorDiv(t,e){bb([t,e],"floorDiv");return this.broadcastedBinaryOp(t,e,"int32",(t,e)=>Math.floor(t/e))}sum(t,e){bb(t,"sum"),ds("sum",e,t.rank);const[n,s]=hs(t.shape,e),r=va(n,_t(t.dtype,"int32")),a=$(s),i=this.readSync(r.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=0;for(let t=0;t<a;++t)n+=o[e+t];i[t]=n}return r}prod(t,e){bb(t,"sum");const[n,s]=hs(t.shape,e),r=va(n,_t(t.dtype,"int32")),a=$(s),i=this.readSync(r.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=1;for(let t=0;t<a;++t)n*=o[e+t];i[t]=n}return r}unsortedSegmentSum(t,e,n){bb(t,"unsortedSegmentSum");const s=[],r=t.rank-e.rank;for(let t=0;t<r;++t)e=e.expandDims(t+1);for(let r=0;r<n;++r){const n=Xr(r,"int32"),a=Cr(n,e).asType("float32").mul(t).sum(0);s.push(a)}return Bi(s)}argMin(t,e){bb(t,"argMin");const n=[e];ds("argMin",n,t.rank);const[s,r]=hs(t.shape,n),a=va(s,"int32"),i=$(r),o=this.readSync(a.dataId),l=this.readSync(t.dataId);for(let t=0;t<o.length;++t){const e=t*i;let n=l[e],s=0;for(let t=0;t<i;++t){const r=l[e+t];r<n&&(n=r,s=t)}o[t]=s}return a}argMax(t,e){bb(t,"argMax");const n=[e];ds("argMax",n,t.rank);const[s,r]=hs(t.shape,n),a=va(s,"int32"),i=$(r),o=this.readSync(a.dataId),l=this.readSync(t.dataId);for(let t=0;t<o.length;++t){const e=t*i;let n=l[e],s=0;for(let t=0;t<i;++t){const r=l[e+t];r>n&&(n=r,s=t)}o[t]=s}return a}cumsum(t,e,n,s){if(bb(t,"cumsum"),e!==t.rank-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${t.rank-1} but got axis=`+e);const r=_t(t.dtype,"int32"),a=va(t.shape,r),i=this.readSync(a.dataId),o=this.readSync(t.dataId),l=t.shape[t.rank-1],u=s?(t,e)=>t+l-e-1:(t,e)=>t+e;for(let t=0;t<o.length;t+=l)for(let e=0;e<l;e++){const s=u(t,e);if(0===e)i[s]=n?0:o[s];else{const r=u(t,e-1);i[s]=n?o[r]+i[r]:o[s]+i[r]}}return a}equal(t,e){return bb([t,e],"equal"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t===e?1:0)}notEqual(t,e){return bb([t,e],"notEqual"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t!==e?1:0)}less(t,e){return bb([t,e],"less"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t<e?1:0)}lessEqual(t,e){return bb([t,e],"lessEqual"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t<=e?1:0)}greater(t,e){return bb([t,e],"greater"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t>e?1:0)}greaterEqual(t,e){return bb([t,e],"greaterEqual"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t>=e?1:0)}logicalAnd(t,e){return bb([t,e],"logicalAnd"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t&&e)}logicalOr(t,e){return bb([t,e],"logicalOr"),this.broadcastedBinaryOp(t,e,"bool",(t,e)=>t||e)}select(t,e,n){bb([t,e,n],"select");const s=this.readSync(t.dataId),r=this.readSync(e.dataId),a=this.readSync(n.dataId),i=va(e.shape,_t(e.dtype,n.dtype)),o=this.readSync(i.dataId);let l=0;const u=0===t.rank||t.rank>1||1===e.rank?1:$(e.shape.slice(1));for(let t=0;t<s.length;t++)for(let e=0;e<u;e++)1===s[t]?o[l++]=r[t]:o[l++]=a[t];return i}where(t){bb([t],"where");const e=this.readSync(t.dataId);return kb(t.shape,e)}topk(t,e,n){bb(t,"topk");const s=this.readSync(t.dataId);return Nb(s,t.shape,t.dtype,e,n)}min(t,e){bb(t,"min"),ds("min",e,t.rank);const[n,s]=hs(t.shape,e),r=va(n,t.dtype),a=$(s),i=this.readSync(r.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=o[e];for(let t=0;t<a;++t){const s=o[e+t];s<n&&(n=s)}i[t]=n}return r}minimum(t,e){return bb([t,e],"minimum"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>Math.min(t,e))}mod(t,e){return bb([t,e],"mod"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>{const n=t%e;return t<0&&e<0||t>=0&&e>=0?n:(n+e)%e})}maximum(t,e){return bb([t,e],"maximum"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>Math.max(t,e))}all(t,e){bb(t,"all"),ds("all",e,t.rank);const[n,s]=hs(t.shape,e),r=va(n,t.dtype),a=$(s),i=this.readSync(r.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=o[e];for(let t=0;t<a;++t){const s=o[e+t];n=n&&s}i[t]=n}return r}any(t,e){bb(t,"any"),ds("any",e,t.rank);const[n,s]=hs(t.shape,e),r=va(n,t.dtype),a=$(s),i=this.readSync(r.dataId),o=this.readSync(t.dataId);for(let t=0;t<i.length;++t){const e=t*a;let n=o[e];for(let t=0;t<a;++t){const s=o[e+t];n=n||s}i[t]=n}return r}squaredDifference(t,e){return bb([t,e],"squaredDifference"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>{const n=t-e;return n*n})}linear(t){return t}relu(t){bb(t,"relu");const e=va(t.shape,t.dtype),n=this.readSync(e.dataId),s=this.readSync(t.dataId);for(let t=0;t<s.length;++t)n[t]=Math.max(0,s[t]);return e}relu6(t){bb(t,"relu");const e=va(t.shape,t.dtype),n=this.readSync(e.dataId),s=this.readSync(t.dataId);for(let t=0;t<s.length;++t)n[t]=Math.min(Math.max(0,s[t]),6);return e}prelu(t,e){return bb([t,e],"prelu"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>t<0?e*t:t)}eluDer(t,e){bb([t,e],"eluDer");const n=new Float32Array(e.size),s=this.readSync(e.dataId),r=this.readSync(t.dataId);for(let t=0;t<s.length;++t){const e=s[t];n[t]=e>=1?r[t]:r[t]*(e+1)}return this.makeOutput(n,e.shape,"float32")}atan2(t,e){return bb([t,e],"atan2"),this.broadcastedBinaryOp(t,e,t.dtype,(t,e)=>Math.atan2(t,e))}fusedConv2d({input:t,filter:e,convInfo:n,bias:s,activation:r,preluActivationWeights:a}){let i=this.conv2d(t,e,n);return s&&(i=es(i,s)),r&&(i=Cb(this,i,r,a)),i}conv2d(t,e,n){bb([t,e],"conv2d");const s=n.filterHeight,r=n.filterWidth,a=n.dilationHeight,i=n.dilationWidth,o=n.padInfo.left,l=n.padInfo.top,u="channelsLast"===n.dataFormat,c=Be(n.outShape,t.dtype),h=t.strides[0],p=u?t.strides[1]:t.strides[2],d=u?t.strides[2]:1,f=u?1:t.strides[1],m=c.strides[0],g=u?c.strides[1]:c.strides[2],y=u?c.strides[2]:1,b=u?1:c.strides[1],x=this.readSync(t.dataId),w=this.readSync(e.dataId),v=c.values;for(let t=0;t<n.batchSize;++t){const u=t*h,c=t*m;for(let t=0;t<n.outHeight;++t){const h=c+t*g,m=t*n.strideHeight-l;for(let t=0;t<s;t++){const s=m+t*a;if(s<0||s>=n.inHeight)continue;const l=t*e.strides[0],c=u+s*p;for(let t=0;t<n.outWidth;++t){const s=h+t*y,a=t*n.strideWidth-o;for(let t=0;t<r;t++){const r=a+t*i;if(r<0||r>=n.inWidth)continue;const o=c+r*d;let u=l+t*e.strides[1];for(let t=0;t<n.inChannels;++t){const e=x[o+t*f];for(let t=0;t<n.outChannels;++t)v[s+t*b]+=e*w[u+t];u+=n.outChannels}}}}}}return c.toTensor()}conv3d(t,e,n){const s=n.filterDepth,r=n.filterHeight,a=n.filterWidth,i=n.dilationDepth,o=n.dilationHeight,l=n.dilationWidth,u=n.padInfo.front,c=n.padInfo.left,h=n.padInfo.top,p=Be(n.outShape,t.dtype),d=this.readSync(t.dataId),f=this.readSync(e.dataId),m=p.values;for(let g=0;g<n.batchSize;++g){const y=g*t.strides[0],b=g*p.strides[0];for(let g=0;g<n.outDepth;++g){const x=b+g*p.strides[1],w=g*n.strideDepth-u;for(let u=0;u<s;u++){const s=w+u*i;if(s<0||s>=n.inDepth)continue;const g=u*e.strides[0],b=y+s*t.strides[1];for(let s=0;s<n.outHeight;++s){const i=x+s*p.strides[2],u=s*n.strideHeight-h;for(let s=0;s<r;s++){const r=u+s*o;if(r<0||r>=n.inHeight)continue;const h=g+s*e.strides[1],p=b+r*t.strides[2];for(let t=0;t<n.outWidth;++t){const s=i+t*n.outChannels,r=t*n.strideWidth-c;for(let t=0;t<a;t++){const a=r+t*l;if(a<0||a>=n.inWidth)continue;const i=h+t*e.strides[2],o=p+a*n.inChannels;let u=i;for(let t=0;t<n.inChannels;++t){const e=d[o+t];for(let t=0;t<n.outChannels;++t)m[s+t]+=e*f[u+t];u+=n.outChannels}}}}}}}}return p.toTensor()}conv2dDerInput(t,e,n){bb([t,e],"conv2dDerInput");const s=Be(n.inShape,"float32"),r=s.values,a=this.readSync(t.dataId),i=this.readSync(e.dataId),[o,l,u]=e.strides,{batchSize:c,filterHeight:h,filterWidth:p,inChannels:d,inHeight:f,inWidth:m,outChannels:g,outHeight:y,outWidth:b,strideHeight:x,strideWidth:w,dataFormat:v}=n,N=h-1-n.padInfo.top,k=p-1-n.padInfo.left,C="channelsLast"===v,S=s.strides[0],I=C?s.strides[1]:s.strides[2],E=C?s.strides[2]:1,T=C?1:s.strides[1],A=t.strides[0],$=C?t.strides[1]:t.strides[2],R=C?t.strides[2]:1,D=C?1:t.strides[1];for(let t=0;t<c;++t)for(let e=0;e<d;++e)for(let n=0;n<f;++n){const s=n-N,c=Math.max(0,Math.ceil(s/x)),d=Math.min(y,(h+s)/x);for(let f=0;f<m;++f){const m=f-k,y=Math.max(0,Math.ceil(m/w)),v=Math.min(b,(p+m)/w);let N=0;for(let n=c;n<d;++n){const r=n*x-s;for(let s=y;s<v;++s){const c=A*t+$*n+R*s,d=o*(h-1-r)+l*(p-1-(s*w-m))+u*e;for(let t=0;t<g;++t){N+=a[c+D*t]*i[d+t]}}}r[S*t+I*n+E*f+T*e]=N}}return s.toTensor()}conv3dDerInput(t,e,n){const s=Be(n.inShape,"float32"),r=s.values,[a,i,o,l]=s.strides,u=this.readSync(t.dataId),[c,h,p,d]=t.strides,f=this.readSync(e.dataId),[m,g,y,b]=e.strides,{batchSize:x,filterDepth:w,filterHeight:v,filterWidth:N,inChannels:k,inDepth:C,inHeight:S,inWidth:I,outChannels:E,outDepth:T,outHeight:A,outWidth:$,strideDepth:R,strideHeight:D,strideWidth:_}=n,F=w-1-n.padInfo.front,O=v-1-n.padInfo.top,M=N-1-n.padInfo.left;for(let t=0;t<x;++t)for(let e=0;e<k;++e)for(let n=0;n<C;++n){const s=n-F,x=Math.max(0,Math.ceil(s/R)),k=Math.min(T,(w+s)/R);for(let C=0;C<S;++C){const S=C-O,T=Math.max(0,Math.ceil(S/D)),F=Math.min(A,(v+S)/D);for(let A=0;A<I;++A){const I=A-M,O=Math.max(0,Math.ceil(I/_)),L=Math.min($,(N+I)/_);let z=0;for(let n=x;n<k;++n){const r=n*R-s;for(let s=T;s<F;++s){const a=s*D-S;for(let i=O;i<L;++i){const o=c*t+h*n+p*s+d*i,l=m*(w-1-r)+g*(v-1-a)+y*(N-1-(i*_-I))+b*e;for(let t=0;t<E;++t){z+=u[o+t]*f[l+t]}}}}r[a*t+i*n+o*C+l*A+e]=z}}}return s.toTensor()}conv2dDerFilter(t,e,n){bb([t,e],"conv2dDerFilter");const s=n.strideHeight,r=n.strideWidth,a=n.filterHeight,i=n.filterWidth,o="channelsLast"===n.dataFormat,l=Be(n.filterShape,"float32"),u=n.padInfo.left,c=n.padInfo.top,h=this.bufferSync(t),p=this.bufferSync(e);for(let t=0;t<a;++t){const e=Math.max(0,Math.ceil((c-t)/s)),a=Math.min(n.outHeight,(n.inHeight+c-t)/s);for(let d=0;d<i;++d){const i=Math.max(0,Math.ceil((u-d)/r)),f=Math.min(n.outWidth,(n.inWidth+u-d)/r);for(let m=0;m<n.inChannels;++m)for(let g=0;g<n.outChannels;++g){let y=0;for(let l=0;l<n.batchSize;++l)for(let n=e;n<a;++n){const e=t+n*s-c;for(let t=i;t<f;++t){const s=d+t*r-u;y+=o?h.get(l,e,s,m)*p.get(l,n,t,g):h.get(l,m,e,s)*p.get(l,g,n,t)}}l.set(y,t,d,m,g)}}}return l.toTensor()}conv3dDerFilter(t,e,n){const s=n.strideDepth,r=n.strideHeight,a=n.strideWidth,i=n.filterDepth,o=n.filterHeight,l=n.filterWidth,u=Be(n.filterShape,"float32"),c=u.values,[h,p,d,f]=u.strides,m=this.readSync(e.dataId),[g,y,b,x]=e.strides,w=this.readSync(t.dataId),[v,N,k,C]=t.strides,S=n.padInfo.front,I=n.padInfo.left,E=n.padInfo.top;for(let t=0;t<i;++t){const e=Math.max(0,Math.ceil((S-t)/s)),i=Math.min(n.outDepth,(n.inDepth+S-t)/s),u=t*h;for(let h=0;h<o;++h){const o=Math.max(0,Math.ceil((E-h)/r)),T=Math.min(n.outHeight,(n.inHeight+E-h)/r),A=h*p+u;for(let u=0;u<l;++u){const l=Math.max(0,Math.ceil((I-u)/a)),p=Math.min(n.outWidth,(n.inWidth+I-u)/a),$=u*d+A;for(let d=0;d<n.inChannels;++d){const A=d*f+$;for(let f=0;f<n.outChannels;++f){let $=0;for(let c=0;c<n.batchSize;++c){const n=c*v,A=c*g;for(let c=e;c<i;++c){const e=(t+c*s-S)*N+n,i=c*y+A;for(let t=o;t<T;++t){const n=(h+t*r-E)*k+e,s=t*b+i;for(let t=l;t<p;++t){const e=t*x+s;$+=w[(u+t*a-I)*C+n+d]*m[e+f]}}}}c[A+f]=$}}}}}return u.toTensor()}fusedDepthwiseConv2D({input:t,filter:e,convInfo:n,bias:s,activation:r,preluActivationWeights:a}){let i=this.depthwiseConv2D(t,e,n);return s&&(i=es(i,s)),r&&(i=Cb(this,i,r,a)),i}depthwiseConv2D(t,e,n){bb([t,e],"depthwiseConv2D");const s=n.filterHeight,r=n.filterWidth,a=n.dilationHeight,i=n.dilationWidth,o=n.padInfo.left,l=n.padInfo.top,u=n.outChannels/n.inChannels,c=Be(n.outShape,t.dtype),h=this.readSync(t.dataId),p=this.readSync(e.dataId),d=c.values;for(let f=0;f<n.batchSize;++f){const m=f*t.strides[0],g=f*c.strides[0];for(let f=0;f<n.outHeight;++f){const y=g+f*c.strides[1],b=f*n.strideHeight-o;for(let o=0;o<s;++o){const s=b+o*a;if(s<0||s>=n.inHeight)continue;const f=o*e.strides[0],g=m+s*t.strides[1];for(let t=0;t<n.outWidth;++t){const s=y+t*c.strides[2],a=t*n.strideWidth-l;for(let t=0;t<r;++t){const r=a+t*i;if(r<0||r>=n.inWidth)continue;const o=f+t*e.strides[1],l=g+r*n.inChannels;let c=s,m=o;for(let t=0;t<n.inChannels;++t){const e=h[l+t];for(let t=0;t<u;++t)d[c+t]+=e*p[m+t];c+=u,m+=u}}}}}}return c.toTensor()}depthwiseConv2DDerInput(t,e,n){bb([t,e],"depthwiseConv2DDerInput");const s=Be(n.inShape,"float32"),r=s.values,[a,i,o]=s.strides,l=this.readSync(t.dataId),[u,c,h]=t.strides,p=this.readSync(e.dataId),[d,f,m]=e.strides,{batchSize:g,filterHeight:y,filterWidth:b,inChannels:x,inHeight:w,inWidth:v,outChannels:N,outHeight:k,outWidth:C,strideHeight:S,strideWidth:I}=n,E=y-1-n.padInfo.top,T=b-1-n.padInfo.left,A=N/x;for(let t=0;t<g;++t)for(let e=0;e<x;++e)for(let n=0;n<w;++n){const s=n-E,g=Math.max(0,Math.ceil(s/S)),x=Math.min(k,(y+s)/S);for(let w=0;w<v;++w){const v=w-T,N=Math.max(0,Math.ceil(v/I)),k=Math.min(C,(b+v)/I);let E=0;for(let n=g;n<x;++n){const r=n*S-s;for(let s=N;s<k;++s){const a=u*t+c*n+h*s,i=d*(y-1-r)+f*(b-1-(s*I-v))+m*e;for(let t=0;t<A;++t){E+=l[a+(e*A+t)]*p[i+t]}}}r[a*t+i*n+o*w+e]=E}}return s.toTensor()}depthwiseConv2DDerFilter(t,e,n){bb([t,e],"depthwiseConv2DDerFilter");const s=n.strideHeight,r=n.strideWidth,a=n.filterHeight,i=n.filterWidth,o=Be(n.filterShape,"float32"),l=n.padInfo.left,u=n.padInfo.top,c=n.outChannels/n.inChannels,h=this.bufferSync(t),p=this.bufferSync(e);for(let t=0;t<a;++t){const e=Math.max(0,Math.ceil((u-t)/s)),a=Math.min(n.outHeight,(n.inHeight+u-t)/s);for(let d=0;d<i;++d){const i=Math.max(0,Math.ceil((l-d)/r)),f=Math.min(n.outWidth,(n.inWidth+l-d)/r);for(let m=0;m<n.outChannels;++m){const g=Math.trunc(m/c),y=m%c;let b=0;for(let o=0;o<n.batchSize;++o)for(let n=e;n<a;++n){const e=t+n*s-u;for(let t=i;t<f;++t){const s=d+t*r-l;b+=h.get(o,e,s,g)*p.get(o,n,t,m)}}o.set(b,t,d,g,y)}}}return o.toTensor()}tile(t,e){return bb(t,"tile"),vb(this.bufferSync(t),e)}gather(t,e,n){bb([t,e],"gather");const s=t.shape.slice(),r=this.readSync(e.dataId);s[n]=r.length;const a=Be(s,t.dtype),i=this.bufferSync(t);for(let t=0;t<a.size;++t){const e=a.indexToLoc(t),s=e.slice();s[n]=r[e[n]];const o=i.locToIndex(s);a.values[t]=i.values[o]}return a.toTensor()}batchToSpaceND(t,e,n){bb([t],"batchToSpaceND");const s=e.reduce((t,e)=>t*e),r=zl(t.shape,e,s),a=Bl(r.length,e.length),i=Pl(t.shape,e,s),o=Wl(n,e.length),l=Vl(i,n,e.length);return ln(t.reshape(r),a).reshape(i).slice(o,l)}pool3d(t,e,n){bb(t,"pool3d");const s=e.strideDepth,r=e.strideHeight,a=e.strideWidth,i=e.dilationDepth,o=e.dilationHeight,l=e.dilationWidth,u=e.effectiveFilterDepth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=e.padInfo.front,d=e.padInfo.top,f=e.padInfo.left,m="max"===n?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=this.readSync(t.dataId),y=Be(e.outShape,t.dtype),b=y.values,x=e.outShape[1]*e.outShape[2]*e.outShape[3]*e.outShape[4],w=e.outShape[2]*e.outShape[3]*e.outShape[4],v=e.outShape[3]*e.outShape[4],N=e.outShape[4];for(let y=0;y<e.batchSize;++y){const k=y*x,C=y*t.strides[0];for(let y=0;y<e.inChannels;++y)for(let x=0;x<e.outDepth;++x){const S=x*s-p;let I=S;for(;I<0;)I+=i;const E=Math.min(e.inDepth,u+S),T=k+x*w;for(let s=0;s<e.outHeight;++s){const u=s*r-d;let p=u;for(;p<0;)p+=o;const x=Math.min(e.inHeight,c+u),w=T+s*v;for(let s=0;s<e.outWidth;++s){const r=s*a-f;let u=r;for(;u<0;)u+=l;const c=Math.min(e.inWidth,h+r),d=w+s*N;let v=m,k=0,S=0;for(let e=I;e<E;e+=i){const s=C+e*t.strides[1];for(let e=p;e<x;e+=o){const r=s+e*t.strides[2];for(let e=u;e<c;e+=l){const s=g[r+e*t.strides[3]+y];if("max"===n&&s>v?v=s:"avg"===n&&(k+=s,S++),isNaN(v))break}if(isNaN(v))break}if(isNaN(v))break}b[d+y]="avg"===n?k/S:v}}}}return y.toTensor()}avgPool3d(t,e){return bb(t,"avgPool3d"),this.pool3d(t,e,"avg").toFloat()}avgPool3dBackprop(t,e,n){bb([t,e],"avgPool3dBackprop");const s=n.strideDepth,r=n.strideHeight,a=n.strideWidth,i=n.filterDepth,o=n.filterHeight,l=n.filterWidth,u=n.dilationDepth,c=n.dilationHeight,h=n.dilationWidth,p=n.effectiveFilterDepth,d=n.effectiveFilterHeight,f=n.effectiveFilterWidth,m=p-1-n.padInfo.front,g=f-1-n.padInfo.left,y=d-1-n.padInfo.top,b=Be(e.shape,"float32"),x=1/(i*o*l),w=this.bufferSync(t);for(let t=0;t<n.batchSize;++t)for(let e=0;e<n.inChannels;++e)for(let i=0;i<n.inDepth;++i)for(let o=0;o<n.inHeight;++o)for(let l=0;l<n.inWidth;++l){const v=i-m,N=o-y,k=l-g;let C=0;for(let i=0;i<p;i+=u){const o=(v+i)/s;if(!(o<0||o>=n.outDepth||Math.floor(o)!==o))for(let s=0;s<d;s+=c){const i=(N+s)/r;if(!(i<0||i>=n.outHeight||Math.floor(i)!==i))for(let s=0;s<f;s+=h){const r=(k+s)/a;r<0||r>=n.outWidth||Math.floor(r)!==r||(C+=w.get(t,o,i,r,e))}}}b.set(C*x,t,i,o,l,e)}return b.toTensor()}maxPool3d(t,e){return bb(t,"maxPool3d"),this.pool3d(t,e,"max").toFloat()}maxPool3dPositions(t,e){const n=Be(e.outShape,"int32"),s=e.strideDepth,r=e.strideHeight,a=e.strideWidth,i=e.dilationDepth,o=e.dilationHeight,l=e.dilationWidth,u=e.effectiveFilterDepth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=e.padInfo.front,d=e.padInfo.top,f=e.padInfo.left,m=this.bufferSync(t);for(let t=0;t<e.batchSize;++t)for(let g=0;g<e.inChannels;++g)for(let y=0;y<e.outDepth;++y){const b=y*s-p;let x=b;for(;x<0;)x+=i;const w=Math.min(e.inDepth,u+b);for(let s=0;s<e.outHeight;++s){const u=s*r-d;let p=u;for(;p<0;)p+=o;const v=Math.min(e.inHeight,c+u);for(let r=0;r<e.outWidth;++r){const d=r*a-f;let N=d;for(;N<0;)N+=l;const k=Math.min(e.inWidth,h+d);let C=Number.NEGATIVE_INFINITY,S=-1;for(let e=x;e<w;e+=i){const n=e-b;for(let s=p;s<v;s+=o){const r=s-u;for(let a=N;a<k;a+=l){const i=a-d,o=m.get(t,e,s,a,g);o>=C&&(C=o,S=n*c*h+r*c+i)}}}n.set(S,t,y,s,r,g)}}}return n.toTensor()}maxPool3dBackprop(t,e,n,s){bb([e,n],"maxPool3dBackprop");const r=this.maxPool3dPositions(e,s),a=s.strideDepth,i=s.strideHeight,o=s.strideWidth,l=s.dilationDepth,u=s.dilationHeight,c=s.dilationWidth,h=s.effectiveFilterDepth,p=s.effectiveFilterHeight,d=s.effectiveFilterWidth,f=h-1-s.padInfo.front,m=d-1-s.padInfo.left,g=p-1-s.padInfo.top,y=Be(e.shape,"float32"),b=this.bufferSync(r),x=this.bufferSync(t);for(let t=0;t<s.batchSize;++t)for(let e=0;e<s.inChannels;++e)for(let n=0;n<s.inDepth;++n)for(let r=0;r<s.inHeight;++r)for(let w=0;w<s.inWidth;++w){const v=n-f,N=r-g,k=w-m;let C=0;for(let n=0;n<h;n+=l){const r=(v+n)/a;if(!(r<0||r>=s.outDepth||Math.floor(r)!==r))for(let a=0;a<p;a+=u){const l=(N+a)/i;if(!(l<0||l>=s.outHeight||Math.floor(l)!==l))for(let i=0;i<d;i+=c){const u=(k+i)/o;if(u<0||u>=s.outWidth||Math.floor(u)!==u)continue;const c=h*p*d-1-b.get(t,r,l,u,e)===n*p*d+a*d+i?1:0;0!==c&&(C+=x.get(t,r,l,u,e)*c)}}}y.set(C,t,n,r,w,e)}return y.toTensor()}resizeBilinear(t,e,n,s){bb(t,"resizeBilinear");const[r,a,i,o]=t.shape,l=this.readSync(t.dataId),u=new Float32Array($([r,e,n,o])),c=[s&&e>1?a-1:a,s&&n>1?i-1:i],h=[s&&e>1?e-1:e,s&&n>1?n-1:n];let p=0;const d=c[0]/h[0],f=c[1]/h[1];for(let s=0;s<r;s++)for(let r=0;r<e;r++){const e=d*r,c=Math.floor(e),h=e-c,m=Math.min(a-1,Math.ceil(e)),g=s*t.strides[0]+c*t.strides[1],y=s*t.strides[0]+m*t.strides[1];for(let e=0;e<n;e++){const n=f*e,s=Math.floor(n),r=n-s,a=Math.min(i-1,Math.ceil(n)),c=g+s*t.strides[2],d=y+s*t.strides[2],m=g+a*t.strides[2],b=y+a*t.strides[2];for(let t=0;t<o;t++){const e=l[c+t],n=l[d+t],s=e+(l[m+t]-e)*r,a=s+(n+(l[b+t]-n)*r-s)*h;u[p++]=a}}}return ne(u,[r,e,n,o])}resizeBilinearBackprop(t,e,n){bb([t,e],"resizeBilinearBackprop");const[s,r,a,i]=e.shape,[,o,l]=t.shape,u=new Float32Array(s*r*a*i),c=[n&&o>1?r-1:r,n&&l>1?a-1:a],h=[n&&o>1?o-1:o,n&&l>1?l-1:l],p=c[0]/h[0],d=c[1]/h[1],f=this.readSync(t.dataId);let m=0;for(let t=0;t<s;t++){const n=t*e.strides[0];for(let t=0;t<o;t++){const s=t*p,o=Math.floor(s),c=Math.min(Math.ceil(s),r-1),h=n+o*e.strides[1],g=n+c*e.strides[1],y=s-o,b=1-y;for(let t=0;t<l;t++){const n=t*d,s=Math.floor(n),r=Math.min(Math.ceil(n),a-1),o=n-s,l=1-o,c=h+s*e.strides[2],p=h+r*e.strides[2],x=g+s*e.strides[2],w=g+r*e.strides[2],v=b*l,N=b*o,k=y*l,C=y*o;for(let t=0;t<i;t++){const e=f[m++];u[c+t]+=e*v,u[p+t]+=e*N,u[x+t]+=e*k,u[w+t]+=e*C}}}}return Gi(u,[s,a,r,i],e.dtype)}resizeNearestNeighbor(t,e,n,s){bb(t,"resizeNearestNeighbor");const[r,a,i,o]=t.shape,l=this.readSync(t.dataId),u=new Float32Array(r*e*n*o),c=[s&&e>1?a-1:a,s&&n>1?i-1:i],h=[s&&e>1?e-1:e,s&&n>1?n-1:n],p=c[0]/h[0],d=c[1]/h[1];let f=0;for(let c=0;c<r;c++){const r=c*t.strides[0];for(let c=0;c<e;c++){const e=p*c,h=r+Math.min(a-1,s?Math.round(e):Math.floor(e))*t.strides[1];for(let e=0;e<n;e++){const n=d*e,r=h+Math.min(i-1,s?Math.round(n):Math.floor(n))*t.strides[2];for(let t=0;t<o;t++){const e=l[r+t];u[f++]=e}}}}return ne(u,[r,e,n,o],t.dtype)}resizeNearestNeighborBackprop(t,e,n){bb([t,e],"resizeNearestNeighborBackprop");const[s,r,a,i]=e.shape,[,o,l]=t.shape,u=new Float32Array(s*r*a*i),c=this.readSync(t.dataId),h=[n&&o>1?r-1:r,n&&l>1?a-1:a],p=[n&&o>1?o-1:o,n&&l>1?l-1:l],d=h[0]/p[0],f=h[1]/p[1],m=1/d,g=1/f,y=2*Math.ceil(m)+2,b=2*Math.ceil(g)+2;for(let h=0;h<s;h++){const s=h*e.strides[0];for(let h=0;h<r;h++){const p=s+h*e.strides[1],x=Math.floor(h*m),w=Math.floor(x-y/2);for(let m=0;m<a;m++){const x=p+m*e.strides[2],v=Math.floor(m*g),N=Math.floor(v-b/2);for(let e=0;e<i;e++){let i=0;for(let u=0;u<y;u++){const p=u+w;if(p<0||p>=o)continue;const g=s+p*t.strides[1],y=p*d;if(h===Math.min(r-1,n?Math.round(y):Math.floor(y)))for(let s=0;s<b;s++){const r=s+N;if(r<0||r>=l)continue;const o=g+r*t.strides[2],u=r*f;m===Math.min(a-1,n?Math.round(u):Math.floor(u))&&(i+=c[o+e])}}u[x+e]=i}}}}return Gi(u,e.shape,e.dtype)}localResponseNormalization4D(t,e,n,s,r){bb(t,"localResponseNormalization4D");const a=t.shape[3],i=a-1,o=this.readSync(t.dataId),l=t.size,u=new Float32Array(l);function c(t){const n=t%a;let s=t-n+Math.max(0,n-e);const r=t-n+Math.min(n+e,i);let l=0;for(;s<=r;s++){const t=o[s];l+=t*t}return l}for(let t=0;t<l;t++){const e=c(t),a=o[t]*Math.pow(n+s*e,-r);u[t]=a}return Gi(u,t.shape)}LRNGrad(t,e,n,s,r,a,i){bb(t,"LRNGrad");const o=t.shape[3],l=this.readSync(t.dataId),u=this.readSync(e.dataId),c=this.readSync(n.dataId),h=new Float32Array(t.size),p=t.size;for(let t=0;t<p;t++){const e=t%o,n=t-e+Math.max(0,e-s),p=t-e+Math.min(o,e+s+1);let d=0;for(let t=n;t<p;t++)d+=Math.pow(u[t],2);d=a*d+r;for(let e=n;e<p;e++){let n=-2*a*i*u[e]*c[t]/d;t===e&&(n+=Math.pow(d,-i)),n*=l[t],h[e]+=n}}return Gi(h,t.shape)}multinomial(t,e,n,s){bb(t,"multinomial");const r=e?t:Ai(t),a=r.shape[0],i=r.shape[1],o=va([a,n],"int32"),l=this.readSync(o.dataId),u=this.readSync(r.dataId);for(let t=0;t<a;++t){const e=t*i,r=new Float32Array(i-1);r[0]=u[e];for(let t=1;t<r.length;++t)r[t]=r[t-1]+u[e+t];const a=ti(s.toString()),o=t*n;for(let t=0;t<n;++t){const e=a();l[o+t]=r.length;for(let n=0;n<r.length;n++)if(e<r[n]){l[o+t]=n;break}}}return o}oneHot(t,e,n,s){bb(t,"oneHot");const r=new Float32Array(t.size*e);r.fill(s);const a=this.readSync(t.dataId);for(let s=0;s<t.size;++s)a[s]>=0&&a[s]<e&&(r[s*e+a[s]]=n);return Ui(r,[t.size,e],"int32")}nonMaxSuppression(t,e,n,s,r){bb(t,"nonMaxSuppression");const a=this.readSync(t.dataId),i=this.readSync(e.dataId);return xb(a,i,n,s,r)}depthToSpace(t,e,n){I("NHWC"===n,()=>"Only NHWC dataFormat supported on CPU for depthToSpace. Got "+n),I(e>1,()=>"blockSize should be > 1 for depthToSpace, but was: "+e);const s=t.shape[0],r=t.shape[1],a=t.shape[2],i=t.shape[3],o=r*e,l=a*e,u=i/(e*e),c=this.readSync(t.dataId),h=new Float32Array(s*o*l*u);let p=0;for(let t=0;t<s;++t)for(let n=0;n<o;++n){const s=Math.floor(n/e),o=n%e;for(let n=0;n<l;++n){const l=Math.floor(n/e),d=(o*e+n%e)*u;for(let e=0;e<u;++e){const n=e+d+i*(l+a*(s+r*t));h[p++]=c[n]}}}return Gi(h,[s,o,l,u])}broadcastedBinaryOp(t,e,n,s){const r=kr(t.shape,e.shape),a=Be(r,n),i=this.readSync(t.dataId),o=this.readSync(e.dataId),l=vr(t.shape,r),u=vr(e.shape,r),c=a.values;if(l.length+u.length===0)for(let t=0;t<c.length;++t)c[t]=s(i[t%i.length],o[t%o.length]);else{const n=this.bufferSync(t),r=this.bufferSync(e);for(let h=0;h<c.length;++h){const p=a.indexToLoc(h),d=p.slice(-t.rank);l.forEach(t=>d[t]=0);const f=n.locToIndex(d),m=p.slice(-e.rank);u.forEach(t=>m[t]=0);const g=r.locToIndex(m);c[h]=s(i[f],o[g])}}return a.toTensor()}split(t,e,n){return wb(t,e,n)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}cropAndResize(t,e,n,s,r,a){const[i,o,l,u]=t.shape,c=e.shape[0],[h,p]=s,d=Be([c,h,p,u],"float32"),f=this.readSync(e.dataId),m=this.readSync(n.dataId),g=this.readSync(t.dataId),y=t.strides,b=d.strides;for(let t=0;t<c;t++){const e=4*t,n=f[e],s=f[e+1],c=f[e+2],x=f[e+3],w=m[t];if(w>=i)continue;const v=h>1?(c-n)*(o-1)/(h-1):0,N=p>1?(x-s)*(l-1)/(p-1):0;for(let e=0;e<h;e++){const i=h>1?n*(o-1)+e*v:.5*(n+c)*(o-1);if(i<0||i>o-1)for(let n=0;n<p;n++)for(let s=0;s<u;s++){const r=s+n*b[2]+e*b[1]+t*b[0];d.values[r]=a}else if("bilinear"===r){const n=Math.floor(i),r=Math.ceil(i),o=i-n;for(let i=0;i<p;i++){const c=p>1?s*(l-1)+i*N:.5*(s+x)*(l-1);if(c<0||c>l-1){for(let n=0;n<u;n++){const s=n+i*b[2]+e*b[1]+t*b[0];d.values[s]=a}continue}const h=Math.floor(c),f=Math.ceil(c),m=c-h;for(let s=0;s<u;s++){let a=s+h*y[2]+n*y[1]+w*y[0];const l=g[a];a=s+f*y[2]+n*y[1]+w*y[0];const u=g[a];a=s+h*y[2]+r*y[1]+w*y[0];const c=g[a];a=s+f*y[2]+r*y[1]+w*y[0];const p=l+(u-l)*m,x=c+(g[a]-c)*m;a=s+i*b[2]+e*b[1]+t*b[0],d.values[a]=p+(x-p)*o}}}else for(let n=0;n<p;++n){const r=p>1?s*(l-1)+n*N:.5*(s+x)*(l-1);if(r<0||r>l-1){for(let s=0;s<u;s++){const r=s+n*b[2]+e*b[1]+t*b[0];d.values[r]=a}continue}const o=Math.round(r),c=Math.round(i);for(let s=0;s<u;s++){const r=s+o*y[2]+c*y[1]+w*y[0],a=s+n*b[2]+e*b[1]+t*b[0];d.values[a]=g[r]}}}}return d.toTensor()}sparseToDense(t,e,n,s){const{sliceRank:r,numUpdates:a,sliceSize:i,strides:o,outputSize:l}=xn(0,t,n);return this.scatter(t,e,n,l,i,a,r,o,s,!1)}gatherND(t,e){const n=e.shape,s=n[n.length-1],[r,a,i,o]=mn(t,e);if(0===a)return ne([],r,t.dtype);const l=new vt([a,i],t.dtype),u=this.readSync(e.dataId),c=this.readSync(t.dataId);for(let e=0;e<a;e++){const n=[];let r=0;for(let t=0;t<s;t++){const a=u[e*s+t];r+=a*o[t],n.push(a)}if(r<0||r>=t.size/i)throw new Error(`Invalid indices: ${n} does not index into ${t.shape}`);for(let t=0;t<i;t++)l.values[e*i+t]=c[r*i+t]}return l.toTensor().reshape(r)}scatterND(t,e,n){const{sliceRank:s,numUpdates:r,sliceSize:a,strides:i,outputSize:o}=xn(0,t,n),l=Xr(0);return this.scatter(t,e,n,o,a,r,s,i,l,!0)}fill(t,e,n){const s=P(n=n||Y(e),$(t));return s.fill(e),qn().makeTensor(s,t,n,this)}onesLike(t){if("string"===t.dtype)throw new Error("onesLike is not supported for string tensors");return this.fill(t.shape,1,t.dtype)}zerosLike(t){const e=P(t.dtype,$(t.shape));return this.makeOutput(e,t.shape,t.dtype)}linspace(t,e,n){return eu(t,e,n)}scatter(t,e,n,s,r,a,i,o,l,u){const c=[s/r,r],h=this.readSync(t.dataId),p=this.readSync(e.dataId);if(0===s)return ne([],n,e.dtype);const d=new vt(c,e.dtype);d.values.fill(this.readSync(l.dataId)[0]);for(let t=0;t<a;t++){const a=[];let l=0;for(let e=0;e<i;e++){const n=h[t*i+e];a.push(n),l+=n*o[e]}if(l<0||l>=s/r)throw new Error(`Invalid indices: ${a} does not index into ${n}`);for(let n=0;n<r;n++)u?d.values[l*r+n]+=p[t*r+n]:d.values[l*r+n]=0===e.rank?p[0]:p[t*r+n]}return d.toTensor().reshape(n)}}function Ib(t,e,n,s){const r=B(s,$(n));for(let n=0;n<r.length;++n){const s=n*e;let a=t[s];for(let n=0;n<e;++n){const e=t[s+n];e>a&&(a=e)}r[n]=a}return r}function Eb(t,e,n,s,r){const a=e.length,i=$(e),o=Q(e),l=Q(r),u=B(n,$(r));for(let e=0;e<i;++e){const n=pt(e,a,o),r=new Array(n.length);for(let t=0;t<r.length;t++)r[t]=n[s[t]];u[ht(r,a,l)]=t[e]}return u}var Tb=Object.freeze({__proto__:null,maxImpl:Ib,transposeImpl:Eb});Qn("cpu",()=>new Sb,1);const Ab={kernelName:"Abs",backendName:"cpu",kernelFunc:t=>{const{x:e}=t.inputs,n=t.backend,s=new Float32Array($(e.shape));if("complex64"!==e.dtype){const t=n.data.get(e.dataId).values;for(let e=0;e<t.length;++e)s[e]=Math.abs(t[e])}else{const t=n.data.get(e.dataId),r=t.complexTensorInfos.real,a=t.complexTensorInfos.imag,i=n.data.get(r.dataId).values,o=n.data.get(a.dataId).values;for(let t=0;t<i.length;t++){const e=i[t],n=o[t];s[t]=Math.hypot(e,n)}}return n.makeOutput(s,e.shape,"float32")}};function $b(t,e,n){return({inputs:s,attrs:r,backend:a})=>{const{x:i}=s;if(bb(i,t),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=a,l=o.data.get(i.dataId).values,u=$(i.shape),c=n||i.dtype,h=P(c,u);for(let t=0;t<u;++t)h[t]=e(l[t],r);return o.makeTensorInfo(i.shape,c,h)}}const Rb={kernelName:"Acos",backendName:"cpu",kernelFunc:$b("Acos",t=>Math.acos(t))},Db={kernelName:"Acosh",backendName:"cpu",kernelFunc:$b("Acosh",t=>Math.acosh(t))};function _b(t){return(e,n,s,r,a)=>{const i=kr(e,n),o=i.length,l=Q(i),u=B(a,$(i)),c=e.length,h=n.length,p=Q(e),d=Q(n),f=vr(e,i),m=vr(n,i);if(f.length+m.length===0)for(let e=0;e<u.length;++e)u[e]=t(s[e%s.length],r[e%r.length]);else for(let e=0;e<u.length;++e){const n=pt(e,o,l),a=n.slice(-c);f.forEach(t=>a[t]=0);const i=ht(a,c,p),g=n.slice(-h);m.forEach(t=>g[t]=0);const y=ht(g,h,d);u[e]=t(s[i],r[y])}return[u,i]}}function Fb(t){const{inputs:e,backend:n}=t,{real:s,imag:r}=e,a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,o=n.makeTensorInfo(s.shape,"complex64");return n.data.get(o.dataId).complexTensorInfos={real:n.makeTensorInfo(s.shape,"float32",a),imag:n.makeTensorInfo(r.shape,"float32",i)},o}const Ob={kernelName:"Complex",backendName:"cpu",kernelFunc:Fb};function Mb(t){const{inputs:e,backend:n}=t,{x:s}=e;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const Lb={kernelName:"Identity",backendName:"cpu",kernelFunc:Mb};function zb(t){const{inputs:e,backend:n}=t,{input:s}=e,r=n.data.get(s.dataId).complexTensorInfos.real,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const Bb={kernelName:"Real",backendName:"cpu",kernelFunc:zb};function Pb(t){const{inputs:e,backend:n,attrs:s}=t,{x:r}=e,{dtype:a}=s;if("complex64"===a){if("complex64"===r.dtype)return Mb({inputs:{x:r},backend:n});const t=va(r.shape),e=Pb({inputs:{x:r},backend:n,attrs:{dtype:"float32"}}),s=Fb({inputs:{real:e,imag:t},backend:n});return t.dispose(),n.disposeIntermediateTensorInfo(e),s}if("complex64"===r.dtype){const t=zb({inputs:{input:r},backend:n}),e=Pb({inputs:{x:t},backend:n,attrs:{dtype:a}});return n.disposeIntermediateTensorInfo(t),e}if(!U(r.dtype,a)){const t=Mb({inputs:{x:r},backend:n});return{dataId:t.dataId,shape:t.shape,dtype:a}}if("int32"===a){const t=n.data.get(r.dataId).values,e=Int32Array.from(t);return n.makeTensorInfo(r.shape,"int32",e)}if("bool"===a){const t=n.data.get(r.dataId).values,e=et([0],r.dtype),[s,a]=_b((t,e)=>t!==e?1:0)(r.shape,[],t,e,"bool");return n.makeTensorInfo(a,"bool",s)}throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${a}`)}const Wb={kernelName:"Cast",backendName:"cpu",kernelFunc:Pb};function Vb(t,e,n,s){return null==n?({inputs:n,backend:r})=>{const{a:a,b:i}=n,o=r;bb([a,i],t);const l=o.data.get(a.dataId).values,u=o.data.get(i.dataId).values,c=s||a.dtype,[h,p]=_b(e)(a.shape,i.shape,l,u,c);return o.makeTensorInfo(p,c,h)}:({inputs:t,backend:r})=>{const{a:a,b:i}=t,o=r;if("complex64"===a.dtype||"complex64"===i.dtype){const t=Pb({inputs:{x:a},backend:o,attrs:{dtype:"complex64"}}),e=o.data.get(t.dataId),s=e.complexTensorInfos.real,r=e.complexTensorInfos.imag,l=o.data.get(s.dataId).values,u=o.data.get(r.dataId).values,c=Pb({inputs:{x:i},backend:o,attrs:{dtype:"complex64"}}),h=o.data.get(c.dataId),p=h.complexTensorInfos.real,d=h.complexTensorInfos.imag,f=o.data.get(p.dataId).values,m=o.data.get(d.dataId).values,[g,y,b]=function(t){return(e,n,s,r,a,i)=>{const o=kr(e,n),l=$(o),u=o.length,c=Q(o),h=B("float32",l),p=B("float32",l),d=vr(e,o),f=vr(n,o),m=Hl(s,r),g=Hl(a,i),y=e.length,b=Q(e),x=n.length,w=Q(n);if(d.length+f.length===0)for(let e=0;e<h.length;e++){const n=e%m.length,s=e%g.length,r=t(m[2*n],m[2*n+1],g[2*s],g[2*s+1]);h[e]=r.real,p[e]=r.imag}else for(let e=0;e<h.length;e++){const n=pt(e,u,c),s=n.slice(-y);d.forEach(t=>s[t]=0);const r=ht(s,y,b),a=n.slice(-x);f.forEach(t=>a[t]=0);const i=ht(a,x,w),o=t(m[2*r],m[2*r+1],g[2*i],g[2*i+1]);h[e]=o.real,p[e]=o.imag}return[h,p,o]}}(n)(a.shape,i.shape,l,u,f,m),x=o.makeTensorInfo(b,"float32",g),w=o.makeTensorInfo(b,"float32",y),v=Fb({inputs:{real:x,imag:w},backend:o});return o.disposeIntermediateTensorInfo(t),o.disposeIntermediateTensorInfo(c),o.disposeIntermediateTensorInfo(x),o.disposeIntermediateTensorInfo(w),v}{const t=o.data.get(a.dataId).values,n=o.data.get(i.dataId).values,r=s||a.dtype,[l,u]=_b(e)(a.shape,i.shape,t,n,r);return o.makeTensorInfo(u,r,l)}}}const Ub=Vb(u,(t,e)=>t+e,(t,e,n,s)=>({real:t+n,imag:e+s})),Gb={kernelName:u,backendName:"cpu",kernelFunc:Ub},Hb={kernelName:"Asin",backendName:"cpu",kernelFunc:$b("Asin",t=>Math.asin(t))},jb={kernelName:"Asinh",backendName:"cpu",kernelFunc:$b("Asinh",t=>Math.asinh(t))},qb={kernelName:"Atan",backendName:"cpu",kernelFunc:$b("Atan",t=>Math.atan(t))},Kb={kernelName:"Atanh",backendName:"cpu",kernelFunc:$b("Atanh",t=>Math.atanh(t))};function Xb(t,e,n,s,r,a){const i=r.strideHeight,o=r.strideWidth,l=r.dilationHeight,u=r.dilationWidth,c=r.effectiveFilterHeight,h=r.effectiveFilterWidth,p=r.padInfo.top,d=r.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=Be(r.outShape,n),g=m.values,y=r.outShape[1]*r.outShape[2]*r.outShape[3],b=r.outShape[2]*r.outShape[3],x=r.outShape[3];for(let e=0;e<r.batchSize;++e){const n=e*y,m=e*s[0];for(let e=0;e<r.inChannels;++e)for(let y=0;y<r.outHeight;++y){const w=y*i-p,v=Math.max(0,w),N=Math.min(r.inHeight,c+w),k=n+y*b;for(let n=0;n<r.outWidth;++n){const i=n*o-d,c=Math.max(0,i),p=Math.min(r.inWidth,h+i);let y=f,b=0,w=0;for(let n=v;n<N;n+=l){const r=m+n*s[1];for(let n=c;n<p;n+=u){const i=t[r+n*s[2]+e];"max"===a&&i>y?y=i:"avg"===a&&(b+=i,w++)}if(isNaN(y))break}g[k+n*x+e]="avg"===a?b/w:y}}}return m}function Yb(t,e,n,s,r=!1,a=!1){const i=Be(s.outShape,"int32"),o=s.strideHeight,l=s.strideWidth,u=s.dilationHeight,c=s.dilationWidth,h=s.effectiveFilterHeight,p=s.effectiveFilterWidth,d=s.padInfo.top,f=s.padInfo.left,m=Be(e,n,t);for(let t=0;t<s.batchSize;++t)for(let e=0;e<s.inChannels;++e)for(let n=0;n<s.outHeight;++n){const g=n*o-d;let y=g;for(;y<0;)y+=u;const b=Math.min(s.inHeight,h+g);for(let o=0;o<s.outWidth;++o){const h=o*l-f;let d=h;for(;d<0;)d+=c;const x=Math.min(s.inWidth,p+h);let w=Number.NEGATIVE_INFINITY,v=-1;for(let n=y;n<b;n+=u){const i=n-g;for(let o=d;o<x;o+=c){const l=o-h,u=m.get(t,n,o,e);u>w&&(w=u,v=r?a?((t*s.inHeight+n)*s.inWidth+o)*s.inChannels+e:(n*s.inWidth+o)*s.inChannels+e:i*p+l)}}i.set(v,t,n,o,e)}}return i}const Jb={kernelName:"AvgPool",backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t,{x:r}=e;bb(r,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;I(Ls(i,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`);const u=Es(r.shape,a,i,1,o,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&R(u.inShape,u.outShape))c=Mb({inputs:{x:r},backend:n});else{const t=n.data.get(r.dataId).values,e=Q(r.shape),s=Xb(t,r.shape,r.dtype,e,u,"avg");c=n.makeTensorInfo(u.outShape,r.dtype,s.values)}return c}};const Zb={kernelName:"AvgPoolBackprop",backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t,{dy:r,input:a}=e,i=a;bb([r,a],"avgPoolBackprop");const{filterSize:o,strides:l,pad:u}=s,c=Es(i.shape,o,l,1,u),h=c.strideHeight,p=c.strideWidth,d=c.filterHeight,f=c.filterWidth,m=c.dilationHeight,g=c.dilationWidth,y=c.effectiveFilterHeight,b=c.effectiveFilterWidth,x=b-1-c.padInfo.left,w=y-1-c.padInfo.top,v=Be(i.shape,"float32"),N=1/(d*f),k=n.data.get(r.dataId).values,C=Be(r.shape,"float32",k);for(let t=0;t<c.batchSize;++t)for(let e=0;e<c.inChannels;++e)for(let n=0;n<c.inHeight;++n)for(let s=0;s<c.inWidth;++s){const r=n-w,a=s-x;let i=0;for(let n=0;n<y;n+=m){const s=(r+n)/h;if(!(s<0||s>=c.outHeight||Math.floor(s)!==s))for(let n=0;n<b;n+=g){const r=(a+n)/p;r<0||r>=c.outWidth||Math.floor(r)!==r||(i+=C.get(t,s,r,e))}}v.set(i*N,t,n,s,e)}return n.makeTensorInfo(v.shape,v.dtype,v.values)}};const Qb={kernelName:"FusedBatchNorm",backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t,{x:r,scale:a,offset:i,mean:o,variance:l}=e;I(o.shape.length===l.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),I(null==i||o.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),I(null==a||o.shape.length===a.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks."),bb([r,o,l,a,i],"batchNorm");let{varianceEpsilon:u}=s;null==u&&(u=.001);const c=n.data.get(r.dataId).values,h=n.data.get(o.dataId).values,p=n.data.get(l.dataId).values,d=a?n.data.get(a.dataId).values:new Float32Array([1]),f=i?n.data.get(i.dataId).values:new Float32Array([0]),m=new Float32Array(c.length),g=f.length,y=d.length,b=p.length,x=h.length;let w=0,v=0,N=0,k=0;for(let t=0;t<c.length;++t)m[t]=f[w++]+(c[t]-h[v++])*d[N++]/Math.sqrt(p[k++]+u),w>=g&&(w=0),v>=x&&(v=0),N>=y&&(N=0),k>=b&&(k=0);return n.makeTensorInfo(r.shape,r.dtype,m)}},tx={kernelName:"Ceil",backendName:"cpu",kernelFunc:$b("Ceil",t=>Math.ceil(t))},ex={kernelName:"ClipByValue",backendName:"cpu",kernelFunc:$b("ClipByValue",(t,e)=>{const n=e;return t>n.clipValueMax?n.clipValueMax:t<n.clipValueMin?n.clipValueMin:t})};function nx(t){const{inputs:e,backend:n}=t,{input:s}=e,r=n.data.get(s.dataId).complexTensorInfos.imag,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const sx={kernelName:"Imag",backendName:"cpu",kernelFunc:nx};function rx(t){const{inputs:e,backend:n,attrs:s}=t,{x:r}=e,{shape:a}=s,i=$(r.shape),o=M(a,i),l=$(o);I(i===l,()=>`The new shape (${o}) has ${l} elements and the old shape (${r.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`),n.incRef(r.dataId);const u=n.data.get(r.dataId);if(null!=u.complexTensorInfos){const t=u.complexTensorInfos.real,e=u.complexTensorInfos.imag;t.shape=o,e.shape=o}return{dataId:r.dataId,shape:o,dtype:r.dtype}}const ax={kernelName:"Reshape",backendName:"cpu",kernelFunc:rx};function ix(t){const{inputs:e,backend:n,attrs:s}=t,{axis:r}=s,a=L(r,e[0].shape)[0];let i=Vs(e.map(t=>t.shape),a);if(0===$(i))return n.makeTensorInfo(i,e[0].dtype,[]);const o=e.filter(t=>$(t.shape)>0);if(1===o.length)return o[0];if(Ws(o.map(t=>t.shape),a),"complex64"===o[0].dtype){const t=o.map(t=>zb({inputs:{input:t},backend:n})),e=o.map(t=>nx({inputs:{input:t},backend:n})),s=ix({inputs:t,backend:n,attrs:{axis:r}}),a=ix({inputs:e,backend:n,attrs:{axis:r}}),i=Fb({inputs:{real:s,imag:a},backend:n});return t.forEach(t=>n.disposeIntermediateTensorInfo(t)),e.forEach(t=>n.disposeIntermediateTensorInfo(t)),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),i}const l=o.map(t=>{const e=$(t.shape.slice(a));return rx({inputs:{x:t},backend:n,attrs:{shape:[-1,e]}})});i=Vs(l.map(t=>t.shape),1);const u=B(o[0].dtype,$(i));if(1===l[0].shape[0]){let t=0;l.forEach(e=>{const s=n.data.get(e.dataId).values,r=$(e.shape);u.set(s,t),t+=r})}else{let t=0;l.forEach(e=>{const s=n.data.get(e.dataId).values;let r=0;for(let n=0;n<e.shape[0];++n){const a=n*i[1]+t;for(let t=0;t<e.shape[1];++t)u[a+t]=s[r++]}t+=e.shape[1]})}const c=Vs(o.map(t=>t.shape),a),h=n.makeTensorInfo(c,e[0].dtype,u);return l.forEach(t=>n.disposeIntermediateTensorInfo(t)),h}const ox={kernelName:"Concat",backendName:"cpu",kernelFunc:ix},lx=$b(c,t=>Math.cos(t)),ux={kernelName:c,backendName:"cpu",kernelFunc:lx},cx={kernelName:"Cosh",backendName:"cpu",kernelFunc:$b("Cosh",t=>Math.cosh(t))},hx={kernelName:"Dilation2D",backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:s,filter:r}=t,{strides:a,pad:i,dilations:o}=n,l=e,u=l.data.get(s.dataId).values,c=s.shape.length,h=l.data.get(r.dataId).values,p=r.shape.length,{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:w,strideWidth:v,filterHeight:N,filterWidth:k,dilationHeight:C,dilationWidth:S,outShape:I}=Is(s.shape,r.shape,a,i,"NHWC",o),E=$(I),T=I.length,A=P(s.dtype,E);for(let t=0;t<d;++t)for(let e=0;e<y;++e){const n=e*w-x.top;for(let a=0;a<b;++a){const i=a*v-x.left;for(let o=0;o<g;++o){let l=Number.MIN_SAFE_INTEGER;for(let e=0;e<N;++e){const a=n+e*C;if(a>=0&&a<f)for(let n=0;n<k;++n){const d=i+n*S;if(d>=0&&d<m){const i=ht([t,a,d,o],c,Q(s.shape)),f=ht([e,n,o],p,Q(r.shape)),m=u[i]+h[f];m>l&&(l=m)}}}A[ht([t,e,a,o],T,Q(I))]=l}}}return{dataId:l.write(et(A,s.dtype),I,s.dtype),shape:I,dtype:s.dtype}}},px={kernelName:"Dilation2DBackpropFilter",backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:s,filter:r,dy:a}=t,{strides:i,pad:o,dilations:l}=n,u=e,c=nt(s.shape,u.data.get(s.dataId).values),h=nt(r.shape,u.data.get(r.dataId).values),{batchSize:p,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:v,filterWidth:N,dilationHeight:k,dilationWidth:C,outShape:S}=Is(s.shape,r.shape,i,o,"NHWC",l);I(a.rank===S.length,()=>`Error in Dilation2DBackpropFilter, dy must have the same rank as output ${S.length}, but got `+a.rank);const E=nt(S,u.data.get(a.dataId).values),T=at(r.shape,r.dtype);for(let t=0;t<p;++t)for(let e=0;e<g;++e){const n=e*x-b.top;for(let s=0;s<y;++s){const r=s*w-b.left;for(let a=0;a<m;++a){let i=Number.MIN_SAFE_INTEGER,o=0,l=0;for(let e=0;e<v;++e){const s=n+e*k;if(s>=0&&s<d)for(let n=0;n<N;++n){const u=r+n*C;if(u>=0&&u<f){const r=c[t][s][u][a]+h[e][n][a];r>i&&(i=r,o=e,l=n)}}}T[o][l][a]+=E[t][e][s][a]}}}return{dataId:u.write(et(T,s.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},dx={kernelName:"Dilation2DBackpropInput",backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:s,filter:r,dy:a}=t,{strides:i,pad:o,dilations:l}=n,u=e,c=nt(s.shape,u.data.get(s.dataId).values),h=nt(r.shape,u.data.get(r.dataId).values),{batchSize:p,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:v,filterWidth:N,dilationHeight:k,dilationWidth:C,outShape:S}=Is(s.shape,r.shape,i,o,"NHWC",l);I(a.rank===S.length,()=>`Error in Dilation2DBackpropInput, dy must have the same rank as output ${S.length}, but got `+a.rank);const E=nt(S,u.data.get(a.dataId).values),T=at(s.shape,s.dtype);for(let t=0;t<p;++t)for(let e=0;e<g;++e){const n=e*x-b.top;for(let s=0;s<y;++s){const r=s*w-b.left;for(let a=0;a<m;++a){let i=Number.MIN_SAFE_INTEGER,o=n<0?0:n,l=r<0?0:r;for(let e=0;e<v;++e){const s=n+e*k;if(s>=0&&s<d)for(let n=0;n<N;++n){const u=r+n*C;if(u>=0&&u<f){const r=c[t][s][u][a]+h[e][n][a];r>i&&(i=r,o=s,l=u)}}}T[t][o][l][a]+=E[t][e][s][a]}}}return{dataId:u.write(et(T,s.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},fx=Vb(h,(t,e)=>t/e),mx={kernelName:h,backendName:"cpu",kernelFunc:fx},gx={kernelName:"Elu",backendName:"cpu",kernelFunc:$b("Elu",t=>t>=0?t:Math.exp(t)-1)},yx={kernelName:"Erf",backendName:"cpu",kernelFunc:$b("Erf",t=>{const e=Math.sign(t),n=Math.abs(t),s=1/(1+.3275911*n);return e*(1-((((1.061405429*s-1.453152027)*s+1.421413741)*s-.284496736)*s+.254829592)*s*Math.exp(-n*n))})},bx={kernelName:"Exp",backendName:"cpu",kernelFunc:$b("Exp",t=>Math.exp(t))},xx={kernelName:"Expm1",backendName:"cpu",kernelFunc:$b("Expm1",t=>Math.expm1(t))},wx=Vb("Multiply",(t,e)=>t*e,(t,e,n,s)=>({real:t*n-e*s,imag:t*s+e*n})),vx={kernelName:"Multiply",backendName:"cpu",kernelFunc:wx};function Nx(t){const{inputs:e,backend:n,attrs:s}=t,{x:r}=e,{begin:a,size:i}=s;bb(r,"slice");const o=r.shape.length,l=Q(r.shape),[u,c]=On(r,a,i);vn(r,u,c);const h=_n(r.shape,u,c),p=n.data.get(r.dataId).values,d=$(c);if(h){const t=Fn(u,l),e=p.subarray(t,t+d);return n.makeTensorInfo(c,r.dtype,e)}const f=B(r.dtype,d);for(let t=0;t<d;++t){const e=ht(pt(t,c.length,Q(c)).map((t,e)=>t+u[e]),o,l);f[t]=p[e]}return n.makeTensorInfo(c,r.dtype,f)}const kx={kernelName:"Slice",backendName:"cpu",kernelFunc:Nx},Cx=Vb("Sub",(t,e)=>t-e,(t,e,n,s)=>({real:t-n,imag:e-s})),Sx={kernelName:"Sub",backendName:"cpu",kernelFunc:Cx};function Ix(t,e,n){const s=t.shape,r=s[0],a=s[1],i=n.data.get(t.dataId),o=i.complexTensorInfos.real,l=i.complexTensorInfos.imag,u=[r,a],c=$(u),h=B("float32",c),p=B("float32",c);for(let t=0;t<r;t++){const s=Nx({inputs:{x:o},backend:n,attrs:{begin:[t,0],size:[1,a]}}),r=Nx({inputs:{x:l},backend:n,attrs:{begin:[t,0],size:[1,a]}}),i=Fb({inputs:{real:s,imag:r},backend:n}),{real:u,imag:c}=Ex(i,e,n),d=Hl(u,c);for(let e=0;e<a;e++){const n=Xl(d,e);h[t*a+e]=n.real,p[t*a+e]=n.imag}n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(i)}const d=n.makeTensorInfo(u,"float32",h),f=n.makeTensorInfo(u,"float32",p),m=Fb({inputs:{real:d,imag:f},backend:n});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}function Ex(t,e,n){const s=$(t.shape),r=n.data.get(t.dataId),a=n.data.get(r.complexTensorInfos.real.dataId).values,i=n.data.get(r.complexTensorInfos.imag.dataId).values;if(0==((o=s)&o-1)){const r=function t(e,n,s,r,a){if(1===s)return{real:e,imag:n};const i=Hl(e,n),o=s/2,l=ql(i),u=l.real,c=l.imag,h=[u.length],p=a.makeTensorInfo(h,"float32",u),d=a.makeTensorInfo(h,"float32",c),f=Fb({inputs:{real:p,imag:d},backend:a}),m=Kl(i),g=m.real,y=m.imag,b=[g.length],x=a.makeTensorInfo(b,"float32",g),w=a.makeTensorInfo(b,"float32",y),v=Fb({inputs:{real:x,imag:w},backend:a}),N=t(u,c,o,r,a),k=N.real,C=N.imag,S=[k.length],I=a.makeTensorInfo(S,"float32",k),E=a.makeTensorInfo(S,"float32",C),T=Fb({inputs:{real:I,imag:E},backend:a}),A=t(g,y,o,r,a),$=A.real,R=A.imag,D=[$.length],_=a.makeTensorInfo(D,"float32",$),F=a.makeTensorInfo(D,"float32",R),O=Fb({inputs:{real:_,imag:F},backend:a}),M=Jl(s,r),L=[M.real.length],z=a.makeTensorInfo(L,"float32",M.real),B=a.makeTensorInfo(L,"float32",M.imag),P=Fb({inputs:{real:z,imag:B},backend:a}),W=wx({inputs:{a:P,b:O},backend:a}),V=Ub({inputs:{a:T,b:W},backend:a}),U=Cx({inputs:{a:T,b:W},backend:a}),G=zb({inputs:{input:V},backend:a}),H=zb({inputs:{input:U},backend:a}),j=nx({inputs:{input:V},backend:a}),q=nx({inputs:{input:U},backend:a}),K=ix({inputs:[G,H],backend:a,attrs:{axis:0}}),X=ix({inputs:[j,q],backend:a,attrs:{axis:0}}),Y=a.data.get(K.dataId).values,J=a.data.get(X.dataId).values;return a.disposeIntermediateTensorInfo(p),a.disposeIntermediateTensorInfo(d),a.disposeIntermediateTensorInfo(f),a.disposeIntermediateTensorInfo(x),a.disposeIntermediateTensorInfo(w),a.disposeIntermediateTensorInfo(v),a.disposeIntermediateTensorInfo(I),a.disposeIntermediateTensorInfo(E),a.disposeIntermediateTensorInfo(T),a.disposeIntermediateTensorInfo(_),a.disposeIntermediateTensorInfo(F),a.disposeIntermediateTensorInfo(O),a.disposeIntermediateTensorInfo(z),a.disposeIntermediateTensorInfo(B),a.disposeIntermediateTensorInfo(P),a.disposeIntermediateTensorInfo(W),a.disposeIntermediateTensorInfo(V),a.disposeIntermediateTensorInfo(U),a.disposeIntermediateTensorInfo(G),a.disposeIntermediateTensorInfo(j),a.disposeIntermediateTensorInfo(H),a.disposeIntermediateTensorInfo(q),a.disposeIntermediateTensorInfo(K),a.disposeIntermediateTensorInfo(X),{real:Y,imag:J}}(a,i,s,e,n),o=[t.shape[0],t.shape[1]];if(e){const t=n.makeTensorInfo(o,"float32",r.real),e=n.makeTensorInfo(o,"float32",r.imag),a=n.makeTensorInfo([],"float32",tt(s,"float32")),i=Mb({inputs:{x:a},backend:n}),l=mx.kernelFunc({inputs:{a:t,b:a},backend:n}),u=mx.kernelFunc({inputs:{a:e,b:i},backend:n}),c=n.data.get(l.dataId).values,h=n.data.get(u.dataId).values;return n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),{real:c,imag:h}}return r}return jl(function(t,e,n){const s=new Float32Array(2*e);for(let r=0;r<e;r++){let a=0,i=0;for(let s=0;s<e;s++){const o=Zl(r*s,e,n),l=Xl(t,s);a+=l.real*o.real-l.imag*o.imag,i+=l.real*o.imag+l.imag*o.real}n&&(a/=e,i/=e),Yl(s,a,i,r)}return s}(Hl(a,i),s,e));var o}const Tx={kernelName:"FFT",backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n}=t,{input:s}=e,r=$(s.shape),a=s.shape[s.shape.length-1],i=rx({inputs:{x:s},backend:n,attrs:{shape:[r/a,a]}}),o=Ix(i,!1,n),l=rx({inputs:{x:o},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}},Ax={kernelName:"FlipLeftRight",backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{image:s}=t,r=n,a=B(s.dtype,$(s.shape)),[i,o,l,u]=s.shape,c=r.data.get(s.dataId).values;for(let t=0;t<i;t++){const e=t*l*o*u;for(let t=0;t<o;t++){const n=t*(l*u);for(let s=0;s<l;s++){const r=s*u;for(let o=0;o<u;o++){const h=[i,t,s,o][2],p=Math.round(l-h),d=e+n+r+o;let f=c[d];if(p>=0&&p<l){f=c[e+n+p*u+o]}a[d]=f}}}}return{dataId:r.write(a,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},$x={kernelName:"Floor",backendName:"cpu",kernelFunc:$b("Floor",t=>Math.floor(t))};const Rx={kernelName:"IFFT",backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n}=t,{input:s}=e,r=$(s.shape),a=s.shape[s.shape.length-1],i=rx({inputs:{x:s},backend:n,attrs:{shape:[r/a,a]}}),o=Ix(i,!0,n),l=rx({inputs:{x:o},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}},Dx={kernelName:"IsFinite",backendName:"cpu",kernelFunc:$b("IsFinite",t=>Number.isFinite(t)?1:0,"bool")},_x={kernelName:"IsInf",backendName:"cpu",kernelFunc:$b("IsInf",t=>Math.abs(t)===1/0?1:0,"bool")},Fx={kernelName:"IsNan",backendName:"cpu",kernelFunc:$b("IsNan",t=>Number.isNaN(t)?1:0,"bool")},Ox={kernelName:"Log",backendName:"cpu",kernelFunc:$b("Log",t=>Math.log(t))},Mx={kernelName:"Log1p",backendName:"cpu",kernelFunc:$b("Log1p",t=>Math.log1p(t))},Lx={kernelName:"LogicalNot",backendName:"cpu",kernelFunc:$b("LogicalNot",t=>t?0:1,"bool")},zx={kernelName:"Max",backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:s}=t,{reductionIndices:r,keepDims:a}=e,i=n;let o=s.shape;const l=o.length,u=L(r,o);let c=u;const h=fs(c,l);let p=i.data.get(s.dataId).values;if(null!=h){const t=new Array(l);for(let e=0;e<t.length;e++)t[e]=o[h[e]];p=Eb(p,o,s.dtype,h,t),c=gs(c.length,l),o=t}bb(s,"max"),ds("max",c,l);const[d,f]=hs(o,c),m=Ib(p,$(f),d,s.dtype),g=i.write(m,d,s.dtype);let y=d;if(a){y=ps(d,u)}return{dataId:g,shape:y,dtype:s.dtype}}};const Bx={kernelName:"MaxPool",backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t,{x:r}=e;bb(r,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;I(Ls(i,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`);const u=Es(r.shape,a,i,1,o,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&R(u.inShape,u.outShape))c=Mb({inputs:{x:r},backend:n});else{const t=n.data.get(r.dataId).values,e=Q(r.shape),s=Xb(t,r.shape,r.dtype,e,u,"max");c=n.makeTensorInfo(u.outShape,r.dtype,s.values)}return c}};const Px={kernelName:"MaxPoolBackprop",backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t,{dy:r,input:a,output:i}=e,o=a;bb([a,i],"maxPoolBackprop");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,p=Es(o.shape,l,u,1,c,h),d=n.data.get(o.dataId).values,f=Be(p.outShape,o.dtype,Yb(d,o.shape,o.dtype,p).values),m=p.strideHeight,g=p.strideWidth,y=p.dilationHeight,b=p.dilationWidth,x=p.effectiveFilterHeight,w=p.effectiveFilterWidth,v=w-1-p.padInfo.left,N=x-1-p.padInfo.top,k=Be(o.shape,"float32"),C=n.data.get(r.dataId).values,S=Be(r.shape,"float32",C);for(let t=0;t<p.batchSize;++t)for(let e=0;e<p.inChannels;++e)for(let n=0;n<p.inHeight;++n)for(let s=0;s<p.inWidth;++s){const r=n-N,a=s-v;let i=0;for(let n=0;n<x;n+=y){const s=(r+n)/m;if(!(s<0||s>=p.outHeight||Math.floor(s)!==s))for(let r=0;r<w;r+=b){const o=(a+r)/g;if(o<0||o>=p.outWidth||Math.floor(o)!==o)continue;const l=x*w-1-f.get(t,s,o,e)===n*w+r?1:0;0!==l&&(i+=S.get(t,s,o,e)*l)}}k.set(i,t,n,s,e)}return n.makeTensorInfo(k.shape,k.dtype,k.values)}};const Wx={kernelName:"MaxPoolWithArgmax",backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:s}=t,{filterSize:r,strides:a,pad:i,includeBatchInIndex:o}=e,l=n;bb(s,"MaxPoolWithArgmax");const u=l.data.get(s.dataId).values,c=Es(s.shape,r,a,[1,1],i),[h,p]=function(t,e,n,s,r){const a=Xb(t,0,n,Q(e),r,"max"),i=Yb(t,e,n,r,!0,s);return[a.values,i.values]}(u,s.shape,s.dtype,o,c),d=l.write(h,c.outShape,s.dtype),f=l.write(p,c.outShape,s.dtype);return[{dataId:d,shape:c.outShape,dtype:s.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}},Vx=qo,Ux={kernelName:"NonMaxSuppressionV4",backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{boxes:s,scores:r}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,padToMaxOutputSize:l}=n,u=e;bb(s,"NonMaxSuppressionPadded");const c=u.data.get(s.dataId).values,h=u.data.get(r.dataId).values,{selectedIndices:p,validOutputs:d}=Vx(c,h,a,i,o,l);return[p,d]}},Gx=Ko,Hx={kernelName:"NonMaxSuppressionV5",backendName:"cpu",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{boxes:s,scores:r}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:l}=n,u=e;bb(s,"NonMaxSuppressionWithScore");const c=u.data.get(s.dataId).values,h=u.data.get(r.dataId).values,p=a,d=i,f=o,m=l,{selectedIndices:g,selectedScores:y}=Gx(c,h,p,d,f,m);return[g,y]}},jx={kernelName:"NotEqual",backendName:"cpu",kernelFunc:Vb("NotEqual",(t,e)=>t!==e?1:0,null,"bool")};const qx={kernelName:"PadV2",backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t,{x:r}=e,{paddings:a,constantValue:i}=s;bb(r,"pad");const o=a.map((t,e)=>t[0]+r.shape[e]+t[1]),l=a.map(t=>t[0]),u=n.data.get(r.dataId).values,c=$(r.shape),h=r.shape.length,p=Q(r.shape),d=$(o),f=o.length,m=Q(o),g=B(r.dtype,d);0!==i&&g.fill(i);for(let t=0;t<c;t++){g[ht(pt(t,h,p).map((t,e)=>t+l[e]),f,m)]=u[t]}return{dataId:n.write(g,o,r.dtype),shape:o,dtype:r.dtype}}},Kx={kernelName:"Reciprocal",backendName:"cpu",kernelFunc:$b("Reciprocal",t=>1/t)},Xx={kernelName:"RotateWithOffset",backendName:"cpu",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{image:s}=t,{radians:r,fillValue:a,center:i}=e,o=n,l=B(s.dtype,$(s.shape)),[u,c,h,p]=s.shape,[d,f]=Ll(i,c,h),m=Math.sin(r),g=Math.cos(r),y=o.data.get(s.dataId).values;for(let t=0;t<u;t++){const e=t*h*c*p;for(let t=0;t<c;t++){const n=t*(h*p);for(let s=0;s<h;s++){const r=s*p;for(let i=0;i<p;i++){const o=[u,t,s,i],b=o[2],x=o[1];let w=(b-d)*g-(x-f)*m,v=(b-d)*m+(x-f)*g;w=Math.round(w+d),v=Math.round(v+f);let N=a;if("number"!=typeof a&&(N=3===i?255:a[i]),w>=0&&w<h&&v>=0&&v<c){N=y[e+v*(h*p)+w*p+i]}l[e+n+r+i]=N}}}}return{dataId:o.write(l,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},Yx={kernelName:"Round",backendName:"cpu",kernelFunc:$b("Round",t=>{const e=Math.floor(t);return t-e<.5?Math.floor(t):t-e>.5?Math.ceil(t):e%2==0?e:e+1})},Jx={kernelName:"Rsqrt",backendName:"cpu",kernelFunc:$b("Rsqrt",t=>1/Math.sqrt(t))},Zx={kernelName:"Selu",backendName:"cpu",kernelFunc:$b("Selu",t=>t>=0?1.0507009873554805*t:1.7580993408473768*(Math.exp(t)-1))},Qx={kernelName:"Sigmoid",backendName:"cpu",kernelFunc:$b("Sigmoid",t=>1/(1+Math.exp(-t)))},tw={kernelName:"Sign",backendName:"cpu",kernelFunc:$b("Sign",t=>t<0?-1:t>0?1:0)},ew=$b(p,t=>Math.sin(t)),nw={kernelName:p,backendName:"cpu",kernelFunc:ew},sw={kernelName:"Sinh",backendName:"cpu",kernelFunc:$b("Sinh",t=>Math.sinh(t))},rw=Math.log(1.1920928955078125e-7)+2,aw={kernelName:"Softplus",backendName:"cpu",kernelFunc:$b("Softplus",t=>{const e=t>-rw,n=t<rw,s=Math.exp(t);let r;return r=n?s:e?t:Math.log(1+s),r})};function iw(t){const{inputs:e,attrs:n,backend:s}=t,{x:r}=e,{perm:a}=n;bb(r,"transpose");const i=r.shape.length,o=new Array(i);for(let t=0;t<o.length;t++)o[t]=r.shape[a[t]];const l=Eb(s.data.get(r.dataId).values,r.shape,r.dtype,a,o);return{dataId:s.write(l,o,r.dtype),shape:o,dtype:r.dtype}}const ow={kernelName:"Transpose",backendName:"cpu",kernelFunc:iw};const lw={kernelName:"SpaceToBatchND",backendName:"cpu",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t,{x:r}=e,{blockShape:a,paddings:i}=s;bb([r],"spaceToBatchND");const o=$(a),l=[[0,0]];l.push(...i);for(let t=1+a.length;t<r.shape.length;++t)l.push([0,0]);const u=qx.kernelFunc({inputs:{x:r},backend:n,attrs:{paddings:l,constantValue:0}}),c=zl(u.shape,a,o,!1),h=Bl(c.length,a.length,!1),p=Pl(u.shape,a,o,!1),d=rx({inputs:{x:u},backend:n,attrs:{shape:c}}),f=iw({inputs:{x:d},backend:n,attrs:{perm:h}}),m=rx({inputs:{x:f},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}},uw={kernelName:"Sqrt",backendName:"cpu",kernelFunc:$b("Sqrt",t=>Math.sqrt(t))},cw={kernelName:"Square",backendName:"cpu",kernelFunc:({inputs:t,backend:e})=>{const{x:n}=t,s=e;bb(n,"square");const r=s.data.get(n.dataId).values,a=new Float32Array(r.length);for(let t=0;t<r.length;++t){const e=r[t];a[t]=e*e}return{dataId:s.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},hw={kernelName:"SquaredDifference",backendName:"cpu",kernelFunc:Vb("SquaredDifference",(t,e)=>{const n=t-e;return n*n})},pw={kernelName:"Step",backendName:"cpu",kernelFunc:$b("Step",(t,e)=>{const n=e;return isNaN(t)?NaN:t>0?1:n.alpha})},dw=$b(d,t=>Math.tan(t)),fw={kernelName:d,backendName:"cpu",kernelFunc:dw},mw=$b("Tanh",t=>Math.tanh(t)),gw=[Ab,Rb,Db,Gb,Hb,jb,qb,Kb,Jb,Zb,Qb,Wb,tx,ex,Ob,ox,ux,cx,hx,dx,px,mx,gx,yx,bx,xx,Tx,Ax,$x,Lb,Rx,sx,Dx,_x,Fx,Ox,Mx,Lx,Bx,Px,Wx,zx,vx,Ux,Hx,jx,qx,Bb,Kx,ax,Xx,Yx,Jx,Zx,Qx,tw,nw,sw,kx,aw,lw,uw,cw,hw,pw,Sx,fw,{kernelName:"Tanh",backendName:"cpu",kernelFunc:mw},ow];for(const t of gw)x(t);const yw={},bw={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function xw(t){if(!(t in yw)){const e=function(t){if(1!==t&&2!==t)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const e=function(t){if("undefined"!=typeof OffscreenCanvas&&2===t)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(t);if(e.addEventListener("webglcontextlost",e=>{e.preventDefault(),delete yw[t]},!1),1===t)return e.getContext("webgl",bw)||e.getContext("experimental-webgl",bw);return e.getContext("webgl2",bw)}(t);if(null===e)return console.log("Could not get context for WebGL version",t),null;yw[t]=e}const e=yw[t];return e.isContextLost()?(delete yw[t],xw(t)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),yw[t])}var ww,vw,Nw;function kw(t,e){return[e,t]}function Cw(t){const e=$(t);return _(Math.ceil(e/4))}function Sw(t,e){return[Math.max(1,Math.ceil(e/2)),Math.max(1,Math.ceil(t/2))]}function Iw(t,e){const n=t;let s,r,i,o,l,u,c,h,p,d;return 2===a().getNumber("WEBGL_VERSION")?(s=n.R32F,r=n.R16F,i=n.RGBA16F,o=n.RGBA32F,l=n.RED,c=4,h=1,p=n.HALF_FLOAT,d=n.FLOAT):(s=t.RGBA,r=t.RGBA,i=t.RGBA,o=n.RGBA,l=t.RGBA,c=4,h=4,p=null!=e?e.HALF_FLOAT_OES:null,d=t.FLOAT),u=t.RGBA,{internalFormatFloat:s,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:i,internalFormatPackedFloat:o,textureFormatFloat:l,downloadTextureFormat:u,downloadUnpackNumChannels:c,defaultNumChannels:h,textureTypeHalfFloat:p,textureTypeFloat:d}}function Ew(t,e){const n=e();return a().getBool("DEBUG")&&function(t){const e=t.getError();if(e!==t.NO_ERROR)throw new Error("WebGL Error: "+function(t,e){switch(e){case t.NO_ERROR:return"NO_ERROR";case t.INVALID_ENUM:return"INVALID_ENUM";case t.INVALID_VALUE:return"INVALID_VALUE";case t.INVALID_OPERATION:return"INVALID_OPERATION";case t.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case t.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case t.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return"Unknown error code "+e}}(t,e))}(t),n}!function(t){t[t.DENSE=0]="DENSE",t[t.SHARED_BATCH=1]="SHARED_BATCH"}(ww||(ww={})),function(t){t[t.RENDER=0]="RENDER",t[t.UPLOAD=1]="UPLOAD",t[t.PIXELS=2]="PIXELS",t[t.DOWNLOAD=3]="DOWNLOAD"}(vw||(vw={})),function(t){t[t.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",t[t.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",t[t.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",t[t.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",t[t.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(Nw||(Nw={}));function Tw(t){return!!(a().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===t||5.96e-8<Math.abs(t)&&Math.abs(t)<65504)}function Aw(t,e){return zw(t,()=>t.getExtension(e),'Extension "'+e+'" not supported on this browser.')}function $w(t,e){const n=zw(t,()=>t.createShader(t.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(Ew(t,()=>t.shaderSource(n,e)),Ew(t,()=>t.compileShader(n)),!1===t.getShaderParameter(n,t.COMPILE_STATUS))throw function(t,e){const n=Rw.exec(e);if(null==n)return console.log("Couldn't parse line number in error: "+e),void console.log(t);const s=+n[1],r=t.split("\n"),a=r.length.toString().length+2,i=r.map((t,e)=>F((e+1).toString(),a)+t);let o=0;for(let t=0;t<i.length;t++)o=Math.max(i[t].length,o);const l=i.slice(0,s-1),u=i.slice(s-1,s),c=i.slice(s);console.log(l.join("\n")),console.log(e.split("\n")[0]),console.log("%c "+F(u[0],o),"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}(e,t.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}const Rw=/ERROR: [0-9]+:([0-9]+):/g;function Dw(t,e){if(Ew(t,()=>t.validateProgram(e)),!1===t.getProgramParameter(e,t.VALIDATE_STATUS))throw console.log(t.getProgramInfoLog(e)),new Error("Shader program validation failed.")}function _w(t,e,n,s,r,a,i){const o=t.getAttribLocation(e,n);return-1!==o&&(Ew(t,()=>t.bindBuffer(t.ARRAY_BUFFER,s)),Ew(t,()=>t.vertexAttribPointer(o,r,t.FLOAT,!1,a,i)),Ew(t,()=>t.enableVertexAttribArray(o)),!0)}function Fw(t,e,n,s){Ew(t,()=>function(t,e,n){Bw(t,n),Ew(t,()=>t.activeTexture(t.TEXTURE0+n)),Ew(t,()=>t.bindTexture(t.TEXTURE_2D,e))}(t,e,s)),Ew(t,()=>t.uniform1i(n,s))}function Ow(t,e,n){Ew(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,n)),Ew(t,()=>t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,e,0))}function Mw(t,e){Ew(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,e)),Ew(t,()=>t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,null,0))}function Lw(t){const e=t.checkFramebufferStatus(t.FRAMEBUFFER);if(e!==t.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(t,e){switch(e){case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case t.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return"unknown error "+e}}(t,e))}function zw(t,e,n){const s=Ew(t,()=>e());if(null==s)throw new Error(n);return s}function Bw(t,e){const n=t.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,s=e+t.TEXTURE0;if(s<t.TEXTURE0||s>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}function Pw(t,e=2){return $(t.slice(0,t.length-e))}function Ww(t){if(0===t.length)throw Error("Cannot get rows and columns of an empty shape array.");return[t.length>1?t[t.length-2]:1,t[t.length-1]]}function Vw(t){let e=[1,1,1];return 0===t.length||1===t.length&&1===t[0]||(e=[Pw(t),...Ww(t)]),e}function Uw(t){return t%2==0}function Gw(t,e){if(R(t=t.slice(-2),e=e.slice(-2)))return!0;if(!t.length||!e.length)return!0;if(0===t[0]||0===t[1]||0===e[0]||0===e[1])return!0;if(t.length!==e.length){const n=t.slice(-1)[0],s=e.slice(-1)[0];if(n===s)return!0;if(Uw(n)&&Uw(s)&&(1===t[0]||1===e[0]))return!0}return t[1]===e[1]&&Uw(t[0])&&Uw(e[0])}let Hw,jw;function qw(t,e){return null!=t.getExtension(e)}function Kw(t){try{if(null!=xw(t))return!0}catch(t){return console.log("Error when getting WebGL context: ",t),!1}return!1}function Xw(t){if(0===t)return!1;const e=xw(t);if(1!==t){if(qw(e,"EXT_color_buffer_float"))return Yw(e);const t="EXT_color_buffer_half_float";if(qw(e,t)){const n=e.getExtension(t);return function(t,e){const n=Iw(t,e),s=t.createTexture();t.bindTexture(t.TEXTURE_2D,s);t.texImage2D(t.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const r=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,r),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,s,0);const a=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(s),t.deleteFramebuffer(r),a}(e,n)}return!1}return!!qw(e,"OES_texture_float")&&(!!qw(e,"WEBGL_color_buffer_float")&&Yw(e))}function Yw(t){const e=Iw(t),n=t.createTexture();t.bindTexture(t.TEXTURE_2D,n);t.texImage2D(t.TEXTURE_2D,0,e.internalFormatFloat,1,1,0,e.textureFormatFloat,e.textureTypeFloat,null);const s=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,s),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,n,0);const r=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(n),t.deleteFramebuffer(s),r}function Jw(t,e){Array.isArray(t)||(t=[t]),t.forEach(t=>{null!=t&&I("complex64"!==t.dtype,()=>e+" does not support complex64 tensors in the WebGL backend.")})}const Zw=a();Zw.registerFlag("HAS_WEBGL",()=>Zw.getNumber("WEBGL_VERSION")>0),Zw.registerFlag("WEBGL_VERSION",()=>Kw(2)?2:Kw(1)?1:0),Zw.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),Zw.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>2===Zw.get("WEBGL_VERSION")),Zw.registerFlag("WEBGL_CPU_FORWARD",()=>!0),Zw.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),Zw.registerFlag("WEBGL_PACK",()=>Zw.getBool("HAS_WEBGL")),Zw.registerFlag("WEBGL_PACK_NORMALIZATION",()=>Zw.getBool("WEBGL_PACK")),Zw.registerFlag("WEBGL_PACK_CLIP",()=>Zw.getBool("WEBGL_PACK")),Zw.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>!1),Zw.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>Zw.getBool("WEBGL_PACK")),Zw.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>Zw.getBool("WEBGL_PACK")),Zw.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>Zw.getBool("WEBGL_PACK")),Zw.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>Zw.getBool("WEBGL_PACK")),Zw.registerFlag("WEBGL_PACK_REDUCE",()=>Zw.getBool("WEBGL_PACK")),Zw.registerFlag("WEBGL_LAZILY_UNPACK",()=>Zw.getBool("WEBGL_PACK")),Zw.registerFlag("WEBGL_CONV_IM2COL",()=>Zw.getBool("WEBGL_PACK")),Zw.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>function(t){if(null==Hw){const e=xw(t);Hw=e.getParameter(e.MAX_TEXTURE_SIZE)}return Hw}(Zw.getNumber("WEBGL_VERSION"))),Zw.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>function(t){if(null==jw){const e=xw(t);jw=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,jw)}(Zw.getNumber("WEBGL_VERSION"))),Zw.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{const t=Zw.getNumber("WEBGL_VERSION");return 0===t?0:function(t){if(0===t)return 0;let e;const n=xw(t);return e=qw(n,"EXT_disjoint_timer_query_webgl2")&&2===t?2:qw(n,"EXT_disjoint_timer_query")?1:0,e}(t)}),Zw.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>Zw.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!Ht()),Zw.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>function(t){if(0===t)return!1;const e=xw(t);if(1===t){if(!qw(e,"OES_texture_float"))return!1}else if(!qw(e,"EXT_color_buffer_float"))return!1;return Yw(e)}(Zw.getNumber("WEBGL_VERSION"))),Zw.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>!Zw.getBool("WEBGL_FORCE_F16_TEXTURES")&&Zw.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),Zw.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>Xw(Zw.getNumber("WEBGL_VERSION"))),Zw.registerFlag("WEBGL_FENCE_API_ENABLED",()=>{return 2===(t=Zw.getNumber("WEBGL_VERSION"))&&null!=xw(t).fenceSync;var t}),Zw.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>Zw.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0),Zw.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,t=>{if(t<0&&-1!==t)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${t}.`)});class Qw{constructor(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map((t,e)=>"T"+e);const n=[];this.variableNames.forEach(t=>{n.push(`float v${t} = get${t}AtOutCoords();`)});const s=this.variableNames.map(t=>"v"+t).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${s};\n        setOutput(result);\n      }\n    `}}class tv{constructor(t,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=e.map((t,e)=>"T"+e);const n=[];this.variableNames.forEach(t=>{n.push(`vec4 v${t} = get${t}AtOutCoords();`)});const s=this.variableNames.map(t=>"v"+t).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${s};\n        setOutput(result);\n      }\n    `}}class ev{constructor(t,e,n){this.variableNames=["A"];const{windowSize:s,batchSize:r,outSize:a}=t;n||this.variableNames.push("bestIndicesA"),this.outputShape=[r,a];const i="max"===e?">":"<",o=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${s}; i++) {\n          int inIdx = ${o};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${i} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}function nv(t,e){return["x","y","z","w","u","v"].slice(0,e).map(e=>`${t}.${e}`)}function sv(t,e){return 1===e?[t]:nv(t,e)}function rv(){let t,e,n,s,r,i,o,l,u,c;return 2===a().getNumber("WEBGL_VERSION")?(t="#version 300 es",e="in",n="out",s="in",r="texture",i="outputColor",o="out vec4 outputColor;",l="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",u="",c="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(t="",e="attribute",n="varying",s="varying",r="texture2D",i="gl_FragColor",o="",l="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",u="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",c="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:t,attribute:e,varyingVs:n,varyingFs:s,texture2D:r,output:i,defineOutput:o,defineSpecialNaN:l,defineSpecialInf:u,defineRound:c}}function av(t,e,n="index"){const s=Q(e);return s.map((e,r)=>`${`int ${t[r]} = ${n} / ${e}`}; ${r===s.length-1?`int ${t[r+1]} = ${n} - ${t[r]} * ${e}`:`index -= ${t[r]} * ${e}`};`).join("")}function iv(t){const e=Q(t).map(t=>t.toString());return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${e[0]} + coords.y * ${e[1]} + coords.z;\n  }\n`}const ov="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:lv}=nu;function uv(t,e,n,s){const r=[];t.forEach(t=>{const e=$(t.shapeInfo.logicalShape);t.shapeInfo.isUniform?r.push(`uniform float ${t.name}${e>1?`[${e}]`:""};`):(r.push(`uniform sampler2D ${t.name};`),r.push(`uniform int offset${t.name};`))});const a=r.join("\n"),i=t.map(t=>function(t,e,n=!1){let s="";s+=n?hv(t):cv(t);const r=t.shapeInfo.logicalShape,a=e.logicalShape;r.length<=a.length&&(s+=n?function(t,e){const n=t.name,s=n.charAt(0).toUpperCase()+n.slice(1),r="get"+s+"AtOutCoords",a=t.shapeInfo.logicalShape.length,i=e.logicalShape.length,o=lv(t.shapeInfo.logicalShape,e.logicalShape),l=xv(i),u=i-a;let c;const h=["x","y","z","w","u","v"];c=0===a?"":i<2&&o.length>=1?"coords = 0;":o.map(t=>`coords.${h[t+u]} = 0;`).join("\n");let p="";p=i<2&&a>0?"coords":t.shapeInfo.logicalShape.map((t,e)=>"coords."+h[e+u]).join(", ");let d="return outputValue;";const f=1===$(t.shapeInfo.logicalShape),m=1===$(e.logicalShape);if(1!==a||f||m){if(f&&!m)d=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(o.length){const t=a-2,e=a-1;o.indexOf(t)>-1&&o.indexOf(e)>-1?d="return vec4(outputValue.x);":o.indexOf(t)>-1?d="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":o.indexOf(e)>-1&&(d="return vec4(outputValue.xx, outputValue.zz);")}}else d="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${r}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${s}(${p});\n      ${d}\n    }\n  `}(t,e):function(t,e){const n=t.name,s=n.charAt(0).toUpperCase()+n.slice(1),r="get"+s+"AtOutCoords",a=e.texShape,i=t.shapeInfo.texShape,o=t.shapeInfo.logicalShape.length,l=e.logicalShape.length;if(!t.shapeInfo.isUniform&&o===l&&null==t.shapeInfo.flatOffset&&R(i,a))return`\n      float ${r}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const u=xv(l),c=lv(t.shapeInfo.logicalShape,e.logicalShape),h=l-o;let p;const d=["x","y","z","w","u","v"];p=0===o?"":l<2&&c.length>=1?"coords = 0;":c.map(t=>`coords.${d[t+h]} = 0;`).join("\n");let f="";f=l<2&&o>0?"coords":t.shapeInfo.logicalShape.map((t,e)=>"coords."+d[e+h]).join(", ");return`\n    float ${r}() {\n      ${u} coords = getOutputCoords();\n      ${p}\n      return get${s}(${f});\n    }\n  `}(t,e));return s}(t,e,s)).join("\n"),o=e.texShape,l=rv(),u=function(t){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${t.texture2D}(textureSampler, uv).r;\n    }\n  `}(l);let c,h,p=function(t){return`${t.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${t.varyingFs} vec2 resultUV;\n    ${t.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${t.defineSpecialNaN}\n    ${t.defineSpecialInf}\n    ${t.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${pv}\n    ${dv}\n    ${fv}\n  `}(l);return e.isPacked?(c=function(t,e){switch(t.length){case 0:return gv();case 1:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(1===n[0])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${n[1]}.0);\n      }\n    `;if(1===n[1])return`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${n[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return 2 * (resTexRC.x * ${n[1]} + resTexRC.y);\n    }\n  `}(0,e);case 2:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(R(t,e))return`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${n[0]}, ${n[1]}));\n      }\n    `;const s=Math.ceil(t[1]/2);return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(t,e);case 3:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],s=Math.ceil(t[2]/2),r=s*Math.ceil(t[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      int b = index / ${r};\n      index -= b * ${r};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(t,e);default:return function(t,e){const n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],s=Math.ceil(t[t.length-1]/2),r=s*Math.ceil(t[t.length-2]/2);let a=r,i="",o="b, r, c";for(let e=2;e<t.length-1;e++)a*=t[t.length-e-1],i=`\n      int b${e} = index / ${a};\n      index -= b${e} * ${a};\n    `+i,o=`b${e}, `+o;return`\n    ivec${t.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${r};\n      index -= b * ${r};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec${t.length}(${o});\n    }\n  `}(t,e)}}(e.logicalShape,o),h=function(t){return`\n    void setOutput(vec4 val) {\n      ${t.output} = val;\n    }\n  `}(l)):(c=function(t,e){switch(t.length){case 0:return gv();case 1:return function(t,e){if(1===e[0])return`\n      int getOutputCoords() {\n        return int(resultUV.x * ${e[1]}.0);\n      }\n    `;if(1===e[1])return`\n      int getOutputCoords() {\n        return int(resultUV.y * ${e[0]}.0);\n      }\n    `;return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      return resTexRC.x * ${e[1]} + resTexRC.y;\n    }\n  `}(0,e);case 2:return function(t,e){if(R(t,e))return`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${e[0]}, ${e[1]}));\n      }\n    `;if(1===t[1])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${e[0]}, ${e[1]}));\n        int index = resTexRC.x * ${e[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===t[0])return`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${e[0]}, ${e[1]}));\n        int index = resTexRC.x * ${e[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      int r = index / ${t[1]};\n      int c = index - r * ${t[1]};\n      return ivec2(r, c);\n    }\n  `}(t,e);case 3:return function(t,e){const n=av(["r","c","d"],t);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      ${n}\n      return ivec3(r, c, d);\n    }\n  `}(t,e);case 4:return function(t,e){const n=av(["r","c","d","d2"],t);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n      ${n}\n      return ivec4(r, c, d, d2);\n    }\n  `}(t,e);case 5:return function(t,e){const n=av(["r","c","d","d2","d3"],t);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${e[0]},\n                             ${e[1]}));\n\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(t,e);case 6:return function(t,e){const n=av(["r","c","d","d2","d3","d4"],t);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${e[0]}, ${e[1]}));\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(t,e);default:throw new Error(t.length+"-D output sampling is not yet supported")}}(e.logicalShape,o),h=function(t){return`\n    void setOutput(float val) {\n      ${t.output} = vec4(val, 0, 0, 0);\n    }\n  `}(l)),s&&(p+=mv),[p,u,h,a,c,i,n].join("\n")}function cv(t){const e=t.shapeInfo.logicalShape;switch(e.length){case 0:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return`float ${n}() {return ${e};}`;const[s,r]=t.shapeInfo.texShape;if(1===s&&1===r)return`\n      float ${n}() {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const[a,i]=t.shapeInfo.texShape,o=yv(e);return`\n    float ${n}() {\n      vec2 uv = uvFromFlat(${a}, ${i}, ${o});\n      return sampleTexture(${e}, uv);\n    }\n  `}(t);case 1:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return`\n      float ${n}(int index) {\n        ${bv(t)}\n      }\n    `;const s=t.shapeInfo.texShape,r=s[0],a=s[1];if(1===a&&1===r)return`\n      float ${n}(int index) {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const i=yv(e);if(1===a)return`\n      float ${n}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${r}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;if(1===r)return`\n      float ${n}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${a}.0, 0.5);\n        return sampleTexture(${e}, uv);\n      }\n    `;return`\n    float ${n}(int index) {\n      vec2 uv = uvFromFlat(${r}, ${a}, index + ${i});\n      return sampleTexture(${e}, uv);\n    }\n  `}(t);case 2:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t.shapeInfo.texShape;if(null!=r&&R(e,r)){const t=r[0],e=r[1];return`\n    float ${s}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${e}.0, ${t}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `}const{newShape:a,keptDims:i}=z(e),o=a;if(o.length<e.length){const e=wv(t,o),n=["row","col"];return`\n      ${cv(e)}\n      float ${s}(int row, int col) {\n        return ${s}(${vv(n,i)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${s}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${e[1]}, 1)));\n        ${bv(t)}\n      }\n    `;const l=r[0],u=r[1],c=yv(n);if(1===u)return`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${l}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;if(1===l)return`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${u}.0, 0.5);\n      return sampleTexture(${n}, uv);\n    }\n  `;return`\n  float ${s}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${e[1]} + col + ${c};\n    vec2 uv = uvFromFlat(${l}, ${u}, index);\n    return sampleTexture(${n}, uv);\n  }\n`}(t);case 3:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e[1]*e[2],a=e[2],{newShape:i,keptDims:o}=z(e),l=i;if(l.length<e.length){const e=wv(t,l),n=["row","col","depth"];return`\n        ${cv(e)}\n        float ${s}(int row, int col, int depth) {\n          return ${s}(${vv(n,o)});\n        }\n      `}if(t.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${r}, ${a}, 1)));\n        ${bv(t)}\n      }\n    `;const u=t.shapeInfo.texShape,c=u[0],h=u[1],p=t.shapeInfo.flatOffset;if(h===r&&null==p)return`\n        float ${s}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${a}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${h}.0, ${c}.0);\n          return sampleTexture(${n}, uv);\n        }\n      `;if(h===a&&null==p)return`\n    float ${s}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${e[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${c}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;const d=yv(n);return`\n      float ${s}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${r} + col * ${a} + depth + ${d};\n        vec2 uv = uvFromFlat(${c}, ${h}, index);\n        return sampleTexture(${n}, uv);\n      }\n  `}(t);case 4:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e[3],a=e[2]*r,i=e[1]*a,{newShape:o,keptDims:l}=z(e);if(o.length<e.length){const e=wv(t,o),n=["row","col","depth","depth2"];return`\n      ${cv(e)}\n      float ${s}(int row, int col, int depth, int depth2) {\n        return ${s}(${vv(n,l)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${i}, ${a}, ${r}, 1)));\n        ${bv(t)}\n      }\n    `;const u=t.shapeInfo.flatOffset,c=t.shapeInfo.texShape,h=c[0],p=c[1];if(p===i&&null==u)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${a}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(p===r&&null==u)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${e[1]*e[2]}, ${e[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const d=yv(n);return`\n    float ${s}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${a} +\n          depth * ${r} + depth2;\n      vec2 uv = uvFromFlat(${h}, ${p}, index + ${d});\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);case 5:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e[4],a=e[3]*r,i=e[2]*a,o=e[1]*i,{newShape:l,keptDims:u}=z(e);if(l.length<e.length){const e=wv(t,l),n=["row","col","depth","depth2","depth3"];return`\n      ${cv(e)}\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        return ${s}(${vv(n,u)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${o}, ${i}, ${a}, ${r})) +\n          depth3;\n        ${bv(t)}\n      }\n    `;const c=t.shapeInfo.flatOffset,h=t.shapeInfo.texShape,p=h[0],d=h[1];if(d===o&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${a}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===r&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${e[1]*e[2]*e[3]},\n               ${e[2]*e[3]}, ${e[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const f=yv(n);return`\n    float ${s}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} + depth * ${a} +\n          depth2 * ${r} + depth3 + ${f};\n      vec2 uv = uvFromFlat(${p}, ${d}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);case 6:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:r,keptDims:a}=z(e);if(r.length<e.length){const e=wv(t,r),n=["row","col","depth","depth2","depth3","depth4"];return`\n      ${cv(e)}\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${s}(${vv(n,a)});\n      }\n    `}const i=e[5],o=e[4]*i,l=e[3]*o,u=e[2]*l,c=e[1]*u;if(t.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${o})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${bv(t)}\n      }\n    `;const h=t.shapeInfo.flatOffset,p=t.shapeInfo.texShape,d=p[0],f=p[1];if(f===c&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${o}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===i&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${e[1]*e[2]*e[3]*e[4]},\n               ${e[2]*e[3]*e[4]},\n               ${e[3]*e[4]},\n               ${e[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const m=yv(n);return`\n    float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${o} + depth3 * ${i} + depth4 + ${m};\n      vec2 uv = uvFromFlat(${d}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(t);default:throw new Error(e.length+"-D input sampling is not yet supported")}}function hv(t){switch(t.shapeInfo.logicalShape.length){case 0:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1),s=rv();return`\n    vec4 ${n}() {\n      return ${s.texture2D}(${e}, halfCR);\n    }\n  `}(t);case 1:return function(t){const e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1),s=t.shapeInfo.texShape,r=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)],a=rv();return`\n    vec4 ${n}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${r[0]}, ${r[1]}, index);\n      return ${a.texture2D}(${e}, uv);\n    }\n  `}(t);case 2:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t.shapeInfo.texShape,a=r[0],i=r[1],o=rv();if(null!=r&&R(e,r))return`\n      vec4 ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${a}.0);\n\n        return ${o.texture2D}(${n}, uv);\n      }\n    `;const l=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],u=Math.ceil(e[1]/2);return`\n    vec4 ${s}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${u}, ${l[0]}, ${l[1]}, row, col);\n      return ${o.texture2D}(${n}, uv);\n    }\n  `}(t);case 3:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t.shapeInfo.texShape,a=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];if(1===e[0]){const n=e.slice(1),r=[1,2],a=wv(t,n),i=["b","row","col"];return`\n        ${hv(a)}\n        vec4 ${s}(int b, int row, int col) {\n          return ${s}(${vv(i,r)});\n        }\n      `}const i=a[0],o=a[1],l=Math.ceil(e[2]/2),u=l*Math.ceil(e[1]/2),c=rv();return`\n    vec4 ${s}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${i}, ${o}, ${u}, ${l}, b, row, col);\n      return ${c.texture2D}(${n}, uv);\n    }\n  `}(t);default:return function(t){const e=t.shapeInfo.logicalShape,n=e.length,s=t.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=t.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],o=i[0],l=i[1],u=Math.ceil(e[n-1]/2);let c=u*Math.ceil(e[n-2]/2),h="int b, int row, int col",p=`b * ${c} + (row / 2) * ${u} + (col / 2)`;for(let t=2;t<n-1;t++)h=`int b${t}, `+h,c*=e[n-t-1],p=`b${t} * ${c} + `+p;const d=rv();return`\n    vec4 ${r}(${h}) {\n      int index = ${p};\n      int texR = index / ${l};\n      int texC = index - texR * ${l};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${l}, ${o});\n      return ${d.texture2D}(${s}, uv);\n    }\n  `}(t)}}const pv="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",dv="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",fv="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",mv="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function gv(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function yv(t){return"offset"+t}function bv(t){const e=t.name,n=$(t.shapeInfo.logicalShape);return n<2?`return ${e};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${e}[i];\n      }\n    }\n  `}function xv(t){if(t<=1)return"int";if(2===t)return"ivec2";if(3===t)return"ivec3";if(4===t)return"ivec4";if(5===t)return"ivec5";if(6===t)return"ivec6";throw Error(`GPU for rank ${t} is not yet supported`)}function wv(t,e){const n=JSON.parse(JSON.stringify(t));return n.shapeInfo.logicalShape=e,n}function vv(t,e){return e.map(e=>t[e]).join(", ")}class Nv{constructor(t,e,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,I(t.length>2,()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`);const r=t[t.length-1],a=Math.ceil(r/e);this.outputShape=t.slice(0,-1),a>1&&this.outputShape.push(a),s||this.variableNames.push("bestIndicesA");const i=this.outputShape,o=i.length,l=xv(o),u=sv("coords",o);let c,h;if(1===a){h=o+1;const t=xv(h);c=`\n        ${t} sourceLocR = ${t}(${u.join()}, 0);\n        ++${u[o-1]};\n        ${t} sourceLocG = ${t}(${u.join()}, 0);\n        ++${u[o-2]};\n        ${t} sourceLocA = ${t}(${u.join()}, 0);\n        --${u[o-1]};\n        ${t} sourceLocB = ${t}(${u.join()}, 0);\n        --${u[o-2]};`}else h=o,c=`\n        ${l} sourceLocR = coords;\n        ++${u[o-1]};\n        ${l} sourceLocG = coords;\n        ++${u[o-2]};\n        ${l} sourceLocA = coords;\n        --${u[o-1]};\n        ${l} sourceLocB = coords;\n        --${u[o-2]};`;const p=["x","y","z","w","u","v"].slice(0,h),d="."+p[h-1],f=p.map(t=>"int "+t),m=sv("sourceLocR",h-1).concat("inIdx.r"),g=sv("sourceLocG",h-1).concat("inIdx.g"),y=sv("sourceLocB",h-1).concat("inIdx.b"),b=sv("sourceLocA",h-1).concat("inIdx.a"),x="max"===n?"greaterThan":"lessThan",w=s?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,v=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${y.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,N=s?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${p.join()}),\n                                          vec2(${p.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${p.join()}),\n                               vec2(${p.slice(-2).join()}));\n      }\n      ${N}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${u[o-1]} < ${i[o-1]-1};\n        bool hasNextRow = ${u[o-2]} < ${i[o-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${d}, sourceLocG${d},\n          sourceLocB${d}, sourceLocA${d}) * ${e};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${v};\n\n        for (int i = 0; i < ${e}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${v};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}class kv{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,s=t.strideHeight,r=t.strideWidth,a=t.dilationHeight,i=t.dilationWidth,o=t.effectiveFilterHeight,l=t.effectiveFilterWidth,u=o-1-t.padInfo.top,c=l-1-t.padInfo.left,h=1/(e*n);this.userCode=`\n      const ivec2 pads = ivec2(${u}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n            wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${l};\n            wC+= ${i}) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Cv{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const e=t.filterDepth,n=t.filterHeight,s=t.filterWidth,r=t.strideDepth,a=t.strideHeight,i=t.strideWidth,o=t.dilationDepth,l=t.dilationHeight,u=t.dilationWidth,c=t.effectiveFilterDepth,h=t.effectiveFilterHeight,p=t.effectiveFilterWidth,d=c-1-t.padInfo.front,f=h-1-t.padInfo.top,m=p-1-t.padInfo.left,g=1/(e*n*s);this.userCode=`\n      const ivec3 pads = ivec3(${d}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${r}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${l}) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${u}) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const Sv="return areal * breal - aimag * bimag;",Iv="return areal * bimag + aimag * breal;";class Ev{constructor(t,e,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=kr(e,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${t}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const Tv="return a + b;",Av="return a - b;",$v="return a * b;",Rv="return (a < 0.) ? b * a : a;";class Dv{constructor(t,e,n){this.variableNames=["A","B"],this.outputShape=kr(e,n),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${t}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const _v="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";class Fv{constructor(t,e,n,s=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=kr(e,n);const r=this.outputShape.length;let a="";if(s)if(0===r||1===$(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(a=`\n          ${xv(r)} coords = getOutputCoords();\n        `,1===r)a+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const t=sv("coords",r);a+=`\n            bool nextRowOutOfBounds =\n              (${t[r-2]} + 1) >= ${this.outputShape[r-2]};\n            bool nextColOutOfBounds =\n              (${t[r-1]} + 1) >= ${this.outputShape[r-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${t}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}class Ov{constructor(t){this.variableNames=["A"],this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}getCustomSetupFunc(t,e){return(n,s)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(s,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(s,"maxVal")),n.gl.uniform1f(this.minLoc,t),n.gl.uniform1f(this.maxLoc,e)}}}class Mv{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}getCustomSetupFunc(t,e){return(n,s)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(s,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(s,"maxVal")),n.gl.uniform1f(this.minLoc,t),n.gl.uniform1f(this.maxLoc,e)}}}class Lv{constructor(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}class zv{constructor(t){this.outputShape=[],this.outputShape=Vs(t,1),this.variableNames=t.map((t,e)=>"T"+e);const e=new Array(t.length-1);e[0]=t[0][1];for(let n=1;n<e.length;n++)e[n]=e[n-1]+t[n][1];const n=[`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];for(let t=1;t<e.length;t++){const s=e[t-1];n.push(`else if (yC < ${e[t]}) setOutput(getT${t}(yR, yC-${s}));`)}const s=e.length,r=e[e.length-1];n.push(`else setOutput(getT${s}(yR, yC-${r}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class Bv{constructor(t,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Vs(t,e);const n=this.outputShape,s=n.length,r=xv(s),a=sv("coords",s),i=["x","y","z","w","u","v"].slice(0,s);this.variableNames=t.map((t,e)=>"T"+e);const o=new Array(t.length-1);o[0]=t[0][e];for(let n=1;n<o.length;n++)o[n]=o[n-1]+t[n][e];const l=i[e],u=i.slice(-2),c=i.join();let h=`if (${l} < ${o[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${u.join()}));\n        }`;for(let t=1;t<o.length;t++){const e=o[t-1];h+=`\n        if (${l} < ${o[t]}  && ${l} >= ${o[t-1]}) {\n          return getChannel(\n            getT${t}(${Pv(i,l,e)}),\n            vec2(${Pv(u,l,e)}));\n        }`}const p=o.length,d=o[o.length-1];h+=`\n        return getChannel(\n          getT${p}(${Pv(i,l,d)}),\n          vec2(${Pv(u,l,d)}));`,this.userCode=`\n      float getValue(${i.map(t=>"int "+t)}) {\n        ${h}\n      }\n\n      void main() {\n        ${r} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[s-1]} = ${a[s-1]} + 1;\n        if (${a[s-1]} < ${n[s-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[s-2]} = ${a[s-2]} + 1;\n        if (${a[s-2]} < ${n[s-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[s-1]} = ${a[s-1]} - 1;\n        if (${a[s-2]} < ${n[s-2]} &&\n            ${a[s-1]} < ${n[s-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function Pv(t,e,n){const s=t.indexOf(e);return t.map((t,e)=>e===s?`${t} - ${n}`:t).join()}class Wv{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideHeight,n=t.strideWidth,s=t.padInfo.top,r=t.padInfo.left,a="channelsLast"===t.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${e} - ${s};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              if (${a}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Vv{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,s=t.strideHeight,r=t.strideWidth,a="channelsLast"===t.dataFormat,i=e-1-t.padInfo.top,o=n-1-t.padInfo.left,l=a?1:2,u=a?2:3,c=a?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${l}], coords[${u}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Uv{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideDepth,n=t.strideHeight,s=t.strideWidth,r=t.padInfo.front,a=t.padInfo.top,i=t.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yF = 0; yF < ${t.outDepth}; yF++) {\n            int xF = wF + yF * ${e} - ${r};\n\n            if (xF < 0 || xF >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${t.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${a};\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${t.outWidth}; yC++) {\n                int xC = wC + yC * ${s} - ${i};\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Gv{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterDepth,n=t.filterHeight,s=t.filterWidth,r=t.strideDepth,a=t.strideHeight,i=t.strideWidth,o=e-1-t.padInfo.front,l=n-1-t.padInfo.top,u=s-1-t.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${o}, ${l}, ${u});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${e}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${r}.0;\n\n          if (dyF < 0.0 || dyF >= ${t.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${e} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${s}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${s} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Hv{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;const e=t.strideHeight,n=t.strideWidth,s=t.padInfo.top,r=t.padInfo.left,a=t.outChannels/t.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${a} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${e} - ${s};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class jv{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,s=t.strideHeight,r=t.strideWidth,a=e-1-t.padInfo.top,i=n-1-t.padInfo.left,o=t.outChannels/t.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${o}; dm++) {\n              int d2 = d1 * ${o} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class qv{constructor(t,e=!1,n=null,s=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const r=t.padInfo.top,a=t.padInfo.left,i=t.strideHeight,o=t.strideWidth,l=t.dilationHeight,u=t.dilationWidth,c=t.filterHeight,h=t.filterWidth,p=4*Math.floor(t.inChannels/4),d=t.inChannels%4,f="channelsLast"===t.dataFormat,m=f?1:2,g=f?2:3,y=f?3:1;let b="",x="";n&&(b=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,x="result = activation(result);");const w=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${b}\n\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${r}, ${a});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${y}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${m}], coords[${g}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${c}; wR++) {\n          int xR = xRCorner + wR * ${l};\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${h}; wC++) {\n            int xC = xCCorner + wC * ${u};\n\n            if (xC < 0 || xC >= ${t.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${p}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${f}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===d}) {\n\n              if (${f}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${p}) *\n                    getW(wR, wC, ${p}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${p}, xR, xC) *\n                    getW(wR, wC, ${p}, d2);\n              }\n\n            } else if (${2===d}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${p}, d2),\n                getW(wR, wC, ${p} + 1, d2)\n              );\n\n              if (${f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${p}),\n                  getX(batch, xR, xC, ${p} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${p}, xR, xC),\n                  getX(batch, ${p} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===d}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${p}, d2),\n                getW(wR, wC, ${p} + 1, d2),\n                getW(wR, wC, ${p} + 2, d2)\n              );\n\n              if (${f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${p}),\n                  getX(batch, xR, xC, ${p} + 1),\n                  getX(batch, xR, xC, ${p} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${p}, xR, xC),\n                  getX(batch, ${p} + 1, xR, xC),\n                  getX(batch, ${p} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${w}\n        ${x}\n        setOutput(result);\n      }\n    `}}class Kv{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;const e=t.padInfo.front,n=t.padInfo.top,s=t.padInfo.left,r=t.strideDepth,a=t.strideHeight,i=t.strideWidth,o=t.dilationDepth,l=t.dilationHeight,u=t.dilationWidth,c=t.filterDepth,h=t.filterHeight,p=t.filterWidth,d=4*Math.floor(t.inChannels/4),f=t.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${r}, ${a}, ${i});\n      const ivec3 pads = ivec3(${e}, ${n}, ${s});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${u};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${d}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${d}) *\n                  getW(wF, wR, wC, ${d}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1),\n                  getX(batch, xF, xR, xC, ${d} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2),\n                  getW(wF, wR, wC, ${d} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Xv{constructor(t,e=!1,n=null,s=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const r=t.inHeight,a=t.inWidth,i=t.padInfo.top,o=t.padInfo.left,l=t.strideHeight,u=t.strideWidth,c=t.dilationHeight,h=t.dilationWidth,p=t.filterHeight,d=t.filterWidth,f=t.outChannels/t.inChannels;let m="",g="";n&&(m=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,g="result = activation(result);");const y=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${m}\n\n      const ivec2 strides = ivec2(${l}, ${u});\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${f};\n        int q = d2 - d1 * ${f};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${p}; wR++) {\n          int xR = xRCorner + wR * ${c};\n\n          if (xR < 0 || xR >= ${r}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${d}; wC++) {\n            int xC = xCCorner + wC * ${h};\n\n            if (xC < 0 || xC >= ${a}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${y}\n        ${g}\n        setOutput(result);\n      }\n    `}}class Yv{constructor(t,e=!1,n=null,s=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.outShape;const r=t.inHeight,a=t.inWidth,i=t.padInfo.top,o=t.padInfo.left,l=t.strideHeight,u=t.strideWidth,c=t.dilationHeight,h=t.dilationWidth,p=t.filterHeight,d=t.filterWidth,f=d;let m="int xR; int xC; int xCOffset;";for(let t=0;t<p;t++)for(let e=0;e<d;e++)m+=`\n          vec4 xTexelR${t}C${2*e} = vec4(0.);\n          vec4 wR${t}C${e} = vec4(0.);\n          vec4 xR${t}C${e} = vec4(0.);`;for(let t=0;t<p;t++)for(let e=0;e<f;e++){const n=2*e;if(m+=`\n          xR = xRCorner + ${t*c};\n          xC = xCCorner + ${n*h};\n        `,1===u){if(n<d&&(m+=o%2==1?`\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${r} && xCOffset >= 0 && xCOffset < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${a}) {\n                    xTexelR${t}C${n}.zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${r} && xCOffset >= 0 && xCOffset < ${a}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${a}) {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR${t}C${n} = vec4(previous.zw, xTexelR${t}C${n}.xy);\n                } else {\n                  xR${t}C${n} = vec4(0, 0, xTexelR${t}C${n}.xy);\n                }\n              `:`\n                if(xR >= 0 && xR < ${r} && xC >= 0 && xC < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xR${t}C${n} = xTexelR${t}C${n};\n              `,n+1<d)){const e=o%2==0?C(h):h;h%2==0&&o%2==1||h%2!=0&&o%2!=1?(m+=`\n                  xCOffset = xC + ${o%2} + ${e};\n\n                  if(xR >= 0 && xR < ${r} &&\n                    xCOffset >= 0 && xCOffset < ${a}) {\n                    xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `,h>1&&(m+=`\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${r} &&\n                      xCOffset >= 0 && xCOffset < ${a}) {\n                      xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${t}C${n} = vec4(0.);\n                    }\n                  `),m+=`\n                  xR${t}C${n+1} = vec4(\n                    xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.xy);\n                `):m+=`\n                  xCOffset = xC + ${e};\n\n                  if(xR >= 0 && xR < ${r} &&\n                    xCOffset >= 0 && xCOffset < ${a}) {\n                    xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${t}C${n+1} = xTexelR${t}C${n+2};\n                `}}else n<d&&(m+=`\n              if(xR >= 0 && xR < ${r}) {\n            `,o%2==1?(m+=`\n                xCOffset = xC + 1 - ${u};\n                if(xCOffset >= 0 && xCOffset < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${a}) {\n                  xTexelR${t}C${n+2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${t}C${n+2} = vec4(0.);\n                }\n\n                xR${t}C${n} = vec4(\n                  xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.zw);\n              `,n+1<d&&(m+=`\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${u};\n                  if(xCOffset >= 0 && xCOffset < ${a}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${t}C${n+1} = vec4(xTexelR${t}C${n+2}.xy, final.xy);\n                `)):(m+=`\n                if(xC >= 0 && xC < ${a}) {\n                  xTexelR${t}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${t}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + ${u};\n                if(xCOffset >= 0 && xCOffset < ${a}) {\n                  xTexelR${t}C${n+2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${t}C${n+2} = vec4(0.);\n                }\n\n                xR${t}C${n} = vec4(\n                  xTexelR${t}C${n}.xy, xTexelR${t}C${n+2}.xy);\n              `,n+1<d&&(m+=`\n                  xR${t}C${n+1} = vec4(\n                    xTexelR${t}C${n}.zw, xTexelR${t}C${n+2}.zw);\n                `)),m+="}");n<d&&(m+=`\n            vec4 wTexelR${t}C${n} = getW(${t}, ${n}, d1, q);\n            wR${t}C${n} = vec4(wTexelR${t}C${n}.xz, wTexelR${t}C${n}.xz);\n          `,n+1<d&&(m+=`\n              vec4 wTexelR${t}C${n+1} = getW(${t}, ${n+1}, d1, q);\n              wR${t}C${n+1} =\n                vec4(wTexelR${t}C${n+1}.xz, wTexelR${t}C${n+1}.xz);`))}for(let t=0;t<p;t++)for(let e=0;e<d;e++)m+=`dotProd += xR${t}C${e} * wR${t}C${e};`;let g="",y="";n&&(g=s?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,y="result = activation(result);");const b=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${g}\n\n      const ivec2 strides = ivec2(${l}, ${u});\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${m}\n\n        vec4 result = dotProd;\n        ${b}\n        ${y}\n        setOutput(result);\n      }\n    `}}class Jv{constructor(t,e,n,s,r){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,o,l]=t,[u]=e,[c,h]=n;this.outputShape=[u,c,h,l];const p="bilinear"===s?1:0,[d,f]=[i-1+".0",o-1+".0"],[m,g,y]=c>1?[""+(i-1)/(c-1),"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0","0.5 * (y1+y2) * "+d],[b,x,w]=h>1?[""+(o-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0","0.5 * (x1+x2) * "+f];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${d} ) {\n          setOutput(float(${r}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${r}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}class Zv{constructor(t,e,n){this.variableNames=["x"],this.outputShape=t;const s=t.length,r=e?"0.0":`getX(${Qv(s,"coords")})`,a=t[t.length-1];let i="",o="";e?(i=n?"end != "+(a-1):"end != 0",o=n?"end + 1":"end - 1"):(i=n?"end + pow2 < "+a:"end >= pow2",o=n?"end + pow2":"end - pow2"),this.userCode=`\n      uniform float index;\n      void main() {\n        ${xv(s)} coords = getOutputCoords();\n        int end = ${tN(s,"coords")};\n        float val = ${r};\n        int pow2 = int(pow(2.0, index));\n        if (${i}) {\n          int idx = ${o};\n          ${tN(s,"coords")} = idx;\n          val += getX(${Qv(s,"coords")});\n        }\n        setOutput(val);\n      }\n    `}getCustomSetupFunc(t){return(e,n)=>{null==this.index&&(this.index=e.getUniformLocation(n,"index")),e.gl.uniform1f(this.index,t)}}}function Qv(t,e){if(1===t)return""+e;if(2===t)return`${e}.x, ${e}.y`;if(3===t)return`${e}.x, ${e}.y, ${e}.z`;if(4===t)return`${e}.x, ${e}.y, ${e}.z, ${e}.w`;throw Error(`Cumulative sum for rank ${t} is not yet supported`)}function tN(t,e){if(1===t)return""+e;if(2===t)return e+".y";if(3===t)return e+".z";if(4===t)return e+".w";throw Error(`Cumulative sum for rank ${t} is not yet supported`)}class eN{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=ww.DENSE;const e=Cw(t),n=rv();this.outputShape=t,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${av(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${e[0]}, ${e[1]}));\n        int index = 4 * (resTexRC.x * ${e[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${n.output} = result;\n      }\n    `}}class nN{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=ww.DENSE;const e=Cw(t),n=rv();this.outputShape=t,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${av(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${e[0]}, ${e[1]}));\n        int index = 4 * (resTexRC.x * ${e[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${n.output} = result;\n      }\n    `}}class sN{constructor(t,e,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${e};\n      int offset_h = imod(h, ${e});\n      int in_w = w / ${e};\n      int offset_w = imod(w, ${e});\n      int offset_d = (offset_h * ${e} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}class rN{constructor(t){this.variableNames=["X"],this.outputShape=[t,t],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}class aN{constructor(t){this.variableNames=["A"],this.outTexUsage=vw.DOWNLOAD;const e=rv();this.outputShape=t,this.userCode=`\n      ${ov}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${e.output} = encode_float(x);\n      }\n    `}}class iN{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=vw.DOWNLOAD;const e=rv();this.outputShape=t,this.userCode=`\n      ${ov}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${e.output} = encode_float(x);\n      }\n    `}}class oN{constructor(t,e,n=!1){this.variableNames=["A"];const s=rv(),[r,a]=e;this.outputShape=t;let i="result";n&&(i="floor(result * 255. + 0.5)"),this.userCode=`\n      ${iv(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${a};\n        int c = imod(flatIndex, ${a});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${r}.0);\n        vec4 values = ${s.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${s.output} = vec4(${i}, 0., 0., 0.);\n      }\n    `}}class lN{constructor(t,e,n=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const s=rv(),[r,a]=e;this.outputShape=t;let i="",o="result";n&&(o="floor(result * 255. + 0.5)");for(let e=0;e<=1;e++)for(let n=0;n<=1;n++){const o=2*e+n;i+=`\n          localCoords = coords;\n          if(localCoords[2] + ${n} < ${t[2]}) {\n            localCoords[2] += ${n};\n            if(localCoords[1] + ${e} < ${t[1]}) {\n              localCoords[1] += ${e};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${a};\n              c = imod(flatIndex, ${a});\n              uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${r}.0);\n              values = ${s.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${o}] = values[0];\n              } else if(offset == 1) {\n                result[${o}] = values[1];\n              } else if(offset == 2) {\n                result[${o}] = values[2];\n              } else {\n                result[${o}] = values[3];\n              }\n            }\n          }\n        `}this.userCode=`\n      ${iv(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${i}\n\n        ${s.output} = ${o};\n      }\n    `}}const uN="return real * expR - imag * expI;",cN="return real * expI + imag * expR;";class hN{constructor(t,e,n){this.variableNames=["real","imag"];const s=e[1];this.outputShape=e;const r=n?"2.0 * "+Math.PI:"-2.0 * "+Math.PI,a=n?s+".0":"1.0";this.userCode=`\n      const float exponentMultiplier = ${r};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${t}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${s});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${s}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}class pN{constructor(t,e){this.outputShape=[],this.variableNames=["x"],this.outputShape=t,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}getCustomSetupFunc(t){return(e,n)=>{null==this.valueLoc&&(this.valueLoc=e.getUniformLocationNoThrow(n,"value")),e.gl.uniform1f(this.valueLoc,t)}}}class dN{constructor(t,e,n){this.variableNames=["A","indices"];const s=t.slice();s[n]=e,this.outputShape=s,this.rank=s.length;const r=xv(this.rank),a=function(t,e){const n=t.length;if(n>4)throw Error(`Gather for rank ${n} is not yet supported`);if(1===n)return"int(getIndices(resRC))";const s=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[];for(let n=0;n<t.length;n++)n===e?r.push(`int(getIndices(${s[n]}))`):r.push(""+s[n]);return r.join()}(t,n);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${a}));\n      }\n    `}}class fN{constructor(t,e,n){this.sliceDim=t,this.strides=e,this.variableNames=["x","indices"],this.outputShape=n;const s=xv(e.length),r=xv(n.length),a=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${s} strides = ${s}(${this.strides});\n         void main() {\n          ${r} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${a};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}function mN(t){const e=rv();return function(t,e){const n=zw(t,()=>t.createShader(t.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(Ew(t,()=>t.shaderSource(n,e)),Ew(t,()=>t.compileShader(n)),!1===t.getShaderParameter(n,t.COMPILE_STATUS))throw console.log(t.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(t,`${e.version}\n    precision highp float;\n    ${e.attribute} vec3 clipSpacePos;\n    ${e.attribute} vec2 uv;\n    ${e.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function gN(t){return function(t,e){const n=zw(t,()=>t.createBuffer(),"Unable to create WebGLBuffer");return Ew(t,()=>t.bindBuffer(t.ARRAY_BUFFER,n)),Ew(t,()=>t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW)),n}(t,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function yN(t){return function(t,e){const n=zw(t,()=>t.createBuffer(),"Unable to create WebGLBuffer");return Ew(t,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,n)),Ew(t,()=>t.bufferData(t.ELEMENT_ARRAY_BUFFER,e,t.STATIC_DRAW)),n}(t,new Uint16Array([0,1,2,2,1,3]))}function bN(t,e,n,s,r,i){!function(t,e){const n=a().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t<=0||e<=0){throw new Error("Requested texture size "+`[${t}x${e}]`+" is invalid.")}if(t>n||e>n){throw new Error("Requested texture size "+`[${t}x${e}]`+" greater than WebGL maximum on this browser / GPU "+`[${n}x${n}]`+".")}}(e,n);const o=function(t){return zw(t,()=>t.createTexture(),"Unable to create WebGLTexture.")}(t),l=t.TEXTURE_2D;return Ew(t,()=>t.bindTexture(l,o)),Ew(t,()=>t.texParameteri(l,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE)),Ew(t,()=>t.texParameteri(l,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE)),Ew(t,()=>t.texParameteri(l,t.TEXTURE_MIN_FILTER,t.NEAREST)),Ew(t,()=>t.texParameteri(l,t.TEXTURE_MAG_FILTER,t.NEAREST)),Ew(t,()=>t.texImage2D(l,0,s,e,n,0,r,i,null)),Ew(t,()=>t.bindTexture(t.TEXTURE_2D,null)),o}function xN(t){return t.internalFormatFloat}function wN(t){return t.internalFormatHalfFloat}function vN(t){return t.downloadTextureFormat}function NN(t){return t.internalFormatPackedFloat}function kN(t){return t.internalFormatPackedHalfFloat}function CN(t,e,n,s,r,a,i,o){const l=t,u=new Float32Array(function(t,e){const[n,s]=Sw(t,e);return n*s*4}(a,i));return l.bindBuffer(l.PIXEL_PACK_BUFFER,e),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}class SN{constructor(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const e=a().getNumber("WEBGL_VERSION");null!=t?(this.gl=t,function(t,e){yw[t]=e}(e,t)):this.gl=xw(e);let n="WEBGL_color_buffer_float";if(1===a().getNumber("WEBGL_VERSION")){const t="OES_texture_float",e="OES_texture_half_float";if(this.textureFloatExtension=Aw(this.gl,t),qw(this.gl,e))this.textureHalfFloatExtension=Aw(this.gl,e);else if(a().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),qw(this.gl,"EXT_color_buffer_half_float"))this.colorBufferHalfFloatExtension=Aw(this.gl,"EXT_color_buffer_half_float");else if(a().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",qw(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!qw(this.gl,"EXT_color_buffer_half_float"))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension("EXT_color_buffer_half_float")}this.vertexBuffer=gN(this.gl),this.indexBuffer=yN(this.gl),this.framebuffer=function(t){return zw(t,()=>t.createFramebuffer(),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=Iw(this.gl,this.textureHalfFloatExtension)}get debug(){return a().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const t=this.gl;Ew(t,()=>t.finish()),Ew(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,null)),Ew(t,()=>t.deleteFramebuffer(this.framebuffer)),Ew(t,()=>t.bindBuffer(t.ARRAY_BUFFER,null)),Ew(t,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)),Ew(t,()=>t.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,s){const[r,a]=kw(e,n);return bN(t,r,a,xN(s),s.textureFormatFloat,t.FLOAT)}(this.gl,t,e,this.textureConfig)}createFloat16MatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,s){const[r,a]=kw(e,n);return bN(t,r,a,wN(s),s.textureFormatFloat,s.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createUnsignedBytesMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,s){const[r,a]=kw(e,n);return bN(t,r,a,vN(s),t.RGBA,t.UNSIGNED_BYTE)}(this.gl,t,e,this.textureConfig)}uploadPixelDataToTexture(t,e){this.throwIfDisposed(),function(t,e,n){Ew(t,()=>t.bindTexture(t.TEXTURE_2D,e)),n.data instanceof Uint8Array?Ew(t,()=>t.texImage2D(t.TEXTURE_2D,0,t.RGBA,n.width,n.height,0,t.RGBA,t.UNSIGNED_BYTE,n.data)):Ew(t,()=>t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,n)),Ew(t,()=>t.bindTexture(t.TEXTURE_2D,null))}(this.gl,t,e)}uploadDenseMatrixToTexture(t,e,n,s){this.throwIfDisposed(),function(t,e,n,s,r,a){let i,o,l;Ew(t,()=>t.bindTexture(t.TEXTURE_2D,e)),r instanceof Uint8Array?(i=new Uint8Array(n*s*4),o=t.UNSIGNED_BYTE,l=t.RGBA):(i=new Float32Array(n*s*4),o=t.FLOAT,l=a.internalFormatPackedFloat),i.set(r),Ew(t,()=>t.texImage2D(t.TEXTURE_2D,0,l,n,s,0,t.RGBA,o,i)),Ew(t,()=>t.bindTexture(t.TEXTURE_2D,null))}(this.gl,t,e,n,s,this.textureConfig)}createFloat16PackedMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,s){const[r,a]=Sw(e,n);return bN(t,r,a,kN(s),t.RGBA,s.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createPackedMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,s){const[r,a]=Sw(e,n);return bN(t,r,a,NN(s),t.RGBA,t.FLOAT)}(this.gl,t,e,this.textureConfig)}deleteMatrixTexture(t){this.throwIfDisposed(),this.outputTexture===t&&(Mw(this.gl,this.framebuffer),this.outputTexture=null),Ew(this.gl,()=>this.gl.deleteTexture(t))}downloadByteEncodedFloatMatrixFromOutputTexture(t,e,n){return this.downloadMatrixDriver(t,()=>function(t,e,n,s){const[r,a]=kw(e,n),i=new Uint8Array(e*n*4);return Ew(t,()=>t.readPixels(0,0,r,a,s.downloadTextureFormat,t.UNSIGNED_BYTE,i)),new Float32Array(i.buffer)}(this.gl,e,n,this.textureConfig))}downloadPackedMatrixFromBuffer(t,e,n,s,r,a){return CN(this.gl,t,0,0,0,r,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(t,e){return function(t,e,n){const s=t,r=new Float32Array(n);return s.bindBuffer(s.PIXEL_PACK_BUFFER,e),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,r),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),r}(this.gl,t,e)}createBufferFromTexture(t,e,n){this.bindTextureToFrameBuffer(t);const s=function(t,e,n,s){const r=t.createBuffer();Ew(t,()=>t.bindBuffer(t.PIXEL_PACK_BUFFER,r));const a=16*e*n;return Ew(t,()=>t.bufferData(t.PIXEL_PACK_BUFFER,a,t.STREAM_READ)),Ew(t,()=>t.readPixels(0,0,n,e,t.RGBA,t.FLOAT,0)),Ew(t,()=>t.bindBuffer(t.PIXEL_PACK_BUFFER,null)),r}(this.gl,e,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),s}createAndWaitForFence(){const t=this.createFence(this.gl);return this.pollFence(t)}createFence(t){let e,n;if(a().getBool("WEBGL_FENCE_API_ENABLED")){const s=t,r=s.fenceSync(s.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),n=()=>{const t=s.clientWaitSync(r,0,0);return t===s.ALREADY_SIGNALED||t===s.CONDITION_SATISFIED},e=r}else a().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(e=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(e,a().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:e,isFencePassed:n}}downloadMatrixFromPackedTexture(t,e,n){return this.downloadMatrixDriver(t,()=>function(t,e,n){const s=new Float32Array(e*n*4);return Ew(t,()=>t.readPixels(0,0,n,e,t.RGBA,t.FLOAT,s)),s}(this.gl,e,n))}createProgram(t){this.throwIfDisposed();const e=this.gl,n=$w(e,t),s=mN(e),r=function(t){return zw(t,()=>t.createProgram(),"Unable to create WebGLProgram.")}(e);return Ew(e,()=>e.attachShader(r,s)),Ew(e,()=>e.attachShader(r,n)),function(t,e){if(Ew(t,()=>t.linkProgram(e)),!1===t.getProgramParameter(e,t.LINK_STATUS))throw console.log(t.getProgramInfoLog(e)),new Error("Failed to link vertex and fragment shaders.")}(e,r),this.debug&&Dw(e,r),this.vertexAttrsAreBound||(this.setProgram(r),this.vertexAttrsAreBound=function(t,e,n){return Ew(t,()=>t.bindBuffer(t.ARRAY_BUFFER,n)),_w(t,e,"clipSpacePos",n,3,20,0)&&_w(t,e,"uv",n,2,20,12)}(e,this.program,this.vertexBuffer)),r}deleteProgram(t){this.throwIfDisposed(),t===this.program&&(this.program=null),null!=t&&Ew(this.gl,()=>this.gl.deleteProgram(t))}setProgram(t){this.throwIfDisposed(),this.program=t,null!=this.program&&this.debug&&Dw(this.gl,this.program),Ew(this.gl,()=>this.gl.useProgram(t))}getUniformLocation(t,e,n=!0){return this.throwIfDisposed(),n?function(t,e,n){return zw(t,()=>t.getUniformLocation(e,n),'uniform "'+n+'" not present in program.')}(this.gl,t,e):function(t,e,n){return t.getUniformLocation(e,n)}(this.gl,t,e)}getAttributeLocation(t,e){return this.throwIfDisposed(),Ew(this.gl,()=>this.gl.getAttribLocation(t,e))}getUniformLocationNoThrow(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)}setInputMatrixTexture(t,e,n){this.throwIfDisposed(),this.throwIfNoProgram(),Fw(this.gl,t,e,n)}setOutputMatrixTexture(t,e,n){this.setOutputMatrixTextureDriver(t,n,e)}setOutputPackedMatrixTexture(t,e,n){this.throwIfDisposed();const[s,r]=Sw(e,n);this.setOutputMatrixTextureDriver(t,s,r)}setOutputMatrixWriteRegion(t,e,n,s){this.setOutputMatrixWriteRegionDriver(n,t,s,e)}setOutputPackedMatrixWriteRegion(t,e,n,s){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&Dw(this.gl,this.program),Lw(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const t=this.gl;this.debug&&this.debugValidate(),Ew(t,()=>t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),Ew(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=Aw(this.gl,2===a().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===a().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const t=this.gl,e=this.getQueryTimerExtensionWebGL2(),n=t.createQuery();return t.beginQuery(e.TIME_ELAPSED_EXT,n),n}const t=this.getQueryTimerExtensionWebGL1(),e=t.createQueryEXT();return t.beginQueryEXT(t.TIME_ELAPSED_EXT,e),e}endQuery(){if(2===a().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const t=this.gl,e=this.getQueryTimerExtensionWebGL2();return void t.endQuery(e.TIME_ELAPSED_EXT)}const t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(t){return await O(()=>this.disposed||this.isQueryAvailable(t,a().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(t,a().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(t,e){if(0===e)return null;if(2===e){const e=this.gl;return e.getQueryParameter(t,e.QUERY_RESULT)/1e6}{const e=this.getQueryTimerExtensionWebGL1();return e.getQueryObjectEXT(t,e.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(t,e){if(0===e)return!0;if(2===e){const e=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=e.getQueryParameter(t,e.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),s&&!this.disjoint}{const e=this.getQueryTimerExtensionWebGL1(),n=e.getQueryObjectEXT(t,e.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(e.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(t){return new Promise(e=>{this.addItemToPoll(()=>t.isFencePassed(),()=>e())})}pollItems(){const t=function(t){let e=0;for(;e<t.length;++e){if(!t[e]())break}return e-1}(this.itemsToPoll.map(t=>t.isDoneFn));for(let e=0;e<=t;++e){const{resolveFn:t}=this.itemsToPoll[e];t()}this.itemsToPoll=this.itemsToPoll.slice(t+1)}addItemToPoll(t,e){this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),this.itemsToPoll.length>1||O(()=>(this.pollItems(),0===this.itemsToPoll.length))}bindTextureToFrameBuffer(t){this.throwIfDisposed(),Ow(this.gl,t,this.framebuffer),this.debug&&Lw(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(Ow(this.gl,this.outputTexture,this.framebuffer),this.debug&&Lw(this.gl)):Mw(this.gl,this.framebuffer)}downloadMatrixDriver(t,e){this.bindTextureToFrameBuffer(t);const n=e();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(t,e,n){this.throwIfDisposed();const s=this.gl;Ow(s,t,this.framebuffer),this.debug&&Lw(s),this.outputTexture=t,Ew(s,()=>s.viewport(0,0,e,n)),Ew(s,()=>s.scissor(0,0,e,n))}setOutputMatrixWriteRegionDriver(t,e,n,s){this.throwIfDisposed(),Ew(this.gl,()=>this.gl.scissor(t,e,n,s))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}function IN(t,e){if(t.length!==e.length)throw Error(`Binary was compiled with ${t.length} inputs, but was executed with ${e.length} inputs`);t.forEach((t,n)=>{const s=t.logicalShape,r=e[n],a=r.shape;if(!R(s,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${s} and ${a} must match`);if(t.isUniform&&r.isUniform)return;const i=t.texShape,o=r.isUniform?null:r.texData.texShape;if(!R(i,o))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${o} must match`)})}class EN{constructor(t,e,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;const{filterWidth:s,inChannels:r,strideWidth:a,strideHeight:i,padInfo:o,outWidth:l,dilationWidth:u,dilationHeight:c,dataFormat:h}=n,{left:p,top:d}=o,f=r*s,m=rv(),g="channelsLast"===h,y=g?0:1,b=g?1:2;let x="";for(let n=0;n<=1;n++)for(let s=0;s<=1;s++)x+=`\n          blockIndex = rc.y + ${s};\n          pos = rc.x + ${n};\n\n          if(blockIndex < ${t[1]} && pos < ${t[0]}) {\n            offsetY = int(blockIndex / (${l})) * ${i} - ${d};\n            d0 = offsetY + ${c} * (pos / ${f});\n\n            if(d0 < ${e[y]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${l}.) * ${a}. - ${p}.);\n              d1 = offsetX + ${u} * (int(mod(float(pos), ${f}.) / ${r}.));\n\n              if(d1 < ${e[b]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${r}.));\n\n                if (${g}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*n+s}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*n+s}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${x}\n\n        ${m.output} = result;\n      }\n    `}}class TN{constructor(t,e,n,s,r){this.variableNames=["x"],this.outputShape=[];const a=e,i=t[3]-1;let o;this.outputShape=t;const l=`float(${n}) + float(${s}) * sum`;o=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class AN{constructor(t,e,n,s,r){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=n,this.alpha=s,this.beta=r,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${e})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${e} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${s}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${s})\n                * float(${r})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${r});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}class $N{constructor(t,e,n,s,r){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=e,i=t[3]-1;let o;this.outputShape=t;const l=`float(${n}) + float(${s}) * sum`;o=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}class RN{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const e=t.strideHeight,n=t.strideWidth,s=t.dilationHeight,r=t.effectiveFilterHeight,a=t.effectiveFilterWidth,i=r-1-t.padInfo.top,o=a-1-t.padInfo.left,l=r*a-1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${r};\n          wR += ${s}) {\n          float dyR = float(dyRCorner + wR) / ${e}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${l} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class DN{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const e=t.strideDepth,n=t.strideHeight,s=t.strideWidth,r=t.dilationDepth,a=t.dilationHeight,i=t.dilationWidth,o=t.effectiveFilterDepth,l=t.effectiveFilterHeight,u=t.effectiveFilterWidth,c=o-1-t.padInfo.front,h=l-1-t.padInfo.top,p=u-1-t.padInfo.left,d=o*l*u-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${p});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${o};\n           wD += ${r}) {\n          float dyD = float(dyDCorner + wD) / ${e}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${l};\n              wR += ${a}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${u};\n                wC += ${i}) {\n              float dyC = float(dyCCorner + wC) / ${s}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${d} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${l} * ${u} +\n                  wR * ${u} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class _N{constructor(t,e,n=!1,s=!1,r=!1,a=null,i=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;const o=n?t[1]:t[2],l=Math.ceil(o/2),u=n?"i * 2, rc.y":"rc.y, i * 2",c=s?"rc.z, i * 2":"i * 2, rc.z",h=n?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],p=s?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let d="",f="";a&&(d=i?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${a}\n        }`:`vec4 activation(vec4 x) {\n          ${a}\n        }`,f="result = activation(result);");const m=r?"result += getBiasAtOutCoords();":"";r&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),this.userCode=`\n      ${d}\n\n      const float sharedDimension = ${l}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${l}; i++) {\n          vec4 a = getMatrixA(rc.x, ${u});\n          vec4 b = getMatrixB(rc.x, ${c});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${h[0]} * ${p[0]});\n          result += (${h[1]} * ${p[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${m}\n\n        ${f}\n\n        setOutput(result);\n      }\n    `}}class FN{constructor(t,e,n){this.variableNames=["probs"],this.outputShape=[t,n],this.userCode=`\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${e-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${e-1}));\n      }\n    `}getCustomSetupFunc(t){return(e,n)=>{null==this.seedLoc&&(this.seedLoc=e.getUniformLocation(n,"seed")),e.gl.uniform1f(this.seedLoc,t)}}}class ON{constructor(t,e,n,s){this.variableNames=["indices"],this.outputShape=[t,e],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${s}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}class MN{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t;const e=t.length;if(0===e)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const n=sv("rc",e),s=xv(e),r=function(t,e,n){if(1===t)return"rc > "+e[0];let s="";for(let r=t-2;r<t;r++)s+=`${n[r]} >= ${e[r]}`,r<t-1&&(s+="||");return s}(e,t,n),a=function(t,e,n,s){if(1===t)return"";const r=s.slice(-2);return`\n    int r = ${r[0]};\n    int c = ${r[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${e};\n    bool rEdge = rp1 >= ${n};\n  `}(e,t[t.length-1],t[t.length-2],n),i=function(t,e){const n=t.length,s=function(t,e){const n=[];for(let s=0;s<=1;s++)for(let r=0;r<=1;r++){let a=`${0===s?"r":"rp1"}, ${0===r?"c":"cp1"}`;for(let n=2;n<t;n++)a=e[e.length-1-n]+","+a;n.push(a)}return n}(n,e);if(1===n)return`getA(rc),\n            rc + 1 >= ${t[0]} ? 0. : getA(rc + 1),\n            0, 0`;return`getA(${s[0]}),\n          cEdge ? 0. : getA(${s[1]}),\n          rEdge ? 0. : getA(${s[2]}),\n          rEdge || cEdge ? 0. : getA(${s[3]})`}(t,n);this.userCode=`\n        void main() {\n          ${s} rc = getOutputCoords();\n\n          if(${r}) {\n            setOutput(vec4(0));\n          } else {\n            ${a}\n\n            setOutput(vec4(${i}));\n          }\n        }\n      `}}}class LN{constructor(t,e,n){this.variableNames=["x"],this.outputShape=e.map((e,n)=>e[0]+t[n]+e[1]);const s=t.length,r=xv(s),a=e.map(t=>t[0]).join(","),i=e.map((e,n)=>e[0]+t[n]).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s);this.userCode=1!==s?`\n      ${r} start = ${r}(${a});\n      ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${n}));\n        } else {\n          ${r} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${n}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class zN{constructor(t,e,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map((e,n)=>e[0]+t[n]+e[1]);const s=t.length,r=xv(s),a=e.map(t=>t[0]).join(","),i=e.map((e,n)=>e[0]+t[n]).join(","),o=sv("rc",s),l=sv("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h=[r+" rc = outputLoc;",`${o[s-1]} += 1;\n       if(${u}) {\n      `,1===s?"":`}\n       rc = outputLoc;\n       ${o[s-2]} += 1;\n       if(${o[s-2]} < ${this.outputShape[s-2]}) {`,1===s?"":`  ${o[s-1]} += 1;\n         if(${u}) {`],p=1===s?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let d="";for(let t=0,e=1===s?2:4;t<e;t++)d+=`\n        ${h[t]}\n        if (${p}) {\n          result[${t}] = float(${n});\n        } else {\n          ${r} source = rc - start;\n          result[${t}] = getChannel(getX(${l.join()}), ${c});\n        }\n      `;d+=1===s?"} ":"}}",this.userCode=`\n      const ${r} start = ${r}(${a});\n      const ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}class BN{constructor(t,e,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");const a=t.filterWidth,i=t.strideHeight,o=t.strideWidth,l=t.dilationHeight,u=t.dilationWidth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,p=t.padInfo.top,d=t.padInfo.left;this.outputShape=t.outShape;const f="avg"===e,m=`((batch  * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + d`,g=`(xR * ${t.inWidth} + xC) * ${t.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const e=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${p}, ${d});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${u}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${e} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${s?r?m:g:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(b="avgValue / count");const x=4*Math.floor(a/4),w=a%4,v=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${p}, ${d});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${u};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              getValue(batch, xR, xC + 3 * ${u}, d)\n            );\n\n            ${v}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${2===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${3===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              initializationValue\n            );\n\n            ${v}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class PN{constructor(t,e,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");const a=t.filterWidth,i=t.strideDepth,o=t.strideHeight,l=t.strideWidth,u=t.dilationDepth,c=t.dilationHeight,h=t.dilationWidth,p=t.effectiveFilterDepth,d=t.effectiveFilterHeight,f=t.effectiveFilterWidth,m=t.padInfo.front,g=t.padInfo.top,y=t.padInfo.left;this.outputShape=t.outShape;const b="avg"===e;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const e=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${l});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${u}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${d};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${e} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${s?r?`(((batch * ${t.inDepth} + xD) * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`((xD * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`wD * ${d} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let w=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(w="avgValue / count");const v=4*Math.floor(a/4),N=a%4,k=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${l});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${u}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${v}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${k}\n            }\n\n            int xC = xCCorner + ${v};\n            if (${1===N}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${k}\n            } else if (${2===N}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${k}\n            } else if (${3===N}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${k}\n            }\n          }\n          setOutput(${w});\n        }\n      }\n    `}}class WN{constructor(t,e){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:r,outSize:a}=t;this.outputShape=[s,a];let i="0.0",o="";"prod"===e?i="1.0":"min"===e?(i="1.0 / 1e-20",o="min"):"max"===e&&(i="-1.0 / 1e-20",o="max");let l=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===e?l="sumValue":"prod"===e?l="prodValue":"all"===e?l="allValue":"any"===e&&(l="anyValue");const u=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===e}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===e}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n      }\n    `,p="vec4";"all"===e?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===e&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let d="";r%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${d}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${u}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${u};\n        if (${1===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${l});\n      }\n    `}}class VN{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;let n="";for(let t=0;t<4;t++){let e="thisRC = rc;";t%2==1&&(e+="thisRC.z += 1;"),t>1&&(e+="thisRC.y += 1;"),n+=`\n        ${e}\n        ${t>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${t}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${t>0?"}":""}\n      `}var s;this.userCode=`\n      ${s=e,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${av(["r","c","d"],s)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${iv(t)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${t[1]};\n        int cols = ${t[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class UN{constructor(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;const[,s,r]=e.shape,[,a,i]=t.shape,o=[n&&a>1?s-1:s,n&&i>1?r-1:r],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${s-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${r-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}class GN{constructor(t,e,n,s){this.variableNames=["A"],this.outputShape=[];const[r,a,i,o]=t;this.outputShape=[r,e,n,o];const l=[s&&e>1?a-1:a,s&&n>1?i-1:i],u=[s&&e>1?e-1:e,s&&n>1?n-1:n];this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/u[0]},\n          ${l[1]/u[1]});\n      const vec2 inputShapeRC = vec2(${a}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class HN{constructor(t,e,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[r,a,i,o]=t;this.outputShape=[r,e,n,o];const l=[s&&e>1?a-1:a,s&&n>1?i-1:i],u=[s&&e>1?e-1:e,s&&n>1?n-1:n];this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${l[0]/u[0]},\n          ${l[1]/u[1]},\n          ${l[1]/u[1]});\n      const vec3 inputShapeRC = vec3(${a}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${o-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}class jN{constructor(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;const[,s,r]=e.shape,[,a,i]=t.shape,o=[n&&a>1?s-1:s,n&&i>1?r-1:r],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}class qN{constructor(t,e,n,s){this.variableNames=["A"],this.outputShape=[];const[r,a,i,o]=t;this.outputShape=[r,e,n,o];const l=[s&&e>1?a-1:a,s&&n>1?i-1:i],u=[s&&e>1?e-1:e,s&&n>1?n-1:n],c=s?"0.5":"0.0";this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/u[0]},\n          ${l[1]/u[1]});\n      const vec2 inputShapeRC = vec2(${a}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${c})));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class KN{constructor(t,e){this.variableNames=["x"];const n=t.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=t,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${t[0]} - coord - 1));\n        }\n      `);const s=t.map((n,s)=>(n=>-1!==e.indexOf(n)&&1!==t[n]?`${t[n]} - coords[${n}] - 1`:`coords[${n}]`)(s)).join(","),r=xv(n);this.userCode=`\n      void main() {\n        ${r} coords = getOutputCoords();\n        setOutput(getX(${s}));\n      }\n    `}}class XN{constructor(t,e){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=t.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=t;const s=sv("rc",n),r=`${s[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${s[n-2]} + 1 < ${this.outputShape[n-2]}`,i=xv(n);function o(n){const s=t.map((s,r)=>function(n,s){return-1!==e.indexOf(n)&&1!==t[n]?`${t[n]} - ${s[n]} - 1`:""+s[n]}(r,n));return`getChannel(getX(${s.join(",")}), vec2(${s.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${t[0]} - rc - 1),\n            ${t[0]} - rc - 1);\n          if(${r}){\n              result.g = getChannel(getX(${t[0]} - (rc  + 1) - 1),\n                ${t[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(t){return o(t)}(s.slice())};\n          if(${r}){\n            result.g = ${function(t){return t[n-1]="("+t[n-1]+" + 1)",o(t)}(s.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(t){return t[n-2]="("+t[n-2]+" + 1)",o(t)}(s.slice())};\n            if(${r}) {\n              result.a = ${function(t){return t[n-1]="("+t[n-1]+" + 1)",t[n-2]="("+t[n-2]+" + 1)",o(t)}(s.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}class YN{constructor(t,e,n,s,r,a,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const o=xv(r.length),l=xv(a.length);let u="";1===n?u="i":2===n&&(u="i, j");const c=`getIndices(${u})`;let h="";1===s?h="i":2===s&&(h="i, coords[1]");const p=`getUpdates(${h})`,d=e>1?"strides[j]":"strides";this.userCode=`\n        ${o} strides = ${o}(${r});\n\n        void main() {\n          ${l} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${t}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${e}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${d};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${p};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}class JN{constructor(t,e){this.variableNames=["x","segmentIds"];const n=t.windowSize,s=t.batchSize,r=t.inSize,a=t.numSegments,i=a*Math.ceil(r/n);this.outputShape=[s,i];const o=4*Math.floor(n/4),l=n%4,u="\n        sumValue += dot(values, segFilter);\n    ";let c="";r%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `);let h="";r%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}class ZN{constructor(t,e,n){let s,r;if(this.variableNames=["c","a","b"],this.outputShape=e,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)r="resRC",s="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],i=[];for(let s=0;s<e.length;s++)i.push(""+n[s]),s<t&&a.push(""+n[s]);s=a.join(),r=i.join()}const a=xv(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${s});\n        if (cVal >= 1.0) {\n          setOutput(getA(${r}));\n        } else {\n          setOutput(getB(${r}));\n        }\n      }\n    `}}class QN{constructor(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;const e=xv(this.rank),n=`uniform int start[${this.rank}];`,s=function(t){if(1===t)return"sourceLoc";if(t<=6)return tk.slice(0,t).map(t=>"sourceLoc."+t).join(",");throw Error(`Slicing for rank ${t} is not yet supported`)}(this.rank);let r;r=`\n        ${e} sourceLoc;\n        ${e} coords = getOutputCoords();\n        ${t.map((t,e)=>`sourceLoc.${tk[e]} = start[${e}] + coords.${tk[e]};`).join("\n")}\n      `,this.userCode=`\n      ${n}\n      void main() {\n        ${r}\n        setOutput(getSource(${s}));\n      }\n    `}getCustomSetupFunc(t){if(t.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${t.length})`);return(e,n)=>{null==this.startLoc&&(this.startLoc=e.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||e.gl.uniform1iv(this.startLoc,t)}}}const tk=["x","y","z","w","u","v"];class ek{constructor(t){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length;const e=xv(this.rank),n=sv("coords",this.rank),s=sv("sourceLoc",this.rank),r=1===this.rank?"sourceLoc":`vec2(${s.slice(-2).join()})`,a=`getChannel(getSource(${s.join()}), ${r})`,i=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${t[this.rank-1]}) {\n        ++${s[this.rank-1]};\n        result.y = ${a};\n        --${s[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${t[this.rank-2]}) {\n        ++${s[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${t[this.rank-1]}) {\n          ++${s[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,l=this.rank<=4?`sourceLoc = coords +\n            ${e}(${t.map((t,e)=>`start[${e}]`).join()});`:t.map((t,e)=>`${s[e]} = ${n[e]} + start[${e}];`).join("\n");this.userCode=`\n      uniform int start[${this.rank}];\n      void main() {\n        ${e} coords = getOutputCoords();\n        ${e} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(t){if(t.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${t.length})`);return(e,n)=>{null==this.startLoc&&(this.startLoc=e.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||e.gl.uniform1iv(this.startLoc,t)}}}class nk{constructor(t,e,n){this.variableNames=["x"],this.outputShape=n;const s=n.length,r=xv(n.length),a=xv(n.length);let i="";if(1===s)i="coords * strides + begin";else{let t=0;i=n.map((e,s)=>(t++,1===n.length?`coords * strides[${s}] + begin[${s}]`:`coords[${t-1}] * strides[${s}] + begin[${s}]`)).join(",")}this.userCode=`\n      ${r} begin = ${r}(${t});\n      ${r} strides = ${r}(${e});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}class sk{constructor(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(t,e,n){const s=ak(e,n),r=ik(t,s,n);r in this.freeTextures||(this.freeTextures[r]=[]),r in this.usedTextures||(this.usedTextures[r]=[]);const a=rk(t,s,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[r].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const t=this.freeTextures[r].shift();return this.usedTextures[r].push(t),t}let i;return s===Nw.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):s===Nw.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):s===Nw.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):s===Nw.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):s===Nw.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[r].push(i),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),i}releaseTexture(t,e,n,s){if(null==this.freeTextures)return;const r=ak(n,s),i=ik(e,r,s);i in this.freeTextures||(this.freeTextures[i]=[]);const o=rk(e,r,this.gpgpu.gl,this.gpgpu.textureConfig,s),l=a().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==l&&this._numBytesAllocated>l?(this.gpgpu.deleteMatrixTexture(t),this._numBytesAllocated-=o):(this.freeTextures[i].push(t),this.numFreeTextures++,this._numBytesFree+=o),this.numUsedTextures--;const u=this.usedTextures[i],c=u.indexOf(t);if(c<0)throw new Error("Cannot release a texture that was never provided by this texture manager");u.splice(c,1),this.log()}log(){if(!this.logEnabled)return;const t=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${t})`);const e=this._numBytesFree/this._numBytesAllocated;console.log("Bytes allocated: "+this._numBytesAllocated),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*e)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const t in this.freeTextures)this.freeTextures[t].forEach(t=>{this.gpgpu.deleteMatrixTexture(t)});for(const t in this.usedTextures)this.usedTextures[t].forEach(t=>{this.gpgpu.deleteMatrixTexture(t)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function rk(t,e,n,s,r){const a=function(t,e){switch(t){case Nw.PACKED_2X2_FLOAT32:return NN(e);case Nw.PACKED_2X2_FLOAT16:return kN(e);case Nw.UNPACKED_FLOAT32:return xN(e);case Nw.UNPACKED_FLOAT16:return wN(e);case Nw.PACKED_4X1_UNSIGNED_BYTE:return vN(e);default:throw new Error("Unknown physical texture type "+t)}}(e,s);let i;if(r){const[e,n]=Sw(t[0],t[1]);i=e*n}else{const[e,n]=kw(t[0],t[1]);i=e*n}return i*function(t,e){const n=t;if(e===n.R32F)return 4;if(e===n.R16F)return 2;if(e===n.RGBA32F)return 16;if(e===t.RGBA)return 16;if(e===n.RGBA16F)return 8;throw new Error("Unknown internal format "+e)}(n,a)}function ak(t,e){if(t===vw.UPLOAD)return Nw.PACKED_2X2_FLOAT32;if(t===vw.RENDER||null==t)return function(t){return a().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?t?Nw.PACKED_2X2_FLOAT32:Nw.UNPACKED_FLOAT32:t?Nw.PACKED_2X2_FLOAT16:Nw.UNPACKED_FLOAT16}(e);if(t===vw.DOWNLOAD||t===vw.PIXELS)return Nw.PACKED_4X1_UNSIGNED_BYTE;throw new Error("Unknown logical texture type "+t)}function ik(t,e,n){return`${t[0]}_${t[1]}_${e}_${n}`}class ok{constructor(t,e){this.variableNames=["A"];const n=new Array(t.length);for(let s=0;s<n.length;s++)n[s]=t[s]*e[s];this.outputShape=n,this.rank=n.length;const s=xv(this.rank),r=function(t){const e=t.length;if(e>5)throw Error(`Tile for rank ${e} is not yet supported`);if(1===e)return`imod(resRC, ${t[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],s=[];for(let e=0;e<t.length;e++)s.push(`imod(${n[e]}, ${t[e]})`);return s.join()}(t);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${r}));\n      }\n    `}}class lk{constructor(t,e){this.variableNames=["A"],this.outputShape=t,this.userCode=`\n      float unaryOperation(float x) {\n        ${e}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const uk="if (isnan(x)) return x;",ck="return abs(x);",hk=uk+"\n  return (x < 0.0) ? 0.0 : x;\n",pk=uk+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",dk="return (x >= 0.0) ? x : (exp(x) - 1.0);",fk=`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = 1.7580993408473768;\n  float scale = ${Ul};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`;const mk="return -x;",gk="return ceil(x);",yk="return floor(x);",bk="return exp(x);",xk="return exp(x) - 1.0;",wk="return x;",vk="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",Nk="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",kk="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n";class Ck{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${e}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class Sk{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t;const e=t.length,n=sv("rc",e),s=xv(e),r=function(t,e){if(1===t)return"rc";let n="";for(let s=0;s<t;s++)n+=e[s],s<t-1&&(n+=",");return n}(e,n),a=n.slice(-2),i=e<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${s} rc = getOutputCoords();\n        vec4 packedInput = getA(${r});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const{segment_util:Ik}=nu,Ek=su,Tk=ru,Ak=au,$k=Yi,Rk={};function Dk(t,e=!1){if("linear"===t)return"return x;";if("relu"===t)return e?vk:hk;if("elu"===t)return e?kk:dk;if("relu6"===t)return e?Nk:pk;if("prelu"===t)return e?_v:Rv;throw new Error(`Activation ${t} has not been implemented for the WebGL backend.`)}class _k extends n{constructor(t){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.warnedAboutMemory=!1,this.warnedAboutCPUBackend=!1,this.pendingDeletes=0,this.disposed=!1,!a().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==t){const t=xw(a().getNumber("WEBGL_VERSION"));this.binaryCache=((n=a().getNumber("WEBGL_VERSION"))in Rk||(Rk[n]={}),Rk[n]),this.gpgpu=new SN(t),this.canvas=t.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=t,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=t.gl.canvas;var n;this.textureManager=new sk(this.gpgpu),this.numMBBeforeWarning=null==a().global.screen?1024:a().global.screen.height*a().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new e(this,qn())}numDataIds(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes}write(t,e,n){if((a().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||a().getBool("DEBUG"))&&this.checkNumericalProblems(t),"complex64"===n&&null!=t)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const s={};return this.texData.set(s,{shape:e,dtype:n,values:t,usage:vw.UPLOAD,refCount:1}),s}incRef(t){this.texData.get(t).refCount++}decRef(t){if(this.texData.has(t)){this.texData.get(t).refCount--}}move(t,e,n,s){if(a().getBool("DEBUG")&&this.checkNumericalProblems(e),"complex64"===s)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(t,{shape:n,dtype:s,values:e,usage:vw.UPLOAD,refCount:1})}disposeIntermediateTensorInfo(t){const e=t.dataId;if(this.texData.has(e)){const t=this.texData.get(e);t.refCount--,t.refCount<1&&this.disposeData(e)}}readSync(t){const e=this.texData.get(t),{values:n,dtype:s,complexTensors:r,slice:a,shape:i,isPacked:o}=e;if(null!=a){let e;e=o?new Ck(i,wk):new lk(i,wk);const n=this.runWebGLProgram(e,[{dataId:t,shape:i,dtype:s}],s),r=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(t);if("string"===s)return n;const l=null!=this.activeTimers;let u,c;if(l&&(u=it()),"complex64"===s){c=Hl(r.real.dataSync(),r.imag.dataSync())}else c=this.getValuesFromTexture(t);return l&&(this.downloadWaitMs+=it()-u),this.convertAndCacheOnCPU(t,c)}async read(t){if(this.pendingRead.has(t)){const e=this.pendingRead.get(t);return new Promise(t=>e.push(t))}const e=this.texData.get(t),{values:n,shape:s,slice:r,dtype:i,complexTensors:o,isPacked:l}=e;if(null!=r){let e;e=l?new Ck(s,wk):new lk(s,wk);const n=this.runWebGLProgram(e,[{dataId:t,shape:s,dtype:i}],i),r=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(t);if(!a().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===a().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let u,c,h=null;if("complex64"!==i&&a().get("WEBGL_BUFFER_SUPPORTED")){u=this.decode(t);const e=this.texData.get(u.dataId);h=this.gpgpu.createBufferFromTexture(e.texture,...Cw(s))}if(this.pendingRead.set(t,[]),"complex64"!==i&&await this.gpgpu.createAndWaitForFence(),"complex64"===i){const t=await Promise.all([o.real.data(),o.imag.data()]);c=Hl(t[0],t[1])}else if(null==h)c=this.getValuesFromTexture(t);else{const t=$(s);c=this.gpgpu.downloadFloat32MatrixFromBuffer(h,t)}null!=u&&this.disposeIntermediateTensorInfo(u);const p=this.convertAndCacheOnCPU(t,c),d=this.pendingRead.get(t);return this.pendingRead.delete(t),d.forEach(t=>t(p)),this.pendingDisposal.has(t)&&(this.pendingDisposal.delete(t),this.disposeData(t),this.pendingDeletes--),p}checkNumericalProblems(t){if(null!=t)for(let e=0;e<t.length;e++){const n=t[e];if(!Tw(n)){if(a().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(t){const{shape:e,dtype:n,isPacked:s}=this.texData.get(t),r=$(e);if(a().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(t),s=this.texData.get(n.dataId),a=this.gpgpu.downloadMatrixFromPackedTexture(s.texture,...Cw(e)).subarray(0,r);return this.disposeIntermediateTensorInfo(n),a}const i=a().getBool("WEBGL_PACK")&&!0===s,o=i?Vw(e):e,l=i?new iN(o):new aN(o),u=this.runWebGLProgram(l,[{shape:o,dtype:n,dataId:t}],"float32"),c=this.texData.get(u.dataId),h=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(c.texture,c.texShape[0],c.texShape[1]).subarray(0,r);return this.disposeIntermediateTensorInfo(u),h}async time(t){const e=this.activeTimers,n=[];let s=!1;null==this.programTimersStack?(this.programTimersStack=n,s=!0):this.activeTimers.push(n),this.activeTimers=n,t();const r=A(this.activeTimers.map(t=>t.query)).filter(t=>null!=t),i=A(this.activeTimers.map(t=>t.name)).filter(t=>null!=t);this.activeTimers=e,s&&(this.programTimersStack=null);const o={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if(a().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const t=await Promise.all(r);o.kernelMs=S(t),o.getExtraProfileInfo=()=>t.map((t,e)=>({name:i[e],ms:t})).map(t=>`${t.name}: ${t.ms}`).join(", ")}else o.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,o}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return a().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:it(),endMs:null}}endTimer(t){return a().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),t):(t.endMs=it(),t)}async getQueryTime(t){if(a().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(t);const e=t;return e.endMs-e.startMs}disposeData(t){if(this.pendingDisposal.has(t))return;if(this.pendingRead.has(t))return this.pendingDisposal.add(t),void this.pendingDeletes++;if(!this.texData.has(t))return;this.releaseGPUData(t);const{complexTensors:e}=this.texData.get(t);null!=e&&(e.real.dispose(),e.imag.dispose()),this.texData.delete(t)}releaseGPUData(t){const{texture:e,dtype:n,texShape:s,usage:r,isPacked:a,slice:i}=this.texData.get(t),o=i&&i.origDataId||t,l=this.dataRefCount.get(o);l>1?this.dataRefCount.set(o,l-1):(this.dataRefCount.delete(o),null!=e&&(this.numBytesInGPU-=this.computeBytes(s,n),this.textureManager.releaseTexture(e,s,r,a)));const u=this.texData.get(t);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(t){return this.uploadToGPU(t),this.texData.get(t).texture}getDataInfo(t){return this.texData.get(t)}getCPUBackend(){return a().getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=qn().findBackend("cpu")),this.cpuBackend):null}shouldExecuteOnCPU(t,e=128){const n=this.getCPUBackend();return this.warnedAboutCPUBackend||null!=n||a().getBool("IS_TEST")||(console.warn("Your application contains ops that are small enough to be executed on the CPU backend, however the CPU backend cannot be found. Consider importing the CPU backend (@tensorflow/tfjs-backend-cpu) for better performance."),this.warnedAboutCPUBackend=!0),null!=n&&t.every(t=>null==this.texData.get(t.dataId).texture&&$(t.shape)<e)}getGPGPUContext(){return this.gpgpu}complex(t,e){const n=this.makeOutput(t.shape,"complex64");return this.texData.get(n.dataId).complexTensors={real:qn().keep(t.clone()),imag:qn().keep(e.clone())},n}real(t){return this.texData.get(t.dataId).complexTensors.real.clone()}imag(t){return this.texData.get(t.dataId).complexTensors.imag.clone()}slice(t,e,n){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.slice(t,e,n);if(0===$(n))return ne([],n,t.dtype);const{isPacked:s}=this.texData.get(t.dataId),r=_n(t.shape,e,n);if(s||!r){const s=a().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new ek(n):new QN(n),r=s.getCustomSetupFunc(e);return this.compileAndRun(s,[t],null,r)}return this.uploadToGPU(t.dataId),this.shallowSlice(t,e,n)}shallowSlice(t,e,n){const s=this.texData.get(t.dataId),r=this.makeOutput(n,t.dtype),a=this.texData.get(r.dataId);Object.assign(a,s),a.shape=n,a.dtype=t.dtype;let i=Fn(e,t.strides);s.slice&&(i+=s.slice.flatOffset),a.slice={flatOffset:i,origDataId:s.slice&&s.slice.origDataId||t.dataId};const o=this.dataRefCount.get(a.slice.origDataId)||1;return this.dataRefCount.set(a.slice.origDataId,o+1),r}stridedSlice(t,e,n,s){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.stridedSlice(t,e,n,s);const r=kn(e,n,s);if(r.some(t=>0===t))return ne([],r);const a=new nk(e,s,r);return this.compileAndRun(a,[t])}reverse(t,e){const n=a().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new XN(t.shape,e):new KN(t.shape,e);return this.compileAndRun(n,[t])}concat(t,e){if("complex64"===t[0].dtype){const n=t.map(t=>Da(t)),s=t.map(t=>Gr(t));return te(this.concat(n,e),this.concat(s,e))}if(this.shouldExecuteOnCPU(t))return this.cpuBackend.concat(t,e);if(1===t.length)return t[0];if(t.length>a().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const n=Math.floor(t.length/2),s=this.concat(t.slice(0,n),e),r=this.concat(t.slice(n),e);return this.concat([s,r],e)}if(a().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&t[0].rank>1){const n=new Bv(t.map(t=>t.shape),e);return this.compileAndRun(n,t)}const n=Vs(t.map(t=>t.shape),e),s=t.map(t=>t.as2D(-1,$(t.shape.slice(e)))),r=new zv(s.map(t=>t.shape));return this.compileAndRun(r,s).reshape(n)}neg(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.neg(t);if(a().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,mk,t.dtype);const e=new lk(t.shape,mk);return this.compileAndRun(e,[t])}batchMatMul(t,e,n,s){const r=n?t.shape[2]:t.shape[1],a=s?e.shape[1]:e.shape[2],i=n?t.shape[1]:t.shape[2],[o,,]=t.shape;if((1===r||1===a)&&i>1e3){n&&(t=ln(t,[0,2,1])),s&&(e=ln(e,[0,2,1]));const r=1===a?t:t.as3D(o,i,1),l=1===a?2:1,u=1===a?e.as3D(o,1,i):e;return this.multiply(r,u).sum(l,!0)}const l=_t(t.dtype,e.dtype),u=new _N(t.shape,[o,r,a],n,s);return this.compileAndRun(u,[t,e],l)}fusedBatchMatMul({a:t,b:e,transposeA:n,transposeB:s,bias:r,activation:a,preluActivationWeights:i}){const o=n?t.shape[2]:t.shape[1],l=s?e.shape[1]:e.shape[2],[u,,]=t.shape,c=_t(t.dtype,e.dtype),h=null!=r,p=null!=i,d=a?Dk(a,!0):null,f=new _N(t.shape,[u,o,l],n,s,h,d,p),m=[t,e];return r&&m.push(r),i&&m.push(i),this.compileAndRun(f,m,c)}multiply(t,e){if("complex64"===t.dtype){const n=this.texData.get(t.dataId),s=this.texData.get(e.dataId),r=new Ev(Sv,t.shape,e.shape),a=new Ev(Iv,t.shape,e.shape),i=[this.makeComplexComponentTensorInfo(t,n.complexTensors.real),this.makeComplexComponentTensorInfo(t,n.complexTensors.imag),this.makeComplexComponentTensorInfo(e,s.complexTensors.real),this.makeComplexComponentTensorInfo(e,s.complexTensors.imag)],o=this.compileAndRun(r,i),l=this.compileAndRun(a,i),u=this.complex(o,l);return o.dispose(),l.dispose(),u}if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.multiply(t,e);if(a().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,$v,t.dtype);const n=new Dv($v,t.shape,e.shape);return this.compileAndRun(n,[t,e],t.dtype)}localResponseNormalization4D(t,e,n,s,r){const i=a().getBool("WEBGL_PACK_NORMALIZATION")?new $N(t.shape,e,n,s,r):new TN(t.shape,e,n,s,r);return this.compileAndRun(i,[t])}LRNGrad(t,e,n,s,r,a,i){const o=new AN(e.shape,s,r,a,i);return this.compileAndRun(o,[e,n,t])}tile(t,e){if("string"===t.dtype){const n=this.readSync(t.dataId).map(t=>ct(t)),s=Be(t.shape,t.dtype,n);return Tk(s,e)}const n=new ok(t.shape,e);return this.compileAndRun(n,[t])}pad(t,e,n){const s=a().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new zN(t.shape,e,n):new LN(t.shape,e,n);return this.compileAndRun(s,[t])}gather(t,e,n){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.gather(t,e,n);const s=new dN(t.shape,e.size,n);return this.compileAndRun(s,[t,e])}batchToSpaceND(t,e,n){I(t.rank<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");const s=e.reduce((t,e)=>t*e),r=zl(t.shape,e,s),a=Bl(r.length,e.length),i=Pl(t.shape,e,s),o=Wl(n,e.length),l=Vl(i,n,e.length);return ln(t.reshape(r),a).reshape(i).slice(o,l)}spaceToBatchND(t,e,n){I(t.rank<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");const s=e.reduce((t,e)=>t*e),r=[[0,0]];r.push(...n);for(let n=1+e.length;n<t.shape.length;++n)r.push([0,0]);const a=t.pad(r),i=zl(a.shape,e,s,!1),o=Bl(i.length,e.length,!1),l=Pl(a.shape,e,s,!1),u=ln(a.reshape(i),o);return rn(u,l)}reduce(t,e,n){const s=t.shape[0],r=t.shape[1],a=zr(r),i=Math.ceil(r/a),o=new WN({windowSize:a,inSize:r,batchSize:s,outSize:i},e),l=this.compileAndRun(o,[t],n);return 1===l.shape[1]?l:this.reduce(l,e,n)}argReduce(t,e,n=null){let s=t.shape[0],r=t.shape[1];null!=n&&(s=n.shape[0],r=n.shape[1]);const a=zr(r),i={windowSize:a,inSize:r,batchSize:s,outSize:Math.ceil(r/a)},o=new ev(i,e,null==n),l=[t];null!=n&&l.push(n);const u=this.compileAndRun(o,l,"int32");return 1===u.shape[1]?u:this.argReduce(t,e,u)}argReducePacked(t,e,n=null){const s=null!=n?n.shape:t.shape,r=zr(s[s.length-1]),a=new Nv(s,r,e,null==n),i=null==n?[t]:[t,n],o=this.compileAndRun(a,i,"int32");return o.rank===t.rank?this.argReducePacked(t,e,o):o}sum(t,e){ds("sum",e,t.rank);const[n,s]=hs(t.shape,e),r=$(s),a=t.as2D(-1,r),i=Ft(t.dtype);return this.reduce(a,"sum",i).reshape(n)}prod(t,e){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.prod(t,e);const[n,s]=hs(t.shape,e),r=$(s),a=t.as2D(-1,r),i=Ft(t.dtype);return this.reduce(a,"prod",i).reshape(n)}unsortedSegmentSum(t,e,n){let s=0;const r=fs([s],t.rank);let a=t;null!=r&&(a=ln(t,r),s=gs(1,t.rank)[0]);const i=Ik.computeOutShape(a.shape,s,n),o=$([a.shape[s]]),l=a.as2D(-1,o),u=Ft(t.dtype);let c=this.segOpCompute(l,"unsortedSegmentSum",e,u,n).reshape(i);return null!=r&&(c=ln(c,ms(r))),c}segOpCompute(t,e,n,s,r){const a=t.shape[0],i=t.shape[1],o=Ik.segOpComputeOptimalWindowSize(i,r),l=new JN({windowSize:o,inSize:i,batchSize:a,numSegments:r},e),u=this.compileAndRun(l,[t,n],s);return u.shape[1]===r?u:(n=li(0,r).tile([i/o]),this.segOpCompute(u,e,n,s,r))}argMinMaxReduce(t,e,n){const s=[e];if(ds("arg"+n.charAt(0).toUpperCase()+n.slice(1),s,t.rank),!a().getBool("WEBGL_PACK_REDUCE")||t.rank<=2){const[e,r]=hs(t.shape,s),a=$(r),i=t.as2D(-1,a);return this.argReduce(i,n).reshape(e)}return this.argReducePacked(t,n)}argMin(t,e){return this.argMinMaxReduce(t,e,"min")}argMax(t,e){return this.argMinMaxReduce(t,e,"max")}cumsum(t,e,n,s){if(e!==t.rank-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${t.rank-1} but got axis=`+e);const r=t.shape[e];let a=t;for(let e=0;e<=Math.ceil(Math.log2(r))-1;e++){const n=new Zv(t.shape,!1,s),r=n.getCustomSetupFunc(e),i=a;a=this.compileAndRun(n,[a],a.dtype,r),i.dispose()}if(n){const e=new Zv(t.shape,n,s),r=a;a=this.compileAndRun(e,[a]),r.dispose()}return a}equal(t,e){if(a().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(equal(a, b));\n","bool");const n=new Dv("return float(a == b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}notEqual(t,e){if(a().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(notEqual(a, b));\n","bool");const n=new Dv("return float(a != b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}less(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.less(t,e);if(a().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(lessThan(a, b));\n","bool");const n=new Dv("return float(a < b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}lessEqual(t,e){if(a().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(lessThanEqual(a, b));\n","bool");const n=new Dv("return float(a <= b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}greater(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.greater(t,e);if(a().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(greaterThan(a, b));\n","bool");const n=new Dv("return float(a > b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}greaterEqual(t,e){if(a().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(greaterThanEqual(a, b));\n","bool");const n=new Dv("return float(a >= b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}logicalNot(t){const e=new lk(t.shape,"return float(!(x >= 1.0));");return this.compileAndRun(e,[t])}logicalAnd(t,e){if(a().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n","bool");const n=new Dv("return float(a >= 1.0 && b >= 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}logicalOr(t,e){if(a().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n","bool");const n=new Dv("return float(a >= 1.0 || b >= 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")}select(t,e,n){const s=new ZN(t.rank,e.shape,e.rank);return this.compileAndRun(s,[t,e,n],_t(e.dtype,n.dtype))}where(t){Gl("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const e=t.dataSync();return $k(t.shape,e)}topk(t,e,n){const s=t.dataSync();return Ak(s,t.shape,t.dtype,e,n)}min(t,e){ds("min",e,t.rank);const[n,s]=hs(t.shape,e),r=$(s),a=t.as2D(-1,r);return this.reduce(a,"min",a.dtype).reshape(n)}minimum(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.minimum(t,e);const n=a().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Fv("\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Dv("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])}mod(t,e){const n=a().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Fv("\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Dv("if (b == 0.0) return NAN;\n  return mod(a, b);",t.shape,e.shape);return this.compileAndRun(n,[t,e])}maximum(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.maximum(t,e);const n=a().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Fv("\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Dv("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])}all(t,e){ds("all",e,t.rank);const[n,s]=hs(t.shape,e),r=$(s),a=t.as2D(-1,r);return this.reduce(a,"all",a.dtype).reshape(n)}any(t,e){ds("any",e,t.rank);const[n,s]=hs(t.shape,e),r=$(s),a=t.as2D(-1,r);return this.reduce(a,"any",a.dtype).reshape(n)}floorDiv(t,e){if(a().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n","int32");const n=new Dv("\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",t.shape,e.shape);return this.compileAndRun(n,[t,e],"int32")}add(t,e){if("complex64"===t.dtype&&"complex64"===e.dtype)return this.complexSeparableBinaryOp(t,e,Tv);if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.add(t,e);const n=_t(t.dtype,e.dtype);if(a().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,Tv,n);const s=new Dv(Tv,t.shape,e.shape);return this.compileAndRun(s,[t,e],n)}packedUnaryOp(t,e,n){const s=new Ck(t.shape,e);return this.compileAndRun(s,[t],n)}packedBinaryOp(t,e,n,s,r=!1){const a=new Fv(n,t.shape,e.shape,r);return this.compileAndRun(a,[t,e],s)}complexSeparableBinaryOp(t,e,n){const s=this.texData.get(t.dataId),r=this.texData.get(e.dataId),[a,i]=[[s.complexTensors.real,r.complexTensors.real],[s.complexTensors.imag,r.complexTensors.imag]].map(s=>{const[r,a]=s,i=this.makeComplexComponentTensorInfo(t,r),o=this.makeComplexComponentTensorInfo(e,a),l=new Dv(n,t.shape,e.shape);return this.compileAndRun(l,[i,o],_t(r.dtype,a.dtype))}),o=this.complex(a,i);return a.dispose(),i.dispose(),o}makeComplexComponentTensorInfo(t,e){return{dataId:e.dataId,dtype:e.dtype,shape:t.shape}}addN(t){if(1===t.length)return t[0];if(t.length>a().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const e=Math.floor(t.length/2),n=this.addN(t.slice(0,e)),s=this.addN(t.slice(e));return this.addN([n,s])}const e=t.map(t=>t.dtype).reduce((t,e)=>_t(t,e)),n=t.map(t=>t.shape),s=a().getBool("WEBGL_PACK")?new tv(t[0].shape,n):new Qw(t[0].shape,n);return this.compileAndRun(s,t,e)}subtract(t,e){if("complex64"===t.dtype&&"complex64"===e.dtype)return this.complexSeparableBinaryOp(t,e,Av);if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.subtract(t,e);const n=_t(t.dtype,e.dtype);if(a().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,Av,t.dtype);const s=new Dv(Av,t.shape,e.shape);return this.compileAndRun(s,[t,e],n)}pow(t,e){const n=a().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Fv("\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new Dv("\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",t.shape,e.shape),s=_t(t.dtype,e.dtype);return this.compileAndRun(n,[t,e],s)}ceil(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.ceil(t);if(a().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,gk,t.dtype);const e=new lk(t.shape,gk);return this.compileAndRun(e,[t])}floor(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.floor(t);if(a().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,yk,t.dtype);const e=new lk(t.shape,yk);return this.compileAndRun(e,[t])}sign(t){const e=new lk(t.shape,"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n");return this.compileAndRun(e,[t])}isNaN(t){const e=new lk(t.shape,"return float(isnan(x));");return this.compileAndRun(e,[t],"bool")}isInf(t){const e=new lk(t.shape,"return float(isinf(x));");return this.compileAndRun(e,[t],"bool")}isFinite(t){const e=new lk(t.shape,"return float(!isnan(x) && !isinf(x));");return this.compileAndRun(e,[t],"bool")}round(t){const e=new lk(t.shape,"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n");return this.compileAndRun(e,[t])}exp(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.exp(t);if(a().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,bk,t.dtype);const e=new lk(t.shape,bk);return this.compileAndRun(e,[t])}expm1(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.expm1(t);if(a().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,xk,t.dtype);const e=new lk(t.shape,xk);return this.compileAndRun(e,[t])}softmax(t,e){const n=L([e],t.shape),s=ua(t,n),r=ps(s.shape,n),a=this.subtract(t,s.reshape(r)),i=this.exp(a),o=this.sum(i,n).reshape(r);return ss(i,o)}log(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.log(t);if(a().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",t.dtype);const e=new lk(t.shape,"if (x < 0.0) return NAN;\n  return log(x);");return this.compileAndRun(e,[t])}log1p(t){const e=new lk(t.shape,"return log(1.0 + x);");return this.compileAndRun(e,[t])}sqrt(t){const e=new lk(t.shape,"return sqrt(x);");return this.compileAndRun(e,[t])}rsqrt(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.rsqrt(t);const e=new lk(t.shape,"return inversesqrt(x);");return this.compileAndRun(e,[t])}reciprocal(t){const e=new lk(t.shape,"return 1.0 / x;");return this.compileAndRun(e,[t])}relu(t){let e;return e=a().getBool("WEBGL_PACK")?new Ck(t.shape,vk):new lk(t.shape,hk),this.compileAndRun(e,[t])}relu6(t){let e;return e=a().getBool("WEBGL_PACK")?new Ck(t.shape,Nk):new lk(t.shape,pk),this.compileAndRun(e,[t])}prelu(t,e){const n=a().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Fv(_v,t.shape,e.shape):new Dv(Rv,t.shape,e.shape);return this.compileAndRun(n,[t,e])}elu(t){if(a().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,kk,t.dtype);const e=new lk(t.shape,dk);return this.compileAndRun(e,[t])}eluDer(t,e){const n=a().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Fv("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",t.shape,e.shape):new Dv("return (b >= 1.0) ? a : a * (b + 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e])}selu(t){const e=new lk(t.shape,fk);return this.compileAndRun(e,[t])}int(t){const e=new lk(t.shape,"return float(int(x));");return this.compileAndRun(e,[t],"int32")}clip(t,e,n){let s;s=a().getBool("WEBGL_PACK_CLIP")?new Mv(t.shape):new Ov(t.shape);const r=s.getCustomSetupFunc(e,n);return this.compileAndRun(s,[t],null,r)}abs(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.abs(t);if(a().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,ck,t.dtype);const e=new lk(t.shape,ck);return this.compileAndRun(e,[t])}complexAbs(t){const e=this.texData.get(t.dataId),n=new Lv(t.shape),s=[this.makeComplexComponentTensorInfo(t,e.complexTensors.real),this.makeComplexComponentTensorInfo(t,e.complexTensors.imag)];return this.compileAndRun(n,s)}sigmoid(t){const e=new lk(t.shape,"return 1.0 / (1.0 + exp(-1.0 * x));");return this.compileAndRun(e,[t])}softplus(t){const e=new lk(t.shape,"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n");return this.compileAndRun(e,[t])}asin(t){const e=new lk(t.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n");return this.compileAndRun(e,[t])}acos(t){const e=new lk(t.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n");return this.compileAndRun(e,[t])}atan(t){const e=new lk(t.shape,"if (isnan(x)) return x;\n  return atan(x);\n");return this.compileAndRun(e,[t])}sinh(t){const e=new lk(t.shape,"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])}cosh(t){const e=new lk(t.shape,"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])}tanh(t){const e=new lk(t.shape,"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n");return this.compileAndRun(e,[t])}asinh(t){const e=new lk(t.shape,"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));");return this.compileAndRun(e,[t])}acosh(t){const e=new lk(t.shape,"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));");return this.compileAndRun(e,[t])}atanh(t){const e=new lk(t.shape,"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;");return this.compileAndRun(e,[t])}erf(t){const e=new lk(t.shape,'\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = 0.3275911;\n  float a1 = 0.254829592;\n  float a2 = -0.284496736;\n  float a3 = 1.421413741;\n  float a4 = -1.453152027;\n  float a5 = 1.061405429;\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n');return this.compileAndRun(e,[t])}step(t,e){const n=new lk(t.shape,function(t=0){return`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t});\n  `}(e));return this.compileAndRun(n,[t])}conv2dByMatMul(t,e,n,s,r,i){const o=t.shape,l=this.texData.get(t.dataId),u=n.inChannels,c=o[0]*o[1]*o[2],h=n.outChannels,p="channelsLast"===n.dataFormat,d=(1===c||1===h)&&u>1e3,f=o[2]%2!=0&&!!l.isPacked;if(d||!a().getBool("WEBGL_LAZILY_UNPACK")||!a().getBool("WEBGL_PACK_BINARY_OPERATIONS")||!f){const a=p?o[0]*o[1]*o[2]:o[0]*o[2]*o[3],l=rn(t,[1,a,n.inChannels]),u=rn(e,[1,n.inChannels,n.outChannels]),c=this.fusedBatchMatMul({a:l,b:u,transposeA:!1,transposeB:!1,bias:s,activation:r,preluActivationWeights:i});return rn(c,n.outShape)}const m=p?o[0]*o[1]*(o[2]+1):o[0]*o[2]*(o[3]+1),g={dataId:t.dataId,shape:[1,m,n.inChannels],dtype:t.dtype},y=l.shape;l.shape=l.shape.slice(),l.shape[l.shape.length-2]++,I(Gw(l.shape,g.shape),()=>`packed reshape ${l.shape} to ${g.shape} isn't free`);const b=rn(e,[1,n.inChannels,n.outChannels]),x=this.fusedBatchMatMul({a:g,b:b,transposeA:!1,transposeB:!1,bias:s,activation:r,preluActivationWeights:i}),w=this.texData.get(x.dataId);return I(w.isPacked,()=>"batchMatMul result is expected to be packed"),l.shape=y,w.shape=n.outShape,qn().makeTensorFromDataId(x.dataId,n.outShape,x.dtype)}conv2dWithIm2Row(t,e,n,s,r,a){const{filterWidth:i,filterHeight:o,inChannels:l,outWidth:u,outHeight:c,dataFormat:h}=n,p="channelsLast"===h,d=i*o*l,f=c*u,m=[d,f],g=t.squeeze([0]),y=e.reshape([1,d,-1]),b=new EN(m,g.shape,n),x=this.compileAndRun(b,[g]).reshape([1,m[0],m[1]]),w=null!=s,v=null!=a,N=r?Dk(r,!0):null,k=new _N(x.shape,[1,f,n.outChannels],!0,!1,w,N,v),C=[x,y];s&&C.push(s),v&&C.push(a);const S=this.compileAndRun(k,C);return p?S.reshape([1,c,u,n.outChannels]):S.reshape([1,n.outChannels,c,u])}fusedConv2d({input:t,filter:e,convInfo:n,bias:s,activation:r,preluActivationWeights:i}){if(1===n.filterHeight&&1===n.filterWidth&&1===n.dilationHeight&&1===n.dilationWidth&&1===n.strideHeight&&1===n.strideWidth&&("SAME"===n.padInfo.type||"VALID"===n.padInfo.type))return this.conv2dByMatMul(t,e,n,s,r,i);if(a().getBool("WEBGL_CONV_IM2COL")&&1===t.shape[0])return this.conv2dWithIm2Row(t,e,n,s,r,i);const o=null!=s,l=null!=i,u=r?Dk(r,!1):null,c=new qv(n,o,u,l),h=[t,e];return s&&h.push(s),i&&h.push(i),this.compileAndRun(c,h)}conv2d(t,e,n){if(1===n.filterHeight&&1===n.filterWidth&&1===n.dilationHeight&&1===n.dilationWidth&&1===n.strideHeight&&1===n.strideWidth&&("SAME"===n.padInfo.type||"VALID"===n.padInfo.type))return this.conv2dByMatMul(t,e,n);if(a().getBool("WEBGL_CONV_IM2COL")&&1===t.shape[0])return this.conv2dWithIm2Row(t,e,n);const s=new qv(n);return this.compileAndRun(s,[t,e])}conv2dDerInput(t,e,n){const s=new Vv(n);return this.compileAndRun(s,[t,e])}conv2dDerFilter(t,e,n){const s=new Wv(n);return this.compileAndRun(s,[t,e])}fusedDepthwiseConv2D({input:t,filter:e,convInfo:n,bias:s,activation:r,preluActivationWeights:i}){const o=a().getBool("WEBGL_PACK_DEPTHWISECONV")&&n.strideWidth<=2&&n.outChannels/n.inChannels==1,l=r?Dk(r,o):null,u=[t,e],c=null!=s,h=null!=i;let p;return c&&u.push(s),h&&u.push(i),o?(p=new Yv(n,c,l,h),this.compileAndRun(p,u)):(p=new Xv(n,c,l,h),this.compileAndRun(p,u))}depthwiseConv2D(t,e,n){let s;return a().getBool("WEBGL_PACK_DEPTHWISECONV")&&n.strideWidth<=2&&n.outChannels/n.inChannels==1?(s=new Yv(n),this.compileAndRun(s,[t,e])):(s=new Xv(n),this.compileAndRun(s,[t,e]))}depthwiseConv2DDerInput(t,e,n){const s=new jv(n);return this.compileAndRun(s,[t,e])}depthwiseConv2DDerFilter(t,e,n){const s=new Hv(n);return this.compileAndRun(s,[t,e])}conv3d(t,e,n){const s=new Kv(n);return this.compileAndRun(s,[t,e])}conv3dDerInput(t,e,n){const s=new Gv(n);return this.compileAndRun(s,[t,e])}conv3dDerFilter(t,e,n){const s=new Uv(n);return this.compileAndRun(s,[t,e])}cast(t,e){return Ql(t,e,this)}unstack(t,e){const n=t.shape[e],s=new Array(t.rank-1);let r=0;for(let n=0;n<t.rank;n++)n!==e&&(s[r++]=t.shape[n]);const a=new Array(t.rank).fill(0),i=t.shape.slice();i[e]=1;const o=new Array(n);for(let n=0;n<o.length;n++)a[e]=n,o[n]=this.slice(t,a,i).reshape(s);return o}avgPool3d(t,e){const n=new PN(e,"avg",!1);return this.compileAndRun(n,[t],"float32")}avgPool3dBackprop(t,e,n){const s=new Cv(n);return this.compileAndRun(s,[t],e.dtype)}maxPool3d(t,e){const n=new PN(e,"max",!1);return this.compileAndRun(n,[t],"float32")}maxPool3dBackprop(t,e,n,s){const r=new PN(s,"max",!0),a=this.compileAndRun(r,[e]),i=new DN(s),o=this.compileAndRun(i,[t,a],e.dtype);return a.dispose(),o}resizeBilinear(t,e,n,s){const r=a().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new HN(t.shape,e,n,s):new GN(t.shape,e,n,s);return this.compileAndRun(r,[t],"float32")}resizeBilinearBackprop(t,e,n){const s=new UN(t,e,n);return this.compileAndRun(s,[t])}resizeNearestNeighbor(t,e,n,s){const r=new qN(t.shape,e,n,s);return this.compileAndRun(r,[t])}resizeNearestNeighborBackprop(t,e,n){const s=new jN(t,e,n);return this.compileAndRun(s,[t])}multinomial(t,e,n,s){const r=e?t:Ai(t),a=r.shape[0],i=r.shape[1],o=new FN(a,i,n),l=o.getCustomSetupFunc(s);return this.compileAndRun(o,[r],"int32",l)}oneHot(t,e,n,s){const r=new ON(t.size,e,n,s);return this.compileAndRun(r,[t])}diag(t){const e=new rN(t.size);return this.compileAndRun(e,[t])}cropAndResize(t,e,n,s,r,a){const i=new Jv(t.shape,e.shape,s,r,a);return this.compileAndRun(i,[t,e,n],"float32")}depthToSpace(t,e,n){I(e>1,()=>"blockSize should be > 1 for depthToSpace, but was: "+e);const s=t.shape[0],r="NHWC"===n?t.shape[1]:t.shape[2],a="NHWC"===n?t.shape[2]:t.shape[3],i="NHWC"===n?t.shape[3]:t.shape[1],o=r*e,l=a*e,u=i/(e*e),c=new sN("NHWC"===n?[s,o,l,u]:[s,u,o,l],e,n);return this.compileAndRun(c,[t])}split(t,e,n){return Ek(t,e,n)}scatterND(t,e,n){const{sliceRank:s,numUpdates:r,sliceSize:a,strides:i,outputSize:o}=xn(0,t,n),l=[o/a,a],u=t.reshape([r,s]),c=e.reshape([r,a]);if(0===o)return tu(ne([]),n);const h=Xr(0),p=new YN(r,s,u.rank,c.rank,i,l);return this.compileAndRun(p,[c,u,h]).reshape(n)}sparseToDense(t,e,n,s){const{sliceRank:r,numUpdates:a,strides:i,outputSize:o}=xn(0,t,n),l=new YN(a,r,t.rank,e.rank,i,[o,1],!1);return this.compileAndRun(l,[e,t,s]).reshape(n)}fft(t){return this.fftImpl(t,!1)}ifft(t){return this.fftImpl(t,!0)}fftImpl(t,e){const n=this.texData.get(t.dataId),s=new hN(uN,t.shape,e),r=new hN(cN,t.shape,e),a=[this.makeComplexComponentTensorInfo(t,n.complexTensors.real),this.makeComplexComponentTensorInfo(t,n.complexTensors.imag)],i=this.compileAndRun(s,a),o=this.compileAndRun(r,a),l=this.complex(i,o).as2D(t.shape[0],t.shape[1]);return i.dispose(),o.dispose(),l}gatherND(t,e){const n=e.shape,s=n[n.length-1],[r,a,i,o]=mn(t,e),l=e.reshape([a,s]),u=t.reshape([t.size/i,i]),c=new fN(s,o,[a,i]);return this.compileAndRun(c,[u,l]).reshape(r)}fill(t,e,n){if("string"===(n=n||Y(e))){const s=P(n,$(t));return s.fill(e),qn().makeTensor(s,t,n,this)}{const s=new pN(t,e),r=s.getCustomSetupFunc(e);return this.compileAndRun(s,[],n,r)}}onesLike(t){if("string"===t.dtype)throw new Error("onesLike is not supported under string dtype");return this.fill(t.shape,1,t.dtype)}zerosLike(t){return this.fill(t.shape,"string"===t.dtype?"":0,t.dtype)}linspace(t,e,n){return eu(t,e,n)}makeTensorInfo(t,e){const n=this.write(null,t,e);return this.texData.get(n).usage=null,{dataId:n,shape:t,dtype:e}}makeOutput(t,e){const{dataId:n}=this.makeTensorInfo(t,e);return qn().makeTensorFromDataId(n,t,e,this)}unpackTensor(t){const e=new Sk(t.shape);return this.runWebGLProgram(e,[t],t.dtype)}packTensor(t){const e=new MN(t.shape);return this.runWebGLProgram(e,[t],t.dtype,null,!0)}packedReshape(t,e){const n=[Pw(t.shape),...Ww(t.shape)],s={dtype:t.dtype,shape:n,dataId:t.dataId},r=[Pw(e),...Ww(e)],a=new VN(r,n),i=this.runWebGLProgram(a,[s],t.dtype,null,!0);return{dataId:i.dataId,shape:e,dtype:i.dtype}}decode(t){const e=this.texData.get(t),{isPacked:n,shape:s,dtype:r}=e,a=Vw(s);let i;i=n?new nN(a):new eN(a);return{dtype:r,shape:s,dataId:this.runWebGLProgram(i,[{shape:a,dtype:r,dataId:t}],r,null,!0).dataId}}runWebGLProgram(t,e,n,s,r=!1){const i=this.makeTensorInfo(t.outputShape,n),o=this.texData.get(i.dataId);if(t.packedOutput&&(o.isPacked=!0),t.outPackingScheme===ww.DENSE){const e=Cw(t.outputShape);o.texShape=e.map(t=>2*t)}if(null!=t.outTexUsage&&(o.usage=t.outTexUsage),0===$(i.shape))return o.values=B(i.dtype,0),i;const l=[],u=e.map(e=>{if("complex64"===e.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(e.dataId);if(null==n.texture){if(!t.packedInputs&&$(e.shape)<=a().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:e.shape,texData:null,isUniform:!0,uniformValues:n.values};t.packedInputs&&(n.isPacked=!0,n.shape=e.shape)}else if(!!n.isPacked!=!!t.packedInputs)e=n.isPacked?this.unpackTensor(e):this.packTensor(e),l.push(e),n=this.texData.get(e.dataId);else if(n.isPacked&&!Gw(n.shape,e.shape)){const t=e,s=e.shape;e.shape=n.shape,e=this.packedReshape(e,s),l.push(e),n=this.texData.get(e.dataId),t.shape=s}return this.uploadToGPU(e.dataId),{shape:e.shape,texData:n,isUniform:!1}});this.uploadToGPU(i.dataId);const c={shape:i.shape,texData:o,isUniform:!1},h=function(t,e,n){let s="";e.concat(n).forEach(t=>{const e=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0,n=t.isUniform?"uniform":t.texData.texShape;s+=`${t.shape}_${n}_${e}`});const r=t.userCode;let a=t.constructor.name;return a+="_"+s+"_"+r,a}(t,u,c),p=this.getAndSaveBinary(h,()=>function(t,e,n,s){const r=e.userCode,i=n.map((t,n)=>{const s={logicalShape:t.shape,texShape:t.isUniform?null:t.texData.texShape,isUniform:t.isUniform,isPacked:!t.isUniform&&t.texData.isPacked,flatOffset:null};return null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0&&(s.flatOffset=t.texData.slice.flatOffset),{name:e.variableNames[n],shapeInfo:s}}),o=i.map(t=>t.shapeInfo),l={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},u=uv(i,l,r,e.packedInputs),c=t.createProgram(u);let h=null;const p=t.getUniformLocation(c,"NAN",!1);1===a().getNumber("WEBGL_VERSION")&&(h=t.getUniformLocation(c,"INFINITY",!1));const d={};for(let n=0;n<e.variableNames.length;n++){const s=e.variableNames[n],r=!1;d[s]=t.getUniformLocation(c,s,r),d["offset"+s]=t.getUniformLocation(c,"offset"+s,r)}return{program:e,source:u,webGLProgram:c,uniformLocations:d,inShapeInfos:o,outShapeInfo:l,infLoc:h,nanLoc:p}}(this.gpgpu,t,u,c)),d=null!=this.activeTimers;let f;if(d&&(f=this.startTimer()),function(t,e,n,s,r){IN(e.inShapeInfos,n),IN([e.outShapeInfo],[s]);const i=s.texData.texture,o=s.texData.texShape;s.texData.isPacked?t.setOutputPackedMatrixTexture(i,o[0],o[1]):t.setOutputMatrixTexture(i,o[0],o[1]),t.setProgram(e.webGLProgram),1===a().getNumber("WEBGL_VERSION")&&null!==e.infLoc&&t.gl.uniform1f(e.infLoc,1/0),null!==e.nanLoc&&t.gl.uniform1f(e.nanLoc,NaN),n.forEach((n,s)=>{const r=e.program.variableNames[s],a=e.uniformLocations[r],i=e.uniformLocations["offset"+r];if(null!=a)if(n.isUniform)if($(n.shape)<2)t.gl.uniform1f(a,n.uniformValues[0]);else{let e=n.uniformValues;e instanceof Float32Array||(e=new Float32Array(e)),t.gl.uniform1fv(a,e)}else null!=n.texData.slice&&null!=i&&t.gl.uniform1i(i,n.texData.slice.flatOffset),t.setInputMatrixTexture(n.texData.texture,a,s)}),null!=r&&r(t,e.webGLProgram),t.executeProgram()}(this.gpgpu,p,u,c,s),l.forEach(t=>this.disposeIntermediateTensorInfo(t)),d&&(f=this.endTimer(f),this.activeTimers.push({name:t.constructor.name,query:this.getQueryTime(f)})),!a().getBool("WEBGL_LAZILY_UNPACK")&&o.isPacked&&!1===r){const t=this.unpackTensor(i);return this.disposeIntermediateTensorInfo(i),t}return i}compileAndRun(t,e,n,s,r=!1){n=n||e[0].dtype;const a=this.runWebGLProgram(t,e,n,s,r);return qn().makeTensorFromDataId(a.dataId,a.shape,a.dtype)}getAndSaveBinary(t,e){return t in this.binaryCache||(this.binaryCache[t]=e()),this.binaryCache[t]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!a().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach(t=>{this.gpgpu.deleteProgram(this.binaryCache[t].webGLProgram),delete this.binaryCache[t]})}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=Xn(()=>{if(!a().get("WEBGL_RENDER_FLOAT32_ENABLED")){const t=a().getBool("DEBUG");a().set("DEBUG",!1);const e=this.abs(Xr(1e-8)).dataSync()[0];if(a().set("DEBUG",t),e>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(t){const e=this.texData.get(t),{shape:n,dtype:s,values:r,texture:i,usage:o,isPacked:l}=e;if(null!=i)return;const u=null!=this.activeTimers;let c;u&&(c=it());let h=e.texShape;if(null==h&&(h=function(t,e=!1){let n=a().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e&&(n*=2,1===(t=t.map((e,n)=>n>=t.length-2?C(t[n]):t[n])).length&&(t=[2,t[0]])),2!==t.length){const e=z(t);t=e.newShape}let s=$(t);if(t.length<=1&&s<=n)return[1,s];if(2===t.length&&t[0]<=n&&t[1]<=n)return t;if(3===t.length&&t[0]*t[1]<=n&&t[2]<=n)return[t[0]*t[1],t[2]];if(3===t.length&&t[0]<=n&&t[1]*t[2]<=n)return[t[0],t[1]*t[2]];if(4===t.length&&t[0]*t[1]*t[2]<=n&&t[3]<=n)return[t[0]*t[1]*t[2],t[3]];if(4===t.length&&t[0]<=n&&t[1]*t[2]*t[3]<=n)return[t[0],t[1]*t[2]*t[3]];if(e){const e=Pw(t);let n=2,r=2;return t.length&&([n,r]=Ww(t)),s=e*(n/2)*(r/2),_(s).map(t=>2*t)}return _(s)}(n,l),e.texShape=h),null!=r){const t=Vw(n);let a,i=h[1],o=h[0];const p=r instanceof Uint8Array;l?([i,o]=Sw(h[0],h[1]),a=new lN(t,[o,i],p)):a=new oN(t,[o,i],p);const d=this.makeTensorInfo([o,i],s);this.texData.get(d.dataId).usage=p?vw.PIXELS:vw.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(d.dataId),i,o,r);const f=!0,m=this.runWebGLProgram(a,[d],s,null,f),g=this.texData.get(m.dataId);e.texture=g.texture,e.texShape=g.texShape,e.isPacked=g.isPacked,e.usage=g.usage,this.disposeIntermediateTensorInfo(d),this.texData.delete(m.dataId),e.values=null,u&&(this.uploadWaitMs+=it()-c)}else{const t=this.acquireTexture(h,o,s,l);e.texture=t}}convertAndCacheOnCPU(t,e){const n=this.texData.get(t),{dtype:s}=n;return this.releaseGPUData(t),null!=e&&(n.values=function(t,e){if("float32"===e||"complex64"===e)return t;if("int32"===e||"bool"===e){const n="int32"===e?new Int32Array(t.length):new Uint8Array(t.length);for(let e=0;e<n.length;++e)n[e]=Math.round(t[e]);return n}throw new Error("Unknown dtype "+e)}(e,s)),n.values}acquireTexture(t,e,n,s){if(this.numBytesInGPU+=this.computeBytes(t,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const t=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${t} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(t,e,s)}computeBytes(t,e){return t[0]*t[1]*H(e)}}jt()&&Qn("webgl",()=>new _k,2);function Fk(t){return({inputs:e,backend:n})=>{const{x:s}=e,r=n,a=new lk(s.shape,t);return r.runWebGLProgram(a,[s],s.dtype)}}function Ok(t,e,n,s){return({inputs:r,backend:i})=>{const{a:o,b:l}=r,u=i,c=a().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Fv(e,o.shape,l.shape,!!n):new Dv(t,o.shape,l.shape),h=s||o.dtype;return u.runWebGLProgram(c,[o,l],h)}}const Mk={kernelName:"Atan2",backendName:"webgl",kernelFunc:Ok("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n","\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n")};function Lk(t){const{inputs:e,backend:n}=t,{x:s}=e;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const zk={kernelName:"Identity",backendName:"webgl",kernelFunc:Lk};const Bk={kernelName:"AvgPool",backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t,{x:r}=e;Jw(r,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;I(Ls(i,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`);const u=Es(r.shape,a,i,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&R(u.inShape,u.outShape))return Lk({inputs:{x:r},backend:n});const c=new BN(u,"avg",!1);return n.runWebGLProgram(c,[r],"float32")}};const Pk={kernelName:"AvgPoolBackprop",backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t,{dy:r,input:a}=e,i=a;Jw([r,a],"avgPoolBackprop");const{filterSize:o,strides:l,pad:u}=s,c=Es(i.shape,o,l,1,u),h=new kv(c);return n.runWebGLProgram(h,[r],i.dtype)}};class Wk{constructor(t,e,n,s,r,a){this.outputShape=[],this.variableNames=["x","mean","variance"],kr(t,e),kr(t,n);let i="0.0";null!=s&&(kr(t,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="1.0";null!=r&&(kr(t,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class Vk{constructor(t,e,n,s,r,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],kr(t,e),kr(t,n);let i="vec4(0.0)";null!=s&&(kr(t,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=r&&(kr(t,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const Uk={kernelName:"FusedBatchNorm",backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:s,mean:r,variance:i,offset:o,scale:l}=t;I(r.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),I(null==o||r.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),I(null==l||r.shape.length===l.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:u}=n;null==u&&(u=.001);const c=[s,r,i];let h=null;null!=o&&(h=o.shape,c.push(o));let p=null;null!=l&&(p=l.shape,c.push(l));const d=a().getBool("WEBGL_PACK_NORMALIZATION")?new Vk(s.shape,r.shape,i.shape,h,p,u):new Wk(s.shape,r.shape,i.shape,h,p,u);return e.runWebGLProgram(d,c,c[0].dtype)}},Gk=Fk("if (isnan(x)) return x;\n  return cos(x);\n"),Hk={kernelName:c,backendName:"webgl",kernelFunc:Gk},jk=Ok("\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;","\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",!0),qk={kernelName:h,backendName:"webgl",kernelFunc:jk};class Kk{constructor(t){this.variableNames=["Image"],this.outputShape=[];const e=t[2];this.outputShape=t,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${e} - x;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${e}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const Xk={kernelName:"FlipLeftRight",backendName:"webgl",kernelFunc:({inputs:t,backend:e})=>{const{image:n}=t,s=e,r=new Kk(n.shape);return s.runWebGLProgram(r,[n],n.dtype)}};class Yk{constructor(t){this.variableNames=["A"];const e=rv(),[n,s]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}.0, ${n}.0);\n\n        vec4 values = ${e.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class Jk{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const e=rv(),[n,s]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${s}.0, ${n}.0);\n            vec4 values = ${e.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${e.output} = result;\n      }\n    `}}const Zk={kernelName:"FromPixels",backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t;let{pixels:r}=e;const{numChannels:i}=s,o="undefined"!=typeof HTMLVideoElement&&r instanceof HTMLVideoElement,l="undefined"!=typeof HTMLImageElement&&r instanceof HTMLImageElement,[u,c]=o?[r.videoWidth,r.videoHeight]:[r.width,r.height],h=[c,u],p=[c,u,i];(l||o)&&(null==Qk&&(Qk=document.createElement("canvas").getContext("2d")),Qk.canvas.width=u,Qk.canvas.height=c,Qk.drawImage(r,0,0,u,c),r=Qk.canvas);const d=n.makeTensorInfo(h,"int32");n.texData.get(d.dataId).usage=vw.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(d.dataId),r);const f=a().getBool("WEBGL_PACK")?new Jk(p):new Yk(p),m=n.runWebGLProgram(f,[d],"int32");return n.disposeData(d.dataId),m}};let Qk;const{maxImpl:tC,transposeImpl:eC}=Tb;function nC(t,e,n,s){const r=function(t){const e=[];for(;0===e.length||1!==e[e.length-1].outSize;){const n=e.length?e[e.length-1].outSize:t[1],s=zr(n);e.push({inSize:n,windowSize:s,outSize:Math.ceil(n/s)})}return e}(t.shape);let a=t;for(let i=0;i<r.length;i++){const{inSize:o,windowSize:l,outSize:u}=r[i],c=new WN({windowSize:l,inSize:o,batchSize:t.shape[0],outSize:u},n),h=a;a=s.runWebGLProgram(c,[a],e),h.dataId!==t.dataId&&s.disposeData(h.dataId)}return a}function sC(t){const{inputs:e,backend:n,attrs:s}=t,{x:r}=e,{shape:a}=s,i=n,o=$(r.shape),l=M(a,o),u=$(l);I(o===u,()=>`The new shape (${l}) has ${u} elements and the old shape (${r.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`);const c=i.texData.get(r.dataId);return!c.isPacked||Gw(r.shape,l)||null!==c.texture&&Gw(c.shape,l)?(i.incRef(r.dataId),{dataId:r.dataId,shape:l,dtype:r.dtype}):function(t,e,n){const s=[Pw(t.shape),...Ww(t.shape)],r={dtype:t.dtype,shape:s,dataId:t.dataId},a=[Pw(e),...Ww(e)],i=new VN(a,s),o=n.runWebGLProgram(i,[r],t.dtype,null,!0);return{dataId:o.dataId,shape:e,dtype:o.dtype}}(r,l,i)}const rC={kernelName:"Reshape",backendName:"webgl",kernelFunc:sC};class aC{constructor(t,e){this.variableNames=["A"];const n=new Array(t.length);for(let s=0;s<n.length;s++)n[s]=t[e[s]];this.outputShape=n,this.rank=n.length;const s=xv(this.rank),r=function(t){const e=t.length;if(e>6)throw Error(`Transpose for rank ${e} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],s=new Array(e);for(let e=0;e<t.length;e++)s[t[e]]=n[e];return s.join()}(e);this.userCode=`\n    void main() {\n      ${s} resRC = getOutputCoords();\n      setOutput(getA(${r}));\n    }\n    `}}class iC{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(t.length);for(let s=0;s<n.length;s++)n[s]=t[e[s]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const s=xv(this.rank),r=nv("rc",this.rank),a=new Array(this.rank);for(let t=0;t<e.length;t++)a[e[t]]=r[t];const i=`vec2(${a.slice(-2).join()})`,o=`++${r[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${s} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${o}) {\n        result[1] = ${l};\n      }\n      --${r[this.rank-1]};\n      if(++${r[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${l};\n        if(${o}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function oC(t,e,n){const s=a().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new iC(t.shape,e):new aC(t.shape,e);return n.runWebGLProgram(s,[t],t.dtype)}const lC={kernelName:"Max",backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:s}=t,{reductionIndices:r,keepDims:a}=e,i=n,o=s.shape.length,l=L(r,s.shape);let u=l;const c=fs(u,o),h=null!=c,p=i.shouldExecuteOnCPU([s]);let d=s;if(h){if(p){const t=i.texData.get(d.dataId).values,e=new Array(o);for(let t=0;t<e.length;t++)e[t]=s.shape[c[t]];const n=eC(t,s.shape,s.dtype,c,e);d=i.makeTensorInfo(e,s.dtype),i.texData.get(d.dataId).values=n}else d=oC(s,c,i);u=gs(u.length,o)}ds("max",u,o);const[f,m]=hs(d.shape,u);let g,y=f;if(a&&(y=ps(f,l)),p){const t=i.texData.get(d.dataId).values,e=tC(t,$(m),y,s.dtype);g=i.makeTensorInfo(y,s.dtype),i.texData.get(g.dataId).values=e}else g=function(t,e,n,s){const r=$(e),a=sC({inputs:{x:t},attrs:{shape:[$(t.shape)/r,r]},backend:s}),i=nC(a,t.dtype,"max",s),o=sC({inputs:{x:i},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}(d,m,y,i);return h&&i.disposeIntermediateTensorInfo(d),g}};const uC={kernelName:"MaxPool",backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t,{x:r}=e;Jw(r,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;I(Ls(i,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`);const u=Es(r.shape,a,i,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&R(u.inShape,u.outShape))return Lk({inputs:{x:r},backend:n});const c=new BN(u,"max",!1);return n.runWebGLProgram(c,[r],r.dtype)}};const cC={kernelName:"MaxPoolBackprop",backendName:"webgl",kernelFunc:function(t){const{inputs:e,backend:n,attrs:s}=t,{dy:r,input:a,output:i}=e,o=a;Jw([a,i],"maxPoolBackprop");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,p=Es(o.shape,l,u,1,c,h),d=new BN(p,"max",!0),f=n.runWebGLProgram(d,[o],o.dtype),m=new RN(p),g=n.runWebGLProgram(m,[r,f],o.dtype);return n.disposeIntermediateTensorInfo(f),g}};const hC={kernelName:"MaxPoolWithArgmax",backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:s}=t,{filterSize:r,strides:a,pad:i,includeBatchInIndex:o}=e,l=n;I(4===s.shape.length,()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`);const u=[1,1];I(Ls(a,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`);const c=Es(s.shape,r,a,u,i),[h,p]=function(t,e,n,s){let r=new BN(n,"max",!1);const a=s.runWebGLProgram(r,[t],"float32");return r=new BN(n,"max",!0,!0,e),[a,s.runWebGLProgram(r,[t],"float32")]}(s,o,c,l);return[h,p]}},pC={kernelName:"NonMaxSuppressionV3",backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{Gl("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:s,scores:r}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=n,l=e;return jo(l.readSync(s.dataId),l.readSync(r.dataId),a,i,o)}},dC=qo,fC={kernelName:"NonMaxSuppressionV4",backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{Gl("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:s,scores:r}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,padToMaxOutputSize:l}=n,u=e,c=u.readSync(s.dataId),h=u.readSync(r.dataId),{selectedIndices:p,validOutputs:d}=dC(c,h,a,i,o,l);return[p,d]}},mC=Ko,gC={kernelName:"NonMaxSuppressionV5",backendName:"webgl",kernelFunc:({inputs:t,backend:e,attrs:n})=>{Gl("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{boxes:s,scores:r}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:l}=n,u=e,c=u.readSync(s.dataId),h=u.readSync(r.dataId),p=a,d=i,f=o,m=l,{selectedIndices:g,selectedScores:y}=mC(c,h,p,d,f,m);return[g,y]}};class yC{constructor(t,e,n,s){this.variableNames=["Image"],this.outputShape=[];const r=t[1],a=t[2],i=Math.sin(e).toFixed(3),o=Math.cos(e).toFixed(3);this.outputShape=t;const[l,u]=Ll(s,r,a),c=l.toFixed(3),h=u.toFixed(3);let p="";p="number"==typeof n?`float outputValue = ${n.toFixed(2)};`:`\n        vec3 fill = vec3(${n.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - ${c}) * ${o} - (float(y) - ${h}) * ${i};\n          float coordYFloat = (float(x) - ${c}) * ${i} + (float(y) - ${h}) * ${o};\n          int coordX = int(round(coordXFloat + ${c}));\n          int coordY = int(round(coordYFloat + ${h}));\n          ${p}\n          if(coordX >= 0 && coordX < ${a} && coordY >= 0 && coordY < ${r}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const bC={kernelName:"RotateWithOffset",backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{image:s}=t,{radians:r,fillValue:a,center:i}=e,o=n,l=new yC(s.shape,r,a,i);return o.runWebGLProgram(l,[s],s.dtype)}},xC=Fk("if (isnan(x)) return x;\n  return sin(x);\n"),wC={kernelName:p,backendName:"webgl",kernelFunc:xC},vC={kernelName:"Square",backendName:"webgl",kernelFunc:Fk("return x * x;")},NC={kernelName:"SquaredDifference",backendName:"webgl",kernelFunc:Ok("return (a - b) * (a - b);","return (a - b) * (a - b);")},kC=Fk("return tan(x);"),CC=[Mk,Bk,Pk,Uk,Hk,qk,Xk,Zk,zk,lC,uC,cC,hC,pC,fC,gC,rC,bC,wC,vC,NC,{kernelName:d,backendName:"webgl",kernelFunc:kC},{kernelName:"Transpose",backendName:"webgl",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:s}=t,{perm:r}=e,a=n,i=s.shape.length,o=new Array(i);for(let t=0;t<o.length;t++)o[t]=s.shape[r[t]];let l;if(a.shouldExecuteOnCPU([s])){const t=a.texData.get(s.dataId).values,e=eC(t,s.shape,s.dtype,r,o);l=a.makeTensorInfo(o,s.dtype),a.texData.get(l.dataId).values=e}else l=oC(s,r,a);return l}}];for(const t of CC)x(t);const SC={"tfjs-core":"2.5.0","tfjs-backend-cpu":"2.5.0","tfjs-backend-webgl":"2.5.0","tfjs-data":"2.5.0","tfjs-layers":"2.5.0","tfjs-converter":"2.5.0",tfjs:"2.5.0"};t.Abs="Abs",t.Acos="Acos",t.Acosh="Acosh",t.AdadeltaOptimizer=Il,t.AdagradOptimizer=El,t.AdamOptimizer=Tl,t.AdamaxOptimizer=Al,t.Add=u,t.AddN="AddN",t.All="All",t.Any="Any",t.ArgMax="ArgMax",t.ArgMin="ArgMin",t.Asin="Asin",t.Asinh="Asinh",t.Atan="Atan",t.Atan2="Atan2",t.Atanh="Atanh",t.AvgPool="AvgPool",t.AvgPool3D="AvgPool3D",t.AvgPool3DBackprop="AvgPool3DBackprop",t.AvgPoolBackprop="AvgPoolBackprop",t.BatchMatMul="BatchMatMul",t.BatchToSpaceND="BatchToSpaceND",t.BroadcastTo="BroadcastTo",t.Callback=lg,t.CallbackList=Sp,t.Cast="Cast",t.Ceil="Ceil",t.ClipByValue="ClipByValue",t.Complex="Complex",t.Concat="Concat",t.Conv2D="Conv2D",t.Conv2DBackpropFilter="Conv2DBackpropFilter",t.Conv2DBackpropInput="Conv2DBackpropInput",t.Conv3D="Conv3D",t.Conv3DBackpropFilterV2="Conv3DBackpropFilterV2",t.Conv3DBackpropInputV2="Conv3DBackpropInputV2",t.Cos=c,t.Cosh="Cosh",t.CropAndResize="CropAndResize",t.Cumsum="Cumsum",t.CustomCallback=Tp,t.DataStorage=e,t.DepthToSpace="DepthToSpace",t.DepthwiseConv2dNative="DepthwiseConv2dNative",t.DepthwiseConv2dNativeBackpropFilter="DepthwiseConv2dNativeBackpropFilter",t.DepthwiseConv2dNativeBackpropInput="DepthwiseConv2dNativeBackpropInput",t.Diag="Diag",t.Dilation2D="Dilation2D",t.Dilation2DBackpropFilter="Dilation2DBackpropFilter",t.Dilation2DBackpropInput="Dilation2DBackpropInput",t.Div=h,t.EarlyStopping=hg,t.Elu="Elu",t.EluGrad="EluGrad",t.Environment=r,t.Equal="Equal",t.Erf="Erf",t.Exp="Exp",t.Expm1="Expm1",t.FFT="FFT",t.Fill="Fill",t.FlipLeftRight="FlipLeftRight",t.Floor="Floor",t.FloorDiv="FloorDiv",t.FromPixels="FromPixels",t.FusedBatchNorm="FusedBatchNorm",t.FusedConv2D="FusedConv2D",t.FusedDepthwiseConv2D="FusedDepthwiseConv2D",t.GatherNd="GatherNd",t.GatherV2="GatherV2",t.GraphModel=gy,t.Greater="Greater",t.GreaterEqual="GreaterEqual",t.History=Ep,t.IFFT="IFFT",t.Identity="Identity",t.Imag="Imag",t.InputSpec=dp,t.IsFinite="IsFinite",t.IsInf="IsInf",t.IsNan="IsNan",t.KernelBackend=n,t.LRN="LRN",t.LRNBackprop="LRNBackprop",t.LayerVariable=cp,t.LayersModel=Ld,t.Less="Less",t.LessEqual="LessEqual",t.LinSpace="LinSpace",t.Log="Log",t.Log1p="Log1p",t.LogSoftmax="LogSoftmax",t.LogicalAnd="LogicalAnd",t.LogicalNot="LogicalNot",t.LogicalOr="LogicalOr",t.Max="Max",t.MaxPool="MaxPool",t.MaxPool3D="MaxPool3D",t.MaxPool3DBackprop="MaxPool3DBackprop",t.MaxPoolBackprop="MaxPoolBackprop",t.MaxPoolWithArgmax="MaxPoolWithArgmax",t.Maximum="Maximum",t.Mean="Mean",t.Min="Min",t.Minimum="Minimum",t.Mod="Mod",t.MomentumOptimizer=Rl,t.Multiply="Multiply",t.Negate="Negate",t.NonMaxSuppressionV3="NonMaxSuppressionV3",t.NonMaxSuppressionV4="NonMaxSuppressionV4",t.NonMaxSuppressionV5="NonMaxSuppressionV5",t.NotEqual="NotEqual",t.OP_SCOPE_SUFFIX="__op",t.OneHot="OneHot",t.OnesLike="OnesLike",t.Optimizer=Sl,t.PadV2="PadV2",t.Pool="Pool",t.Pow="Pow",t.Prelu="Prelu",t.Prod="Prod",t.RMSPropOptimizer=Dl,t.RNN=Pf,t.Range="Range",t.Real="Real",t.Reciprocal="Reciprocal",t.Relu="Relu",t.Relu6="Relu6",t.Reshape="Reshape",t.ResizeBilinear="ResizeBilinear",t.ResizeBilinearGrad="ResizeBilinearGrad",t.ResizeNearestNeighbor="ResizeNearestNeighbor",t.ResizeNearestNeighborGrad="ResizeNearestNeighborGrad",t.Reverse="Reverse",t.RotateWithOffset="RotateWithOffset",t.Round="Round",t.Rsqrt="Rsqrt",t.SGDOptimizer=$l,t.ScatterNd="ScatterNd",t.SelectV2="SelectV2",t.Selu="Selu",t.Sequential=Pd,t.Sigmoid="Sigmoid",t.Sign="Sign",t.Sin=p,t.Sinh="Sinh",t.Slice="Slice",t.Softmax="Softmax",t.Softplus="Softplus",t.SpaceToBatchND="SpaceToBatchND",t.SparseToDense="SparseToDense",t.SplitV="SplitV",t.Sqrt="Sqrt",t.Square="Square",t.SquaredDifference="SquaredDifference",t.Step="Step",t.StridedSlice="StridedSlice",t.Sub="Sub",t.Sum="Sum",t.SymbolicTensor=fp,t.Tan=d,t.Tanh="Tanh",t.Tensor=St,t.TensorBuffer=vt,t.Tile="Tile",t.TopK="TopK",t.Transpose="Transpose",t.Unpack="Unpack",t.UnsortedSegmentSum="UnsortedSegmentSum",t.Variable=It,t.ZerosLike="ZerosLike",t._FusedMatMul="_FusedMatMul",t.abs=as,t.acos=is,t.acosh=os,t.add=es,t.addN=ls,t.addStrict=ao,t.all=ys,t.any=bs,t.argMax=xs,t.argMin=ws,t.asin=vs,t.asinh=Ns,t.atan=ks,t.atan2=Cs,t.atanh=Ss,t.avgPool=Bs,t.avgPool3d=Ps,t.backend=ts,t.backend_util=nu,t.basicLSTMCell=qs,t.batchNorm=Ys,t.batchNorm2d=Js,t.batchNorm3d=Zs,t.batchNorm4d=Qs,t.batchToSpaceND=Ks,t.booleanMaskAsync=Zi,t.broadcastTo=tr,t.browser=fn,t.buffer=Be,t.callbacks=pg,t.cast=Pe,t.ceil=er,t.clipByValue=nr,t.clone=We,t.complex=te,t.concat=Us,t.concat1d=sr,t.concat2d=rr,t.concat3d=ar,t.concat4d=ir,t.constraints=Yc,t.conv1d=lr,t.conv2d=or,t.conv2dTranspose=cr,t.conv3d=hr,t.conv3dTranspose=dr,t.copyRegisteredKernels=function(t,e){b(t).forEach(t=>{x(Object.assign({},t,{backendName:e}))})},t.cos=fr,t.cosh=mr,t.cosineWindow=No,t.cumsum=gr,t.customGrad=ra,t.data=yb,t.deprecationWarn=jn,t.depthToSpace=yr,t.depthwiseConv2d=br,t.deregisterOp=function(t){delete mg[t]},t.device_util=qt,t.diag=xr,t.dilation2d=wr,t.disableDeprecationWarnings=function(){a().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")},t.dispose=Yn,t.disposeVariables=function(){Ut.disposeVariables()},t.div=ss,t.divNoNan=Er,t.divStrict=io,t.dot=Tr,t.dropout=wo,t.elu=Ar,t.enableDebugMode=function(){a().set("DEBUG",!0)},t.enableProdMode=function(){a().set("PROD",!0)},t.enclosingPowerOfTwo=vo,t.engine=qn,t.env=a,t.equal=Cr,t.equalStrict=Qi,t.erf=$r,t.exp=Rr,t.expandDims=Dr,t.expm1=_r,t.eye=Or,t.fft=$i,t.fill=Mr,t.findBackend=function(t){return Ut.findBackend(t)},t.findBackendFactory=function(t){return Ut.findBackendFactory(t)},t.floor=Lr,t.floorDiv=ns,t.fused=Fo,t.gather=Wr,t.gatherND=xo,t.gather_util=gn,t.getBackend=function(){return Ut.backendName},t.getGradient=y,t.getKernel=g,t.getKernelsForBackend=b,t.grad=function(t){return I(J(t),()=>"The f passed in grad(f) must be a function"),(e,n)=>{const s=Jt(e,"x","tf.grad",null),r=null!=n?Jt(n,"dy","tf.grad"):null;return Ut.tidy(()=>{const{value:e,grads:n}=Ut.gradients(()=>t(s),[s],r);return null!=r&&E(e.shape,r.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),aa(n),n[0]})}},t.grads=function(t){return I(J(t),()=>"The f passed in grads(f) must be a function"),(e,n)=>{I(Array.isArray(e),()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s");const s=Zt(e,"args","tf.grads",null),r=null!=n?Jt(n,"dy","tf.grads"):null;return Ut.tidy(()=>{const{value:e,grads:n}=Ut.gradients(()=>t(...s),s,r);return null!=r&&E(e.shape,r.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),aa(n),n})}},t.greater=Vr,t.greaterEqual=Ur,t.greaterEqualStrict=to,t.greaterStrict=eo,t.ifft=Ri,t.imag=Gr,t.image=Nl,t.inTopKAsync=ko,t.initializers=tp,t.input=Wd,t.io=sn,t.irfft=Di,t.isFinite=Hr,t.isInf=jr,t.isNaN=qr,t.keep=Jn,t.kernel_impls=iu,t.layers=rg,t.leakyRelu=Yr,t.less=Jr,t.lessEqual=Zr,t.lessEqualStrict=no,t.lessStrict=so,t.linalg=kl,t.linspace=Qr,t.loadGraphModel=async function(t,e={}){if(null==t)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==e&&(e={}),e.fromTFHub&&null==t.load&&(t.endsWith("/")||(t+="/"),t+="model.json?tfjs-format=file");const n=new gy(t,e);return await n.load(),n},t.loadLayersModel=function(t,e){return null==e&&(e={}),Bd(t,e)},t.localResponseNormalization=ta,t.log=ea,t.log1p=na,t.logSigmoid=la,t.logSoftmax=pa,t.logSumExp=da,t.logicalAnd=fa,t.logicalNot=ma,t.logicalOr=ga,t.logicalXor=ya,t.losses=Cl,t.matMul=an,t.math=cn,t.max=ua,t.maxPool=ba,t.maxPool3d=xa,t.maxPoolWithArgmax=wa,t.maximum=Kr,t.maximumStrict=oo,t.mean=ka,t.memory=Kn,t.metrics=ag,t.min=Ca,t.minimum=Sa,t.minimumStrict=lo,t.mod=Ia,t.modStrict=uo,t.model=function(t){return new Ld(t)},t.models=ig,t.moments=Ta,t.movingAverage=go,t.mul=rs,t.mulStrict=co,t.multiRNNCell=Aa,t.multinomial=$a,t.neg=ia,t.nextFrame=Ml,t.norm=mo,t.notEqual=Ra,t.notEqualStrict=ro,t.oneHot=on,t.ones=Na,t.onesLike=_a,t.op=Qt,t.outerProduct=Fa,t.pad=Oa,t.pad1d=Ma,t.pad2d=La,t.pad3d=za,t.pad4d=Ba,t.pool=Wa,t.pow=Va,t.powStrict=ho,t.prelu=Ua,t.print=Ve,t.prod=Ga,t.profile=function(t){return Ut.profile(t)},t.rand=Ha,t.randomGamma=ri,t.randomNormal=ai,t.randomUniform=ii,t.range=li,t.ready=function(){return Ut.ready()},t.real=Da,t.reciprocal=ui,t.registerBackend=Qn,t.registerCallbackConstructor=function(t,e){$p.registerCallbackConstructor(t,e)},t.registerGradient=w,t.registerKernel=x,t.registerOp=function(t,e){const n={tfOpName:t,category:"custom",inputs:[],attrs:[],customExecutor:e};mg[t]=n},t.regularizers=og,t.relu=ci,t.relu6=hi,t.removeBackend=function(t){Ut.removeBackend(t)},t.reshape=rn,t.reverse=pi,t.reverse1d=di,t.reverse2d=fi,t.reverse3d=mi,t.reverse4d=gi,t.rfft=Oi,t.round=yi,t.rsqrt=bi,t.scalar=Xr,t.scatterND=yo,t.scatter_util=wn,t.selu=xi,t.separableConv2d=wi,t.sequential=function(t){return new Pd(t)},t.serialization=Pn,t.setBackend=Zn,t.setPlatform=function(t,e){a().setPlatform(t,e)},t.setdiff1dAsync=vi,t.sigmoid=Gs,t.sign=Ni,t.signal=vl,t.sin=ki,t.sinh=Ci,t.slice=Hs,t.slice1d=Si,t.slice2d=Ii,t.slice3d=Ei,t.slice4d=Ti,t.slice_util=Mn,t.softmax=Ai,t.softplus=oa,t.spaceToBatchND=Pa,t.sparseToDense=bo,t.spectral=wl,t.split=Fi,t.sqrt=Mi,t.square=Ea,t.squaredDifference=Li,t.squaredDifferenceStrict=po,t.squeeze=zi,t.stack=Bi,t.step=Pi,t.stridedSlice=Wi,t.sub=ca,t.subStrict=fo,t.sum=ha,t.sumOutType=Ft,t.tan=Vi,t.tanh=js,t.tensor=ne,t.tensor1d=oi,t.tensor2d=Ui,t.tensor3d=hn,t.tensor4d=Gi,t.tensor5d=function(t,e,n){if(T(t),null!=e&&5!==e.length)throw new Error("tensor5d() requires shape to have five numbers");const s=Xt(t,n);if(5!==s.length&&1!==s.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===s.length&&null==e)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return ee(t,e,s,n)},t.tensor6d=function(t,e,n){if(T(t),null!=e&&6!==e.length)throw new Error("tensor6d() requires shape to have six numbers");const s=Xt(t,n);if(6!==s.length&&1!==s.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===s.length&&null==e)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return ee(t,e=e||s,s,n)},t.tensor_util=Bt,t.test_util=Hn,t.tidy=Xn,t.tile=Fr,t.time=function(t){return Ut.time(t)},t.topk=Hi,t.train=Fl,t.transpose=ln,t.truncatedNormal=ji,t.unregisterGradient=function(t){if(!m.has(t))throw new Error(`The gradient '${t}' for backend is not registered`);m.delete(t)},t.unregisterKernel=function(t,e){const n=v(t,e);if(!f.has(n))throw new Error(`The kernel '${t}' for backend '${e}' is not registered`);f.delete(n)},t.unsortedSegmentSum=qi,t.unstack=Ki,t.upcastType=_t,t.util=dt,t.valueAndGrad=function(t){return I(J(t),()=>"The f passed in valueAndGrad(f) must be a function"),(e,n)=>{I(e instanceof St,()=>"The x passed in valueAndGrad(f)(x) must be a tensor"),I(null==n||n instanceof St,()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor");const{grads:s,value:r}=Ut.gradients(()=>t(e),[e],n);return aa(s),{grad:s[0],value:r}}},t.valueAndGrads=function(t){return I(J(t),()=>"The f passed in valueAndGrads(f) must be a function"),(e,n)=>{I(Array.isArray(e)&&e.every(t=>t instanceof St),()=>"The args passed in valueAndGrads(f)(args) must be array of tensors"),I(null==n||n instanceof St,()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor");const s=Ut.gradients(()=>t(...e),e,n);return null!=n&&E(s.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),aa(s.grads),s}},t.variable=Xi,t.variableGrads=sa,t.version=SC,t.version_converter="2.5.0",t.version_core="2.5.0",t.version_layers="2.5.0",t.where=Sr,t.whereAsync=Ji,t.zeros=va,t.zerosLike=Ir,Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=tf.es2017.min.js.map
